276cd0b1b5ef0289561900302d954228
'use strict';

var buffer = require('buffer');

var Buffer = buffer.Buffer;
var safer = {};
var key;

for (key in buffer) {
  if (!buffer.hasOwnProperty(key)) continue;
  if (key === 'SlowBuffer' || key === 'Buffer') continue;
  safer[key] = buffer[key];
}

var Safer = safer.Buffer = {};

for (key in Buffer) {
  if (!Buffer.hasOwnProperty(key)) continue;
  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue;
  Safer[key] = Buffer[key];
}

safer.Buffer.prototype = Buffer.prototype;

if (!Safer.from || Safer.from === Uint8Array.from) {
  Safer.from = function (value, encodingOrOffset, length) {
    if (typeof value === 'number') {
      throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value);
    }

    if (value && typeof value.length === 'undefined') {
      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value);
    }

    return Buffer(value, encodingOrOffset, length);
  };
}

if (!Safer.alloc) {
  Safer.alloc = function (size, fill, encoding) {
    if (typeof size !== 'number') {
      throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size);
    }

    if (size < 0 || size >= 2 * (1 << 30)) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"');
    }

    var buf = Buffer(size);

    if (!fill || fill.length === 0) {
      buf.fill(0);
    } else if (typeof encoding === 'string') {
      buf.fill(fill, encoding);
    } else {
      buf.fill(fill);
    }

    return buf;
  };
}

if (!safer.kStringMaxLength) {
  try {
    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength;
  } catch (e) {}
}

if (!safer.constants) {
  safer.constants = {
    MAX_LENGTH: safer.kMaxLength
  };

  if (safer.kStringMaxLength) {
    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
  }
}

module.exports = safer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNhZmVyLmpzIl0sIm5hbWVzIjpbImJ1ZmZlciIsInJlcXVpcmUiLCJCdWZmZXIiLCJzYWZlciIsImtleSIsImhhc093blByb3BlcnR5IiwiU2FmZXIiLCJwcm90b3R5cGUiLCJmcm9tIiwiVWludDhBcnJheSIsInZhbHVlIiwiZW5jb2RpbmdPck9mZnNldCIsImxlbmd0aCIsIlR5cGVFcnJvciIsImFsbG9jIiwic2l6ZSIsImZpbGwiLCJlbmNvZGluZyIsIlJhbmdlRXJyb3IiLCJidWYiLCJrU3RyaW5nTWF4TGVuZ3RoIiwicHJvY2VzcyIsImJpbmRpbmciLCJlIiwiY29uc3RhbnRzIiwiTUFYX0xFTkdUSCIsImtNYXhMZW5ndGgiLCJNQVhfU1RSSU5HX0xFTkdUSCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUVBOztBQUVBLElBQUlBLE1BQU0sR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBcEI7O0FBQ0EsSUFBSUMsTUFBTSxHQUFHRixNQUFNLENBQUNFLE1BQXBCO0FBRUEsSUFBSUMsS0FBSyxHQUFHLEVBQVo7QUFFQSxJQUFJQyxHQUFKOztBQUVBLEtBQUtBLEdBQUwsSUFBWUosTUFBWixFQUFvQjtBQUNsQixNQUFJLENBQUNBLE1BQU0sQ0FBQ0ssY0FBUCxDQUFzQkQsR0FBdEIsQ0FBTCxFQUFpQztBQUNqQyxNQUFJQSxHQUFHLEtBQUssWUFBUixJQUF3QkEsR0FBRyxLQUFLLFFBQXBDLEVBQThDO0FBQzlDRCxFQUFBQSxLQUFLLENBQUNDLEdBQUQsQ0FBTCxHQUFhSixNQUFNLENBQUNJLEdBQUQsQ0FBbkI7QUFDRDs7QUFFRCxJQUFJRSxLQUFLLEdBQUdILEtBQUssQ0FBQ0QsTUFBTixHQUFlLEVBQTNCOztBQUNBLEtBQUtFLEdBQUwsSUFBWUYsTUFBWixFQUFvQjtBQUNsQixNQUFJLENBQUNBLE1BQU0sQ0FBQ0csY0FBUCxDQUFzQkQsR0FBdEIsQ0FBTCxFQUFpQztBQUNqQyxNQUFJQSxHQUFHLEtBQUssYUFBUixJQUF5QkEsR0FB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blxuJ3VzZSBzdHJpY3QnXG5cbnZhciBidWZmZXIgPSByZXF1aXJlKCdidWZmZXInKVxudmFyIEJ1ZmZlciA9IGJ1ZmZlci5CdWZmZXJcblxudmFyIHNhZmVyID0ge31cblxudmFyIGtleVxuXG5mb3IgKGtleSBpbiBidWZmZXIpIHtcbiAgaWYgKCFidWZmZXIuaGFzT3duUHJvcGVydHkoa2V5KSkgY29udGludWVcbiAgaWYgKGtleSA9PT0gJ1Nsb3dCdWZmZXInIHx8IGtleSA9PT0gJ0J1ZmZlcicpIGNvbnRpbnVlXG4gIHNhZmVyW2tleV0gPSBidWZmZXJba2V5XVxufVxuXG52YXIgU2FmZXIgPSBzYWZlci5CdWZmZXIgPSB7fVxuZm9yIChrZXkgaW4gQnVmZmVyKSB7XG4gIGlmICghQnVmZmVyLmhhc093blByb3BlcnR5KGtleSkpIGNvbnRpbnVlXG4gIGlmIChrZXkgPT09ICdhbGxvY1Vuc2FmZScgfHwga2V5ID09PSAnYWxsb2NVbnNhZmVTbG93JykgY29udGludWVcbiAgU2FmZXJba2V5XSA9IEJ1ZmZlcltrZXldXG59XG5cbnNhZmVyLkJ1ZmZlci5wcm90b3R5cGUgPSBCdWZmZXIucHJvdG90eXBlXG5cbmlmICghU2FmZXIuZnJvbSB8fCBTYWZlci5mcm9tID09PSBVaW50OEFycmF5LmZyb20pIHtcbiAgU2FmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgb2YgdHlwZSBudW1iZXIuIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiB2YWx1ZSlcbiAgICB9XG4gICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZS5sZW5ndGggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBvbmUgb2YgdHlwZSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBBcnJheS1saWtlIE9iamVjdC4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIHZhbHVlKVxuICAgIH1cbiAgICByZXR1cm4gQnVmZmVyKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cbn1cblxuaWYgKCFTYWZlci5hbGxvYykge1xuICBTYWZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICAgIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgbnVtYmVyLiBSZWNlaXZlZCB0eXBlICcgKyB0eXBlb2Ygc2l6ZSlcbiAgICB9XG4gICAgaWYgKHNpemUgPCAwIHx8IHNpemUgPj0gMiAqICgxIDw8IDMwKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBcIicgKyBzaXplICsgJ1wiIGlzIGludmFsaWQgZm9yIG9wdGlvbiBcInNpemVcIicpXG4gICAgfVxuICAgIHZhciBidWYgPSBCdWZmZXIoc2l6ZSlcbiAgICBpZiAoIWZpbGwgfHwgZmlsbC5sZW5ndGggPT09IDApIHtcbiAgICAgIGJ1Zi5maWxsKDApXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnKSB7XG4gICAgICBidWYuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICB9IGVsc2Uge1xuICAgICAgYnVmLmZpbGwoZmlsbClcbiAgICB9XG4gICAgcmV0dXJuIGJ1ZlxuICB9XG59XG5cbmlmICghc2FmZXIua1N0cmluZ01heExlbmd0aCkge1xuICB0cnkge1xuICAgIHNhZmVyLmtTdHJpbmdNYXhMZW5ndGggPSBwcm9jZXNzLmJpbmRpbmcoJ2J1ZmZlcicpLmtTdHJpbmdNYXhMZW5ndGhcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIHdlIGNhbid0IGRldGVybWluZSBrU3RyaW5nTWF4TGVuZ3RoIGluIGVudmlyb25tZW50cyB3aGVyZSBwcm9jZXNzLmJpbmRpbmdcbiAgICAvLyBpcyB1bnN1cHBvcnRlZCwgc28gbGV0J3Mgbm90IHNldCBpdFxuICB9XG59XG5cbmlmICghc2FmZXIuY29uc3RhbnRzKSB7XG4gIHNhZmVyLmNvbnN0YW50cyA9IHtcbiAgICBNQVhfTEVOR1RIOiBzYWZlci5rTWF4TGVuZ3RoXG4gIH1cbiAgaWYgKHNhZmVyLmtTdHJpbmdNYXhMZW5ndGgpIHtcbiAgICBzYWZlci5jb25zdGFudHMuTUFYX1NUUklOR19MRU5HVEggPSBzYWZlci5rU3RyaW5nTWF4TGVuZ3RoXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzYWZlclxuIl19