{"version":3,"sources":["DeprecatedColorPropType.js"],"names":["normalizeColor","require","colorPropType","isRequired","props","propName","componentName","location","propFullName","color","undefined","Error","ColorPropType","bind","module","exports"],"mappings":"AASA;;AAEA,IAAMA,cAAc,GAAGC,OAAO,CAAC,yBAAD,CAA9B;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CACpBC,UADoB,EAEpBC,KAFoB,EAGpBC,QAHoB,EAIpBC,aAJoB,EAKpBC,QALoB,EAMpBC,YANoB,EAOpB;AACA,MAAMC,KAAK,GAAGL,KAAK,CAACC,QAAD,CAAnB;;AACA,MAAII,KAAK,KAAKC,SAAV,IAAuBD,KAAK,KAAK,IAArC,EAA2C;AACzC,QAAIN,UAAJ,EAAgB;AACd,aAAO,IAAIQ,KAAJ,CACL,cACEJ,QADF,GAEE,IAFF,IAGGC,YAAY,IAAIH,QAHnB,IAIE,0BAJF,GAKEC,aALF,GAME,IAPG,CAAP;AASD;;AACD;AACD;;AAED,MAAI,OAAOG,KAAP,KAAiB,QAArB,EAA+B;AAI7B;AACD;;AAED,MAAIT,cAAc,CAACS,KAAD,CAAd,KAA0B,IAA9B,EAAoC;AAClC,WAAO,IAAIE,KAAJ,CACL,aACEJ,QADF,GAEE,IAFF,IAGGC,YAAY,IAAIH,QAHnB,IAIE,iBAJF,GAKEC,aALF,GAME,KANF,GAOEG,KAPF,GAQE,IARF,+SADK,CAAP;AAwBD;AACF,CAzDD;;AA2DA,IAAMG,aAAa,GAAGV,aAAa,CAACW,IAAd,CAAmB,IAAnB,EAAyB,KAAzB,CAAtB;AACAD,aAAa,CAACT,UAAd,GAA2BD,aAAa,CAACW,IAAd,CAAmB,IAAnB,EAAyB,IAAzB,CAA3B;AAEAC,MAAM,CAACC,OAAP,GAAiBH,aAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\n'use strict';\n\nconst normalizeColor = require('../Color/normalizeColor');\n\nconst colorPropType = function(\n  isRequired,\n  props,\n  propName,\n  componentName,\n  location,\n  propFullName,\n) {\n  const color = props[propName];\n  if (color === undefined || color === null) {\n    if (isRequired) {\n      return new Error(\n        'Required ' +\n          location +\n          ' `' +\n          (propFullName || propName) +\n          '` was not specified in `' +\n          componentName +\n          '`.',\n      );\n    }\n    return;\n  }\n\n  if (typeof color === 'number') {\n    // Developers should not use a number, but we are using the prop type\n    // both for user provided colors and for transformed ones. This isn't ideal\n    // and should be fixed but will do for now...\n    return;\n  }\n\n  if (normalizeColor(color) === null) {\n    return new Error(\n      'Invalid ' +\n        location +\n        ' `' +\n        (propFullName || propName) +\n        '` supplied to `' +\n        componentName +\n        '`: ' +\n        color +\n        '\\n' +\n        `Valid color formats are\n  - '#f0f' (#rgb)\n  - '#f0fc' (#rgba)\n  - '#ff00ff' (#rrggbb)\n  - '#ff00ff00' (#rrggbbaa)\n  - 'rgb(255, 255, 255)'\n  - 'rgba(255, 255, 255, 1.0)'\n  - 'hsl(360, 100%, 100%)'\n  - 'hsla(360, 100%, 100%, 1.0)'\n  - 'transparent'\n  - 'red'\n  - 0xff00ff00 (0xrrggbbaa)\n`,\n    );\n  }\n};\n\nconst ColorPropType = colorPropType.bind(null, false /* isRequired */);\nColorPropType.isRequired = colorPropType.bind(null, true /* isRequired */);\n\nmodule.exports = ColorPropType;\n"]}