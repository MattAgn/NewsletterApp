{"version":3,"sources":["response-builder.js"],"names":["responseConfigProps","ResponseBuilder","options","normalizeResponseConfig","constructFetchOpts","constructResponseBody","buildObservableResponse","fetchMock","config","Response","body","some","prop","responseConfig","Object","keys","every","key","includes","status","sendAsObject","parseInt","TypeError","url","redirectUrl","validateStatus","statusText","statusTextMap","headers","Headers","name","route","getOption","JSON","stringify","has","set","length","toString","convertToJson","setContentLength","Stream","stream","Readable","push","response","Proxy","get","originalResponse","apply","func","thisArg","args","result","then","_holdingPromises","catch","module","exports","exec"],"mappings":";;;;;;;;AAAA,IAAMA,mBAAmB,GAAG,CAC3B,MAD2B,EAE3B,SAF2B,EAG3B,QAH2B,EAI3B,QAJ2B,EAK3B,aAL2B,CAA5B;;IAQMC,e;AACL,2BAAYC,OAAZ,EAAqB;AAAA;AACpB,2BAAc,IAAd,EAAoBA,OAApB;AACA;;;;2BAEM;AACN,WAAKC,uBAAL;AACA,WAAKC,kBAAL;AACA,WAAKC,qBAAL;AACA,aAAO,KAAKC,uBAAL,CACN,IAAI,KAAKC,SAAL,CAAeC,MAAf,CAAsBC,QAA1B,CAAmC,KAAKC,IAAxC,EAA8C,KAAKR,OAAnD,CADM,CAAP;AAGA;;;mCAEc;AAAA;;AACd,UAAIF,mBAAmB,CAACW,IAApB,CAAyB,UAAAC,IAAI;AAAA,eAAI,KAAI,CAACC,cAAL,CAAoBD,IAApB,CAAJ;AAAA,OAA7B,CAAJ,EAAiE;AAChE,YACCE,MAAM,CAACC,IAAP,CAAY,KAAKF,cAAjB,EAAiCG,KAAjC,CAAuC,UAAAC,GAAG;AAAA,iBACzCjB,mBAAmB,CAACkB,QAApB,CAA6BD,GAA7B,CADyC;AAAA,SAA1C,CADD,EAIE;AACD,iBAAO,KAAP;AACA,SAND,MAMO;AACN,iBAAO,IAAP;AACA;AACD,OAVD,MAUO;AACN,eAAO,IAAP;AACA;AACD;;;8CAEyB;AAEzB,UAAI,OAAO,KAAKJ,cAAZ,KAA+B,QAAnC,EAA6C;AAC5C,aAAKA,cAAL,GAAsB;AACrBM,UAAAA,MAAM,EAAE,KAAKN;AADQ,SAAtB;AAKA,OAND,MAMO,IAAI,OAAO,KAAKA,cAAZ,KAA+B,QAA/B,IAA2C,KAAKO,YAAL,EAA/C,EAAoE;AAC1E,aAAKP,cAAL,GAAsB;AACrBH,UAAAA,IAAI,EAAE,KAAKG;AADU,SAAtB;AAGA;AACD;;;mCAEcM,M,EAAQ;AACtB,UAAI,CAACA,MAAL,EAAa;AACZ,eAAO,GAAP;AACA;;AAED,UACE,OAAOA,MAAP,KAAkB,QAAlB,IACAE,QAAQ,CAACF,MAAD,EAAS,EAAT,CAAR,KAAyBA,MADzB,IAEAA,MAAM,IAAI,GAFX,IAGAA,MAAM,GAAG,GAJV,EAKE;AACD,eAAOA,MAAP;AACA;;AAED,YAAM,IAAIG,SAAJ,iCAA4CH,MAA5C,qKAAN;AAGA;;;yCAEoB;AACpB,WAAKjB,OAAL,GAAe,KAAKW,cAAL,CAAoBX,OAApB,IAA+B,EAA9C;AACA,WAAKA,OAAL,CAAaqB,GAAb,GAAmB,KAAKV,cAAL,CAAoBW,WAApB,IAAmC,KAAKD,GAA3D;AACA,WAAKrB,OAAL,CAAaiB,MAAb,GAAsB,KAAKM,cAAL,CAAoB,KAAKZ,cAAL,CAAoBM,MAAxC,CAAtB;AACA,WAAKjB,OAAL,CAAawB,UAAb,GAA0B,KAAKnB,SAAL,CAAeoB,aAAf,CACzB,KAAK,KAAKzB,OAAL,CAAaiB,MADO,CAA1B;AAMA,WAAKjB,OAAL,CAAa0B,OAAb,GAAuB,IAAI,KAAKrB,SAAL,CAAeC,MAAf,CAAsBqB,OAA1B,CACtB,KAAKhB,cAAL,CAAoBe,OAApB,IAA+B,EADT,CAAvB;AAGA;;;8BAESE,I,EAAM;AACf,aAAOA,IAAI,IAAI,KAAKC,KAAb,GAAqB,KAAKA,KAAL,CAAWD,IAAX,CAArB,GAAwC,KAAKvB,SAAL,CAAeC,MAAf,CAAsBsB,IAAtB,CAA/C;AACA;;;oCAEe;AAEf,UACC,KAAKE,SAAL,CAAe,YAAf,KACA,KAAKnB,cAAL,CAAoBH,IAApB,IAA4B,IAD5B,IAEA,OAAO,KAAKA,IAAZ,KAAqB,QAHtB,EAIE;AACD,aAAKA,IAAL,GAAYuB,IAAI,CAACC,SAAL,CAAe,KAAKxB,IAApB,CAAZ;;AACA,YAAI,CAAC,KAAKR,OAAL,CAAa0B,OAAb,CAAqBO,GAArB,CAAyB,cAAzB,CAAL,EAA+C;AAC9C,eAAKjC,OAAL,CAAa0B,OAAb,CAAqBQ,GAArB,CAAyB,cAAzB,EAAyC,kBAAzC;AACA;AACD;AACD;;;uCAEkB;AAElB,UACC,KAAKJ,SAAL,CAAe,sBAAf,KACA,OAAO,KAAKtB,IAAZ,KAAqB,QADrB,IAEA,CAAC,KAAKR,OAAL,CAAa0B,OAAb,CAAqBO,GAArB,CAAyB,gBAAzB,CAHF,EAIE;AACD,aAAKjC,OAAL,CAAa0B,OAAb,CAAqBQ,GAArB,CAAyB,gBAAzB,EAA2C,KAAK1B,IAAL,CAAU2B,MAAV,CAAiBC,QAAjB,EAA3C;AACA;AACD;;;4CAEuB;AAEvB,WAAK5B,IAAL,GAAY,KAAKG,cAAL,CAAoBH,IAAhC;AACA,WAAK6B,aAAL;AACA,WAAKC,gBAAL;;AAIA,UAAI,KAAKC,MAAT,EAAiB;AAChB,YAAMC,MAAM,GAAG,IAAI,KAAKD,MAAL,CAAYE,QAAhB,EAAf;;AACA,YAAI,KAAKjC,IAAL,IAAa,IAAjB,EAAuB;AACtBgC,UAAAA,MAAM,CAACE,IAAP,CAAY,KAAKlC,IAAjB,EAAuB,OAAvB;AACA;;AACDgC,QAAAA,MAAM,CAACE,IAAP,CAAY,IAAZ;AACA,aAAKlC,IAAL,GAAYgC,MAAZ;AACA;;AACD,WAAKhC,IAAL,GAAY,KAAKA,IAAjB;AACA;;;4CAEuBmC,Q,EAAU;AAAA;;AACjC,UAAMtC,SAAS,GAAG,KAAKA,SAAvB;AAKA,aAAO,IAAIuC,KAAJ,CAAUD,QAAV,EAAoB;AAC1BE,QAAAA,GAAG,EAAE,aAACC,gBAAD,EAAmBlB,IAAnB,EAA4B;AAChC,cAAI,MAAI,CAACjB,cAAL,CAAoBW,WAAxB,EAAqC;AACpC,gBAAIM,IAAI,KAAK,KAAb,EAAoB;AACnB,qBAAO,MAAI,CAACjB,cAAL,CAAoBW,WAA3B;AACA;;AAED,gBAAIM,IAAI,KAAK,YAAb,EAA2B;AAC1B,qBAAO,IAAP;AACA;AACD;;AAED,cAAI,OAAOkB,gBAAgB,CAAClB,IAAD,CAAvB,KAAkC,UAAtC,EAAkD;AACjD,mBAAO,IAAIgB,KAAJ,CAAUE,gBAAgB,CAAClB,IAAD,CAA1B,EAAkC;AACxCmB,cAAAA,KAAK,EAAE,eAACC,IAAD,EAAOC,OAAP,EAAgBC,IAAhB,EAAyB;AAC/B,oBAAMC,MAAM,GAAGH,IAAI,CAACD,KAAL,CAAWJ,QAAX,EAAqBO,IAArB,CAAf;;AACA,oBAAIC,MAAM,CAACC,IAAX,EAAiB;AAChB/C,kBAAAA,SAAS,CAACgD,gBAAV,CAA2BX,IAA3B,CAAgCS,MAAM,CAACG,KAAP,CAAa;AAAA,2BAAM,IAAN;AAAA,mBAAb,CAAhC;AACA;;AACD,uBAAOH,MAAP;AACA;AAPuC,aAAlC,CAAP;AASA;;AAED,iBAAOL,gBAAgB,CAAClB,IAAD,CAAvB;AACA;AAzByB,OAApB,CAAP;AA2BA;;;;;AAGF2B,MAAM,CAACC,OAAP,GAAiB,UAAAxD,OAAO;AAAA,SAAI,IAAID,eAAJ,CAAoBC,OAApB,EAA6ByD,IAA7B,EAAJ;AAAA,CAAxB","sourcesContent":["const responseConfigProps = [\n\t'body',\n\t'headers',\n\t'throws',\n\t'status',\n\t'redirectUrl'\n];\n\nclass ResponseBuilder {\n\tconstructor(options) {\n\t\tObject.assign(this, options);\n\t}\n\n\texec() {\n\t\tthis.normalizeResponseConfig();\n\t\tthis.constructFetchOpts();\n\t\tthis.constructResponseBody();\n\t\treturn this.buildObservableResponse(\n\t\t\tnew this.fetchMock.config.Response(this.body, this.options)\n\t\t);\n\t}\n\n\tsendAsObject() {\n\t\tif (responseConfigProps.some(prop => this.responseConfig[prop])) {\n\t\t\tif (\n\t\t\t\tObject.keys(this.responseConfig).every(key =>\n\t\t\t\t\tresponseConfigProps.includes(key)\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tnormalizeResponseConfig() {\n\t\t// If the response config looks like a status, start to generate a simple response\n\t\tif (typeof this.responseConfig === 'number') {\n\t\t\tthis.responseConfig = {\n\t\t\t\tstatus: this.responseConfig\n\t\t\t};\n\t\t\t// If the response config is not an object, or is an object that doesn't use\n\t\t\t// any reserved properties, assume it is meant to be the body of the response\n\t\t} else if (typeof this.responseConfig === 'string' || this.sendAsObject()) {\n\t\t\tthis.responseConfig = {\n\t\t\t\tbody: this.responseConfig\n\t\t\t};\n\t\t}\n\t}\n\n\tvalidateStatus(status) {\n\t\tif (!status) {\n\t\t\treturn 200;\n\t\t}\n\n\t\tif (\n\t\t\t(typeof status === 'number' &&\n\t\t\t\tparseInt(status, 10) !== status &&\n\t\t\t\tstatus >= 200) ||\n\t\t\tstatus < 600\n\t\t) {\n\t\t\treturn status;\n\t\t}\n\n\t\tthrow new TypeError(`fetch-mock: Invalid status ${status} passed on response object.\nTo respond with a JSON object that has status as a property assign the object to body\ne.g. {\"body\": {\"status: \"registered\"}}`);\n\t}\n\n\tconstructFetchOpts() {\n\t\tthis.options = this.responseConfig.options || {};\n\t\tthis.options.url = this.responseConfig.redirectUrl || this.url;\n\t\tthis.options.status = this.validateStatus(this.responseConfig.status);\n\t\tthis.options.statusText = this.fetchMock.statusTextMap[\n\t\t\t'' + this.options.status\n\t\t];\n\t\t// Set up response headers. The empty object is to cope with\n\t\t// new Headers(undefined) throwing in Chrome\n\t\t// https://code.google.com/p/chromium/issues/detail?id=335871\n\t\tthis.options.headers = new this.fetchMock.config.Headers(\n\t\t\tthis.responseConfig.headers || {}\n\t\t);\n\t}\n\n\tgetOption(name) {\n\t\treturn name in this.route ? this.route[name] : this.fetchMock.config[name];\n\t}\n\n\tconvertToJson() {\n\t\t// convert to json if we need to\n\t\tif (\n\t\t\tthis.getOption('sendAsJson') &&\n\t\t\tthis.responseConfig.body != null && //eslint-disable-line\n\t\t\ttypeof this.body === 'object'\n\t\t) {\n\t\t\tthis.body = JSON.stringify(this.body);\n\t\t\tif (!this.options.headers.has('Content-Type')) {\n\t\t\t\tthis.options.headers.set('Content-Type', 'application/json');\n\t\t\t}\n\t\t}\n\t}\n\n\tsetContentLength() {\n\t\t// add a Content-Length header if we need to\n\t\tif (\n\t\t\tthis.getOption('includeContentLength') &&\n\t\t\ttypeof this.body === 'string' &&\n\t\t\t!this.options.headers.has('Content-Length')\n\t\t) {\n\t\t\tthis.options.headers.set('Content-Length', this.body.length.toString());\n\t\t}\n\t}\n\n\tconstructResponseBody() {\n\t\t// start to construct the body\n\t\tthis.body = this.responseConfig.body;\n\t\tthis.convertToJson();\n\t\tthis.setContentLength();\n\n\t\t// On the server we need to manually construct the readable stream for the\n\t\t// Response object (on the client this done automatically)\n\t\tif (this.Stream) {\n\t\t\tconst stream = new this.Stream.Readable();\n\t\t\tif (this.body != null) { //eslint-disable-line\n\t\t\t\tstream.push(this.body, 'utf-8');\n\t\t\t}\n\t\t\tstream.push(null);\n\t\t\tthis.body = stream;\n\t\t}\n\t\tthis.body = this.body;\n\t}\n\n\tbuildObservableResponse(response) {\n\t\tconst fetchMock = this.fetchMock;\n\n\t\t// Using a proxy means we can set properties that may not be writable on\n\t\t// the original Response. It also means we can track the resolution of\n\t\t// promises returned by res.json(), res.text() etc\n\t\treturn new Proxy(response, {\n\t\t\tget: (originalResponse, name) => {\n\t\t\t\tif (this.responseConfig.redirectUrl) {\n\t\t\t\t\tif (name === 'url') {\n\t\t\t\t\t\treturn this.responseConfig.redirectUrl;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (name === 'redirected') {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (typeof originalResponse[name] === 'function') {\n\t\t\t\t\treturn new Proxy(originalResponse[name], {\n\t\t\t\t\t\tapply: (func, thisArg, args) => {\n\t\t\t\t\t\t\tconst result = func.apply(response, args);\n\t\t\t\t\t\t\tif (result.then) {\n\t\t\t\t\t\t\t\tfetchMock._holdingPromises.push(result.catch(() => null));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn originalResponse[name];\n\t\t\t}\n\t\t});\n\t}\n}\n\nmodule.exports = options => new ResponseBuilder(options).exec();\n"]}