62a62c2ef1725d9dcc8448dea222dc64
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var responseConfigProps = ['body', 'headers', 'throws', 'status', 'redirectUrl'];

var ResponseBuilder = function () {
  function ResponseBuilder(options) {
    (0, _classCallCheck2.default)(this, ResponseBuilder);
    (0, _extends2.default)(this, options);
  }

  (0, _createClass2.default)(ResponseBuilder, [{
    key: "exec",
    value: function exec() {
      this.normalizeResponseConfig();
      this.constructFetchOpts();
      this.constructResponseBody();
      return this.buildObservableResponse(new this.fetchMock.config.Response(this.body, this.options));
    }
  }, {
    key: "sendAsObject",
    value: function sendAsObject() {
      var _this = this;

      if (responseConfigProps.some(function (prop) {
        return _this.responseConfig[prop];
      })) {
        if (Object.keys(this.responseConfig).every(function (key) {
          return responseConfigProps.includes(key);
        })) {
          return false;
        } else {
          return true;
        }
      } else {
        return true;
      }
    }
  }, {
    key: "normalizeResponseConfig",
    value: function normalizeResponseConfig() {
      if (typeof this.responseConfig === 'number') {
        this.responseConfig = {
          status: this.responseConfig
        };
      } else if (typeof this.responseConfig === 'string' || this.sendAsObject()) {
        this.responseConfig = {
          body: this.responseConfig
        };
      }
    }
  }, {
    key: "validateStatus",
    value: function validateStatus(status) {
      if (!status) {
        return 200;
      }

      if (typeof status === 'number' && parseInt(status, 10) !== status && status >= 200 || status < 600) {
        return status;
      }

      throw new TypeError("fetch-mock: Invalid status " + status + " passed on response object.\nTo respond with a JSON object that has status as a property assign the object to body\ne.g. {\"body\": {\"status: \"registered\"}}");
    }
  }, {
    key: "constructFetchOpts",
    value: function constructFetchOpts() {
      this.options = this.responseConfig.options || {};
      this.options.url = this.responseConfig.redirectUrl || this.url;
      this.options.status = this.validateStatus(this.responseConfig.status);
      this.options.statusText = this.fetchMock.statusTextMap['' + this.options.status];
      this.options.headers = new this.fetchMock.config.Headers(this.responseConfig.headers || {});
    }
  }, {
    key: "getOption",
    value: function getOption(name) {
      return name in this.route ? this.route[name] : this.fetchMock.config[name];
    }
  }, {
    key: "convertToJson",
    value: function convertToJson() {
      if (this.getOption('sendAsJson') && this.responseConfig.body != null && typeof this.body === 'object') {
        this.body = JSON.stringify(this.body);

        if (!this.options.headers.has('Content-Type')) {
          this.options.headers.set('Content-Type', 'application/json');
        }
      }
    }
  }, {
    key: "setContentLength",
    value: function setContentLength() {
      if (this.getOption('includeContentLength') && typeof this.body === 'string' && !this.options.headers.has('Content-Length')) {
        this.options.headers.set('Content-Length', this.body.length.toString());
      }
    }
  }, {
    key: "constructResponseBody",
    value: function constructResponseBody() {
      this.body = this.responseConfig.body;
      this.convertToJson();
      this.setContentLength();

      if (this.Stream) {
        var stream = new this.Stream.Readable();

        if (this.body != null) {
          stream.push(this.body, 'utf-8');
        }

        stream.push(null);
        this.body = stream;
      }

      this.body = this.body;
    }
  }, {
    key: "buildObservableResponse",
    value: function buildObservableResponse(response) {
      var _this2 = this;

      var fetchMock = this.fetchMock;
      return new Proxy(response, {
        get: function get(originalResponse, name) {
          if (_this2.responseConfig.redirectUrl) {
            if (name === 'url') {
              return _this2.responseConfig.redirectUrl;
            }

            if (name === 'redirected') {
              return true;
            }
          }

          if (typeof originalResponse[name] === 'function') {
            return new Proxy(originalResponse[name], {
              apply: function apply(func, thisArg, args) {
                var result = func.apply(response, args);

                if (result.then) {
                  fetchMock._holdingPromises.push(result.catch(function () {
                    return null;
                  }));
                }

                return result;
              }
            });
          }

          return originalResponse[name];
        }
      });
    }
  }]);
  return ResponseBuilder;
}();

module.exports = function (options) {
  return new ResponseBuilder(options).exec();
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,