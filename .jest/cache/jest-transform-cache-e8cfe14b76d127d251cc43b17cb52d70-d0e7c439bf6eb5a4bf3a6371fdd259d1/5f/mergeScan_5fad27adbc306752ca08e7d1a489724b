c4ba86b38651d7b3885ec3b85282adac
"use strict";

var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var subscribeToResult_1 = require("../util/subscribeToResult");

var OuterSubscriber_1 = require("../OuterSubscriber");

var InnerSubscriber_1 = require("../InnerSubscriber");

function mergeScan(accumulator, seed, concurrent) {
  if (concurrent === void 0) {
    concurrent = Number.POSITIVE_INFINITY;
  }

  return function (source) {
    return source.lift(new MergeScanOperator(accumulator, seed, concurrent));
  };
}

exports.mergeScan = mergeScan;

var MergeScanOperator = function () {
  function MergeScanOperator(accumulator, seed, concurrent) {
    this.accumulator = accumulator;
    this.seed = seed;
    this.concurrent = concurrent;
  }

  MergeScanOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));
  };

  return MergeScanOperator;
}();

exports.MergeScanOperator = MergeScanOperator;

var MergeScanSubscriber = function (_super) {
  __extends(MergeScanSubscriber, _super);

  function MergeScanSubscriber(destination, accumulator, acc, concurrent) {
    var _this = _super.call(this, destination) || this;

    _this.accumulator = accumulator;
    _this.acc = acc;
    _this.concurrent = concurrent;
    _this.hasValue = false;
    _this.hasCompleted = false;
    _this.buffer = [];
    _this.active = 0;
    _this.index = 0;
    return _this;
  }

  MergeScanSubscriber.prototype._next = function (value) {
    if (this.active < this.concurrent) {
      var index = this.index++;
      var destination = this.destination;
      var ish = void 0;

      try {
        var accumulator = this.accumulator;
        ish = accumulator(this.acc, value, index);
      } catch (e) {
        return destination.error(e);
      }

      this.active++;

      this._innerSub(ish, value, index);
    } else {
      this.buffer.push(value);
    }
  };

  MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {
    var innerSubscriber = new InnerSubscriber_1.InnerSubscriber(this, undefined, undefined);
    var destination = this.destination;
    destination.add(innerSubscriber);
    subscribeToResult_1.subscribeToResult(this, ish, value, index, innerSubscriber);
  };

  MergeScanSubscriber.prototype._complete = function () {
    this.hasCompleted = true;

    if (this.active === 0 && this.buffer.length === 0) {
      if (this.hasValue === false) {
        this.destination.next(this.acc);
      }

      this.destination.complete();
    }

    this.unsubscribe();
  };

  MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    var destination = this.destination;
    this.acc = innerValue;
    this.hasValue = true;
    destination.next(innerValue);
  };

  MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {
    var buffer = this.buffer;
    var destination = this.destination;
    destination.remove(innerSub);
    this.active--;

    if (buffer.length > 0) {
      this._next(buffer.shift());
    } else if (this.active === 0 && this.hasCompleted) {
      if (this.hasValue === false) {
        this.destination.next(this.acc);
      }

      this.destination.complete();
    }
  };

  return MergeScanSubscriber;
}(OuterSubscriber_1.OuterSubscriber);

exports.MergeScanSubscriber = MergeScanSubscriber;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VTY2FuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBSUEsSUFBQSxtQkFBQSxHQUFBLE9BQUEsQ0FBQSwyQkFBQSxDQUFBOztBQUNBLElBQUEsaUJBQUEsR0FBQSxPQUFBLENBQUEsb0JBQUEsQ0FBQTs7QUFDQSxJQUFBLGlCQUFBLEdBQUEsT0FBQSxDQUFBLG9CQUFBLENBQUE7O0FBMENBLFNBQWdCLFNBQWhCLENBQWdDLFdBQWhDLEVBQ2dDLElBRGhDLEVBRWdDLFVBRmhDLEVBRTZFO0FBQTdDLE1BQUEsVUFBQSxLQUFBLEtBQUEsQ0FBQSxFQUFBO0FBQUEsSUFBQSxVQUFBLEdBQXFCLE1BQU0sQ0FBQyxpQkFBNUI7QUFBNkM7O0FBQzNFLFNBQU8sVUFBQyxNQUFELEVBQXNCO0FBQUssV0FBQSxNQUFNLENBQUMsSUFBUCxDQUFZLElBQUksaUJBQUosQ0FBc0IsV0FBdEIsRUFBbUMsSUFBbkMsRUFBWixVQUFZLENBQVosQ0FBQTtBQUFpRSxHQUFuRztBQUNEOztBQUpELE9BQUEsQ0FBQSxTQUFBLEdBQUEsU0FBQTs7QUFNQSxJQUFBLGlCQUFBLEdBQUEsWUFBQTtBQUNFLFdBQUEsaUJBQUEsQ0FBb0IsV0FBcEIsRUFDb0IsSUFEcEIsRUFFb0IsVUFGcEIsRUFFc0M7QUFGbEIsU0FBQSxXQUFBLEdBQUEsV0FBQTtBQUNBLFNBQUEsSUFBQSxHQUFBLElBQUE7QUFDQSxTQUFBLFVBQUEsR0FBQSxVQUFBO0FBQ25COztBQUVELEVBQUEsaUJBQUEsQ0FBQSxTQUFBLENBQUEsSUFBQSxHQUFBLFVBQUssVUFBTCxFQUFnQyxNQUFoQyxFQUEyQztBQUN6QyxXQUFPLE1BQU0sQ0FBQyxTQUFQLENBQWlCLElBQUksbUJBQUosQ0FDdEIsVUFEc0IsRUFDVixLQUFLLFdBREssRUFDUSxLQUFLLElBRGIsRUFDbUIsS0FBSyxVQUR4QixDQUFqQixD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