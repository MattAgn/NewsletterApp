e8b3ec3bcb8f569dbd35cef695aba59f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = render;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var React = _interopRequireWildcard(require("react"));

var _reactTestRenderer = _interopRequireDefault(require("react-test-renderer"));

var _act = _interopRequireDefault(require("./act"));

var _getByAPI = require("./helpers/getByAPI");

var _queryByAPI = require("./helpers/queryByAPI");

var _a11yAPI = _interopRequireDefault(require("./helpers/a11yAPI"));

var _debugShallow = _interopRequireDefault(require("./helpers/debugShallow"));

var _debugDeep = _interopRequireDefault(require("./helpers/debugDeep"));

var _jsxFileName = "/Users/thymikee/Projects/callstack/react-native-testing-library/src/render.js";

function render(component) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      Wrapper = _ref.wrapper,
      createNodeMock = _ref.createNodeMock;

  var wrap = function wrap(innerElement) {
    return Wrapper ? React.createElement(Wrapper, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 28
      }
    }, innerElement) : innerElement;
  };

  var renderer = renderWithAct(wrap(component), createNodeMock ? {
    createNodeMock: createNodeMock
  } : undefined);
  var update = updateWithAct(renderer, wrap);
  var instance = renderer.root;
  return (0, _objectSpread2.default)({}, (0, _getByAPI.getByAPI)(instance), (0, _queryByAPI.queryByAPI)(instance), (0, _a11yAPI.default)(instance), {
    update: update,
    rerender: update,
    unmount: renderer.unmount,
    toJSON: renderer.toJSON,
    debug: debug(instance, renderer)
  });
}

function renderWithAct(component, options) {
  var renderer;
  (0, _act.default)(function () {
    renderer = _reactTestRenderer.default.create(component, options);
  });
  return renderer;
}

function updateWithAct(renderer, wrap) {
  return function (component) {
    (0, _act.default)(function () {
      renderer.update(wrap(component));
    });
  };
}

function debug(instance, renderer) {
  function debugImpl(message) {
    return (0, _debugDeep.default)(renderer.toJSON(), message);
  }

  debugImpl.shallow = function (message) {
    return (0, _debugShallow.default)(instance, message);
  };

  return debugImpl;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlbmRlci5qcyJdLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwicmVuZGVyIiwiX29iamVjdFNwcmVhZDIiLCJSZWFjdCIsIl9yZWFjdFRlc3RSZW5kZXJlciIsIl9hY3QiLCJfZ2V0QnlBUEkiLCJfcXVlcnlCeUFQSSIsIl9hMTF5QVBJIiwiX2RlYnVnU2hhbGxvdyIsIl9kZWJ1Z0RlZXAiLCJfanN4RmlsZU5hbWUiLCJjb21wb25lbnQiLCJfcmVmIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiV3JhcHBlciIsIndyYXBwZXIiLCJjcmVhdGVOb2RlTW9jayIsIndyYXAiLCJpbm5lckVsZW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiX19zb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJyZW5kZXJlciIsInJlbmRlcldpdGhBY3QiLCJ1cGRhdGUiLCJ1cGRhdGVXaXRoQWN0IiwiaW5zdGFuY2UiLCJyb290IiwiZ2V0QnlBUEkiLCJxdWVyeUJ5QVBJIiwicmVyZW5kZXIiLCJ1bm1vdW50IiwidG9KU09OIiwiZGVidWciLCJvcHRpb25zIiwiY3JlYXRlIiwiZGVidWdJbXBsIiwibWVzc2FnZSIsInNoYWxsb3ciXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLHNCQUFzQixHQUFDQyxPQUFPLENBQUMsOENBQUQsQ0FBbEM7O0FBQW1GLElBQUlDLHVCQUF1QixHQUFDRCxPQUFPLENBQUMsK0NBQUQsQ0FBbkM7O0FBQXFGRSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQThCLFlBQTlCLEVBQTJDO0FBQUNDLEVBQUFBLEtBQUssRUFBQztBQUFQLENBQTNDO0FBQXlERCxPQUFPLENBQUNFLE9BQVIsR0FBZ0JDLE1BQWhCOztBQUF1QixJQUFJQyxjQUFjLEdB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LFlBQVU7QUFBQzBCLElBQUFBLFFBQVEsR0FBQ3RCLGtCQUFrQixDQUFDSixPQUFuQixDQUEyQnVDLE1BQTNCLENBQWtDM0IsU0FBbEMsRUFBNEMwQixPQUE1QyxDQUFUO0FBQStELEdBQTNGO0FBQTZGLFNBQU9aLFFBQVA7QUFBaUI7O0FBQUEsU0FBU0csYUFBVCxDQUF1QkgsUUFBdkIsRUFBZ0NOLElBQWhDLEVBQXFDO0FBQUMsU0FBTyxVQUFTUixTQUFULEVBQW1CO0FBQUMsS0FBQyxHQUFFUCxJQUFJLENBQUNMLE9BQVIsRUFBaUIsWUFBVTtBQUFDMEIsTUFBQUEsUUFBUSxDQUFDRSxNQUFULENBQWdCUixJQUFJLENBQUNSLFNBQUQsQ0FBcEI7QUFBa0MsS0FBOUQ7QUFBaUUsR0FBNUY7QUFBOEY7O0FBQUEsU0FBU3lCLEtBQVQsQ0FBZVAsUUFBZixFQUF3QkosUUFBeEIsRUFBaUM7QUFBQyxXQUFTYyxTQUFULENBQW1CQyxPQUFuQixFQUEyQjtBQUFDLFdBQU0sQ0FBQyxHQUFFL0IsVUFBVSxDQUFDVixPQUFkLEVBQXVCMEIsUUFBUSxDQUFDVSxNQUFULEVBQXZCLEVBQXlDSyxPQUF6QyxDQUFOO0FBQXlEOztBQUFBRCxFQUFBQSxTQUFTLENBQUNFLE9BQVYsR0FBa0IsVUFBU0QsT0FBVCxFQUFpQjtBQUFDLFdBQU0sQ0FBQyxHQUFFaEMsYUFBYSxDQUFDVCxPQUFqQixFQUEwQjhCLFFBQTFCLEVBQW1DVyxPQUFuQyxDQUFOO0FBQW1ELEdBQXZGOztBQUF3RixTQUFPRCxTQUFQO0FBQWtCIiwic291cmNlc0NvbnRlbnQiOlsidmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ9cmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO3ZhciBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZD1yZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkXCIpO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTp0cnVlfSk7ZXhwb3J0cy5kZWZhdWx0PXJlbmRlcjt2YXIgX29iamVjdFNwcmVhZDI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RTcHJlYWRcIikpO3ZhciBSZWFjdD1faW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO3ZhciBfcmVhY3RUZXN0UmVuZGVyZXI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtdGVzdC1yZW5kZXJlclwiKSk7dmFyIF9hY3Q9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9hY3RcIikpO3ZhciBfZ2V0QnlBUEk9cmVxdWlyZShcIi4vaGVscGVycy9nZXRCeUFQSVwiKTt2YXIgX3F1ZXJ5QnlBUEk9cmVxdWlyZShcIi4vaGVscGVycy9xdWVyeUJ5QVBJXCIpO3ZhciBfYTExeUFQST1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2hlbHBlcnMvYTExeUFQSVwiKSk7dmFyIF9kZWJ1Z1NoYWxsb3c9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9oZWxwZXJzL2RlYnVnU2hhbGxvd1wiKSk7dmFyIF9kZWJ1Z0RlZXA9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9oZWxwZXJzL2RlYnVnRGVlcFwiKSk7dmFyIF9qc3hGaWxlTmFtZT1cIi9Vc2Vycy90aHltaWtlZS9Qcm9qZWN0cy9jYWxsc3RhY2svcmVhY3QtbmF0aXZlLXRlc3RpbmctbGlicmFyeS9zcmMvcmVuZGVyLmpzXCI7ZnVuY3Rpb24gcmVuZGVyKGNvbXBvbmVudCl7dmFyIF9yZWY9YXJndW1lbnRzLmxlbmd0aD4xJiZhcmd1bWVudHNbMV0hPT11bmRlZmluZWQ/YXJndW1lbnRzWzFdOnt9LFdyYXBwZXI9X3JlZi53cmFwcGVyLGNyZWF0ZU5vZGVNb2NrPV9yZWYuY3JlYXRlTm9kZU1vY2s7dmFyIHdyYXA9ZnVuY3Rpb24gd3JhcChpbm5lckVsZW1lbnQpe3JldHVybiBXcmFwcGVyP1JlYWN0LmNyZWF0ZUVsZW1lbnQoV3JhcHBlcix7X19zb3VyY2U6e2ZpbGVOYW1lOl9qc3hGaWxlTmFtZSxsaW5lTnVtYmVyOjI4fX0saW5uZXJFbGVtZW50KTppbm5lckVsZW1lbnQ7fTt2YXIgcmVuZGVyZXI9cmVuZGVyV2l0aEFjdCh3cmFwKGNvbXBvbmVudCksY3JlYXRlTm9kZU1vY2s/e2NyZWF0ZU5vZGVNb2NrOmNyZWF0ZU5vZGVNb2NrfTp1bmRlZmluZWQpO3ZhciB1cGRhdGU9dXBkYXRlV2l0aEFjdChyZW5kZXJlcix3cmFwKTt2YXIgaW5zdGFuY2U9cmVuZGVyZXIucm9vdDtyZXR1cm4oMCxfb2JqZWN0U3ByZWFkMi5kZWZhdWx0KSh7fSwoMCxfZ2V0QnlBUEkuZ2V0QnlBUEkpKGluc3RhbmNlKSwoMCxfcXVlcnlCeUFQSS5xdWVyeUJ5QVBJKShpbnN0YW5jZSksKDAsX2ExMXlBUEkuZGVmYXVsdCkoaW5zdGFuY2UpLHt1cGRhdGU6dXBkYXRlLHJlcmVuZGVyOnVwZGF0ZSx1bm1vdW50OnJlbmRlcmVyLnVubW91bnQsdG9KU09OOnJlbmRlcmVyLnRvSlNPTixkZWJ1ZzpkZWJ1ZyhpbnN0YW5jZSxyZW5kZXJlcil9KTt9ZnVuY3Rpb24gcmVuZGVyV2l0aEFjdChjb21wb25lbnQsb3B0aW9ucyl7dmFyIHJlbmRlcmVyOygwLF9hY3QuZGVmYXVsdCkoZnVuY3Rpb24oKXtyZW5kZXJlcj1fcmVhY3RUZXN0UmVuZGVyZXIuZGVmYXVsdC5jcmVhdGUoY29tcG9uZW50LG9wdGlvbnMpO30pO3JldHVybiByZW5kZXJlcjt9ZnVuY3Rpb24gdXBkYXRlV2l0aEFjdChyZW5kZXJlcix3cmFwKXtyZXR1cm4gZnVuY3Rpb24oY29tcG9uZW50KXsoMCxfYWN0LmRlZmF1bHQpKGZ1bmN0aW9uKCl7cmVuZGVyZXIudXBkYXRlKHdyYXAoY29tcG9uZW50KSk7fSk7fTt9ZnVuY3Rpb24gZGVidWcoaW5zdGFuY2UscmVuZGVyZXIpe2Z1bmN0aW9uIGRlYnVnSW1wbChtZXNzYWdlKXtyZXR1cm4oMCxfZGVidWdEZWVwLmRlZmF1bHQpKHJlbmRlcmVyLnRvSlNPTigpLG1lc3NhZ2UpO31kZWJ1Z0ltcGwuc2hhbGxvdz1mdW5jdGlvbihtZXNzYWdlKXtyZXR1cm4oMCxfZGVidWdTaGFsbG93LmRlZmF1bHQpKGluc3RhbmNlLG1lc3NhZ2UpO307cmV0dXJuIGRlYnVnSW1wbDt9Il19