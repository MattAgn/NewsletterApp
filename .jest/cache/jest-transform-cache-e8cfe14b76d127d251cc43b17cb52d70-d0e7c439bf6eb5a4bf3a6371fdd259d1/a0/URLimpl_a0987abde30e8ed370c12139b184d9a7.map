{"version":3,"sources":["URL-impl.js"],"names":["usm","require","urlencoded","URLSearchParams","exports","implementation","constructorArgs","url","base","parsedBase","undefined","basicURLParse","TypeError","parsedURL","baseURL","query","_url","_query","createImpl","doNotStripQMark","href","serializeURL","v","_list","splice","parseUrlencoded","serializeURLOrigin","scheme","stateOverride","username","cannotHaveAUsernamePasswordPort","setTheUsername","password","setThePassword","host","port","serializeHost","serializeInteger","cannotBeABaseURL","path","length","join","input","substring","fragment"],"mappings":"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","sourcesContent":["\"use strict\";\nconst usm = require(\"./url-state-machine\");\nconst urlencoded = require(\"./urlencoded\");\nconst URLSearchParams = require(\"./URLSearchParams\");\n\nexports.implementation = class URLImpl {\n  constructor(constructorArgs) {\n    const url = constructorArgs[0];\n    const base = constructorArgs[1];\n\n    let parsedBase = null;\n    if (base !== undefined) {\n      parsedBase = usm.basicURLParse(base);\n      if (parsedBase === null) {\n        throw new TypeError(\"Invalid base URL\");\n      }\n    }\n\n    const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });\n    if (parsedURL === null) {\n      throw new TypeError(\"Invalid URL\");\n    }\n\n    const query = parsedURL.query !== null ? parsedURL.query : \"\";\n\n    this._url = parsedURL;\n\n    // We cannot invoke the \"new URLSearchParams object\" algorithm without going through the constructor, which strips\n    // question mark by default. Therefore the doNotStripQMark hack is used.\n    this._query = URLSearchParams.createImpl([query], { doNotStripQMark: true });\n    this._query._url = this;\n  }\n\n  get href() {\n    return usm.serializeURL(this._url);\n  }\n\n  set href(v) {\n    const parsedURL = usm.basicURLParse(v);\n    if (parsedURL === null) {\n      throw new TypeError(\"Invalid URL\");\n    }\n\n    this._url = parsedURL;\n\n    this._query._list.splice(0);\n    const { query } = parsedURL;\n    if (query !== null) {\n      this._query._list = urlencoded.parseUrlencoded(query);\n    }\n  }\n\n  get origin() {\n    return usm.serializeURLOrigin(this._url);\n  }\n\n  get protocol() {\n    return this._url.scheme + \":\";\n  }\n\n  set protocol(v) {\n    usm.basicURLParse(v + \":\", { url: this._url, stateOverride: \"scheme start\" });\n  }\n\n  get username() {\n    return this._url.username;\n  }\n\n  set username(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    usm.setTheUsername(this._url, v);\n  }\n\n  get password() {\n    return this._url.password;\n  }\n\n  set password(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    usm.setThePassword(this._url, v);\n  }\n\n  get host() {\n    const url = this._url;\n\n    if (url.host === null) {\n      return \"\";\n    }\n\n    if (url.port === null) {\n      return usm.serializeHost(url.host);\n    }\n\n    return usm.serializeHost(url.host) + \":\" + usm.serializeInteger(url.port);\n  }\n\n  set host(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"host\" });\n  }\n\n  get hostname() {\n    if (this._url.host === null) {\n      return \"\";\n    }\n\n    return usm.serializeHost(this._url.host);\n  }\n\n  set hostname(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"hostname\" });\n  }\n\n  get port() {\n    if (this._url.port === null) {\n      return \"\";\n    }\n\n    return usm.serializeInteger(this._url.port);\n  }\n\n  set port(v) {\n    if (usm.cannotHaveAUsernamePasswordPort(this._url)) {\n      return;\n    }\n\n    if (v === \"\") {\n      this._url.port = null;\n    } else {\n      usm.basicURLParse(v, { url: this._url, stateOverride: \"port\" });\n    }\n  }\n\n  get pathname() {\n    if (this._url.cannotBeABaseURL) {\n      return this._url.path[0];\n    }\n\n    if (this._url.path.length === 0) {\n      return \"\";\n    }\n\n    return \"/\" + this._url.path.join(\"/\");\n  }\n\n  set pathname(v) {\n    if (this._url.cannotBeABaseURL) {\n      return;\n    }\n\n    this._url.path = [];\n    usm.basicURLParse(v, { url: this._url, stateOverride: \"path start\" });\n  }\n\n  get search() {\n    if (this._url.query === null || this._url.query === \"\") {\n      return \"\";\n    }\n\n    return \"?\" + this._url.query;\n  }\n\n  set search(v) {\n    const url = this._url;\n\n    if (v === \"\") {\n      url.query = null;\n      this._query._list = [];\n      return;\n    }\n\n    const input = v[0] === \"?\" ? v.substring(1) : v;\n    url.query = \"\";\n    usm.basicURLParse(input, { url, stateOverride: \"query\" });\n    this._query._list = urlencoded.parseUrlencoded(input);\n  }\n\n  get searchParams() {\n    return this._query;\n  }\n\n  get hash() {\n    if (this._url.fragment === null || this._url.fragment === \"\") {\n      return \"\";\n    }\n\n    return \"#\" + this._url.fragment;\n  }\n\n  set hash(v) {\n    if (v === \"\") {\n      this._url.fragment = null;\n      return;\n    }\n\n    const input = v[0] === \"#\" ? v.substring(1) : v;\n    this._url.fragment = \"\";\n    usm.basicURLParse(input, { url: this._url, stateOverride: \"fragment\" });\n  }\n\n  toJSON() {\n    return this.href;\n  }\n};\n"]}