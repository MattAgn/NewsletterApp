39c13c42b9e84b910ce4d4f1bdd3b0a9
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _staticContainer = _interopRequireDefault(require("static-container"));

var _propTypes = _interopRequireDefault(require("prop-types"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1
  }
});

var Provider = function (_Component) {
  (0, _inherits2.default)(Provider, _Component);

  function Provider() {
    (0, _classCallCheck2.default)(this, Provider);
    return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Provider).apply(this, arguments));
  }

  (0, _createClass2.default)(Provider, [{
    key: "getChildContext",
    value: function getChildContext() {
      return {
        store: this.props.store
      };
    }
  }, {
    key: "render",
    value: function render() {
      return this.props.children;
    }
  }]);
  return Provider;
}(_react.Component);

Provider.childContextTypes = {
  store: _propTypes.default.shape({
    subscribe: _propTypes.default.func.isRequired,
    dispatch: _propTypes.default.func.isRequired,
    getState: _propTypes.default.func.isRequired
  })
};

_reactNative.AppRegistry.setWrapperComponentProvider(function () {
  return function RootSiblingsWrapper(props) {
    return _react.default.createElement(_reactNative.View, {
      style: styles.container
    }, props.children, _react.default.createElement(RootSiblings, null));
  };
});

var uuid = 0;
var triggers = [];

var RootSiblings = function (_Component2) {
  (0, _inherits2.default)(RootSiblings, _Component2);

  function RootSiblings(props) {
    var _this;

    (0, _classCallCheck2.default)(this, RootSiblings);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(RootSiblings).call(this, props));
    _this._updatedSiblings = {};
    _this._siblings = {};
    _this._stores = {};

    _this._update = function (id, element, callback, store) {
      var siblings = _objectSpread({}, _this._siblings);

      var stores = _objectSpread({}, _this._stores);

      if (siblings[id] && !element) {
        delete siblings[id];
        delete stores[id];
      } else if (element) {
        siblings[id] = element;
        stores[id] = store;
      }

      _this._updatedSiblings[id] = true;
      _this._siblings = siblings;
      _this._stores = stores;

      _this.forceUpdate(callback);
    };

    _this._siblings = {};
    triggers.push(_this._update);
    return _this;
  }

  (0, _createClass2.default)(RootSiblings, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      triggers.splice(triggers.indexOf(this._update), 1);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var siblings = this._siblings;
      var stores = this._stores;
      var elements = [];
      Object.keys(siblings).forEach(function (key) {
        var element = siblings[key];

        if (element) {
          var sibling = _react.default.createElement(_staticContainer.default, {
            key: "root-sibling-" + key,
            shouldUpdate: !!_this2._updatedSiblings[key]
          }, element);

          var store = stores[key];

          if (store) {
            elements.push(_react.default.createElement(Provider, {
              store: store,
              key: "root-sibling-" + key + "-provider"
            }, sibling));
          } else {
            elements.push(sibling);
          }
        }
      });
      this._updatedSiblings = {};
      return elements;
    }
  }]);
  return RootSiblings;
}(_react.Component);

var RootSiblingManager = function RootSiblingManager(element, callback, store) {
  (0, _classCallCheck2.default)(this, RootSiblingManager);
  var id = uuid++;

  function update(element, callback, store) {
    triggers.forEach(function (trigger) {
      trigger(id, element, callback, store);
    });
  }

  function destroy(callback) {
    triggers.forEach(function (trigger) {
      trigger(id, null, callback);
    });
  }

  update(element, callback, store);
  this.update = update;
  this.destroy = destroy;
};

exports.default = RootSiblingManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,