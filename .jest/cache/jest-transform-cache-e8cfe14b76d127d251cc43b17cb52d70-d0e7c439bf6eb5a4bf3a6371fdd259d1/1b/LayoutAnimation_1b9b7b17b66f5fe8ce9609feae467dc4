06ac8058e44bc95b8c85c336b67069b9
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _Platform = _interopRequireDefault(require("../Utilities/Platform"));

var UIManager = require('../ReactNative/UIManager');

function configureNext(config, onAnimationDidEnd) {
  if (!_Platform.default.isTesting) {
    var _onAnimationDidEnd;

    UIManager.configureNextLayoutAnimation(config, (_onAnimationDidEnd = onAnimationDidEnd) != null ? _onAnimationDidEnd : function () {}, function () {});
  }
}

function create(duration, type, property) {
  return {
    duration: duration,
    create: {
      type: type,
      property: property
    },
    update: {
      type: type
    },
    delete: {
      type: type,
      property: property
    }
  };
}

var Presets = {
  easeInEaseOut: create(300, 'easeInEaseOut', 'opacity'),
  linear: create(500, 'linear', 'opacity'),
  spring: {
    duration: 700,
    create: {
      type: 'linear',
      property: 'opacity'
    },
    update: {
      type: 'spring',
      springDamping: 0.4
    },
    delete: {
      type: 'linear',
      property: 'opacity'
    }
  }
};
var LayoutAnimation = {
  configureNext: configureNext,
  create: create,
  Types: Object.freeze({
    spring: 'spring',
    linear: 'linear',
    easeInEaseOut: 'easeInEaseOut',
    easeIn: 'easeIn',
    easeOut: 'easeOut',
    keyboard: 'keyboard'
  }),
  Properties: Object.freeze({
    opacity: 'opacity',
    scaleX: 'scaleX',
    scaleY: 'scaleY',
    scaleXY: 'scaleXY'
  }),
  checkConfig: function checkConfig() {
    console.error('LayoutAnimation.checkConfig(...) has been disabled.');
  },
  Presets: Presets,
  easeInEaseOut: configureNext.bind(null, Presets.easeInEaseOut),
  linear: configureNext.bind(null, Presets.linear),
  spring: configureNext.bind(null, Presets.spring)
};
module.exports = LayoutAnimation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkxheW91dEFuaW1hdGlvbi5qcyJdLCJuYW1lcyI6WyJVSU1hbmFnZXIiLCJyZXF1aXJlIiwiY29uZmlndXJlTmV4dCIsImNvbmZpZyIsIm9uQW5pbWF0aW9uRGlkRW5kIiwiUGxhdGZvcm0iLCJpc1Rlc3RpbmciLCJjb25maWd1cmVOZXh0TGF5b3V0QW5pbWF0aW9uIiwiY3JlYXRlIiwiZHVyYXRpb24iLCJ0eXBlIiwicHJvcGVydHkiLCJ1cGRhdGUiLCJkZWxldGUiLCJQcmVzZXRzIiwiZWFzZUluRWFzZU91dCIsImxpbmVhciIsInNwcmluZyIsInNwcmluZ0RhbXBpbmciLCJMYXlvdXRBbmltYXRpb24iLCJUeXBlcyIsIk9iamVjdCIsImZyZWV6ZSIsImVhc2VJbiIsImVhc2VPdXQiLCJrZXlib2FyZCIsIlByb3BlcnRpZXMiLCJvcGFjaXR5Iiwic2NhbGVYIiwic2NhbGVZIiwic2NhbGVYWSIsImNoZWNrQ29uZmlnIiwiY29uc29sZSIsImVycm9yIiwiYmluZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVVBOzs7O0FBRUE7O0FBQ0EsSUFBTUEsU0FBUyxHQUFHQyxPQUFPLENBQUMsMEJBQUQsQ0FBekI7O0FBNEJBLFNBQVNDLGFBQVQsQ0FDRUMsTUFERixFQUVFQyxpQkFGRixFQUdFO0FBQ0EsTUFBSSxDQUFDQyxrQkFBU0MsU0FBZCxFQUF5QjtBQUFBOztBQUN2Qk4sSUFBQUEsU0FBUyxDQUFDTyw0QkFBVixDQUNFSixNQURGLHdCQUVFQyxpQkFGRixpQ0FFdUIsWUFBVyxDQUFFLENBRnBDLEVBR0UsWUFBVyxDQUFFLENBSGY7QUFLRDtBQUNGOztBQUVELFNBQVNJLE1BQVQsQ0FDRUMsUUFERixFQUVFQyxJQUZGLEVBR0VDLFFBSEYsRUFJeUI7QUFDdkIsU0FBTztBQUNMRixJQUFBQSxRQUFRLEVBQVJBLFFBREs7QUFFTEQsSUFBQUEsTUFBTSxFQUFFO0FBQUNFLE1BQUFBLElBQUksRUFBSkEsSUFBRDtBQUFPQyxNQUFBQSxRQUFRLEVBQVJBO0FBQVAsS0FGSDtBQUdMQyxJQUFBQSxNQUFNLEVBQUU7QUFBQ0YsTUFBQUEsSUFBSSxFQUFKQTtBQUFELEtBSEg7QUFJTEcsSUFBQUEsTUFBTSxFQUFFO0FBQUNILE1BQUFBLElBQUksRUFBSkEsSUFBRDtBQUFPQyxNQUFBQSxRQUFRLEVBQVJBO0FBQVA7QUFKSCxHQUFQO0FBTUQ7O0FBRUQsSUFBTUcsT0FBTyxHQUFHO0FBQ2RDLEVBQUFBLGFBQWEsRUFBRVAsTUFBTSxDQUFDLEdBQUQsRUFBTSxlQUFOLEVBQXVCLFNBQXZCLENBRFA7QUFFZFEsRUFBQUEsTUFBTSxFQUFFUixNQUFNLENBQUMsR0FBRCxFQUFNLFFBQU4sRUFBZ0IsU0FBaEIsQ0FGQTtBQUdkUyxFQUFBQSxNQUFNLEVBQUU7QUFDTlIsSUFBQUEsUUFBUSxFQUFFLEdBREo7QUFFTkQsSUFBQUEsTUFBTSxFQUFFO0FBQ05FLE1BQUFBLElBQUksRUFBRSxRQURBO0FBRU5DLE1BQUFBLFFBQVEsRUFBRTtBQUZKLEtBRkY7QUFNTkMsSUFBQUEsTUFBTSxFQUFFO0FBQ05GLE1BQUFBLElBQUksRUFBRSxRQURBO0FBRU5RLE1BQUFBLGFBQWEsRUFBRTtBQUZULEtBTkY7QUFVTkwsSUFBQUEsTUFBTSxFQUFFO0FBQ05ILE1BQUFBLElBQUksRUFBRSxRQURBO0FBRU5DLE1BQUFBLFFBQVEsRUFBRTtBQUZKO0FBVkY7QUFITSxDQUFoQjtBQThCQSxJQUFNUSxlQUFlLEdBQUc7QUFjdEJqQixFQUFBQSxhQUFhLEVBQWJBLGFBZHNCO0FBa0J0Qk0sRUFBQUEsTUFBTSxFQUFOQSxNQWxCc0I7QUFtQnRCWSxFQUFBQSxLQUFLLEVBQUVDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjO0FBQ25CTCxJQUFBQSxNQUFNLEVBQUUsUUFEVztBQUVuQkQsSUFBQUEsTUFBTSxFQUFFLFFBRlc7QUFHbkJELElBQUFBLGFBQWEsRUFBRSxlQUhJO0FBSW5CUSxJQUFBQSxNQUFNLEVBQUUsUUFKVztBQUtuQkMsSUFBQUEsT0FBTyxFQUFFLFNBTFU7QUFNbkJDLElBQUFBLFFBQVEsRUFBRTtBQU5TLEdBQWQsQ0FuQmU7QUEyQnRCQyxFQUFBQSxVQUFVLEVBQUVMLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjO0FBQ3hCSyxJQUFBQSxPQUFPLEVBQUUsU0FEZTtBQUV4QkMsSUFBQUEsTUFBTSxFQUFFLFFBRmdCO0FBR3hCQyxJQUFBQSxNQUFNLEVBQUUsUUFIZ0I7QUFJeEJDLElBQUFBLE9BQU8sRUFBRTtBQUplLEdBQWQsQ0EzQlU7QUFpQ3RCQyxFQUFBQSxXQWpDc0IseUJBaUNhO0FBQ2pDQyxJQUFBQSxPQUFPLENBQUNDLEtBQVIsQ0FBYyxxREFBZDtBQUNELEdBbkNxQjtBQW9DdEJuQixFQUFBQSxPQUFPLEVBQVBBLE9BcENzQjtBQXFDdEJDLEVBQUFBLGFBQWEsRUFBRWIsYUFBYSxDQUFDZ0MsSUFBZCxDQUFtQixJQUFuQixFQUF5QnBCLE9BQU8sQ0FBQ0MsYUFBakMsQ0FyQ087QUFzQ3RCQyxFQUFBQSxNQUFNLEVBQUVkLGFBQWEsQ0FBQ2dDLElBQWQsQ0FBbUIsSUFBbkIsRUFBeUJwQixPQUFPLENBQUNFLE1BQWpDLENBdENjO0FBdUN0QkMsRUFBQUEsTUFBTSxFQUFFZixhQUFhLENBQUNnQyxJQUFkLENBQW1CLElBQW5CLEVBQXlCcEIsT0FBTyxDQUFDRyxNQUFqQztBQXZDYyxDQUF4QjtBQTBDQWtCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmpCLGVBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IFBsYXRmb3JtIGZyb20gJy4uL1V0aWxpdGllcy9QbGF0Zm9ybSc7XG5jb25zdCBVSU1hbmFnZXIgPSByZXF1aXJlKCcuLi9SZWFjdE5hdGl2ZS9VSU1hbmFnZXInKTtcblxudHlwZSBUeXBlID1cbiAgfCAnc3ByaW5nJ1xuICB8ICdsaW5lYXInXG4gIHwgJ2Vhc2VJbkVhc2VPdXQnXG4gIHwgJ2Vhc2VJbidcbiAgfCAnZWFzZU91dCdcbiAgfCAna2V5Ym9hcmQnO1xuXG50eXBlIFByb3BlcnR5ID0gJ29wYWNpdHknIHwgJ3NjYWxlWCcgfCAnc2NhbGVZJyB8ICdzY2FsZVhZJztcblxudHlwZSBBbmltYXRpb25Db25maWcgPSAkUmVhZE9ubHk8e3xcbiAgZHVyYXRpb24/OiBudW1iZXIsXG4gIGRlbGF5PzogbnVtYmVyLFxuICBzcHJpbmdEYW1waW5nPzogbnVtYmVyLFxuICBpbml0aWFsVmVsb2NpdHk/OiBudW1iZXIsXG4gIHR5cGU/OiBUeXBlLFxuICBwcm9wZXJ0eT86IFByb3BlcnR5LFxufH0+O1xuXG50eXBlIExheW91dEFuaW1hdGlvbkNvbmZpZyA9ICRSZWFkT25seTx7fFxuICBkdXJhdGlvbjogbnVtYmVyLFxuICBjcmVhdGU/OiBBbmltYXRpb25Db25maWcsXG4gIHVwZGF0ZT86IEFuaW1hdGlvbkNvbmZpZyxcbiAgZGVsZXRlPzogQW5pbWF0aW9uQ29uZmlnLFxufH0+O1xuXG5mdW5jdGlvbiBjb25maWd1cmVOZXh0KFxuICBjb25maWc6IExheW91dEFuaW1hdGlvbkNvbmZpZyxcbiAgb25BbmltYXRpb25EaWRFbmQ/OiBGdW5jdGlvbixcbikge1xuICBpZiAoIVBsYXRmb3JtLmlzVGVzdGluZykge1xuICAgIFVJTWFuYWdlci5jb25maWd1cmVOZXh0TGF5b3V0QW5pbWF0aW9uKFxuICAgICAgY29uZmlnLFxuICAgICAgb25BbmltYXRpb25EaWRFbmQgPz8gZnVuY3Rpb24oKSB7fSxcbiAgICAgIGZ1bmN0aW9uKCkge30gLyogdW51c2VkIG9uRXJyb3IgKi8sXG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGUoXG4gIGR1cmF0aW9uOiBudW1iZXIsXG4gIHR5cGU6IFR5cGUsXG4gIHByb3BlcnR5OiBQcm9wZXJ0eSxcbik6IExheW91dEFuaW1hdGlvbkNvbmZpZyB7XG4gIHJldHVybiB7XG4gICAgZHVyYXRpb24sXG4gICAgY3JlYXRlOiB7dHlwZSwgcHJvcGVydHl9LFxuICAgIHVwZGF0ZToge3R5cGV9LFxuICAgIGRlbGV0ZToge3R5cGUsIHByb3BlcnR5fSxcbiAgfTtcbn1cblxuY29uc3QgUHJlc2V0cyA9IHtcbiAgZWFzZUluRWFzZU91dDogY3JlYXRlKDMwMCwgJ2Vhc2VJbkVhc2VPdXQnLCAnb3BhY2l0eScpLFxuICBsaW5lYXI6IGNyZWF0ZSg1MDAsICdsaW5lYXInLCAnb3BhY2l0eScpLFxuICBzcHJpbmc6IHtcbiAgICBkdXJhdGlvbjogNzAwLFxuICAgIGNyZWF0ZToge1xuICAgICAgdHlwZTogJ2xpbmVhcicsXG4gICAgICBwcm9wZXJ0eTogJ29wYWNpdHknLFxuICAgIH0sXG4gICAgdXBkYXRlOiB7XG4gICAgICB0eXBlOiAnc3ByaW5nJyxcbiAgICAgIHNwcmluZ0RhbXBpbmc6IDAuNCxcbiAgICB9LFxuICAgIGRlbGV0ZToge1xuICAgICAgdHlwZTogJ2xpbmVhcicsXG4gICAgICBwcm9wZXJ0eTogJ29wYWNpdHknLFxuICAgIH0sXG4gIH0sXG59O1xuXG4vKipcbiAqIEF1dG9tYXRpY2FsbHkgYW5pbWF0ZXMgdmlld3MgdG8gdGhlaXIgbmV3IHBvc2l0aW9ucyB3aGVuIHRoZVxuICogbmV4dCBsYXlvdXQgaGFwcGVucy5cbiAqXG4gKiBBIGNvbW1vbiB3YXkgdG8gdXNlIHRoaXMgQVBJIGlzIHRvIGNhbGwgaXQgYmVmb3JlIGNhbGxpbmcgYHNldFN0YXRlYC5cbiAqXG4gKiBOb3RlIHRoYXQgaW4gb3JkZXIgdG8gZ2V0IHRoaXMgdG8gd29yayBvbiAqKkFuZHJvaWQqKiB5b3UgbmVlZCB0byBzZXQgdGhlIGZvbGxvd2luZyBmbGFncyB2aWEgYFVJTWFuYWdlcmA6XG4gKlxuICogICAgIFVJTWFuYWdlci5zZXRMYXlvdXRBbmltYXRpb25FbmFibGVkRXhwZXJpbWVudGFsICYmIFVJTWFuYWdlci5zZXRMYXlvdXRBbmltYXRpb25FbmFibGVkRXhwZXJpbWVudGFsKHRydWUpO1xuICovXG5jb25zdCBMYXlvdXRBbmltYXRpb24gPSB7XG4gIC8qKlxuICAgKiBTY2hlZHVsZXMgYW4gYW5pbWF0aW9uIHRvIGhhcHBlbiBvbiB0aGUgbmV4dCBsYXlvdXQuXG4gICAqXG4gICAqIEBwYXJhbSBjb25maWcgU3BlY2lmaWVzIGFuaW1hdGlvbiBwcm9wZXJ0aWVzOlxuICAgKlxuICAgKiAgIC0gYGR1cmF0aW9uYCBpbiBtaWxsaXNlY29uZHNcbiAgICogICAtIGBjcmVhdGVgLCBgQW5pbWF0aW9uQ29uZmlnYCBmb3IgYW5pbWF0aW5nIGluIG5ldyB2aWV3c1xuICAgKiAgIC0gYHVwZGF0ZWAsIGBBbmltYXRpb25Db25maWdgIGZvciBhbmltYXRpbmcgdmlld3MgdGhhdCBoYXZlIGJlZW4gdXBkYXRlZFxuICAgKlxuICAgKiBAcGFyYW0gb25BbmltYXRpb25EaWRFbmQgQ2FsbGVkIHdoZW4gdGhlIGFuaW1hdGlvbiBmaW5pc2hlZC5cbiAgICogT25seSBzdXBwb3J0ZWQgb24gaU9TLlxuICAgKiBAcGFyYW0gb25FcnJvciBDYWxsZWQgb24gZXJyb3IuIE9ubHkgc3VwcG9ydGVkIG9uIGlPUy5cbiAgICovXG4gIGNvbmZpZ3VyZU5leHQsXG4gIC8qKlxuICAgKiBIZWxwZXIgZm9yIGNyZWF0aW5nIGEgY29uZmlnIGZvciBgY29uZmlndXJlTmV4dGAuXG4gICAqL1xuICBjcmVhdGUsXG4gIFR5cGVzOiBPYmplY3QuZnJlZXplKHtcbiAgICBzcHJpbmc6ICdzcHJpbmcnLFxuICAgIGxpbmVhcjogJ2xpbmVhcicsXG4gICAgZWFzZUluRWFzZU91dDogJ2Vhc2VJbkVhc2VPdXQnLFxuICAgIGVhc2VJbjogJ2Vhc2VJbicsXG4gICAgZWFzZU91dDogJ2Vhc2VPdXQnLFxuICAgIGtleWJvYXJkOiAna2V5Ym9hcmQnLFxuICB9KSxcbiAgUHJvcGVydGllczogT2JqZWN0LmZyZWV6ZSh7XG4gICAgb3BhY2l0eTogJ29wYWNpdHknLFxuICAgIHNjYWxlWDogJ3NjYWxlWCcsXG4gICAgc2NhbGVZOiAnc2NhbGVZJyxcbiAgICBzY2FsZVhZOiAnc2NhbGVYWScsXG4gIH0pLFxuICBjaGVja0NvbmZpZyguLi5hcmdzOiBBcnJheTxtaXhlZD4pIHtcbiAgICBjb25zb2xlLmVycm9yKCdMYXlvdXRBbmltYXRpb24uY2hlY2tDb25maWcoLi4uKSBoYXMgYmVlbiBkaXNhYmxlZC4nKTtcbiAgfSxcbiAgUHJlc2V0cyxcbiAgZWFzZUluRWFzZU91dDogY29uZmlndXJlTmV4dC5iaW5kKG51bGwsIFByZXNldHMuZWFzZUluRWFzZU91dCksXG4gIGxpbmVhcjogY29uZmlndXJlTmV4dC5iaW5kKG51bGwsIFByZXNldHMubGluZWFyKSxcbiAgc3ByaW5nOiBjb25maWd1cmVOZXh0LmJpbmQobnVsbCwgUHJlc2V0cy5zcHJpbmcpLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBMYXlvdXRBbmltYXRpb247XG4iXX0=