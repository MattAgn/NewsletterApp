fde473cb0b7f6e506673f22605f0ad9c
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _GlobalPerformanceLogger = _interopRequireDefault(require("../Utilities/GlobalPerformanceLogger"));

var _PerformanceLoggerContext = _interopRequireDefault(require("../Utilities/PerformanceLoggerContext"));

var AppContainer = require('./AppContainer');

var React = require('react');

var ReactFabricIndicator = require('./ReactFabricIndicator');

var invariant = require('invariant');

require('../Utilities/BackHandler');

function renderApplication(RootComponent, initialProps, rootTag, WrapperComponent, fabric, showFabricIndicator, scopedPerformanceLogger) {
  var _scopedPerformanceLog;

  invariant(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);
  var renderable = React.createElement(_PerformanceLoggerContext.default.Provider, {
    value: (_scopedPerformanceLog = scopedPerformanceLogger) != null ? _scopedPerformanceLog : _GlobalPerformanceLogger.default
  }, React.createElement(AppContainer, {
    rootTag: rootTag,
    WrapperComponent: WrapperComponent
  }, React.createElement(RootComponent, (0, _extends2.default)({}, initialProps, {
    rootTag: rootTag
  })), fabric === true && showFabricIndicator === true ? React.createElement(ReactFabricIndicator, null) : null));

  if (RootComponent.prototype != null && RootComponent.prototype.unstable_isAsyncReactComponent === true) {
    var ConcurrentMode = React.unstable_ConcurrentMode;
    renderable = React.createElement(ConcurrentMode, null, renderable);
  }

  _GlobalPerformanceLogger.default.startTimespan('renderApplication_React_render');

  if (fabric) {
    require('../Renderer/shims/ReactFabric').render(renderable, rootTag);
  } else {
    require('../Renderer/shims/ReactNative').render(renderable, rootTag);
  }

  _GlobalPerformanceLogger.default.stopTimespan('renderApplication_React_render');
}

module.exports = renderApplication;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlbmRlckFwcGxpY2F0aW9uLmpzIl0sIm5hbWVzIjpbIkFwcENvbnRhaW5lciIsInJlcXVpcmUiLCJSZWFjdCIsIlJlYWN0RmFicmljSW5kaWNhdG9yIiwiaW52YXJpYW50IiwicmVuZGVyQXBwbGljYXRpb24iLCJSb290Q29tcG9uZW50IiwiaW5pdGlhbFByb3BzIiwicm9vdFRhZyIsIldyYXBwZXJDb21wb25lbnQiLCJmYWJyaWMiLCJzaG93RmFicmljSW5kaWNhdG9yIiwic2NvcGVkUGVyZm9ybWFuY2VMb2dnZXIiLCJyZW5kZXJhYmxlIiwiR2xvYmFsUGVyZm9ybWFuY2VMb2dnZXIiLCJwcm90b3R5cGUiLCJ1bnN0YWJsZV9pc0FzeW5jUmVhY3RDb21wb25lbnQiLCJDb25jdXJyZW50TW9kZSIsInVuc3RhYmxlX0NvbmN1cnJlbnRNb2RlIiwic3RhcnRUaW1lc3BhbiIsInJlbmRlciIsInN0b3BUaW1lc3BhbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVVBOzs7Ozs7QUFHQTs7QUFFQTs7QUFIQSxJQUFNQSxZQUFZLEdBQUdDLE9BQU8sQ0FBQyxnQkFBRCxDQUE1Qjs7QUFJQSxJQUFNQyxLQUFLLEdBQUdELE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLElBQU1FLG9CQUFvQixHQUFHRixPQUFPLENBQUMsd0JBQUQsQ0FBcEM7O0FBRUEsSUFBTUcsU0FBUyxHQUFHSCxPQUFPLENBQUMsV0FBRCxDQUF6Qjs7QUFHQUEsT0FBTyxDQUFDLDBCQUFELENBQVA7O0FBRUEsU0FBU0ksaUJBQVQsQ0FDRUMsYUFERixFQUVFQyxZQUZGLEVBR0VDLE9BSEYsRUFJRUMsZ0JBSkYsRUFLRUMsTUFMRixFQU1FQyxtQkFORixFQU9FQyx1QkFQRixFQVFFO0FBQUE7O0FBQ0FSLEVBQUFBLFNBQVMsQ0FBQ0ksT0FBRCxFQUFVLDhDQUFWLEVBQTBEQSxPQUExRCxDQUFUO0FBRUEsTUFBSUssVUFBVSxHQUNaLG9CQUFDLGlDQUFELENBQTBCLFFBQTFCO0FBQ0UsSUFBQSxLQUFLLDJCQUFFRCx1QkFBRixvQ0FBNkJFO0FBRHBDLEtBRUUsb0JBQUMsWUFBRDtBQUFjLElBQUEsT0FBTyxFQUFFTixPQUF2QjtBQUFnQyxJQUFBLGdCQUFnQixFQUFFQztBQUFsRCxLQUNFLG9CQUFDLGFBQUQsNkJBQW1CRixZQUFuQjtBQUFpQyxJQUFBLE9BQU8sRUFBRUM7QUFBMUMsS0FERixFQUVHRSxNQUFNLEtBQUssSUFBWCxJQUFtQkMsbUJBQW1CLEtBQUssSUFBM0MsR0FDQyxvQkFBQyxvQkFBRCxPQURELEdBRUcsSUFKTixDQUZGLENBREY7O0FBZUEsTUFJRUwsYUFBYSxDQUFDUyxTQUFkLElBQTJCLElBQTNCLElBQ0FULGFBQWEsQ0FBQ1MsU0FBZCxDQUF3QkMsOEJBQXhCLEtBQTJELElBTDdELEVBTUU7QUFFQSxRQUFNQyxjQUFjLEdBQUdmLEtBQUssQ0FBQ2dCLHVCQUE3QjtBQUNBTCxJQUFBQSxVQUFVLEdBQUcsb0JBQUMsY0FBRCxRQUFpQkEsVUFBakIsQ0FBYjtBQUNEOztBQUVEQyxtQ0FBd0JLLGFBQXhCLENBQXNDLGdDQUF0Qzs7QUFDQSxNQUFJVCxNQUFKLEVBQVk7QUFDVlQsSUFBQUEsT0FBTyxDQUFDLCtCQUFELENBQVAsQ0FBeUNtQixNQUF6QyxDQUFnRFAsVUFBaEQsRUFBNERMLE9BQTVEO0FBQ0QsR0FGRCxNQUVPO0FBQ0xQLElBQUFBLE9BQU8sQ0FBQywrQkFBRCxDQUFQLENBQXlDbUIsTUFBekMsQ0FBZ0RQLFVBQWhELEVBQTRETCxPQUE1RDtBQUNEOztBQUNETSxtQ0FBd0JPLFlBQXhCLENBQXFDLGdDQUFyQztBQUNEOztBQUVEQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJsQixpQkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBBcHBDb250YWluZXIgPSByZXF1aXJlKCcuL0FwcENvbnRhaW5lcicpO1xuaW1wb3J0IEdsb2JhbFBlcmZvcm1hbmNlTG9nZ2VyIGZyb20gJy4uL1V0aWxpdGllcy9HbG9iYWxQZXJmb3JtYW5jZUxvZ2dlcic7XG5pbXBvcnQgdHlwZSB7SVBlcmZvcm1hbmNlTG9nZ2VyfSBmcm9tICcuLi9VdGlsaXRpZXMvY3JlYXRlUGVyZm9ybWFuY2VMb2dnZXInO1xuaW1wb3J0IFBlcmZvcm1hbmNlTG9nZ2VyQ29udGV4dCBmcm9tICcuLi9VdGlsaXRpZXMvUGVyZm9ybWFuY2VMb2dnZXJDb250ZXh0JztcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IFJlYWN0RmFicmljSW5kaWNhdG9yID0gcmVxdWlyZSgnLi9SZWFjdEZhYnJpY0luZGljYXRvcicpO1xuXG5jb25zdCBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxuLy8gcmVxdWlyZSBCYWNrSGFuZGxlciBzbyBpdCBzZXRzIHRoZSBkZWZhdWx0IGhhbmRsZXIgdGhhdCBleGl0cyB0aGUgYXBwIGlmIG5vIGxpc3RlbmVycyByZXNwb25kXG5yZXF1aXJlKCcuLi9VdGlsaXRpZXMvQmFja0hhbmRsZXInKTtcblxuZnVuY3Rpb24gcmVuZGVyQXBwbGljYXRpb248UHJvcHM6IE9iamVjdD4oXG4gIFJvb3RDb21wb25lbnQ6IFJlYWN0LkNvbXBvbmVudFR5cGU8UHJvcHM+LFxuICBpbml0aWFsUHJvcHM6IFByb3BzLFxuICByb290VGFnOiBhbnksXG4gIFdyYXBwZXJDb21wb25lbnQ/OiA/UmVhY3QuQ29tcG9uZW50VHlwZTwqPixcbiAgZmFicmljPzogYm9vbGVhbixcbiAgc2hvd0ZhYnJpY0luZGljYXRvcj86IGJvb2xlYW4sXG4gIHNjb3BlZFBlcmZvcm1hbmNlTG9nZ2VyPzogSVBlcmZvcm1hbmNlTG9nZ2VyLFxuKSB7XG4gIGludmFyaWFudChyb290VGFnLCAnRXhwZWN0IHRvIGhhdmUgYSB2YWxpZCByb290VGFnLCBpbnN0ZWFkIGdvdCAnLCByb290VGFnKTtcblxuICBsZXQgcmVuZGVyYWJsZSA9IChcbiAgICA8UGVyZm9ybWFuY2VMb2dnZXJDb250ZXh0LlByb3ZpZGVyXG4gICAgICB2YWx1ZT17c2NvcGVkUGVyZm9ybWFuY2VMb2dnZXIgPz8gR2xvYmFsUGVyZm9ybWFuY2VMb2dnZXJ9PlxuICAgICAgPEFwcENvbnRhaW5lciByb290VGFnPXtyb290VGFnfSBXcmFwcGVyQ29tcG9uZW50PXtXcmFwcGVyQ29tcG9uZW50fT5cbiAgICAgICAgPFJvb3RDb21wb25lbnQgey4uLmluaXRpYWxQcm9wc30gcm9vdFRhZz17cm9vdFRhZ30gLz5cbiAgICAgICAge2ZhYnJpYyA9PT0gdHJ1ZSAmJiBzaG93RmFicmljSW5kaWNhdG9yID09PSB0cnVlID8gKFxuICAgICAgICAgIDxSZWFjdEZhYnJpY0luZGljYXRvciAvPlxuICAgICAgICApIDogbnVsbH1cbiAgICAgIDwvQXBwQ29udGFpbmVyPlxuICAgIDwvUGVyZm9ybWFuY2VMb2dnZXJDb250ZXh0LlByb3ZpZGVyPlxuICApO1xuXG4gIC8vIElmIHRoZSByb290IGNvbXBvbmVudCBpcyBhc3luYywgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdGhlIGluaXRpYWwgcmVuZGVyXG4gIC8vIHRvIGJlIGFzeW5jIGFsc28uIFRvIGRvIHRoaXMsIHdyYXAgQXBwQ29udGFpbmVyIHdpdGggYW4gYXN5bmMgbWFya2VyLlxuICAvLyBGb3IgbW9yZSBpbmZvIHNlZSBodHRwczovL2ZiLm1lL2lzLWNvbXBvbmVudC1hc3luY1xuICBpZiAoXG4gICAgLyogJEZsb3dGaXhNZSg+PTAuNjguMCBzaXRlPXJlYWN0X25hdGl2ZV9mYikgVGhpcyBjb21tZW50IHN1cHByZXNzZXMgYW5cbiAgICAgKiBlcnJvciBmb3VuZCB3aGVuIEZsb3cgdjAuNjggd2FzIGRlcGxveWVkLiBUbyBzZWUgdGhlIGVycm9yIGRlbGV0ZSB0aGlzXG4gICAgICogY29tbWVudCBhbmQgcnVuIEZsb3cuICovXG4gICAgUm9vdENvbXBvbmVudC5wcm90b3R5cGUgIT0gbnVsbCAmJlxuICAgIFJvb3RDb21wb25lbnQucHJvdG90eXBlLnVuc3RhYmxlX2lzQXN5bmNSZWFjdENvbXBvbmVudCA9PT0gdHJ1ZVxuICApIHtcbiAgICAvLyAkRmxvd0ZpeE1lIFRoaXMgaXMgbm90IHlldCBwYXJ0IG9mIHRoZSBvZmZpY2lhbCBwdWJsaWMgQVBJXG4gICAgY29uc3QgQ29uY3VycmVudE1vZGUgPSBSZWFjdC51bnN0YWJsZV9Db25jdXJyZW50TW9kZTtcbiAgICByZW5kZXJhYmxlID0gPENvbmN1cnJlbnRNb2RlPntyZW5kZXJhYmxlfTwvQ29uY3VycmVudE1vZGU+O1xuICB9XG5cbiAgR2xvYmFsUGVyZm9ybWFuY2VMb2dnZXIuc3RhcnRUaW1lc3BhbigncmVuZGVyQXBwbGljYXRpb25fUmVhY3RfcmVuZGVyJyk7XG4gIGlmIChmYWJyaWMpIHtcbiAgICByZXF1aXJlKCcuLi9SZW5kZXJlci9zaGltcy9SZWFjdEZhYnJpYycpLnJlbmRlcihyZW5kZXJhYmxlLCByb290VGFnKTtcbiAgfSBlbHNlIHtcbiAgICByZXF1aXJlKCcuLi9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZScpLnJlbmRlcihyZW5kZXJhYmxlLCByb290VGFnKTtcbiAgfVxuICBHbG9iYWxQZXJmb3JtYW5jZUxvZ2dlci5zdG9wVGltZXNwYW4oJ3JlbmRlckFwcGxpY2F0aW9uX1JlYWN0X3JlbmRlcicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlbmRlckFwcGxpY2F0aW9uO1xuIl19