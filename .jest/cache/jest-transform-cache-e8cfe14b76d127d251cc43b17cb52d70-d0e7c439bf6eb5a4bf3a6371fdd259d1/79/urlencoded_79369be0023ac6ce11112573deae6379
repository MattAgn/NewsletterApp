5185d6a6586f10fb346a6e847b74329a
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _require = require("./infra"),
    isASCIIHex = _require.isASCIIHex;

function strictlySplitByteSequence(buf, cp) {
  var list = [];
  var last = 0;
  var i = buf.indexOf(cp);

  while (i >= 0) {
    list.push(buf.slice(last, i));
    last = i + 1;
    i = buf.indexOf(cp, last);
  }

  if (last !== buf.length) {
    list.push(buf.slice(last));
  }

  return list;
}

function replaceByteInByteSequence(buf, from, to) {
  var i = buf.indexOf(from);

  while (i >= 0) {
    buf[i] = to;
    i = buf.indexOf(from, i + 1);
  }

  return buf;
}

function percentEncode(c) {
  var hex = c.toString(16).toUpperCase();

  if (hex.length === 1) {
    hex = "0" + hex;
  }

  return "%" + hex;
}

function percentDecode(input) {
  var output = Buffer.alloc(input.byteLength);
  var ptr = 0;

  for (var i = 0; i < input.length; ++i) {
    if (input[i] !== 37 || !isASCIIHex(input[i + 1]) || !isASCIIHex(input[i + 2])) {
      output[ptr++] = input[i];
    } else {
      output[ptr++] = parseInt(input.slice(i + 1, i + 3).toString(), 16);
      i += 2;
    }
  }

  return output.slice(0, ptr);
}

function _parseUrlencoded(input) {
  var sequences = strictlySplitByteSequence(input, 38);
  var output = [];

  for (var _iterator = sequences, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
    var _ref;

    if (_isArray) {
      if (_i >= _iterator.length) break;
      _ref = _iterator[_i++];
    } else {
      _i = _iterator.next();
      if (_i.done) break;
      _ref = _i.value;
    }

    var _bytes = _ref;

    if (_bytes.length === 0) {
      continue;
    }

    var name = void 0;
    var value = void 0;

    var indexOfEqual = _bytes.indexOf(61);

    if (indexOfEqual >= 0) {
      name = _bytes.slice(0, indexOfEqual);
      value = _bytes.slice(indexOfEqual + 1);
    } else {
      name = _bytes;
      value = Buffer.alloc(0);
    }

    name = replaceByteInByteSequence(Buffer.from(name), 43, 32);
    value = replaceByteInByteSequence(Buffer.from(value), 43, 32);
    output.push([percentDecode(name).toString(), percentDecode(value).toString()]);
  }

  return output;
}

function serializeUrlencodedByte(input) {
  var output = "";

  for (var _iterator2 = input, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
    var _ref2;

    if (_isArray2) {
      if (_i2 >= _iterator2.length) break;
      _ref2 = _iterator2[_i2++];
    } else {
      _i2 = _iterator2.next();
      if (_i2.done) break;
      _ref2 = _i2.value;
    }

    var _byte = _ref2;

    if (_byte === 32) {
      output += "+";
    } else if (_byte === 42 || _byte === 45 || _byte === 46 || _byte >= 48 && _byte <= 57 || _byte >= 65 && _byte <= 90 || _byte === 95 || _byte >= 97 && _byte <= 122) {
      output += String.fromCodePoint(_byte);
    } else {
      output += percentEncode(_byte);
    }
  }

  return output;
}

function serializeUrlencoded(tuples) {
  var encodingOverride = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
  var encoding = "utf-8";

  if (encodingOverride !== undefined) {
    encoding = encodingOverride;
  }

  var output = "";

  for (var _iterator3 = tuples.entries(), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
    var _ref5;

    if (_isArray3) {
      if (_i3 >= _iterator3.length) break;
      _ref5 = _iterator3[_i3++];
    } else {
      _i3 = _iterator3.next();
      if (_i3.done) break;
      _ref5 = _i3.value;
    }

    var _ref6 = _ref5;

    var _ref4 = (0, _slicedToArray2.default)(_ref6, 2);

    var _i4 = _ref4[0];
    var _tuple = _ref4[1];
    var name = serializeUrlencodedByte(Buffer.from(_tuple[0]));
    var value = _tuple[1];

    if (_tuple.length > 2 && _tuple[2] !== undefined) {
      if (_tuple[2] === "hidden" && name === "_charset_") {
        value = encoding;
      } else if (_tuple[2] === "file") {
        value = value.name;
      }
    }

    value = serializeUrlencodedByte(Buffer.from(value));

    if (_i4 !== 0) {
      output += "&";
    }

    output += name + "=" + value;
  }

  return output;
}

module.exports = {
  percentEncode: percentEncode,
  percentDecode: percentDecode,
  parseUrlencoded: function parseUrlencoded(input) {
    return _parseUrlencoded(Buffer.from(input));
  },
  serializeUrlencoded: serializeUrlencoded
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,