{"version":3,"sources":["index.js"],"names":["module","exports","glob","opts","TypeError","str","String","reStr","extended","globstar","inGroup","flags","c","i","len","length","prevChar","starCount","nextChar","isGlobstar","undefined","indexOf","RegExp"],"mappings":"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","sourcesContent":["module.exports = function (glob, opts) {\n  if (typeof glob !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  var str = String(glob);\n\n  // The regexp we are building, as a string.\n  var reStr = \"\";\n\n  // Whether we are matching so called \"extended\" globs (like bash) and should\n  // support single character matching, matching ranges of characters, group\n  // matching, etc.\n  var extended = opts ? !!opts.extended : false;\n\n  // When globstar is _false_ (default), '/foo/*' is translated a regexp like\n  // '^\\/foo\\/.*$' which will match any string beginning with '/foo/'\n  // When globstar is _true_, '/foo/*' is translated to regexp like\n  // '^\\/foo\\/[^/]*$' which will match any string beginning with '/foo/' BUT\n  // which does not have a '/' to the right of it.\n  // E.g. with '/foo/*' these will match: '/foo/bar', '/foo/bar.txt' but\n  // these will not '/foo/bar/baz', '/foo/bar/baz.txt'\n  // Lastely, when globstar is _true_, '/foo/**' is equivelant to '/foo/*' when\n  // globstar is _false_\n  var globstar = opts ? !!opts.globstar : false;\n\n  // If we are doing extended matching, this boolean is true when we are inside\n  // a group (eg {*.html,*.js}), and false otherwise.\n  var inGroup = false;\n\n  // RegExp flags (eg \"i\" ) to pass in to RegExp constructor.\n  var flags = opts && typeof( opts.flags ) === \"string\" ? opts.flags : \"\";\n\n  var c;\n  for (var i = 0, len = str.length; i < len; i++) {\n    c = str[i];\n\n    switch (c) {\n    case \"/\":\n    case \"$\":\n    case \"^\":\n    case \"+\":\n    case \".\":\n    case \"(\":\n    case \")\":\n    case \"=\":\n    case \"!\":\n    case \"|\":\n      reStr += \"\\\\\" + c;\n      break;\n\n    case \"?\":\n      if (extended) {\n        reStr += \".\";\n\t    break;\n      }\n\n    case \"[\":\n    case \"]\":\n      if (extended) {\n        reStr += c;\n\t    break;\n      }\n\n    case \"{\":\n      if (extended) {\n        inGroup = true;\n\t    reStr += \"(\";\n\t    break;\n      }\n\n    case \"}\":\n      if (extended) {\n        inGroup = false;\n\t    reStr += \")\";\n\t    break;\n      }\n\n    case \",\":\n      if (inGroup) {\n        reStr += \"|\";\n\t    break;\n      }\n      reStr += \"\\\\\" + c;\n      break;\n\n    case \"*\":\n      // Move over all consecutive \"*\"'s.\n      // Also store the previous and next characters\n      var prevChar = str[i - 1];\n      var starCount = 1;\n      while(str[i + 1] === \"*\") {\n        starCount++;\n        i++;\n      }\n      var nextChar = str[i + 1];\n\n      if (!globstar) {\n        // globstar is disabled, so treat any number of \"*\" as one\n        reStr += \".*\";\n      } else {\n        // globstar is enabled, so determine if this is a globstar segment\n        var isGlobstar = starCount > 1                      // multiple \"*\"'s\n          && (prevChar === \"/\" || prevChar === undefined)   // from the start of the segment\n          && (nextChar === \"/\" || nextChar === undefined)   // to the end of the segment\n\n        if (isGlobstar) {\n          // it's a globstar, so match zero or more path segments\n          reStr += \"((?:[^/]*(?:\\/|$))*)\";\n          i++; // move over the \"/\"\n        } else {\n          // it's not a globstar, so only match one path segment\n          reStr += \"([^/]*)\";\n        }\n      }\n      break;\n\n    default:\n      reStr += c;\n    }\n  }\n\n  // When regexp 'g' flag is specified don't\n  // constrain the regular expression with ^ & $\n  if (!flags || !~flags.indexOf('g')) {\n    reStr = \"^\" + reStr + \"$\";\n  }\n\n  return new RegExp(reStr, flags);\n};\n"]}