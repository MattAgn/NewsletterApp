341372dcd7e0bb31372a20468a700f73
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.queryByAPI = exports.queryAllByTestId = exports.queryAllByProps = exports.queryAllByDisplayValue = exports.queryAllByPlaceholder = exports.queryAllByText = exports.queryAllByType = exports.queryAllByName = exports.queryByTestId = exports.queryByProps = exports.queryByDisplayValue = exports.queryByPlaceholder = exports.queryByText = exports.queryByType = exports.queryByName = void 0;

var React = _interopRequireWildcard(require("react"));

var _getByAPI = require("./getByAPI");

var _errors = require("./errors");

var queryByName = function queryByName(instance) {
  return function queryByNameFn(name) {
    (0, _errors.logDeprecationWarning)('queryByName', 'getByName');

    try {
      return (0, _getByAPI.getByName)(instance)(name);
    } catch (error) {
      return (0, _errors.createQueryByError)(error, queryByNameFn);
    }
  };
};

exports.queryByName = queryByName;

var queryByType = function queryByType(instance) {
  return function queryByTypeFn(type) {
    try {
      return (0, _getByAPI.getByType)(instance)(type);
    } catch (error) {
      return (0, _errors.createQueryByError)(error, queryByTypeFn);
    }
  };
};

exports.queryByType = queryByType;

var queryByText = function queryByText(instance) {
  return function queryByTextFn(text) {
    try {
      return (0, _getByAPI.getByText)(instance)(text);
    } catch (error) {
      return (0, _errors.createQueryByError)(error, queryByTextFn);
    }
  };
};

exports.queryByText = queryByText;

var queryByPlaceholder = function queryByPlaceholder(instance) {
  return function queryByPlaceholderFn(placeholder) {
    try {
      return (0, _getByAPI.getByPlaceholder)(instance)(placeholder);
    } catch (error) {
      return (0, _errors.createQueryByError)(error, queryByPlaceholderFn);
    }
  };
};

exports.queryByPlaceholder = queryByPlaceholder;

var queryByDisplayValue = function queryByDisplayValue(instance) {
  return function queryByDisplayValueFn(value) {
    try {
      return (0, _getByAPI.getByDisplayValue)(instance)(value);
    } catch (error) {
      return (0, _errors.createQueryByError)(error, queryByDisplayValueFn);
    }
  };
};

exports.queryByDisplayValue = queryByDisplayValue;

var queryByProps = function queryByProps(instance) {
  return function queryByPropsFn(props) {
    try {
      return (0, _getByAPI.getByProps)(instance)(props);
    } catch (error) {
      return (0, _errors.createQueryByError)(error, queryByPropsFn);
    }
  };
};

exports.queryByProps = queryByProps;

var queryByTestId = function queryByTestId(instance) {
  return function queryByTestIdFn(testID) {
    try {
      return (0, _getByAPI.getByTestId)(instance)(testID);
    } catch (error) {
      return (0, _errors.createQueryByError)(error, queryByTestIdFn);
    }
  };
};

exports.queryByTestId = queryByTestId;

var queryAllByName = function queryAllByName(instance) {
  return function (name) {
    (0, _errors.logDeprecationWarning)('queryAllByName', 'getAllByName');

    try {
      return (0, _getByAPI.getAllByName)(instance)(name);
    } catch (error) {
      return [];
    }
  };
};

exports.queryAllByName = queryAllByName;

var queryAllByType = function queryAllByType(instance) {
  return function (type) {
    try {
      return (0, _getByAPI.getAllByType)(instance)(type);
    } catch (error) {
      return [];
    }
  };
};

exports.queryAllByType = queryAllByType;

var queryAllByText = function queryAllByText(instance) {
  return function (text) {
    try {
      return (0, _getByAPI.getAllByText)(instance)(text);
    } catch (error) {
      return [];
    }
  };
};

exports.queryAllByText = queryAllByText;

var queryAllByPlaceholder = function queryAllByPlaceholder(instance) {
  return function (placeholder) {
    try {
      return (0, _getByAPI.getAllByPlaceholder)(instance)(placeholder);
    } catch (error) {
      return [];
    }
  };
};

exports.queryAllByPlaceholder = queryAllByPlaceholder;

var queryAllByDisplayValue = function queryAllByDisplayValue(instance) {
  return function (value) {
    try {
      return (0, _getByAPI.getAllByDisplayValue)(instance)(value);
    } catch (error) {
      return [];
    }
  };
};

exports.queryAllByDisplayValue = queryAllByDisplayValue;

var queryAllByProps = function queryAllByProps(instance) {
  return function (props) {
    try {
      return (0, _getByAPI.getAllByProps)(instance)(props);
    } catch (error) {
      return [];
    }
  };
};

exports.queryAllByProps = queryAllByProps;

var queryAllByTestId = function queryAllByTestId(instance) {
  return function (testID) {
    try {
      return (0, _getByAPI.getAllByTestId)(instance)(testID);
    } catch (error) {
      return [];
    }
  };
};

exports.queryAllByTestId = queryAllByTestId;

var queryByAPI = function queryByAPI(instance) {
  return {
    queryByTestId: queryByTestId(instance),
    queryByName: queryByName(instance),
    queryByType: queryByType(instance),
    queryByText: queryByText(instance),
    queryByPlaceholder: queryByPlaceholder(instance),
    queryByDisplayValue: queryByDisplayValue(instance),
    queryByProps: queryByProps(instance),
    queryAllByTestId: queryAllByTestId(instance),
    queryAllByName: queryAllByName(instance),
    queryAllByType: queryAllByType(instance),
    queryAllByText: queryAllByText(instance),
    queryAllByPlaceholder: queryAllByPlaceholder(instance),
    queryAllByDisplayValue: queryAllByDisplayValue(instance),
    queryAllByProps: queryAllByProps(instance)
  };
};

exports.queryByAPI = queryByAPI;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,