{"version":3,"sources":["TaskQueue.js"],"names":["infoLog","require","invariant","DEBUG","TaskQueue","onMoreTasks","_onMoreTasks","_queueStack","tasks","popable","task","_getCurrentQueue","push","forEach","enqueue","tasksToCancel","map","queue","filter","indexOf","idx","length","shift","gen","name","_genPromise","run","JSON","stringify","e","message","stackIdx","pop","queueStackSize","then","hasTasksToProcess","catch","ex","done","module","exports"],"mappings":"AAUA;;;;;;;;;;;;;;AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,sBAAD,CAAvB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AAYA,IAAME,KAAY,GAAG,KAArB;;IAkBMC,S;AAQJ,2BAAsD;AAAA,QAAzCC,WAAyC,QAAzCA,WAAyC;AAAA;AACpD,SAAKC,YAAL,GAAoBD,WAApB;AACA,SAAKE,WAAL,GAAmB,CAAC;AAACC,MAAAA,KAAK,EAAE,EAAR;AAAYC,MAAAA,OAAO,EAAE;AAArB,KAAD,CAAnB;AACD;;;;4BAOOC,I,EAAkB;AACxB,WAAKC,gBAAL,GAAwBC,IAAxB,CAA6BF,IAA7B;AACD;;;iCAEYF,K,EAA0B;AAAA;;AACrCA,MAAAA,KAAK,CAACK,OAAN,CAAc,UAAAH,IAAI;AAAA,eAAI,KAAI,CAACI,OAAL,CAAaJ,IAAb,CAAJ;AAAA,OAAlB;AACD;;;gCAEWK,a,EAAkC;AAE5C,WAAKR,WAAL,GAAmB,KAAKA,WAAL,CAChBS,GADgB,CACZ,UAAAC,KAAK;AAAA,iCACLA,KADK;AAERT,UAAAA,KAAK,EAAES,KAAK,CAACT,KAAN,CAAYU,MAAZ,CAAmB,UAAAR,IAAI;AAAA,mBAAIK,aAAa,CAACI,OAAd,CAAsBT,IAAtB,MAAgC,CAAC,CAArC;AAAA,WAAvB;AAFC;AAAA,OADO,EAKhBQ,MALgB,CAKT,UAACD,KAAD,EAAQG,GAAR;AAAA,eAAgBH,KAAK,CAACT,KAAN,CAAYa,MAAZ,GAAqB,CAArB,IAA0BD,GAAG,KAAK,CAAlD;AAAA,OALS,CAAnB;AAMD;;;wCAY4B;AAC3B,aAAO,KAAKT,gBAAL,GAAwBU,MAAxB,GAAiC,CAAxC;AACD;;;kCAKmB;AAClB,UAAMJ,KAAK,GAAG,KAAKN,gBAAL,EAAd;;AACA,UAAIM,KAAK,CAACI,MAAV,EAAkB;AAChB,YAAMX,IAAI,GAAGO,KAAK,CAACK,KAAN,EAAb;;AACA,YAAI;AACF,cAAIZ,IAAI,CAACa,GAAT,EAAc;AACZpB,YAAAA,KAAK,IAAIH,OAAO,CAAC,oCAAoCU,IAAI,CAACc,IAA1C,CAAhB;;AACA,iBAAKC,WAAL,CAAkBf,IAAlB;AACD,WAHD,MAGO,IAAIA,IAAI,CAACgB,GAAT,EAAc;AACnBvB,YAAAA,KAAK,IAAIH,OAAO,CAAC,yBAAyBU,IAAI,CAACc,IAA/B,CAAhB;AACAd,YAAAA,IAAI,CAACgB,GAAL;AACD,WAHM,MAGA;AACLxB,YAAAA,SAAS,CACP,OAAOQ,IAAP,KAAgB,UADT,EAEP,8DACEiB,IAAI,CAACC,SAAL,CAAelB,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAHK,CAAT;AAKAP,YAAAA,KAAK,IAAIH,OAAO,CAAC,+BAAD,CAAhB;AACAU,YAAAA,IAAI;AACL;AACF,SAhBD,CAgBE,OAAOmB,CAAP,EAAU;AACVA,UAAAA,CAAC,CAACC,OAAF,GACE,iCAAiCpB,IAAI,CAACc,IAAL,IAAa,EAA9C,IAAoD,IAApD,GAA2DK,CAAC,CAACC,OAD/D;AAEA,gBAAMD,CAAN;AACD;AACF;AACF;;;uCAK+B;AAC9B,UAAME,QAAQ,GAAG,KAAKxB,WAAL,CAAiBc,MAAjB,GAA0B,CAA3C;AACA,UAAMJ,KAAK,GAAG,KAAKV,WAAL,CAAiBwB,QAAjB,CAAd;;AACA,UACEd,KAAK,CAACR,OAAN,IACAQ,KAAK,CAACT,KAAN,CAAYa,MAAZ,KAAuB,CADvB,IAEA,KAAKd,WAAL,CAAiBc,MAAjB,GAA0B,CAH5B,EAIE;AACA,aAAKd,WAAL,CAAiByB,GAAjB;;AACA7B,QAAAA,KAAK,IACHH,OAAO,CAAC,2BAAD,EAA8B;AACnC+B,UAAAA,QAAQ,EAARA,QADmC;AAEnCE,UAAAA,cAAc,EAAE,KAAK1B,WAAL,CAAiBc;AAFE,SAA9B,CADT;AAKA,eAAO,KAAKV,gBAAL,EAAP;AACD,OAZD,MAYO;AACL,eAAOM,KAAK,CAACT,KAAb;AACD;AACF;;;gCAEWE,I,EAAmB;AAAA;;AAK7B,WAAKH,WAAL,CAAiBK,IAAjB,CAAsB;AAACJ,QAAAA,KAAK,EAAE,EAAR;AAAYC,QAAAA,OAAO,EAAE;AAArB,OAAtB;;AACA,UAAMsB,QAAQ,GAAG,KAAKxB,WAAL,CAAiBc,MAAjB,GAA0B,CAA3C;AACAlB,MAAAA,KAAK,IAAIH,OAAO,CAAC,6BAAD,EAAgC;AAAC+B,QAAAA,QAAQ,EAARA;AAAD,OAAhC,CAAhB;AACA5B,MAAAA,KAAK,IAAIH,OAAO,CAAC,8BAA8BU,IAAI,CAACc,IAApC,CAAhB;AACAd,MAAAA,IAAI,CACDa,GADH,GAEGW,IAFH,CAEQ,YAAM;AACV/B,QAAAA,KAAK,IACHH,OAAO,CAAC,oCAAoCU,IAAI,CAACc,IAA1C,EAAgD;AACrDO,UAAAA,QAAQ,EAARA,QADqD;AAErDE,UAAAA,cAAc,EAAE,MAAI,CAAC1B,WAAL,CAAiBc;AAFoB,SAAhD,CADT;AAKA,QAAA,MAAI,CAACd,WAAL,CAAiBwB,QAAjB,EAA2BtB,OAA3B,GAAqC,IAArC;AACA,QAAA,MAAI,CAAC0B,iBAAL,MAA4B,MAAI,CAAC7B,YAAL,EAA5B;AACD,OAVH,EAWG8B,KAXH,CAWS,UAAAC,EAAE,EAAI;AACXA,QAAAA,EAAE,CAACP,OAAH,mDACEpB,IAAI,CAACc,IADP,UAEKa,EAAE,CAACP,OAFR;AAGA,cAAMO,EAAN;AACD,OAhBH,EAiBGC,IAjBH;AAkBD;;;;;AAGHC,MAAM,CAACC,OAAP,GAAiBpC,SAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst infoLog = require('../Utilities/infoLog');\nconst invariant = require('invariant');\n\ntype SimpleTask = {\n  name: string,\n  run: () => void,\n};\ntype PromiseTask = {\n  name: string,\n  gen: () => Promise<any>,\n};\nexport type Task = Function | SimpleTask | PromiseTask;\n\nconst DEBUG: false = false;\n\n/**\n * TaskQueue - A system for queueing and executing a mix of simple callbacks and\n * trees of dependent tasks based on Promises. No tasks are executed unless\n * `processNext` is called.\n *\n * `enqueue` takes a Task object with either a simple `run` callback, or a\n * `gen` function that returns a `Promise` and puts it in the queue.  If a gen\n * function is supplied, then the promise it returns will block execution of\n * tasks already in the queue until it resolves. This can be used to make sure\n * the first task is fully resolved (including asynchronous dependencies that\n * also schedule more tasks via `enqueue`) before starting on the next task.\n * The `onMoreTasks` constructor argument is used to inform the owner that an\n * async task has resolved and that the queue should be processed again.\n *\n * Note: Tasks are only actually executed with explicit calls to `processNext`.\n */\nclass TaskQueue {\n  /**\n   * TaskQueue instances are self contained and independent, so multiple tasks\n   * of varying semantics and priority can operate together.\n   *\n   * `onMoreTasks` is invoked when `PromiseTask`s resolve if there are more\n   * tasks to process.\n   */\n  constructor({onMoreTasks}: {onMoreTasks: () => void}) {\n    this._onMoreTasks = onMoreTasks;\n    this._queueStack = [{tasks: [], popable: false}];\n  }\n\n  /**\n   * Add a task to the queue.  It is recommended to name your tasks for easier\n   * async debugging. Tasks will not be executed until `processNext` is called\n   * explicitly.\n   */\n  enqueue(task: Task): void {\n    this._getCurrentQueue().push(task);\n  }\n\n  enqueueTasks(tasks: Array<Task>): void {\n    tasks.forEach(task => this.enqueue(task));\n  }\n\n  cancelTasks(tasksToCancel: Array<Task>): void {\n    // search through all tasks and remove them.\n    this._queueStack = this._queueStack\n      .map(queue => ({\n        ...queue,\n        tasks: queue.tasks.filter(task => tasksToCancel.indexOf(task) === -1),\n      }))\n      .filter((queue, idx) => queue.tasks.length > 0 || idx === 0);\n  }\n\n  /**\n   * Check to see if `processNext` should be called.\n   *\n   * @returns {boolean} Returns true if there are tasks that are ready to be\n   * processed with `processNext`, or returns false if there are no more tasks\n   * to be processed right now, although there may be tasks in the queue that\n   * are blocked by earlier `PromiseTask`s that haven't resolved yet.\n   * `onMoreTasks` will be called after each `PromiseTask` resolves if there are\n   * tasks ready to run at that point.\n   */\n  hasTasksToProcess(): boolean {\n    return this._getCurrentQueue().length > 0;\n  }\n\n  /**\n   * Executes the next task in the queue.\n   */\n  processNext(): void {\n    const queue = this._getCurrentQueue();\n    if (queue.length) {\n      const task = queue.shift();\n      try {\n        if (task.gen) {\n          DEBUG && infoLog('TaskQueue: genPromise for task ' + task.name);\n          this._genPromise((task: any)); // Rather than annoying tagged union\n        } else if (task.run) {\n          DEBUG && infoLog('TaskQueue: run task ' + task.name);\n          task.run();\n        } else {\n          invariant(\n            typeof task === 'function',\n            'Expected Function, SimpleTask, or PromiseTask, but got:\\n' +\n              JSON.stringify(task, null, 2),\n          );\n          DEBUG && infoLog('TaskQueue: run anonymous task');\n          task();\n        }\n      } catch (e) {\n        e.message =\n          'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;\n        throw e;\n      }\n    }\n  }\n\n  _queueStack: Array<{tasks: Array<Task>, popable: boolean}>;\n  _onMoreTasks: () => void;\n\n  _getCurrentQueue(): Array<Task> {\n    const stackIdx = this._queueStack.length - 1;\n    const queue = this._queueStack[stackIdx];\n    if (\n      queue.popable &&\n      queue.tasks.length === 0 &&\n      this._queueStack.length > 1\n    ) {\n      this._queueStack.pop();\n      DEBUG &&\n        infoLog('TaskQueue: popped queue: ', {\n          stackIdx,\n          queueStackSize: this._queueStack.length,\n        });\n      return this._getCurrentQueue();\n    } else {\n      return queue.tasks;\n    }\n  }\n\n  _genPromise(task: PromiseTask) {\n    // Each async task pushes it's own queue onto the queue stack. This\n    // effectively defers execution of previously queued tasks until the promise\n    // resolves, at which point we allow the new queue to be popped, which\n    // happens once it is fully processed.\n    this._queueStack.push({tasks: [], popable: false});\n    const stackIdx = this._queueStack.length - 1;\n    DEBUG && infoLog('TaskQueue: push new queue: ', {stackIdx});\n    DEBUG && infoLog('TaskQueue: exec gen task ' + task.name);\n    task\n      .gen()\n      .then(() => {\n        DEBUG &&\n          infoLog('TaskQueue: onThen for gen task ' + task.name, {\n            stackIdx,\n            queueStackSize: this._queueStack.length,\n          });\n        this._queueStack[stackIdx].popable = true;\n        this.hasTasksToProcess() && this._onMoreTasks();\n      })\n      .catch(ex => {\n        ex.message = `TaskQueue: Error resolving Promise in task ${\n          task.name\n        }: ${ex.message}`;\n        throw ex;\n      })\n      .done();\n  }\n}\n\nmodule.exports = TaskQueue;\n"]}