0096680f1b10d09614fb30b9fd670ab0
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _container;

var AppContainer = require('../ReactNative/AppContainer');

var I18nManager = require('../ReactNative/I18nManager');

var NativeEventEmitter = require('../EventEmitter/NativeEventEmitter');

var NativeModules = require('../BatchedBridge/NativeModules');

var Platform = require('../Utilities/Platform');

var React = require('react');

var PropTypes = require('prop-types');

var StyleSheet = require('../StyleSheet/StyleSheet');

var View = require('../Components/View/View');

var RCTModalHostView = require('./RCTModalHostViewNativeComponent');

var ModalEventEmitter = Platform.OS === 'ios' && NativeModules.ModalManager ? new NativeEventEmitter(NativeModules.ModalManager) : null;
var uniqueModalIdentifier = 0;

var Modal = function (_React$Component) {
  (0, _inherits2.default)(Modal, _React$Component);

  function Modal(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Modal);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Modal).call(this, props));

    Modal._confirmProps(props);

    _this._identifier = uniqueModalIdentifier++;
    return _this;
  }

  (0, _createClass2.default)(Modal, [{
    key: "getChildContext",
    value: function getChildContext() {
      return {
        virtualizedList: null
      };
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      if (ModalEventEmitter) {
        this._eventSubscription = ModalEventEmitter.addListener('modalDismissed', function (event) {
          if (event.modalID === _this2._identifier && _this2.props.onDismiss) {
            _this2.props.onDismiss();
          }
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this._eventSubscription) {
        this._eventSubscription.remove();
      }
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      Modal._confirmProps(nextProps);
    }
  }, {
    key: "render",
    value: function render() {
      if (this.props.visible !== true) {
        return null;
      }

      var containerStyles = {
        backgroundColor: this.props.transparent ? 'transparent' : 'white'
      };
      var animationType = this.props.animationType;

      if (!animationType) {
        animationType = 'none';

        if (this.props.animated) {
          animationType = 'slide';
        }
      }

      var presentationStyle = this.props.presentationStyle;

      if (!presentationStyle) {
        presentationStyle = 'fullScreen';

        if (this.props.transparent) {
          presentationStyle = 'overFullScreen';
        }
      }

      var innerChildren = __DEV__ ? React.createElement(AppContainer, {
        rootTag: this.context.rootTag
      }, this.props.children) : this.props.children;
      return React.createElement(RCTModalHostView, {
        animationType: animationType,
        presentationStyle: presentationStyle,
        transparent: this.props.transparent,
        hardwareAccelerated: this.props.hardwareAccelerated,
        onRequestClose: this.props.onRequestClose,
        onShow: this.props.onShow,
        identifier: this._identifier,
        style: styles.modal,
        onStartShouldSetResponder: this._shouldSetResponder,
        supportedOrientations: this.props.supportedOrientations,
        onOrientationChange: this.props.onOrientationChange
      }, React.createElement(View, {
        style: [styles.container, containerStyles]
      }, innerChildren));
    }
  }, {
    key: "_shouldSetResponder",
    value: function _shouldSetResponder() {
      return true;
    }
  }], [{
    key: "_confirmProps",
    value: function _confirmProps(props) {
      if (props.presentationStyle && props.presentationStyle !== 'overFullScreen' && props.transparent) {
        console.warn("Modal with '" + props.presentationStyle + "' presentation style and 'transparent' value is not supported.");
      }
    }
  }]);
  return Modal;
}(React.Component);

Modal.defaultProps = {
  visible: true,
  hardwareAccelerated: false
};
Modal.contextTypes = {
  rootTag: PropTypes.number
};
Modal.childContextTypes = {
  virtualizedList: PropTypes.object
};
var side = I18nManager.isRTL ? 'right' : 'left';
var styles = StyleSheet.create({
  modal: {
    position: 'absolute'
  },
  container: (_container = {}, (0, _defineProperty2.default)(_container, side, 0), (0, _defineProperty2.default)(_container, "top", 0), (0, _defineProperty2.default)(_container, "flex", 1), _container)
});
module.exports = Modal;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,