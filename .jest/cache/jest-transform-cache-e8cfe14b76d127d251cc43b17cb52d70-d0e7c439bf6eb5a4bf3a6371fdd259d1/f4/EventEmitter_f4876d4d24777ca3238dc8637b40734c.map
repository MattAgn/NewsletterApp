{"version":3,"sources":["EventEmitter.js"],"names":["EmitterSubscription","require","EventSubscriptionVendor","invariant","sparseFilterPredicate","EventEmitter","subscriber","_subscriber","eventType","listener","context","addSubscription","addListener","removeCurrentListener","args","apply","removeAllSubscriptions","_currentSubscription","removeSubscription","subscription","emitter","subscriptions","getSubscriptionsForType","filter","map","i","l","length","Array","prototype","slice","call","arguments","remove","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @noflow\n * @typecheck\n */\n\n'use strict';\n\nconst EmitterSubscription = require('./EmitterSubscription');\nconst EventSubscriptionVendor = require('./EventSubscriptionVendor');\n\nconst invariant = require('invariant');\n\nconst sparseFilterPredicate = () => true;\n\n/**\n * @class EventEmitter\n * @description\n * An EventEmitter is responsible for managing a set of listeners and publishing\n * events to them when it is told that such events happened. In addition to the\n * data for the given event it also sends a event control object which allows\n * the listeners/handlers to prevent the default behavior of the given event.\n *\n * The emitter is designed to be generic enough to support all the different\n * contexts in which one might want to emit events. It is a simple multicast\n * mechanism on top of which extra functionality can be composed. For example, a\n * more advanced emitter may use an EventHolder and EventFactory.\n */\nclass EventEmitter {\n  _subscriber: EventSubscriptionVendor;\n  _currentSubscription: ?EmitterSubscription;\n\n  /**\n   * @constructor\n   *\n   * @param {EventSubscriptionVendor} subscriber - Optional subscriber instance\n   *   to use. If omitted, a new subscriber will be created for the emitter.\n   */\n  constructor(subscriber: ?EventSubscriptionVendor) {\n    this._subscriber = subscriber || new EventSubscriptionVendor();\n  }\n\n  /**\n   * Adds a listener to be invoked when events of the specified type are\n   * emitted. An optional calling context may be provided. The data arguments\n   * emitted will be passed to the listener function.\n   *\n   * TODO: Annotate the listener arg's type. This is tricky because listeners\n   *       can be invoked with varargs.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n  addListener(\n    eventType: string,\n    listener: Function,\n    context: ?Object,\n  ): EmitterSubscription {\n    return (this._subscriber.addSubscription(\n      eventType,\n      new EmitterSubscription(this, this._subscriber, listener, context),\n    ): any);\n  }\n\n  /**\n   * Similar to addListener, except that the listener is removed after it is\n   * invoked once.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke only once when the\n   *   specified event is emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n  once(\n    eventType: string,\n    listener: Function,\n    context: ?Object,\n  ): EmitterSubscription {\n    return this.addListener(eventType, (...args) => {\n      this.removeCurrentListener();\n      listener.apply(context, args);\n    });\n  }\n\n  /**\n   * Removes all of the registered listeners, including those registered as\n   * listener maps.\n   *\n   * @param {?string} eventType - Optional name of the event whose registered\n   *   listeners to remove\n   */\n  removeAllListeners(eventType: ?string) {\n    this._subscriber.removeAllSubscriptions(eventType);\n  }\n\n  /**\n   * Provides an API that can be called during an eventing cycle to remove the\n   * last listener that was invoked. This allows a developer to provide an event\n   * object that can remove the listener (or listener map) during the\n   * invocation.\n   *\n   * If it is called when not inside of an emitting cycle it will throw.\n   *\n   * @throws {Error} When called not during an eventing cycle\n   *\n   * @example\n   *   var subscription = emitter.addListenerMap({\n   *     someEvent: function(data, event) {\n   *       console.log(data);\n   *       emitter.removeCurrentListener();\n   *     }\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   *   emitter.emit('someEvent', 'def'); // does not log anything\n   */\n  removeCurrentListener() {\n    invariant(\n      !!this._currentSubscription,\n      'Not in an emitting cycle; there is no current subscription',\n    );\n    this.removeSubscription(this._currentSubscription);\n  }\n\n  /**\n   * Removes a specific subscription. Called by the `remove()` method of the\n   * subscription itself to ensure any necessary cleanup is performed.\n   */\n  removeSubscription(subscription: EmitterSubscription) {\n    invariant(\n      subscription.emitter === this,\n      'Subscription does not belong to this emitter.',\n    );\n    this._subscriber.removeSubscription(subscription);\n  }\n\n  /**\n   * Returns an array of listeners that are currently registered for the given\n   * event.\n   *\n   * @param {string} eventType - Name of the event to query\n   * @returns {array}\n   */\n  listeners(eventType: string): [EmitterSubscription] {\n    const subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    return subscriptions\n      ? subscriptions\n          // We filter out missing entries because the array is sparse.\n          // \"callbackfn is called only for elements of the array which actually\n          // exist; it is not called for missing elements of the array.\"\n          // https://www.ecma-international.org/ecma-262/9.0/index.html#sec-array.prototype.filter\n          .filter(sparseFilterPredicate)\n          .map(subscription => subscription.listener)\n      : [];\n  }\n\n  /**\n   * Emits an event of the given type with the given data. All handlers of that\n   * particular type will be notified.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {...*} Arbitrary arguments to be passed to each registered listener\n   *\n   * @example\n   *   emitter.addListener('someEvent', function(message) {\n   *     console.log(message);\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   */\n  emit(eventType: string) {\n    const subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    if (subscriptions) {\n      for (let i = 0, l = subscriptions.length; i < l; i++) {\n        const subscription = subscriptions[i];\n\n        // The subscription may have been removed during this event loop.\n        if (subscription && subscription.listener) {\n          this._currentSubscription = subscription;\n          subscription.listener.apply(\n            subscription.context,\n            Array.prototype.slice.call(arguments, 1),\n          );\n        }\n      }\n      this._currentSubscription = null;\n    }\n  }\n\n  /**\n   * Removes the given listener for event of specific type.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   *\n   * @example\n   *   emitter.removeListener('someEvent', function(message) {\n   *     console.log(message);\n   *   }); // removes the listener if already registered\n   *\n   */\n  removeListener(eventType: String, listener) {\n    const subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    if (subscriptions) {\n      for (let i = 0, l = subscriptions.length; i < l; i++) {\n        const subscription = subscriptions[i];\n\n        // The subscription may have been removed during this event loop.\n        // its listener matches the listener in method parameters\n        if (subscription && subscription.listener === listener) {\n          subscription.remove();\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = EventEmitter;\n"]}