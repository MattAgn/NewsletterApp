{"version":3,"sources":["Modal.js"],"names":["AppContainer","require","I18nManager","NativeEventEmitter","NativeModules","Platform","React","PropTypes","StyleSheet","View","RCTModalHostView","ModalEventEmitter","OS","ModalManager","uniqueModalIdentifier","Modal","props","_confirmProps","_identifier","virtualizedList","_eventSubscription","addListener","event","modalID","onDismiss","remove","nextProps","visible","containerStyles","backgroundColor","transparent","animationType","animated","presentationStyle","innerChildren","__DEV__","context","rootTag","children","hardwareAccelerated","onRequestClose","onShow","styles","modal","_shouldSetResponder","supportedOrientations","onOrientationChange","container","console","warn","Component","defaultProps","contextTypes","number","childContextTypes","object","side","isRTL","create","position","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst AppContainer = require('../ReactNative/AppContainer');\nconst I18nManager = require('../ReactNative/I18nManager');\nconst NativeEventEmitter = require('../EventEmitter/NativeEventEmitter');\nconst NativeModules = require('../BatchedBridge/NativeModules');\nconst Platform = require('../Utilities/Platform');\nconst React = require('react');\nconst PropTypes = require('prop-types');\nconst StyleSheet = require('../StyleSheet/StyleSheet');\nconst View = require('../Components/View/View');\n\nconst RCTModalHostView = require('./RCTModalHostViewNativeComponent');\n\nconst ModalEventEmitter =\n  Platform.OS === 'ios' && NativeModules.ModalManager\n    ? new NativeEventEmitter(NativeModules.ModalManager)\n    : null;\n\nimport type EmitterSubscription from '../vendor/emitter/EmitterSubscription';\nimport type {ViewProps} from '../Components/View/ViewPropTypes';\nimport type {SyntheticEvent} from '../Types/CoreEventTypes';\n\n/**\n * The Modal component is a simple way to present content above an enclosing view.\n *\n * See https://facebook.github.io/react-native/docs/modal.html\n */\n\n// In order to route onDismiss callbacks, we need to uniquely identifier each\n// <Modal> on screen. There can be different ones, either nested or as siblings.\n// We cannot pass the onDismiss callback to native as the view will be\n// destroyed before the callback is fired.\nlet uniqueModalIdentifier = 0;\n\ntype OrientationChangeEvent = SyntheticEvent<\n  $ReadOnly<{|\n    orientation: 'portrait' | 'landscape',\n  |}>,\n>;\n\ntype Props = $ReadOnly<{|\n  ...ViewProps,\n\n  /**\n   * The `animationType` prop controls how the modal animates.\n   *\n   * See https://facebook.github.io/react-native/docs/modal.html#animationtype\n   */\n  animationType?: ?('none' | 'slide' | 'fade'),\n\n  /**\n   * The `presentationStyle` prop controls how the modal appears.\n   *\n   * See https://facebook.github.io/react-native/docs/modal.html#presentationstyle\n   */\n  presentationStyle?: ?(\n    | 'fullScreen'\n    | 'pageSheet'\n    | 'formSheet'\n    | 'overFullScreen'\n  ),\n\n  /**\n   * The `transparent` prop determines whether your modal will fill the\n   * entire view.\n   *\n   * See https://facebook.github.io/react-native/docs/modal.html#transparent\n   */\n  transparent?: ?boolean,\n\n  /**\n   * The `hardwareAccelerated` prop controls whether to force hardware\n   * acceleration for the underlying window.\n   *\n   * See https://facebook.github.io/react-native/docs/modal.html#hardwareaccelerated\n   */\n  hardwareAccelerated?: ?boolean,\n\n  /**\n   * The `visible` prop determines whether your modal is visible.\n   *\n   * See https://facebook.github.io/react-native/docs/modal.html#visible\n   */\n  visible?: ?boolean,\n\n  /**\n   * The `onRequestClose` callback is called when the user taps the hardware\n   * back button on Android or the menu button on Apple TV.\n   *\n   * This is required on Apple TV and Android.\n   *\n   * See https://facebook.github.io/react-native/docs/modal.html#onrequestclose\n   */\n  onRequestClose?: ?(event?: SyntheticEvent<null>) => mixed,\n\n  /**\n   * The `onShow` prop allows passing a function that will be called once the\n   * modal has been shown.\n   *\n   * See https://facebook.github.io/react-native/docs/modal.html#onshow\n   */\n  onShow?: ?(event?: SyntheticEvent<null>) => mixed,\n\n  /**\n   * The `onDismiss` prop allows passing a function that will be called once\n   * the modal has been dismissed.\n   *\n   * See https://facebook.github.io/react-native/docs/modal.html#ondismiss\n   */\n  onDismiss?: ?() => mixed,\n\n  /**\n   * Deprecated. Use the `animationType` prop instead.\n   */\n  animated?: ?boolean,\n\n  /**\n   * The `supportedOrientations` prop allows the modal to be rotated to any of the specified orientations.\n   *\n   * See https://facebook.github.io/react-native/docs/modal.html#supportedorientations\n   */\n  supportedOrientations?: ?$ReadOnlyArray<\n    | 'portrait'\n    | 'portrait-upside-down'\n    | 'landscape'\n    | 'landscape-left'\n    | 'landscape-right',\n  >,\n\n  /**\n   * The `onOrientationChange` callback is called when the orientation changes while the modal is being displayed.\n   *\n   * See https://facebook.github.io/react-native/docs/modal.html#onorientationchange\n   */\n  onOrientationChange?: ?(event: OrientationChangeEvent) => mixed,\n|}>;\n\nclass Modal extends React.Component<Props> {\n  static defaultProps = {\n    visible: true,\n    hardwareAccelerated: false,\n  };\n\n  static contextTypes = {\n    rootTag: PropTypes.number,\n  };\n\n  _identifier: number;\n  _eventSubscription: ?EmitterSubscription;\n\n  constructor(props: Props) {\n    super(props);\n    Modal._confirmProps(props);\n    this._identifier = uniqueModalIdentifier++;\n  }\n\n  static childContextTypes = {\n    virtualizedList: PropTypes.object,\n  };\n\n  getChildContext() {\n    // Reset the context so VirtualizedList doesn't get confused by nesting\n    // in the React tree that doesn't reflect the native component heirarchy.\n    return {\n      virtualizedList: null,\n    };\n  }\n\n  componentDidMount() {\n    if (ModalEventEmitter) {\n      this._eventSubscription = ModalEventEmitter.addListener(\n        'modalDismissed',\n        event => {\n          if (event.modalID === this._identifier && this.props.onDismiss) {\n            this.props.onDismiss();\n          }\n        },\n      );\n    }\n  }\n\n  componentWillUnmount() {\n    if (this._eventSubscription) {\n      this._eventSubscription.remove();\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    Modal._confirmProps(nextProps);\n  }\n\n  static _confirmProps(props: Props) {\n    if (\n      props.presentationStyle &&\n      props.presentationStyle !== 'overFullScreen' &&\n      props.transparent\n    ) {\n      console.warn(\n        `Modal with '${\n          props.presentationStyle\n        }' presentation style and 'transparent' value is not supported.`,\n      );\n    }\n  }\n\n  render(): React.Node {\n    if (this.props.visible !== true) {\n      return null;\n    }\n\n    const containerStyles = {\n      backgroundColor: this.props.transparent ? 'transparent' : 'white',\n    };\n\n    let animationType = this.props.animationType;\n    if (!animationType) {\n      // manually setting default prop here to keep support for the deprecated 'animated' prop\n      animationType = 'none';\n      if (this.props.animated) {\n        animationType = 'slide';\n      }\n    }\n\n    let presentationStyle = this.props.presentationStyle;\n    if (!presentationStyle) {\n      presentationStyle = 'fullScreen';\n      if (this.props.transparent) {\n        presentationStyle = 'overFullScreen';\n      }\n    }\n\n    const innerChildren = __DEV__ ? (\n      <AppContainer rootTag={this.context.rootTag}>\n        {this.props.children}\n      </AppContainer>\n    ) : (\n      this.props.children\n    );\n\n    return (\n      <RCTModalHostView\n        animationType={animationType}\n        presentationStyle={presentationStyle}\n        transparent={this.props.transparent}\n        hardwareAccelerated={this.props.hardwareAccelerated}\n        onRequestClose={this.props.onRequestClose}\n        onShow={this.props.onShow}\n        identifier={this._identifier}\n        style={styles.modal}\n        onStartShouldSetResponder={this._shouldSetResponder}\n        supportedOrientations={this.props.supportedOrientations}\n        onOrientationChange={this.props.onOrientationChange}>\n        <View style={[styles.container, containerStyles]}>{innerChildren}</View>\n      </RCTModalHostView>\n    );\n  }\n\n  // We don't want any responder events bubbling out of the modal.\n  _shouldSetResponder(): boolean {\n    return true;\n  }\n}\n\nconst side = I18nManager.isRTL ? 'right' : 'left';\nconst styles = StyleSheet.create({\n  modal: {\n    position: 'absolute',\n  },\n  container: {\n    [side]: 0,\n    top: 0,\n    flex: 1,\n  },\n});\n\nmodule.exports = Modal;\n"]}