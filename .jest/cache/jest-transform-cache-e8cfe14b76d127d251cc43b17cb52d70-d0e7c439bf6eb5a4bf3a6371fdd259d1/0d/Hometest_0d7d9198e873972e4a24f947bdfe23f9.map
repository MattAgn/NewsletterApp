{"file":"/Users/matthieu/projects/learning/NewsletterApp/src/complex-version/pages/Home/__tests__/Home.test.tsx","mappings":";AAAA,sCAAsC;;;;;AAEtC,kCAAkC;AAClC,uBAAuB;AACvB,yBAAyB;AACzB,QAAQ;AAER,iFAAiF;AACjF,eAAe;AACf,4BAA4B;AAC5B,4BAA4B;AAC5B,8CAA8C;AAC9C,QAAQ;AAER,yEAAyE;AACzE,eAAe;AACf,4BAA4B;AAC5B,4BAA4B;AAC5B,8CAA8C;AAC9C,QAAQ;AACR,MAAM;AAEN,kDAA0B;AAC1B,+EAAiF;AACjF,4DAAmC;AAEnC,mEAA6E;AAC7E,kCAA+B;AAC/B,uDAAoD;AACpD,+DAA2D;AAE3D,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC3B,UAAU,CAAC,GAAG,EAAE;QACd,oBAAS,CAAC,KAAK,EAAE,CAAC;IACpB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;QACxE,QAAQ;QACR,oBAAS,CAAC,IAAI,CAAC,4BAAmB,EAAE,GAAG,CAAC,CAAC;QACzC,MAAM,IAAI,GAAG,wBAAU,CAAC,8BAAC,WAAI,OAAG,CAAC,CAAC;QAClC,qBAAqB;QACrB,MAAM,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,iBAAO,CAAC,gBAAgB,CAAC,CAAC;QACnE,MAAM,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,iBAAO,CAAC,aAAa,CAAC,CAAC;QAC7D,qBAAqB;QACrB,wCAAS,CAAC,UAAU,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;QACjD,wCAAS,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;QAChC,uCAAuC;QACvC,MAAM,cAAc,GAAG,MAAM,6CAAc,CAAC,GAAG,EAAE,CAC/C,IAAI,CAAC,WAAW,CAAC,iBAAO,CAAC,sBAAsB,CAAC,CACjD,CAAC;QACF,MAAM,CAAC,cAAc,CAAC,CAAC,UAAU,EAAE,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mDAAmD,EAAE,KAAK,IAAI,EAAE;QACjE,QAAQ;QACR,oBAAS,CAAC,IAAI,CAAC,4BAAmB,EAAE,GAAG,CAAC,CAAC;QACzC,MAAM,IAAI,GAAG,wBAAU,CAAC,8BAAC,WAAI,OAAG,CAAC,CAAC;QAClC,qBAAqB;QACrB,MAAM,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,iBAAO,CAAC,gBAAgB,CAAC,CAAC;QACnE,MAAM,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,iBAAO,CAAC,aAAa,CAAC,CAAC;QAC7D,qBAAqB;QACrB,wCAAS,CAAC,UAAU,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;QACjD,wCAAS,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;QAChC,uCAAuC;QACvC,MAAM,YAAY,GAAG,MAAM,6CAAc,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,iBAAO,CAAC,UAAU,CAAC,CAAC,CAAC;QACtF,MAAM,CAAC,YAAY,CAAC,CAAC,UAAU,EAAE,CAAC;IACpC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/matthieu/projects/learning/NewsletterApp/src/complex-version/pages/Home/__tests__/Home.test.tsx"],"sourcesContent":["// import fetchMock from 'fetch-mock';\n\n// describe('[Page] Home', () => {\n//   beforeEach(() => {\n//     fetchMock.reset();\n//   });\n\n//   it('should display succesful message on successful subscribe', async () => {\n//     // SETUP\n//     // WHAT THE USER SEES\n//     // WHAT THE USER DOES\n//     // WHAT FEEDBACK THE USER SHOULD EXPECT\n//   });\n\n//   it('should display error message on failed subscribe', async () => {\n//     // SETUP\n//     // WHAT THE USER SEES\n//     // WHAT THE USER DOES\n//     // WHAT FEEDBACK THE USER SHOULD EXPECT\n//   });\n// });\n\nimport React from 'react';\nimport { fireEvent, waitForElement, render } from 'react-native-testing-library';\nimport fetchMock from 'fetch-mock';\n\nimport { NEWSLETTER_ENDPOINT } from '../../../../complex-version/api/config';\nimport { Home } from '../Home';\nimport { wording } from '../../../../utils/wording';\nimport { renderPage } from '../../../../utils/test.helper';\n\ndescribe('[Page] Home', () => {\n  beforeEach(() => {\n    fetchMock.reset();\n  });\n\n  it('should display succesful message on successful subscribe', async () => {\n    // Setup\n    fetchMock.post(NEWSLETTER_ENDPOINT, 200);\n    const page = renderPage(<Home />);\n    // What the user sees\n    const EmailInput = page.getByPlaceholder(wording.emailPlaceholder);\n    const ValidateButton = page.getByText(wording.validateEmail);\n    // What the user does\n    fireEvent.changeText(EmailInput, 'hello@bam.co');\n    fireEvent.press(ValidateButton);\n    // What feedback the user should expect\n    const SuccessMessage = await waitForElement(() =>\n      page.queryByText(wording.subscriptionSuccessful)\n    );\n    expect(SuccessMessage).toBeTruthy();\n  });\n\n  it('should display errror message on failed subscribe', async () => {\n    // Setup\n    fetchMock.post(NEWSLETTER_ENDPOINT, 400);\n    const page = renderPage(<Home />);\n    // What the user sees\n    const EmailInput = page.getByPlaceholder(wording.emailPlaceholder);\n    const ValidateButton = page.getByText(wording.validateEmail);\n    // What the user does\n    fireEvent.changeText(EmailInput, 'hello@bam.co');\n    fireEvent.press(ValidateButton);\n    // What feedback the user should expect\n    const ErrorMessage = await waitForElement(() => page.queryByText(wording.basicError));\n    expect(ErrorMessage).toBeTruthy();\n  });\n});\n"],"version":3}