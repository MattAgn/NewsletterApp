{"version":3,"sources":["YellowBoxWarning.js"],"names":["YellowBoxCategory","require","YellowBoxSymbolication","parseErrorStack","YellowBoxWarning","args","framesToPop","parse","stack","createStack","message","symbolicated","error","status","callback","delete","symbolicate","aborted","updateStatus","then","abort","Error","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst YellowBoxCategory = require('./YellowBoxCategory');\nconst YellowBoxSymbolication = require('./YellowBoxSymbolication');\n\nconst parseErrorStack = require('../../Core/Devtools/parseErrorStack');\n\nimport type {Category, Message} from './YellowBoxCategory';\nimport type {Stack} from './YellowBoxSymbolication';\n\nexport type SymbolicationRequest = $ReadOnly<{|\n  abort: () => void,\n|}>;\n\nclass YellowBoxWarning {\n  static parse({\n    args,\n    framesToPop,\n  }: $ReadOnly<{|\n    args: $ReadOnlyArray<mixed>,\n    framesToPop: number,\n  |}>): {|\n    category: Category,\n    message: Message,\n    stack: Stack,\n  |} {\n    return {\n      ...YellowBoxCategory.parse(args),\n      stack: createStack({framesToPop: framesToPop + 1}),\n    };\n  }\n\n  message: Message;\n  stack: Stack;\n  symbolicated:\n    | $ReadOnly<{|error: null, stack: null, status: 'NONE'|}>\n    | $ReadOnly<{|error: null, stack: null, status: 'PENDING'|}>\n    | $ReadOnly<{|error: null, stack: Stack, status: 'COMPLETE'|}>\n    | $ReadOnly<{|error: Error, stack: null, status: 'FAILED'|}> = {\n    error: null,\n    stack: null,\n    status: 'NONE',\n  };\n\n  constructor(message: Message, stack: Stack) {\n    this.message = message;\n    this.stack = stack;\n  }\n\n  getAvailableStack(): Stack {\n    return this.symbolicated.status === 'COMPLETE'\n      ? this.symbolicated.stack\n      : this.stack;\n  }\n\n  retrySymbolicate(callback: () => void): SymbolicationRequest {\n    YellowBoxSymbolication.delete(this.stack);\n    return this.symbolicate(callback);\n  }\n\n  symbolicate(callback: () => void): SymbolicationRequest {\n    let aborted = false;\n\n    if (this.symbolicated.status !== 'COMPLETE') {\n      const updateStatus = (error: ?Error, stack: ?Stack): void => {\n        if (error != null) {\n          this.symbolicated = {error, stack: null, status: 'FAILED'};\n        } else if (stack != null) {\n          this.symbolicated = {error: null, stack, status: 'COMPLETE'};\n        } else {\n          this.symbolicated = {error: null, stack: null, status: 'PENDING'};\n        }\n        if (!aborted) {\n          callback();\n        }\n      };\n\n      updateStatus(null, null);\n      YellowBoxSymbolication.symbolicate(this.stack).then(\n        stack => {\n          updateStatus(null, stack);\n        },\n        error => {\n          updateStatus(error, null);\n        },\n      );\n    }\n\n    return {\n      abort(): void {\n        aborted = true;\n      },\n    };\n  }\n}\n\nfunction createStack({framesToPop}: $ReadOnly<{|framesToPop: number|}>): Stack {\n  const error: any = new Error();\n  error.framesToPop = framesToPop + 1;\n  return parseErrorStack(error);\n}\n\nmodule.exports = YellowBoxWarning;\n"]}