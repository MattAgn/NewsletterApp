{"version":3,"sources":["EventSubscriptionVendor.js"],"names":["invariant","require","EventSubscriptionVendor","_subscriptionsForType","_currentSubscription","eventType","subscription","subscriber","key","length","push","undefined","subscriptionsForType","module","exports"],"mappings":"AAUA;;;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;IAQMC,uB;AAIJ,qCAAc;AAAA;AACZ,SAAKC,qBAAL,GAA6B,EAA7B;AACA,SAAKC,oBAAL,GAA4B,IAA5B;AACD;;;;oCASCC,S,EACAC,Y,EACmB;AACnBN,MAAAA,SAAS,CACPM,YAAY,CAACC,UAAb,KAA4B,IADrB,EAEP,wDAFO,CAAT;;AAIA,UAAI,CAAC,KAAKJ,qBAAL,CAA2BE,SAA3B,CAAL,EAA4C;AAC1C,aAAKF,qBAAL,CAA2BE,SAA3B,IAAwC,EAAxC;AACD;;AACD,UAAMG,GAAG,GAAG,KAAKL,qBAAL,CAA2BE,SAA3B,EAAsCI,MAAlD;;AACA,WAAKN,qBAAL,CAA2BE,SAA3B,EAAsCK,IAAtC,CAA2CJ,YAA3C;;AACAA,MAAAA,YAAY,CAACD,SAAb,GAAyBA,SAAzB;AACAC,MAAAA,YAAY,CAACE,GAAb,GAAmBA,GAAnB;AACA,aAAOF,YAAP;AACD;;;2CAQsBD,S,EAAoB;AACzC,UAAIA,SAAS,KAAKM,SAAlB,EAA6B;AAC3B,aAAKR,qBAAL,GAA6B,EAA7B;AACD,OAFD,MAEO;AACL,eAAO,KAAKA,qBAAL,CAA2BE,SAA3B,CAAP;AACD;AACF;;;uCAQkBC,Y,EAAsB;AACvC,UAAMD,SAAS,GAAGC,YAAY,CAACD,SAA/B;AACA,UAAMG,GAAG,GAAGF,YAAY,CAACE,GAAzB;AAEA,UAAMI,oBAAoB,GAAG,KAAKT,qBAAL,CAA2BE,SAA3B,CAA7B;;AACA,UAAIO,oBAAJ,EAA0B;AACxB,eAAOA,oBAAoB,CAACJ,GAAD,CAA3B;AACD;AACF;;;4CAcuBH,S,EAAyC;AAC/D,aAAO,KAAKF,qBAAL,CAA2BE,SAA3B,CAAP;AACD;;;;;AAGHQ,MAAM,CAACC,OAAP,GAAiBZ,uBAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst invariant = require('invariant');\n\nimport type EventSubscription from './EventSubscription';\n\n/**\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\n * subscribed to a particular event type.\n */\nclass EventSubscriptionVendor {\n  _subscriptionsForType: Object;\n  _currentSubscription: ?EventSubscription;\n\n  constructor() {\n    this._subscriptionsForType = {};\n    this._currentSubscription = null;\n  }\n\n  /**\n   * Adds a subscription keyed by an event type.\n   *\n   * @param {string} eventType\n   * @param {EventSubscription} subscription\n   */\n  addSubscription(\n    eventType: string,\n    subscription: EventSubscription,\n  ): EventSubscription {\n    invariant(\n      subscription.subscriber === this,\n      'The subscriber of the subscription is incorrectly set.',\n    );\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n    const key = this._subscriptionsForType[eventType].length;\n    this._subscriptionsForType[eventType].push(subscription);\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  }\n\n  /**\n   * Removes a bulk set of the subscriptions.\n   *\n   * @param {?string} eventType - Optional name of the event type whose\n   *   registered supscriptions to remove, if null remove all subscriptions.\n   */\n  removeAllSubscriptions(eventType: ?string) {\n    if (eventType === undefined) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  }\n\n  /**\n   * Removes a specific subscription. Instead of calling this function, call\n   * `subscription.remove()` directly.\n   *\n   * @param {object} subscription\n   */\n  removeSubscription(subscription: Object) {\n    const eventType = subscription.eventType;\n    const key = subscription.key;\n\n    const subscriptionsForType = this._subscriptionsForType[eventType];\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  }\n\n  /**\n   * Returns the array of subscriptions that are currently registered for the\n   * given event type.\n   *\n   * Note: This array can be potentially sparse as subscriptions are deleted\n   * from it when they are removed.\n   *\n   * TODO: This returns a nullable array. wat?\n   *\n   * @param {string} eventType\n   * @returns {?array}\n   */\n  getSubscriptionsForType(eventType: string): ?[EventSubscription] {\n    return this._subscriptionsForType[eventType];\n  }\n}\n\nmodule.exports = EventSubscriptionVendor;\n"]}