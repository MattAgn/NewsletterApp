6061e63b84e226a30ce05c0121734f5a
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var invariant = require('invariant');

var EventSubscriptionVendor = function () {
  function EventSubscriptionVendor() {
    (0, _classCallCheck2.default)(this, EventSubscriptionVendor);
    this._subscriptionsForType = {};
    this._currentSubscription = null;
  }

  (0, _createClass2.default)(EventSubscriptionVendor, [{
    key: "addSubscription",
    value: function addSubscription(eventType, subscription) {
      invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');

      if (!this._subscriptionsForType[eventType]) {
        this._subscriptionsForType[eventType] = [];
      }

      var key = this._subscriptionsForType[eventType].length;

      this._subscriptionsForType[eventType].push(subscription);

      subscription.eventType = eventType;
      subscription.key = key;
      return subscription;
    }
  }, {
    key: "removeAllSubscriptions",
    value: function removeAllSubscriptions(eventType) {
      if (eventType === undefined) {
        this._subscriptionsForType = {};
      } else {
        delete this._subscriptionsForType[eventType];
      }
    }
  }, {
    key: "removeSubscription",
    value: function removeSubscription(subscription) {
      var eventType = subscription.eventType;
      var key = subscription.key;
      var subscriptionsForType = this._subscriptionsForType[eventType];

      if (subscriptionsForType) {
        delete subscriptionsForType[key];
      }
    }
  }, {
    key: "getSubscriptionsForType",
    value: function getSubscriptionsForType(eventType) {
      return this._subscriptionsForType[eventType];
    }
  }]);
  return EventSubscriptionVendor;
}();

module.exports = EventSubscriptionVendor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkV2ZW50U3Vic2NyaXB0aW9uVmVuZG9yLmpzIl0sIm5hbWVzIjpbImludmFyaWFudCIsInJlcXVpcmUiLCJFdmVudFN1YnNjcmlwdGlvblZlbmRvciIsIl9zdWJzY3JpcHRpb25zRm9yVHlwZSIsIl9jdXJyZW50U3Vic2NyaXB0aW9uIiwiZXZlbnRUeXBlIiwic3Vic2NyaXB0aW9uIiwic3Vic2NyaWJlciIsImtleSIsImxlbmd0aCIsInB1c2giLCJ1bmRlZmluZWQiLCJzdWJzY3JpcHRpb25zRm9yVHlwZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVVBOzs7Ozs7OztBQUVBLElBQU1BLFNBQVMsR0FBR0MsT0FBTyxDQUFDLFdBQUQsQ0FBekI7O0lBUU1DLHVCO0FBSUoscUNBQWM7QUFBQTtBQUNaLFNBQUtDLHFCQUFMLEdBQTZCLEVBQTdCO0FBQ0EsU0FBS0Msb0JBQUwsR0FBNEIsSUFBNUI7QUFDRDs7OztvQ0FTQ0MsUyxFQUNBQyxZLEVBQ21CO0FBQ25CTixNQUFBQSxTQUFTLENBQ1BNLFlBQVksQ0FBQ0MsVUFBYixLQUE0QixJQURyQixFQUVQLHdEQUZPLENBQVQ7O0FBSUEsVUFBSSxDQUFDLEtBQUtKLHFCQUFMLENBQTJCRSxTQUEzQixDQUFMLEVBQTRDO0FBQzFDLGFBQUtGLHFCQUFMLENBQTJCRSxTQUEzQixJQUF3QyxFQUF4QztBQUNEOztBQUNELFVBQU1HLEdBQUcsR0FBRyxLQUFLTCxxQkFBTCxDQUEyQkUsU0FBM0IsRUFBc0NJLE1BQWxEOztBQUNBLFdBQUtOLHFCQUFMLENBQTJCRSxTQUEzQixFQUFzQ0ssSUFBdEMsQ0FBMkNKLFlBQTNDOztBQUNBQSxNQUFBQSxZQUFZLENBQUNELFNBQWIsR0FBeUJBLFNBQXpCO0FBQ0FDLE1BQUFBLFlBQVksQ0FBQ0UsR0FBYixHQUFtQkEsR0FBbkI7QUFDQSxhQUFPRixZQUFQO0FBQ0Q7OzsyQ0FRc0JELFMsRUFBb0I7QUFDekMsVUFBSUEsU0FBUyxLQUFLTSxTQUFsQixFQUE2QjtBQUMzQixhQUFLUixxQkFBTCxHQUE2QixFQUE3QjtBQUNELE9BRkQsTUFFTztBQUNMLGVBQU8sS0FBS0EscUJBQUwsQ0FBMkJFLFNBQTNCLENBQVA7QUFDRDtBQUNGOzs7dUNBUWtCQyxZLEVBQXNCO0FBQ3ZDLFVBQU1ELFNBQVMsR0FBR0MsWUFBWSxDQUFDRCxTQUEvQjtBQUNBLFVBQU1HLEdBQUcsR0FBR0YsWUFBWSxDQUFDRSxHQUF6QjtBQUVBLFVBQU1JLG9CQUFvQixHQUFHLEtBQUtULHFCQUFMLENBQTJCRSxTQUEzQixDQUE3Qjs7QUFDQSxVQUFJTyxvQkFBSixFQUEwQjtBQUN4QixlQUFPQSxvQkFBb0IsQ0FBQ0osR0FBRCxDQUEzQjtBQUNEO0FBQ0Y7Ozs0Q0FjdUJILFMsRUFBeUM7QUFDL0QsYUFBTyxLQUFLRixxQkFBTCxDQUEyQkUsU0FBM0IsQ0FBUDtBQUNEOzs7OztBQUdIUSxNQUFNLENBQUNDLE9BQVAsR0FBaUJaLHVCQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG5pbXBvcnQgdHlwZSBFdmVudFN1YnNjcmlwdGlvbiBmcm9tICcuL0V2ZW50U3Vic2NyaXB0aW9uJztcblxuLyoqXG4gKiBFdmVudFN1YnNjcmlwdGlvblZlbmRvciBzdG9yZXMgYSBzZXQgb2YgRXZlbnRTdWJzY3JpcHRpb25zIHRoYXQgYXJlXG4gKiBzdWJzY3JpYmVkIHRvIGEgcGFydGljdWxhciBldmVudCB0eXBlLlxuICovXG5jbGFzcyBFdmVudFN1YnNjcmlwdGlvblZlbmRvciB7XG4gIF9zdWJzY3JpcHRpb25zRm9yVHlwZTogT2JqZWN0O1xuICBfY3VycmVudFN1YnNjcmlwdGlvbjogP0V2ZW50U3Vic2NyaXB0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3N1YnNjcmlwdGlvbnNGb3JUeXBlID0ge307XG4gICAgdGhpcy5fY3VycmVudFN1YnNjcmlwdGlvbiA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIHN1YnNjcmlwdGlvbiBrZXllZCBieSBhbiBldmVudCB0eXBlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlXG4gICAqIEBwYXJhbSB7RXZlbnRTdWJzY3JpcHRpb259IHN1YnNjcmlwdGlvblxuICAgKi9cbiAgYWRkU3Vic2NyaXB0aW9uKFxuICAgIGV2ZW50VHlwZTogc3RyaW5nLFxuICAgIHN1YnNjcmlwdGlvbjogRXZlbnRTdWJzY3JpcHRpb24sXG4gICk6IEV2ZW50U3Vic2NyaXB0aW9uIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBzdWJzY3JpcHRpb24uc3Vic2NyaWJlciA9PT0gdGhpcyxcbiAgICAgICdUaGUgc3Vic2NyaWJlciBvZiB0aGUgc3Vic2NyaXB0aW9uIGlzIGluY29ycmVjdGx5IHNldC4nLFxuICAgICk7XG4gICAgaWYgKCF0aGlzLl9zdWJzY3JpcHRpb25zRm9yVHlwZVtldmVudFR5cGVdKSB7XG4gICAgICB0aGlzLl9zdWJzY3JpcHRpb25zRm9yVHlwZVtldmVudFR5cGVdID0gW107XG4gICAgfVxuICAgIGNvbnN0IGtleSA9IHRoaXMuX3N1YnNjcmlwdGlvbnNGb3JUeXBlW2V2ZW50VHlwZV0ubGVuZ3RoO1xuICAgIHRoaXMuX3N1YnNjcmlwdGlvbnNGb3JUeXBlW2V2ZW50VHlwZV0ucHVzaChzdWJzY3JpcHRpb24pO1xuICAgIHN1YnNjcmlwdGlvbi5ldmVudFR5cGUgPSBldmVudFR5cGU7XG4gICAgc3Vic2NyaXB0aW9uLmtleSA9IGtleTtcbiAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYSBidWxrIHNldCBvZiB0aGUgc3Vic2NyaXB0aW9ucy5cbiAgICpcbiAgICogQHBhcmFtIHs/c3RyaW5nfSBldmVudFR5cGUgLSBPcHRpb25hbCBuYW1lIG9mIHRoZSBldmVudCB0eXBlIHdob3NlXG4gICAqICAgcmVnaXN0ZXJlZCBzdXBzY3JpcHRpb25zIHRvIHJlbW92ZSwgaWYgbnVsbCByZW1vdmUgYWxsIHN1YnNjcmlwdGlvbnMuXG4gICAqL1xuICByZW1vdmVBbGxTdWJzY3JpcHRpb25zKGV2ZW50VHlwZTogP3N0cmluZykge1xuICAgIGlmIChldmVudFR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5fc3Vic2NyaXB0aW9uc0ZvclR5cGUgPSB7fTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHRoaXMuX3N1YnNjcmlwdGlvbnNGb3JUeXBlW2V2ZW50VHlwZV07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYSBzcGVjaWZpYyBzdWJzY3JpcHRpb24uIEluc3RlYWQgb2YgY2FsbGluZyB0aGlzIGZ1bmN0aW9uLCBjYWxsXG4gICAqIGBzdWJzY3JpcHRpb24ucmVtb3ZlKClgIGRpcmVjdGx5LlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gc3Vic2NyaXB0aW9uXG4gICAqL1xuICByZW1vdmVTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uOiBPYmplY3QpIHtcbiAgICBjb25zdCBldmVudFR5cGUgPSBzdWJzY3JpcHRpb24uZXZlbnRUeXBlO1xuICAgIGNvbnN0IGtleSA9IHN1YnNjcmlwdGlvbi5rZXk7XG5cbiAgICBjb25zdCBzdWJzY3JpcHRpb25zRm9yVHlwZSA9IHRoaXMuX3N1YnNjcmlwdGlvbnNGb3JUeXBlW2V2ZW50VHlwZV07XG4gICAgaWYgKHN1YnNjcmlwdGlvbnNGb3JUeXBlKSB7XG4gICAgICBkZWxldGUgc3Vic2NyaXB0aW9uc0ZvclR5cGVba2V5XTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3Vic2NyaXB0aW9ucyB0aGF0IGFyZSBjdXJyZW50bHkgcmVnaXN0ZXJlZCBmb3IgdGhlXG4gICAqIGdpdmVuIGV2ZW50IHR5cGUuXG4gICAqXG4gICAqIE5vdGU6IFRoaXMgYXJyYXkgY2FuIGJlIHBvdGVudGlhbGx5IHNwYXJzZSBhcyBzdWJzY3JpcHRpb25zIGFyZSBkZWxldGVkXG4gICAqIGZyb20gaXQgd2hlbiB0aGV5IGFyZSByZW1vdmVkLlxuICAgKlxuICAgKiBUT0RPOiBUaGlzIHJldHVybnMgYSBudWxsYWJsZSBhcnJheS4gd2F0P1xuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnRUeXBlXG4gICAqIEByZXR1cm5zIHs/YXJyYXl9XG4gICAqL1xuICBnZXRTdWJzY3JpcHRpb25zRm9yVHlwZShldmVudFR5cGU6IHN0cmluZyk6ID9bRXZlbnRTdWJzY3JpcHRpb25dIHtcbiAgICByZXR1cm4gdGhpcy5fc3Vic2NyaXB0aW9uc0ZvclR5cGVbZXZlbnRUeXBlXTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50U3Vic2NyaXB0aW9uVmVuZG9yO1xuIl19