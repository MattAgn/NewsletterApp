4ee524315b4d2196a3c30220dbc4a624
"use strict";

function _(message, opts) {
  return (opts && opts.context ? opts.context : "Value") + " " + message + ".";
}

function type(V) {
  if (V === null) {
    return "Null";
  }

  switch (typeof V) {
    case "undefined":
      return "Undefined";

    case "boolean":
      return "Boolean";

    case "number":
      return "Number";

    case "string":
      return "String";

    case "symbol":
      return "Symbol";

    case "object":
    case "function":
    default:
      return "Object";
  }
}

function evenRound(x) {
  if (x > 0 && x % 1 === +0.5 && (x & 1) === 0 || x < 0 && x % 1 === -0.5 && (x & 1) === 1) {
    return censorNegativeZero(Math.floor(x));
  }

  return censorNegativeZero(Math.round(x));
}

function integerPart(n) {
  return censorNegativeZero(Math.trunc(n));
}

function sign(x) {
  return x < 0 ? -1 : 1;
}

function modulo(x, y) {
  var signMightNotMatch = x % y;

  if (sign(y) !== sign(signMightNotMatch)) {
    return signMightNotMatch + y;
  }

  return signMightNotMatch;
}

function censorNegativeZero(x) {
  return x === 0 ? 0 : x;
}

function createIntegerConversion(bitLength, typeOpts) {
  var isSigned = !typeOpts.unsigned;
  var lowerBound;
  var upperBound;

  if (bitLength === 64) {
    upperBound = Math.pow(2, 53) - 1;
    lowerBound = !isSigned ? 0 : -Math.pow(2, 53) + 1;
  } else if (!isSigned) {
    lowerBound = 0;
    upperBound = Math.pow(2, bitLength) - 1;
  } else {
    lowerBound = -Math.pow(2, bitLength - 1);
    upperBound = Math.pow(2, bitLength - 1) - 1;
  }

  var twoToTheBitLength = Math.pow(2, bitLength);
  var twoToOneLessThanTheBitLength = Math.pow(2, bitLength - 1);
  return function (V, opts) {
    if (opts === undefined) {
      opts = {};
    }

    var x = +V;
    x = censorNegativeZero(x);

    if (opts.enforceRange) {
      if (!Number.isFinite(x)) {
        throw new TypeError(_("is not a finite number", opts));
      }

      x = integerPart(x);

      if (x < lowerBound || x > upperBound) {
        throw new TypeError(_("is outside the accepted range of " + lowerBound + " to " + upperBound + ", inclusive", opts));
      }

      return x;
    }

    if (!Number.isNaN(x) && opts.clamp) {
      x = Math.min(Math.max(x, lowerBound), upperBound);
      x = evenRound(x);
      return x;
    }

    if (!Number.isFinite(x) || x === 0) {
      return 0;
    }

    x = integerPart(x);

    if (x >= lowerBound && x <= upperBound) {
      return x;
    }

    x = modulo(x, twoToTheBitLength);

    if (isSigned && x >= twoToOneLessThanTheBitLength) {
      return x - twoToTheBitLength;
    }

    return x;
  };
}

exports.any = function (V) {
  return V;
};

exports.void = function () {
  return undefined;
};

exports.boolean = function (val) {
  return !!val;
};

exports.byte = createIntegerConversion(8, {
  unsigned: false
});
exports.octet = createIntegerConversion(8, {
  unsigned: true
});
exports.short = createIntegerConversion(16, {
  unsigned: false
});
exports["unsigned short"] = createIntegerConversion(16, {
  unsigned: true
});
exports.long = createIntegerConversion(32, {
  unsigned: false
});
exports["unsigned long"] = createIntegerConversion(32, {
  unsigned: true
});
exports["long long"] = createIntegerConversion(64, {
  unsigned: false
});
exports["unsigned long long"] = createIntegerConversion(64, {
  unsigned: true
});

exports.double = function (V, opts) {
  var x = +V;

  if (!Number.isFinite(x)) {
    throw new TypeError(_("is not a finite floating-point value", opts));
  }

  return x;
};

exports["unrestricted double"] = function (V) {
  var x = +V;
  return x;
};

exports.float = function (V, opts) {
  var x = +V;

  if (!Number.isFinite(x)) {
    throw new TypeError(_("is not a finite floating-point value", opts));
  }

  if (Object.is(x, -0)) {
    return x;
  }

  var y = Math.fround(x);

  if (!Number.isFinite(y)) {
    throw new TypeError(_("is outside the range of a single-precision floating-point value", opts));
  }

  return y;
};

exports["unrestricted float"] = function (V) {
  var x = +V;

  if (isNaN(x)) {
    return x;
  }

  if (Object.is(x, -0)) {
    return x;
  }

  return Math.fround(x);
};

exports.DOMString = function (V, opts) {
  if (opts === undefined) {
    opts = {};
  }

  if (opts.treatNullAsEmptyString && V === null) {
    return "";
  }

  if (typeof V === "symbol") {
    throw new TypeError(_("is a symbol, which cannot be converted to a string", opts));
  }

  return String(V);
};

exports.ByteString = function (V, opts) {
  var x = exports.DOMString(V, opts);
  var c;

  for (var i = 0; (c = x.codePointAt(i)) !== undefined; ++i) {
    if (c > 255) {
      throw new TypeError(_("is not a valid ByteString", opts));
    }
  }

  return x;
};

exports.USVString = function (V, opts) {
  var S = exports.DOMString(V, opts);
  var n = S.length;
  var U = [];

  for (var i = 0; i < n; ++i) {
    var c = S.charCodeAt(i);

    if (c < 0xD800 || c > 0xDFFF) {
      U.push(String.fromCodePoint(c));
    } else if (0xDC00 <= c && c <= 0xDFFF) {
      U.push(String.fromCodePoint(0xFFFD));
    } else if (i === n - 1) {
      U.push(String.fromCodePoint(0xFFFD));
    } else {
      var d = S.charCodeAt(i + 1);

      if (0xDC00 <= d && d <= 0xDFFF) {
        var a = c & 0x3FF;
        var b = d & 0x3FF;
        U.push(String.fromCodePoint((2 << 15) + (2 << 9) * a + b));
        ++i;
      } else {
        U.push(String.fromCodePoint(0xFFFD));
      }
    }
  }

  return U.join("");
};

exports.object = function (V, opts) {
  if (type(V) !== "Object") {
    throw new TypeError(_("is not an object", opts));
  }

  return V;
};

function convertCallbackFunction(V, opts) {
  if (typeof V !== "function") {
    throw new TypeError(_("is not a function", opts));
  }

  return V;
}

[Error, ArrayBuffer, DataView, Int8Array, Int16Array, Int32Array, Uint8Array, Uint16Array, Uint32Array, Uint8ClampedArray, Float32Array, Float64Array].forEach(function (func) {
  var name = func.name;
  var article = /^[AEIOU]/.test(name) ? "an" : "a";

  exports[name] = function (V, opts) {
    if (!(V instanceof func)) {
      throw new TypeError(_("is not " + article + " " + name + " object", opts));
    }

    return V;
  };
});

exports.ArrayBufferView = function (V, opts) {
  if (!ArrayBuffer.isView(V)) {
    throw new TypeError(_("is not a view on an ArrayBuffer object", opts));
  }

  return V;
};

exports.BufferSource = function (V, opts) {
  if (!(ArrayBuffer.isView(V) || V instanceof ArrayBuffer)) {
    throw new TypeError(_("is not an ArrayBuffer object or a view on one", opts));
  }

  return V;
};

exports.DOMTimeStamp = exports["unsigned long long"];
exports.Function = convertCallbackFunction;
exports.VoidFunction = convertCallbackFunction;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,