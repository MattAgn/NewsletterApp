035ee9343b0dba2a690f00381f27c137
"use strict";

var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var subscribeToResult_1 = require("../util/subscribeToResult");

var OuterSubscriber_1 = require("../OuterSubscriber");

var InnerSubscriber_1 = require("../InnerSubscriber");

var map_1 = require("./map");

var from_1 = require("../observable/from");

function mergeMap(project, resultSelector, concurrent) {
  if (concurrent === void 0) {
    concurrent = Number.POSITIVE_INFINITY;
  }

  if (typeof resultSelector === 'function') {
    return function (source) {
      return source.pipe(mergeMap(function (a, i) {
        return from_1.from(project(a, i)).pipe(map_1.map(function (b, ii) {
          return resultSelector(a, b, i, ii);
        }));
      }, concurrent));
    };
  } else if (typeof resultSelector === 'number') {
    concurrent = resultSelector;
  }

  return function (source) {
    return source.lift(new MergeMapOperator(project, concurrent));
  };
}

exports.mergeMap = mergeMap;

var MergeMapOperator = function () {
  function MergeMapOperator(project, concurrent) {
    if (concurrent === void 0) {
      concurrent = Number.POSITIVE_INFINITY;
    }

    this.project = project;
    this.concurrent = concurrent;
  }

  MergeMapOperator.prototype.call = function (observer, source) {
    return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));
  };

  return MergeMapOperator;
}();

exports.MergeMapOperator = MergeMapOperator;

var MergeMapSubscriber = function (_super) {
  __extends(MergeMapSubscriber, _super);

  function MergeMapSubscriber(destination, project, concurrent) {
    if (concurrent === void 0) {
      concurrent = Number.POSITIVE_INFINITY;
    }

    var _this = _super.call(this, destination) || this;

    _this.project = project;
    _this.concurrent = concurrent;
    _this.hasCompleted = false;
    _this.buffer = [];
    _this.active = 0;
    _this.index = 0;
    return _this;
  }

  MergeMapSubscriber.prototype._next = function (value) {
    if (this.active < this.concurrent) {
      this._tryNext(value);
    } else {
      this.buffer.push(value);
    }
  };

  MergeMapSubscriber.prototype._tryNext = function (value) {
    var result;
    var index = this.index++;

    try {
      result = this.project(value, index);
    } catch (err) {
      this.destination.error(err);
      return;
    }

    this.active++;

    this._innerSub(result, value, index);
  };

  MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
    var innerSubscriber = new InnerSubscriber_1.InnerSubscriber(this, undefined, undefined);
    var destination = this.destination;
    destination.add(innerSubscriber);
    subscribeToResult_1.subscribeToResult(this, ish, value, index, innerSubscriber);
  };

  MergeMapSubscriber.prototype._complete = function () {
    this.hasCompleted = true;

    if (this.active === 0 && this.buffer.length === 0) {
      this.destination.complete();
    }

    this.unsubscribe();
  };

  MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    this.destination.next(innerValue);
  };

  MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
    var buffer = this.buffer;
    this.remove(innerSub);
    this.active--;

    if (buffer.length > 0) {
      this._next(buffer.shift());
    } else if (this.active === 0 && this.hasCompleted) {
      this.destination.complete();
    }
  };

  return MergeMapSubscriber;
}(OuterSubscriber_1.OuterSubscriber);

exports.MergeMapSubscriber = MergeMapSubscriber;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VNYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFJQSxJQUFBLG1CQUFBLEdBQUEsT0FBQSxDQUFBLDJCQUFBLENBQUE7O0FBQ0EsSUFBQSxpQkFBQSxHQUFBLE9BQUEsQ0FBQSxvQkFBQSxDQUFBOztBQUNBLElBQUEsaUJBQUEsR0FBQSxPQUFBLENBQUEsb0JBQUEsQ0FBQTs7QUFFQSxJQUFBLEtBQUEsR0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBOztBQUNBLElBQUEsTUFBQSxHQUFBLE9BQUEsQ0FBQSxvQkFBQSxDQUFBOztBQWtFQSxTQUFnQixRQUFoQixDQUNFLE9BREYsRUFFRSxjQUZGLEVBR0UsVUFIRixFQUcrQztBQUE3QyxNQUFBLFVBQUEsS0FBQSxLQUFBLENBQUEsRUFBQTtBQUFBLElBQUEsVUFBQSxHQUFxQixNQUFNLENBQUMsaUJBQTVCO0FBQTZDOztBQUU3QyxNQUFJLE9BQU8sY0FBUCxLQUEwQixVQUE5QixFQUEwQztBQUV4QyxXQUFPLFVBQUMsTUFBRCxFQUFzQjtBQUFLLGFBQUEsTUFBTSxDQUFDLElBQVAsQ0FDaEMsUUFBUSxDQUFDLFVBQUMsQ0FBRCxFQUFJLENBQUosRUFBSztBQUFLLGVBQUEsTUFBQSxDQUFBLElBQUEsQ0FBSyxPQUFPLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBWixFQUFvQixJQUFwQixDQUNqQixLQUFBLENBQUEsR0FBQSxDQUFJLFVBQUMsQ0FBRCxFQUFTLEVBQVQsRUFBbUI7QUFBSyxpQkFBQSxjQUFjLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQWQsRUFBYyxDQUFkO0FBRFgsU0FDakIsQ0FEaUIsQ0FBQTtBQUVsQixPQUZPLEVBRHdCLFVBQ3hCLENBRHdCLENBQUE7QUFJakMsS0FKRDtBQUtELEdBUEQsTUFPTyxJQUFJLE9BQU8sY0FBUCxLQUEwQixRQUE5QixFQUF3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