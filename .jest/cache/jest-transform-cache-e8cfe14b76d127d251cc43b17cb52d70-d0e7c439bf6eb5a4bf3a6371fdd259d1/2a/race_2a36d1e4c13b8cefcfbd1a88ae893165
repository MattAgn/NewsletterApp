e0c66cc7a08469182360e8dad2b750f0
"use strict";

var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var isArray_1 = require("../util/isArray");

var fromArray_1 = require("./fromArray");

var OuterSubscriber_1 = require("../OuterSubscriber");

var subscribeToResult_1 = require("../util/subscribeToResult");

function race() {
  var observables = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    observables[_i] = arguments[_i];
  }

  if (observables.length === 1) {
    if (isArray_1.isArray(observables[0])) {
      observables = observables[0];
    } else {
      return observables[0];
    }
  }

  return fromArray_1.fromArray(observables, undefined).lift(new RaceOperator());
}

exports.race = race;

var RaceOperator = function () {
  function RaceOperator() {}

  RaceOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new RaceSubscriber(subscriber));
  };

  return RaceOperator;
}();

exports.RaceOperator = RaceOperator;

var RaceSubscriber = function (_super) {
  __extends(RaceSubscriber, _super);

  function RaceSubscriber(destination) {
    var _this = _super.call(this, destination) || this;

    _this.hasFirst = false;
    _this.observables = [];
    _this.subscriptions = [];
    return _this;
  }

  RaceSubscriber.prototype._next = function (observable) {
    this.observables.push(observable);
  };

  RaceSubscriber.prototype._complete = function () {
    var observables = this.observables;
    var len = observables.length;

    if (len === 0) {
      this.destination.complete();
    } else {
      for (var i = 0; i < len && !this.hasFirst; i++) {
        var observable = observables[i];
        var subscription = subscribeToResult_1.subscribeToResult(this, observable, observable, i);

        if (this.subscriptions) {
          this.subscriptions.push(subscription);
        }

        this.add(subscription);
      }

      this.observables = null;
    }
  };

  RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    if (!this.hasFirst) {
      this.hasFirst = true;

      for (var i = 0; i < this.subscriptions.length; i++) {
        if (i !== outerIndex) {
          var subscription = this.subscriptions[i];
          subscription.unsubscribe();
          this.remove(subscription);
        }
      }

      this.subscriptions = null;
    }

    this.destination.next(innerValue);
  };

  return RaceSubscriber;
}(OuterSubscriber_1.OuterSubscriber);

exports.RaceSubscriber = RaceSubscriber;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbnRlcm5hbC9vYnNlcnZhYmxlL3JhY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSxJQUFBLFNBQUEsR0FBQSxPQUFBLENBQUEsaUJBQUEsQ0FBQTs7QUFDQSxJQUFBLFdBQUEsR0FBQSxPQUFBLENBQUEsYUFBQSxDQUFBOztBQUtBLElBQUEsaUJBQUEsR0FBQSxPQUFBLENBQUEsb0JBQUEsQ0FBQTs7QUFFQSxJQUFBLG1CQUFBLEdBQUEsT0FBQSxDQUFBLDJCQUFBLENBQUE7O0FBb0RBLFNBQWdCLElBQWhCLEdBQW9CO0FBQUksTUFBQSxXQUFBLEdBQUEsRUFBQTs7T0FBQSxJQUFBLEVBQUEsR0FBQSxDLEVBQUEsRUFBQSxHQUFBLFNBQUEsQ0FBQSxNLEVBQUEsRUFBQSxFLEVBQXNDO0FBQXRDLElBQUEsV0FBQSxDQUFBLEVBQUEsQ0FBQSxHQUFBLFNBQUEsQ0FBQSxFQUFBLENBQUE7OztBQUd0QixNQUFJLFdBQVcsQ0FBQyxNQUFaLEtBQXVCLENBQTNCLEVBQThCO0FBQzVCLFFBQUksU0FBQSxDQUFBLE9BQUEsQ0FBUSxXQUFXLENBQUMsQ0FBRCxDQUFuQixDQUFKLEVBQTZCO0FBQzNCLE1BQUEsV0FBVyxHQUFHLFdBQVcsQ0FBQyxDQUFELENBQXpCO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsYUFBTyxXQUFXLENBQUMsQ0FBRCxDQUFsQjtBQUNEO0FBQ0Y7O0FBRUQsU0FBTyxXQUFBLENBQUEsU0FBQSxDQUFVLFdBQVYsRUFBdUIsU0FBdkIsRUFBa0MsSUFBbEMsQ0FBdUMsSUFBSSxZQUFKLEVBQXZDLENBQVA7QUFDRDs7QUFaRCxPQUFBLENBQUEsSUFBQSxHQUFBLElBQUE7O0FBY0EsSUFBQSxZQUFBLEdBQUEsWUFBQTtBQUFBLFdBQUEsWUFBQSxHQUFBLENBSUM7O0FBSEMsRUFBQSxZQUFBLENBQUEsU0FBQSxDQUFBLElBQUEsR0FBQSxVQUFLLFVBQUwsRUFBZ0Ms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