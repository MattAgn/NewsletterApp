{"version":3,"sources":["YellowBoxRegistry.js"],"names":["YellowBoxWarning","require","observers","Set","ignorePatterns","registry","Map","disabled","projection","updateTimeout","isWarningIgnored","warning","pattern","RegExp","test","message","content","includes","handleUpdate","category","warnings","filtered","filter","length","set","setImmediate","observer","YellowBoxRegistry","add","args","framesToPop","startsWith","parse","stack","get","delete","has","clear","size","addIgnorePatterns","patterns","newPatterns","entries","existingPattern","toString","setDisabled","value","isDisabled","observe","subscription","unsubscribe","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nconst YellowBoxWarning = require('./YellowBoxWarning');\n\nimport type {Category} from './YellowBoxCategory';\n\nexport type Registry = Map<Category, $ReadOnlyArray<YellowBoxWarning>>;\n\nexport type Observer = (registry: Registry) => void;\n\nexport type IgnorePattern = string | RegExp;\n\nexport type Subscription = $ReadOnly<{|\n  unsubscribe: () => void,\n|}>;\n\nconst observers: Set<{observer: Observer}> = new Set();\nconst ignorePatterns: Set<IgnorePattern> = new Set();\nconst registry: Registry = new Map();\n\nlet disabled = false;\nlet projection = new Map();\nlet updateTimeout = null;\n\nfunction isWarningIgnored(warning: YellowBoxWarning): boolean {\n  for (const pattern of ignorePatterns) {\n    if (pattern instanceof RegExp && pattern.test(warning.message.content)) {\n      return true;\n    } else if (\n      typeof pattern === 'string' &&\n      warning.message.content.includes(pattern)\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction handleUpdate(): void {\n  projection = new Map();\n  if (!disabled) {\n    for (const [category, warnings] of registry) {\n      const filtered = warnings.filter(warning => !isWarningIgnored(warning));\n      if (filtered.length > 0) {\n        projection.set(category, filtered);\n      }\n    }\n  }\n  if (updateTimeout == null) {\n    updateTimeout = setImmediate(() => {\n      updateTimeout = null;\n      for (const {observer} of observers) {\n        observer(projection);\n      }\n    });\n  }\n}\n\nconst YellowBoxRegistry = {\n  add({\n    args,\n    framesToPop,\n  }: $ReadOnly<{|\n    args: $ReadOnlyArray<mixed>,\n    framesToPop: number,\n  |}>): void {\n    if (typeof args[0] === 'string' && args[0].startsWith('(ADVICE)')) {\n      return;\n    }\n    const {category, message, stack} = YellowBoxWarning.parse({\n      args,\n      framesToPop: framesToPop + 1,\n    });\n\n    let warnings = registry.get(category);\n    if (warnings == null) {\n      warnings = [];\n    }\n    warnings = [...warnings, new YellowBoxWarning(message, stack)];\n\n    registry.delete(category);\n    registry.set(category, warnings);\n\n    handleUpdate();\n  },\n\n  delete(category: Category): void {\n    if (registry.has(category)) {\n      registry.delete(category);\n      handleUpdate();\n    }\n  },\n\n  clear(): void {\n    if (registry.size > 0) {\n      registry.clear();\n      handleUpdate();\n    }\n  },\n\n  addIgnorePatterns(patterns: $ReadOnlyArray<IgnorePattern>): void {\n    const newPatterns = patterns.filter((pattern: IgnorePattern) => {\n      if (pattern instanceof RegExp) {\n        for (const existingPattern of ignorePatterns.entries()) {\n          if (\n            existingPattern instanceof RegExp &&\n            existingPattern.toString() === pattern.toString()\n          ) {\n            return false;\n          }\n        }\n        return true;\n      }\n      return !ignorePatterns.has(pattern);\n    });\n    if (newPatterns.length === 0) {\n      return;\n    }\n    for (const pattern of newPatterns) {\n      ignorePatterns.add(pattern);\n    }\n    handleUpdate();\n  },\n\n  setDisabled(value: boolean): void {\n    if (value === disabled) {\n      return;\n    }\n    disabled = value;\n    handleUpdate();\n  },\n\n  isDisabled(): boolean {\n    return disabled;\n  },\n\n  observe(observer: Observer): Subscription {\n    const subscription = {observer};\n    observers.add(subscription);\n    observer(projection);\n    return {\n      unsubscribe(): void {\n        observers.delete(subscription);\n      },\n    };\n  },\n};\n\nmodule.exports = YellowBoxRegistry;\n"]}