a4175aa3706eb3031b55e4d30a27e3d7
"use strict";

var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var OuterSubscriber_1 = require("../OuterSubscriber");

var InnerSubscriber_1 = require("../InnerSubscriber");

var subscribeToResult_1 = require("../util/subscribeToResult");

var map_1 = require("./map");

var from_1 = require("../observable/from");

function switchMap(project, resultSelector) {
  if (typeof resultSelector === 'function') {
    return function (source) {
      return source.pipe(switchMap(function (a, i) {
        return from_1.from(project(a, i)).pipe(map_1.map(function (b, ii) {
          return resultSelector(a, b, i, ii);
        }));
      }));
    };
  }

  return function (source) {
    return source.lift(new SwitchMapOperator(project));
  };
}

exports.switchMap = switchMap;

var SwitchMapOperator = function () {
  function SwitchMapOperator(project) {
    this.project = project;
  }

  SwitchMapOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));
  };

  return SwitchMapOperator;
}();

var SwitchMapSubscriber = function (_super) {
  __extends(SwitchMapSubscriber, _super);

  function SwitchMapSubscriber(destination, project) {
    var _this = _super.call(this, destination) || this;

    _this.project = project;
    _this.index = 0;
    return _this;
  }

  SwitchMapSubscriber.prototype._next = function (value) {
    var result;
    var index = this.index++;

    try {
      result = this.project(value, index);
    } catch (error) {
      this.destination.error(error);
      return;
    }

    this._innerSub(result, value, index);
  };

  SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {
    var innerSubscription = this.innerSubscription;

    if (innerSubscription) {
      innerSubscription.unsubscribe();
    }

    var innerSubscriber = new InnerSubscriber_1.InnerSubscriber(this, undefined, undefined);
    var destination = this.destination;
    destination.add(innerSubscriber);
    this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index, innerSubscriber);
  };

  SwitchMapSubscriber.prototype._complete = function () {
    var innerSubscription = this.innerSubscription;

    if (!innerSubscription || innerSubscription.closed) {
      _super.prototype._complete.call(this);
    }

    this.unsubscribe();
  };

  SwitchMapSubscriber.prototype._unsubscribe = function () {
    this.innerSubscription = null;
  };

  SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {
    var destination = this.destination;
    destination.remove(innerSub);
    this.innerSubscription = null;

    if (this.isStopped) {
      _super.prototype._complete.call(this);
    }
  };

  SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
    this.destination.next(innerValue);
  };

  return SwitchMapSubscriber;
}(OuterSubscriber_1.OuterSubscriber);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvc3dpdGNoTWFwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBSUEsSUFBQSxpQkFBQSxHQUFBLE9BQUEsQ0FBQSxvQkFBQSxDQUFBOztBQUNBLElBQUEsaUJBQUEsR0FBQSxPQUFBLENBQUEsb0JBQUEsQ0FBQTs7QUFDQSxJQUFBLG1CQUFBLEdBQUEsT0FBQSxDQUFBLDJCQUFBLENBQUE7O0FBRUEsSUFBQSxLQUFBLEdBQUEsT0FBQSxDQUFBLE9BQUEsQ0FBQTs7QUFDQSxJQUFBLE1BQUEsR0FBQSxPQUFBLENBQUEsb0JBQUEsQ0FBQTs7QUF3RUEsU0FBZ0IsU0FBaEIsQ0FDRSxPQURGLEVBRUUsY0FGRixFQUUrRztBQUU3RyxNQUFJLE9BQU8sY0FBUCxLQUEwQixVQUE5QixFQUEwQztBQUN4QyxXQUFPLFVBQUMsTUFBRCxFQUFzQjtBQUFLLGFBQUEsTUFBTSxDQUFDLElBQVAsQ0FDaEMsU0FBUyxDQUFDLFVBQUMsQ0FBRCxFQUFJLENBQUosRUFBSztBQUFLLGVBQUEsTUFBQSxDQUFBLElBQUEsQ0FBSyxPQUFPLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBWixFQUFvQixJQUFwQixDQUNsQixLQUFBLENBQUEsR0FBQSxDQUFJLFVBQUMsQ0FBRCxFQUFJLEVBQUosRUFBTTtBQUFLLGlCQUFBLGNBQWMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBZCxFQUFjLENBQWQ7QUFERyxTQUNsQixDQURrQixDQUFBO0FBRFksT0FDdkIsQ0FEdUIsQ0FBQTtBQUlqQyxLQUpEO0FBS0Q7O0FBQ0QsU0FBTyxVQUFDLE1BQUQsRUFBc0I7QUFBSyxXQUFBLE1BQU0sQ0FBQyxJQUFQLENBQVksSUFBSSxpQkFBSixDQUFaLE9BQVksQ0FBWixDQUFBO0FBQTJDLEdBQTdFO0FBQ0Q7O0FBWkQsT0FBQSxDQUFBLFNBQUEsR0FBQSxTQUFBOztBQWNBLElB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