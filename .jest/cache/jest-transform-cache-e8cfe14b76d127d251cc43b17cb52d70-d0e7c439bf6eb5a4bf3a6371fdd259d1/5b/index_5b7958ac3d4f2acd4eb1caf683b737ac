8c9bdef972e93e2eef9e694115fe0cac
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = require('react');

var PropTypes = require('prop-types');

var _require = require('react-native'),
    View = _require.View,
    StyleSheet = _require.StyleSheet,
    PanResponder = _require.PanResponder,
    Animated = _require.Animated,
    TouchableWithoutFeedback = _require.TouchableWithoutFeedback,
    Dimensions = _require.Dimensions,
    Easing = _require.Easing,
    BackHandler = _require.BackHandler,
    Platform = _require.Platform,
    Modal = _require.Modal,
    Keyboard = _require.Keyboard;

var createReactClass = require('create-react-class');

var BackButton = BackHandler;
var screen = Dimensions.get('window');
var styles = StyleSheet.create({
  wrapper: {
    backgroundColor: "white"
  },
  transparent: {
    zIndex: 2,
    backgroundColor: 'rgba(0,0,0,0)'
  },
  absolute: {
    position: "absolute",
    top: 0,
    bottom: 0,
    left: 0,
    right: 0
  }
});
var ModalBox = createReactClass({
  displayName: "ModalBox",
  propTypes: {
    isOpen: PropTypes.bool,
    isDisabled: PropTypes.bool,
    startOpen: PropTypes.bool,
    backdropPressToClose: PropTypes.bool,
    swipeToClose: PropTypes.bool,
    swipeThreshold: PropTypes.number,
    swipeArea: PropTypes.number,
    position: PropTypes.string,
    entry: PropTypes.string,
    backdrop: PropTypes.bool,
    backdropOpacity: PropTypes.number,
    backdropColor: PropTypes.string,
    backdropContent: PropTypes.element,
    animationDuration: PropTypes.number,
    backButtonClose: PropTypes.bool,
    easing: PropTypes.func,
    coverScreen: PropTypes.bool,
    keyboardTopOffset: PropTypes.number,
    onClosed: PropTypes.func,
    onOpened: PropTypes.func,
    onClosingState: PropTypes.func
  },
  getDefaultProps: function getDefaultProps() {
    return {
      startOpen: false,
      backdropPressToClose: true,
      swipeToClose: true,
      swipeThreshold: 50,
      position: "center",
      backdrop: true,
      backdropOpacity: 0.5,
      backdropColor: "black",
      backdropContent: null,
      animationDuration: 400,
      backButtonClose: false,
      easing: Easing.elastic(0.8),
      coverScreen: false,
      keyboardTopOffset: Platform.OS == 'ios' ? 22 : 0,
      useNativeDriver: true
    };
  },
  getInitialState: function getInitialState() {
    var position = this.props.entry === 'top' ? -screen.height : screen.height;
    return {
      position: this.props.startOpen ? new Animated.Value(0) : new Animated.Value(position),
      backdropOpacity: new Animated.Value(0),
      isOpen: this.props.startOpen,
      isAnimateClose: false,
      isAnimateOpen: false,
      swipeToClose: false,
      height: screen.height,
      width: screen.width,
      containerHeight: screen.height,
      containerWidth: screen.width,
      isInitialized: false,
      keyboardOffset: 0
    };
  },
  onBackPress: function onBackPress() {
    this.close();
    return true;
  },
  componentWillMount: function componentWillMount() {
    this.createPanResponder();
    this.handleOpenning(this.props);

    if (Platform.OS === 'ios') {
      this.subscriptions = [Keyboard.addListener('keyboardWillChangeFrame', this.onKeyboardChange), Keyboard.addListener('keyboardDidHide', this.onKeyboardHide)];
    }
  },
  componentWillUnmount: function componentWillUnmount() {
    if (this.subscriptions) this.subscriptions.forEach(function (sub) {
      return sub.remove();
    });
    if (this.props.backButtonClose && Platform.OS === 'android') BackButton.removeEventListener('hardwareBackPress', this.onBackPress);
  },
  componentWillReceiveProps: function componentWillReceiveProps(props) {
    if (this.props.isOpen != props.isOpen) {
      this.handleOpenning(props);
    }
  },
  handleOpenning: function handleOpenning(props) {
    if (typeof props.isOpen == "undefined") return;
    if (props.isOpen) this.open();else this.close();
  },
  onKeyboardHide: function onKeyboardHide(evt) {
    this.setState({
      keyboardOffset: 0
    });
  },
  onKeyboardChange: function onKeyboardChange(evt) {
    var _this = this;

    if (!evt) return;
    if (!this.state.isOpen) return;
    var keyboardFrame = evt.endCoordinates;
    var keyboardHeight = this.state.containerHeight - keyboardFrame.screenY;
    this.setState({
      keyboardOffset: keyboardHeight
    }, function () {
      _this.animateOpen();
    });
  },
  animateBackdropOpen: function animateBackdropOpen() {
    var _this2 = this;

    if (this.state.isAnimateBackdrop && this.state.animBackdrop) {
      this.state.animBackdrop.stop();
    }

    this.setState({
      isAnimateBackdrop: true
    });
    var animBackdrop = Animated.timing(this.state.backdropOpacity, {
      toValue: 1,
      duration: this.props.animationDuration,
      easing: this.props.easing,
      useNativeDriver: this.props.useNativeDriver
    }).start(function () {
      _this2.setState({
        isAnimateBackdrop: false,
        animBackdrop: animBackdrop
      });
    });
  },
  animateBackdropClose: function animateBackdropClose() {
    var _this3 = this;

    if (this.state.isAnimateBackdrop && this.state.animBackdrop) {
      this.state.animBackdrop.stop();
    }

    this.setState({
      isAnimateBackdrop: true
    });
    var animBackdrop = Animated.timing(this.state.backdropOpacity, {
      toValue: 0,
      duration: this.props.animationDuration,
      easing: this.props.easing,
      useNativeDriver: this.props.useNativeDriver
    }).start(function () {
      _this3.setState({
        isAnimateBackdrop: false,
        animBackdrop: animBackdrop
      });
    });
  },
  stopAnimateOpen: function stopAnimateOpen() {
    if (this.state.isAnimateOpen) {
      if (this.state.animOpen) this.state.animOpen.stop();
      this.setState({
        isAnimateOpen: false
      });
    }
  },
  animateOpen: function animateOpen() {
    var _this4 = this;

    this.stopAnimateClose();
    if (this.props.backdrop) this.animateBackdropOpen();
    this.setState({
      isAnimateOpen: true,
      isOpen: true
    }, function () {
      requestAnimationFrame(function () {
        var positionDest = _this4.calculateModalPosition(_this4.state.containerHeight - _this4.state.keyboardOffset, _this4.state.containerWidth);

        if (_this4.state.keyboardOffset && positionDest < _this4.props.keyboardTopOffset) {
          positionDest = _this4.props.keyboardTopOffset;
        }

        var animOpen = Animated.timing(_this4.state.position, {
          toValue: positionDest,
          duration: _this4.props.animationDuration,
          easing: _this4.props.easing,
          useNativeDriver: _this4.props.useNativeDriver
        }).start(function () {
          _this4.setState({
            isAnimateOpen: false,
            animOpen: animOpen,
            positionDest: positionDest
          });

          if (_this4.props.onOpened) _this4.props.onOpened();
        });
      });
    });
  },
  stopAnimateClose: function stopAnimateClose() {
    if (this.state.isAnimateClose) {
      if (this.state.animClose) this.state.animClose.stop();
      this.setState({
        isAnimateClose: false
      });
    }
  },
  animateClose: function animateClose() {
    var _this5 = this;

    this.stopAnimateOpen();
    if (this.props.backdrop) this.animateBackdropClose();
    this.setState({
      isAnimateClose: true,
      isOpen: false
    }, function () {
      var animClose = Animated.timing(_this5.state.position, {
        toValue: _this5.props.entry === 'top' ? -_this5.state.containerHeight : _this5.state.containerHeight,
        duration: _this5.props.animationDuration,
        easing: _this5.props.easing,
        useNativeDriver: _this5.props.useNativeDriver
      }).start(function () {
        _this5.setState({
          isAnimateClose: false,
          animClose: animClose
        });

        if (_this5.props.onClosed) _this5.props.onClosed();
      });
    });
  },
  calculateModalPosition: function calculateModalPosition(containerHeight, containerWidth) {
    var position = 0;

    if (this.props.position == "bottom") {
      position = containerHeight - this.state.height;
    } else if (this.props.position == "center") {
      position = containerHeight / 2 - this.state.height / 2;
    }

    if (position < 0) position = 0;
    return position;
  },
  createPanResponder: function createPanResponder() {
    var _this6 = this;

    var closingState = false;
    var inSwipeArea = false;

    var onPanRelease = function onPanRelease(evt, state) {
      if (!inSwipeArea) return;
      inSwipeArea = false;
      if (_this6.props.entry === 'top' ? -state.dy > _this6.props.swipeThreshold : state.dy > _this6.props.swipeThreshold) _this6.animateClose();else if (!_this6.state.isOpen) {
        _this6.animateOpen();
      }
    };

    var animEvt = Animated.event([null, {
      customY: this.state.position
    }]);

    var onPanMove = function onPanMove(evt, state) {
      var newClosingState = _this6.props.entry === 'top' ? -state.dy > _this6.props.swipeThreshold : state.dy > _this6.props.swipeThreshold;
      if (_this6.props.entry === 'top' ? state.dy > 0 : state.dy < 0) return;
      if (newClosingState != closingState && _this6.props.onClosingState) _this6.props.onClosingState(newClosingState);
      closingState = newClosingState;
      state.customY = state.dy + _this6.state.positionDest;
      animEvt(evt, state);
    };

    var onPanStart = function onPanStart(evt, state) {
      if (!_this6.props.swipeToClose || _this6.props.isDisabled || _this6.props.swipeArea && evt.nativeEvent.pageY - _this6.state.positionDest > _this6.props.swipeArea) {
        inSwipeArea = false;
        return false;
      }

      inSwipeArea = true;
      return true;
    };

    this.setState({
      pan: PanResponder.create({
        onStartShouldSetPanResponder: onPanStart,
        onPanResponderMove: onPanMove,
        onPanResponderRelease: onPanRelease,
        onPanResponderTerminate: onPanRelease
      })
    });
  },
  onViewLayout: function onViewLayout(evt) {
    var height = evt.nativeEvent.layout.height;
    var width = evt.nativeEvent.layout.width;
    var newState = {};
    if (height !== this.state.height) newState.height = height;
    if (width !== this.state.width) newState.width = width;
    this.setState(newState);
    if (this.onViewLayoutCalculated) this.onViewLayoutCalculated();
  },
  onContainerLayout: function onContainerLayout(evt) {
    var height = evt.nativeEvent.layout.height;
    var width = evt.nativeEvent.layout.width;

    if (height == this.state.containerHeight && width == this.state.containerWidth) {
      this.setState({
        isInitialized: true
      });
      return;
    }

    if (this.state.isOpen || this.state.isAnimateOpen) {
      this.animateOpen();
    }

    if (this.props.onLayout) this.props.onLayout(evt);
    this.setState({
      isInitialized: true,
      containerHeight: height,
      containerWidth: width
    });
  },
  renderBackdrop: function renderBackdrop() {
    var backdrop = null;

    if (this.props.backdrop) {
      backdrop = React.createElement(TouchableWithoutFeedback, {
        onPress: this.props.backdropPressToClose ? this.close : null
      }, React.createElement(Animated.View, {
        importantForAccessibility: "no",
        style: [styles.absolute, {
          opacity: this.state.backdropOpacity
        }]
      }, React.createElement(View, {
        style: [styles.absolute, {
          backgroundColor: this.props.backdropColor,
          opacity: this.props.backdropOpacity
        }]
      }), this.props.backdropContent || []));
    }

    return backdrop;
  },
  renderContent: function renderContent() {
    var size = {
      height: this.state.containerHeight,
      width: this.state.containerWidth
    };
    var offsetX = (this.state.containerWidth - this.state.width) / 2;
    return React.createElement(Animated.View, (0, _extends2.default)({
      onLayout: this.onViewLayout,
      style: [styles.wrapper, size, this.props.style, {
        transform: [{
          translateY: this.state.position
        }, {
          translateX: offsetX
        }]
      }]
    }, this.state.pan.panHandlers), this.props.backdropPressToClose && React.createElement(TouchableWithoutFeedback, {
      onPress: this.close
    }, React.createElement(View, {
      style: [styles.absolute]
    })), this.props.children);
  },
  render: function render() {
    var _this7 = this;

    var visible = this.state.isOpen || this.state.isAnimateOpen || this.state.isAnimateClose;
    if (!visible) return React.createElement(View, null);
    var content = React.createElement(View, {
      importantForAccessibility: "yes",
      accessibilityViewIsModal: true,
      style: [styles.transparent, styles.absolute],
      pointerEvents: 'box-none'
    }, React.createElement(View, {
      style: {
        flex: 1
      },
      pointerEvents: 'box-none',
      onLayout: this.onContainerLayout
    }, visible && this.renderBackdrop(), visible && this.renderContent()));
    if (!this.props.coverScreen) return content;
    return React.createElement(Modal, {
      onRequestClose: function onRequestClose() {
        if (_this7.props.backButtonClose) {
          _this7.close();
        }
      },
      supportedOrientations: ['landscape', 'portrait', 'portrait-upside-down'],
      transparent: true,
      visible: visible,
      hardwareAccelerated: true
    }, content);
  },
  open: function open() {
    var _this8 = this;

    if (this.props.isDisabled) return;

    if (!this.state.isAnimateOpen && (!this.state.isOpen || this.state.isAnimateClose)) {
      this.onViewLayoutCalculated = function () {
        _this8.setState({});

        _this8.animateOpen();

        if (_this8.props.backButtonClose && Platform.OS === 'android') BackButton.addEventListener('hardwareBackPress', _this8.onBackPress);
        delete _this8.onViewLayoutCalculated;
      };

      this.setState({
        isAnimateOpen: true
      });
    }
  },
  close: function close() {
    if (this.props.isDisabled) return;

    if (!this.state.isAnimateClose && (this.state.isOpen || this.state.isAnimateOpen)) {
      this.animateClose();
      if (this.props.backButtonClose && Platform.OS === 'android') BackButton.removeEventListener('hardwareBackPress', this.onBackPress);
    }
  }
});
module.exports = ModalBox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,