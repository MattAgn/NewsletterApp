8d324b57710fddd42cad1645c34fa850
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var stableSortBy = require("lodash.sortby");

var urlencoded = require("./urlencoded");

exports.implementation = function () {
  function URLSearchParamsImpl(constructorArgs, _ref) {
    var _ref$doNotStripQMark = _ref.doNotStripQMark,
        doNotStripQMark = _ref$doNotStripQMark === void 0 ? false : _ref$doNotStripQMark;
    (0, _classCallCheck2.default)(this, URLSearchParamsImpl);
    var init = constructorArgs[0];
    this._list = [];
    this._url = null;

    if (!doNotStripQMark && typeof init === "string" && init[0] === "?") {
      init = init.slice(1);
    }

    if (Array.isArray(init)) {
      for (var _iterator = init, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
        var _ref2;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref2 = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref2 = _i.value;
        }

        var _pair = _ref2;

        if (_pair.length !== 2) {
          throw new TypeError("Failed to construct 'URLSearchParams': parameter 1 sequence's element does not " + "contain exactly two elements.");
        }

        this._list.push([_pair[0], _pair[1]]);
      }
    } else if (typeof init === "object" && Object.getPrototypeOf(init) === null) {
      for (var _i2 = 0, _Object$keys = Object.keys(init); _i2 < _Object$keys.length; _i2++) {
        var name = _Object$keys[_i2];
        var value = init[name];

        this._list.push([name, value]);
      }
    } else {
      this._list = urlencoded.parseUrlencoded(init);
    }
  }

  (0, _createClass2.default)(URLSearchParamsImpl, [{
    key: "_updateSteps",
    value: function _updateSteps() {
      if (this._url !== null) {
        var query = urlencoded.serializeUrlencoded(this._list);

        if (query === "") {
          query = null;
        }

        this._url._url.query = query;
      }
    }
  }, {
    key: "append",
    value: function append(name, value) {
      this._list.push([name, value]);

      this._updateSteps();
    }
  }, {
    key: "delete",
    value: function _delete(name) {
      var i = 0;

      while (i < this._list.length) {
        if (this._list[i][0] === name) {
          this._list.splice(i, 1);
        } else {
          i++;
        }
      }

      this._updateSteps();
    }
  }, {
    key: "get",
    value: function get(name) {
      for (var _iterator2 = this._list, _isArray2 = Array.isArray(_iterator2), _i3 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
        var _ref3;

        if (_isArray2) {
          if (_i3 >= _iterator2.length) break;
          _ref3 = _iterator2[_i3++];
        } else {
          _i3 = _iterator2.next();
          if (_i3.done) break;
          _ref3 = _i3.value;
        }

        var _tuple = _ref3;

        if (_tuple[0] === name) {
          return _tuple[1];
        }
      }

      return null;
    }
  }, {
    key: "getAll",
    value: function getAll(name) {
      var output = [];

      for (var _iterator3 = this._list, _isArray3 = Array.isArray(_iterator3), _i4 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
        var _ref4;

        if (_isArray3) {
          if (_i4 >= _iterator3.length) break;
          _ref4 = _iterator3[_i4++];
        } else {
          _i4 = _iterator3.next();
          if (_i4.done) break;
          _ref4 = _i4.value;
        }

        var _tuple2 = _ref4;

        if (_tuple2[0] === name) {
          output.push(_tuple2[1]);
        }
      }

      return output;
    }
  }, {
    key: "has",
    value: function has(name) {
      for (var _iterator4 = this._list, _isArray4 = Array.isArray(_iterator4), _i5 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
        var _ref5;

        if (_isArray4) {
          if (_i5 >= _iterator4.length) break;
          _ref5 = _iterator4[_i5++];
        } else {
          _i5 = _iterator4.next();
          if (_i5.done) break;
          _ref5 = _i5.value;
        }

        var _tuple3 = _ref5;

        if (_tuple3[0] === name) {
          return true;
        }
      }

      return false;
    }
  }, {
    key: "set",
    value: function set(name, value) {
      var found = false;
      var i = 0;

      while (i < this._list.length) {
        if (this._list[i][0] === name) {
          if (found) {
            this._list.splice(i, 1);
          } else {
            found = true;
            this._list[i][1] = value;
            i++;
          }
        } else {
          i++;
        }
      }

      if (!found) {
        this._list.push([name, value]);
      }

      this._updateSteps();
    }
  }, {
    key: "sort",
    value: function sort() {
      this._list = stableSortBy(this._list, [0]);

      this._updateSteps();
    }
  }, {
    key: typeof Symbol === "function" ? Symbol.iterator : "@@iterator",
    value: function value() {
      return this._list[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();
    }
  }, {
    key: "toString",
    value: function toString() {
      return urlencoded.serializeUrlencoded(this._list);
    }
  }]);
  return URLSearchParamsImpl;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,