1847df11cd873b644a14213202ed0650
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.wrapMapToPropsConstant = wrapMapToPropsConstant;
exports.getDependsOnOwnProps = getDependsOnOwnProps;
exports.wrapMapToPropsFunc = wrapMapToPropsFunc;

var _verifyPlainObject = _interopRequireDefault(require("../utils/verifyPlainObject"));

function wrapMapToPropsConstant(getConstant) {
  return function initConstantSelector(dispatch, options) {
    var constant = getConstant(dispatch, options);

    function constantSelector() {
      return constant;
    }

    constantSelector.dependsOnOwnProps = false;
    return constantSelector;
  };
}

function getDependsOnOwnProps(mapToProps) {
  return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== undefined ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
}

function wrapMapToPropsFunc(mapToProps, methodName) {
  return function initProxySelector(dispatch, _ref) {
    var displayName = _ref.displayName;

    var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
    };

    proxy.dependsOnOwnProps = true;

    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
      proxy.mapToProps = mapToProps;
      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
      var props = proxy(stateOrDispatch, ownProps);

      if (typeof props === 'function') {
        proxy.mapToProps = props;
        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
        props = proxy(stateOrDispatch, ownProps);
      }

      if (process.env.NODE_ENV !== 'production') (0, _verifyPlainObject["default"])(props, displayName, methodName);
      return props;
    };

    return proxy;
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndyYXBNYXBUb1Byb3BzLmpzIl0sIm5hbWVzIjpbIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiZXhwb3J0cyIsIl9fZXNNb2R1bGUiLCJ3cmFwTWFwVG9Qcm9wc0NvbnN0YW50IiwiZ2V0RGVwZW5kc09uT3duUHJvcHMiLCJ3cmFwTWFwVG9Qcm9wc0Z1bmMiLCJfdmVyaWZ5UGxhaW5PYmplY3QiLCJnZXRDb25zdGFudCIsImluaXRDb25zdGFudFNlbGVjdG9yIiwiZGlzcGF0Y2giLCJvcHRpb25zIiwiY29uc3RhbnQiLCJjb25zdGFudFNlbGVjdG9yIiwiZGVwZW5kc09uT3duUHJvcHMiLCJtYXBUb1Byb3BzIiwidW5kZWZpbmVkIiwiQm9vbGVhbiIsImxlbmd0aCIsIm1ldGhvZE5hbWUiLCJpbml0UHJveHlTZWxlY3RvciIsIl9yZWYiLCJkaXNwbGF5TmFtZSIsInByb3h5IiwibWFwVG9Qcm9wc1Byb3h5Iiwic3RhdGVPckRpc3BhdGNoIiwib3duUHJvcHMiLCJkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5IiwicHJvcHMiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLHNCQUFzQixHQUFHQyxPQUFPLENBQUMsOENBQUQsQ0FBcEM7O0FBRUFDLE9BQU8sQ0FBQ0MsVUFBUixHQUFxQixJQUFyQjtBQUNBRCxPQUFPLENBQUNFLHNCQUFSLEdBQWlDQSxzQkFBakM7QUFDQUYsT0FBTyxDQUFDRyxvQkFBUixHQUErQkEsb0JBQS9CO0FBQ0FILE9BQU8sQ0FBQ0ksa0JBQVIsR0FBNkJBLGtCQUE3Qjs7QUFFQSxJQUFJQyxrQkFBa0IsR0FBR1Asc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyw0QkFBRCxDQUFSLENBQS9DOztBQUVBLFNBQVNHLHNCQUFULENBQWdDSSxXQUFoQyxFQUE2QztBQUMzQyxTQUFPLFNBQVNDLG9CQUFULENBQThCQyxRQUE5QixFQUF3Q0MsT0FBeEMsRUFBaUQ7QUFDdEQsUUFBSUMsUUFBUSxHQUFHSixXQUFXLENBQUNFLFFBQUQsRUFBV0MsT0FBWCxDQUExQjs7QUFFQSxhQUFTRSxnQkFBVCxHQUE0QjtBQUMxQixhQUFPRCxRQUFQO0FBQ0Q7O0FBRURDLElBQUFBLGdCQUFnQixDQUFDQyxpQkFBakIsR0FBcUMsS0FBckM7QUFDQSxXQUFPRCxnQkFBUDtBQUNELEdBVEQ7QUFVRDs7QUFTRCxTQUFTUixvQkFBVCxDQUE4QlUsVUFBOUIsRUFBMEM7QUFDeEMsU0FBT0EsVUFBVSxDQUFDRCxpQkFBWCxLQUFpQyxJQUFqQyxJQUF5Q0MsVUFBVSxDQUFDRCxpQkFBWCxLQUFpQ0UsU0FBMUUsR0FBc0ZDLE9BQU8sQ0FBQ0YsVUFBVSxDQUFDRCxpQkFBWixDQUE3RixHQUE4SEMsVUFBVSxDQUFDRyxNQUFYLEtBQXNCLENBQTNKO0FBQ0Q7O0FBY0QsU0FBU1osa0JBQVQsQ0FBNEJTLFVBQTVCLEVBQXdDSSxVQUF4QyxFQUFvRDtBQUNsRCxTQUFPLFNBQVNDLGlCQUFULENBQTJCVixRQUEzQixFQUFxQ1csSUFBckMsRUFBMkM7QUFDaEQsUUFBSUMsV0FBVyxHQUFHRCxJQUFJLENBQUNDLFdBQXZCOztBQUVBLFFBQUlDLEtBQUssR0FBRyxTQUFTQyxlQUFULENBQXlCQyxlQUF6QixFQUEwQ0MsUUFBMUMsRUFBb0Q7QUFDOUQsYUFBT0gsS0FBSyxDQUFDVCxpQkFBTixHQUEwQlMsS0FBSyxDQUFDUixVQUFOLENBQWlCVSxlQUFqQixFQUFrQ0MsUUFBbEMsQ0FBMUIsR0FBd0VILEtBQUssQ0FBQ1IsVUFBTixDQUFpQlUsZUFBakIsQ0FBL0U7QUFDRCxLQUZEOztBQUtBRixJQUFBQSxLQUFLLENBQUNULGlCQUFOLEdBQTBCLElBQTFCOztBQUVBUyxJQUFBQSxLQUFLLENBQUNSLFVBQU4sR0FBbUIsU0FBU1ksc0JBQVQsQ0FBZ0NGLGVBQWhDLEVBQWlEQyxRQUFqRCxFQUEyRDtBQUM1RUgsTUFBQUEsS0FBSyxDQUFDUixVQUFOLEdBQW1CQSxVQUFuQjtBQUNBUSxNQUFBQSxLQUFLLENBQUNULGlCQUFOLEdBQTBCVCxvQkFBb0IsQ0FBQ1UsVUFBRCxDQUE5QztBQUNBLFVBQUlhLEtBQUssR0FBR0wsS0FBSyxDQUFDRSxlQUFELEVBQWtCQyxRQUFsQixDQUFqQjs7QUFFQSxVQUFJLE9BQU9FLEtBQVAsS0FBaUIsVUFBckIsRUFBaUM7QUFDL0JMLFFBQUFBLEtBQUssQ0FBQ1IsVUFBTixHQUFtQmEsS0FBbkI7QUFDQUwsUUFBQUEsS0FBSyxDQUFDVCxpQkFBTixHQUEwQlQsb0JBQW9CLENBQUN1QixLQUFELENBQTlDO0FBQ0FBLFFBQUFBLEtBQUssR0FBR0wsS0FBSyxDQUFDRSxlQUFELEVBQWtCQyxRQUFsQixDQUFiO0FBQ0Q7O0FBRUQsVUFBSUcsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFFBQVosS0FBeUIsWUFBN0IsRUFBMkMsQ0FBQyxHQUFHeEIsa0JBQWtCLENBQUMsU0FBRCxDQUF0QixFQUFtQ3FCLEtBQW5DLEVBQTBDTixXQUExQyxFQUF1REgsVUFBdkQ7QUFDM0MsYUFBT1MsS0FBUDtBQUNELEtBYkQ7O0FBZUEsV0FBT0wsS0FBUDtBQUNELEdBMUJEO0FBMkJEIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0ID0gcmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvaW50ZXJvcFJlcXVpcmVEZWZhdWx0XCIpO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy53cmFwTWFwVG9Qcm9wc0NvbnN0YW50ID0gd3JhcE1hcFRvUHJvcHNDb25zdGFudDtcbmV4cG9ydHMuZ2V0RGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcztcbmV4cG9ydHMud3JhcE1hcFRvUHJvcHNGdW5jID0gd3JhcE1hcFRvUHJvcHNGdW5jO1xuXG52YXIgX3ZlcmlmeVBsYWluT2JqZWN0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vdXRpbHMvdmVyaWZ5UGxhaW5PYmplY3RcIikpO1xuXG5mdW5jdGlvbiB3cmFwTWFwVG9Qcm9wc0NvbnN0YW50KGdldENvbnN0YW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiBpbml0Q29uc3RhbnRTZWxlY3RvcihkaXNwYXRjaCwgb3B0aW9ucykge1xuICAgIHZhciBjb25zdGFudCA9IGdldENvbnN0YW50KGRpc3BhdGNoLCBvcHRpb25zKTtcblxuICAgIGZ1bmN0aW9uIGNvbnN0YW50U2VsZWN0b3IoKSB7XG4gICAgICByZXR1cm4gY29uc3RhbnQ7XG4gICAgfVxuXG4gICAgY29uc3RhbnRTZWxlY3Rvci5kZXBlbmRzT25Pd25Qcm9wcyA9IGZhbHNlO1xuICAgIHJldHVybiBjb25zdGFudFNlbGVjdG9yO1xuICB9O1xufSAvLyBkZXBlbmRzT25Pd25Qcm9wcyBpcyB1c2VkIGJ5IGNyZWF0ZU1hcFRvUHJvcHNQcm94eSB0byBkZXRlcm1pbmUgd2hldGhlciB0byBwYXNzIHByb3BzIGFzIGFyZ3Ncbi8vIHRvIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIHdyYXBwZWQuIEl0IGlzIGFsc28gdXNlZCBieSBtYWtlUHVyZVByb3BzU2VsZWN0b3IgdG8gZGV0ZXJtaW5lXG4vLyB3aGV0aGVyIG1hcFRvUHJvcHMgbmVlZHMgdG8gYmUgaW52b2tlZCB3aGVuIHByb3BzIGhhdmUgY2hhbmdlZC5cbi8vXG4vLyBBIGxlbmd0aCBvZiBvbmUgc2lnbmFscyB0aGF0IG1hcFRvUHJvcHMgZG9lcyBub3QgZGVwZW5kIG9uIHByb3BzIGZyb20gdGhlIHBhcmVudCBjb21wb25lbnQuXG4vLyBBIGxlbmd0aCBvZiB6ZXJvIGlzIGFzc3VtZWQgdG8gbWVhbiBtYXBUb1Byb3BzIGlzIGdldHRpbmcgYXJncyB2aWEgYXJndW1lbnRzIG9yIC4uLmFyZ3MgYW5kXG4vLyB0aGVyZWZvcmUgbm90IHJlcG9ydGluZyBpdHMgbGVuZ3RoIGFjY3VyYXRlbHkuLlxuXG5cbmZ1bmN0aW9uIGdldERlcGVuZHNPbk93blByb3BzKG1hcFRvUHJvcHMpIHtcbiAgcmV0dXJuIG1hcFRvUHJvcHMuZGVwZW5kc09uT3duUHJvcHMgIT09IG51bGwgJiYgbWFwVG9Qcm9wcy5kZXBlbmRzT25Pd25Qcm9wcyAhPT0gdW5kZWZpbmVkID8gQm9vbGVhbihtYXBUb1Byb3BzLmRlcGVuZHNPbk93blByb3BzKSA6IG1hcFRvUHJvcHMubGVuZ3RoICE9PSAxO1xufSAvLyBVc2VkIGJ5IHdoZW5NYXBTdGF0ZVRvUHJvcHNJc0Z1bmN0aW9uIGFuZCB3aGVuTWFwRGlzcGF0Y2hUb1Byb3BzSXNGdW5jdGlvbixcbi8vIHRoaXMgZnVuY3Rpb24gd3JhcHMgbWFwVG9Qcm9wcyBpbiBhIHByb3h5IGZ1bmN0aW9uIHdoaWNoIGRvZXMgc2V2ZXJhbCB0aGluZ3M6XG4vL1xuLy8gICogRGV0ZWN0cyB3aGV0aGVyIHRoZSBtYXBUb1Byb3BzIGZ1bmN0aW9uIGJlaW5nIGNhbGxlZCBkZXBlbmRzIG9uIHByb3BzLCB3aGljaFxuLy8gICAgaXMgdXNlZCBieSBzZWxlY3RvckZhY3RvcnkgdG8gZGVjaWRlIGlmIGl0IHNob3VsZCByZWludm9rZSBvbiBwcm9wcyBjaGFuZ2VzLlxuLy9cbi8vICAqIE9uIGZpcnN0IGNhbGwsIGhhbmRsZXMgbWFwVG9Qcm9wcyBpZiByZXR1cm5zIGFub3RoZXIgZnVuY3Rpb24sIGFuZCB0cmVhdHMgdGhhdFxuLy8gICAgbmV3IGZ1bmN0aW9uIGFzIHRoZSB0cnVlIG1hcFRvUHJvcHMgZm9yIHN1YnNlcXVlbnQgY2FsbHMuXG4vL1xuLy8gICogT24gZmlyc3QgY2FsbCwgdmVyaWZpZXMgdGhlIGZpcnN0IHJlc3VsdCBpcyBhIHBsYWluIG9iamVjdCwgaW4gb3JkZXIgdG8gd2FyblxuLy8gICAgdGhlIGRldmVsb3BlciB0aGF0IHRoZWlyIG1hcFRvUHJvcHMgZnVuY3Rpb24gaXMgbm90IHJldHVybmluZyBhIHZhbGlkIHJlc3VsdC5cbi8vXG5cblxuZnVuY3Rpb24gd3JhcE1hcFRvUHJvcHNGdW5jKG1hcFRvUHJvcHMsIG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGluaXRQcm94eVNlbGVjdG9yKGRpc3BhdGNoLCBfcmVmKSB7XG4gICAgdmFyIGRpc3BsYXlOYW1lID0gX3JlZi5kaXNwbGF5TmFtZTtcblxuICAgIHZhciBwcm94eSA9IGZ1bmN0aW9uIG1hcFRvUHJvcHNQcm94eShzdGF0ZU9yRGlzcGF0Y2gsIG93blByb3BzKSB7XG4gICAgICByZXR1cm4gcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPyBwcm94eS5tYXBUb1Byb3BzKHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIDogcHJveHkubWFwVG9Qcm9wcyhzdGF0ZU9yRGlzcGF0Y2gpO1xuICAgIH07IC8vIGFsbG93IGRldGVjdEZhY3RvcnlBbmRWZXJpZnkgdG8gZ2V0IG93blByb3BzXG5cblxuICAgIHByb3h5LmRlcGVuZHNPbk93blByb3BzID0gdHJ1ZTtcblxuICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBmdW5jdGlvbiBkZXRlY3RGYWN0b3J5QW5kVmVyaWZ5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpIHtcbiAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBtYXBUb1Byb3BzO1xuICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhtYXBUb1Byb3BzKTtcbiAgICAgIHZhciBwcm9wcyA9IHByb3h5KHN0YXRlT3JEaXNwYXRjaCwgb3duUHJvcHMpO1xuXG4gICAgICBpZiAodHlwZW9mIHByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHByb3h5Lm1hcFRvUHJvcHMgPSBwcm9wcztcbiAgICAgICAgcHJveHkuZGVwZW5kc09uT3duUHJvcHMgPSBnZXREZXBlbmRzT25Pd25Qcm9wcyhwcm9wcyk7XG4gICAgICAgIHByb3BzID0gcHJveHkoc3RhdGVPckRpc3BhdGNoLCBvd25Qcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSAoMCwgX3ZlcmlmeVBsYWluT2JqZWN0W1wiZGVmYXVsdFwiXSkocHJvcHMsIGRpc3BsYXlOYW1lLCBtZXRob2ROYW1lKTtcbiAgICAgIHJldHVybiBwcm9wcztcbiAgICB9O1xuXG4gICAgcmV0dXJuIHByb3h5O1xuICB9O1xufSJdfQ==