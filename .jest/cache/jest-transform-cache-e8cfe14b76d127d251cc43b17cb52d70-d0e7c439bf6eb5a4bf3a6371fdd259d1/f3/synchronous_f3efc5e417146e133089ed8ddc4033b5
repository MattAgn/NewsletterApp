ffc2c674e583ec79c8c0eb2e09d07759
'use strict';

var Promise = require('./core.js');

module.exports = Promise;

Promise.enableSynchronous = function () {
  Promise.prototype.isPending = function () {
    return this.getState() == 0;
  };

  Promise.prototype.isFulfilled = function () {
    return this.getState() == 1;
  };

  Promise.prototype.isRejected = function () {
    return this.getState() == 2;
  };

  Promise.prototype.getValue = function () {
    if (this._65 === 3) {
      return this._55.getValue();
    }

    if (!this.isFulfilled()) {
      throw new Error('Cannot get a value of an unfulfilled promise.');
    }

    return this._55;
  };

  Promise.prototype.getReason = function () {
    if (this._65 === 3) {
      return this._55.getReason();
    }

    if (!this.isRejected()) {
      throw new Error('Cannot get a rejection reason of a non-rejected promise.');
    }

    return this._55;
  };

  Promise.prototype.getState = function () {
    if (this._65 === 3) {
      return this._55.getState();
    }

    if (this._65 === -1 || this._65 === -2) {
      return 0;
    }

    return this._65;
  };
};

Promise.disableSynchronous = function () {
  Promise.prototype.isPending = undefined;
  Promise.prototype.isFulfilled = undefined;
  Promise.prototype.isRejected = undefined;
  Promise.prototype.getValue = undefined;
  Promise.prototype.getReason = undefined;
  Promise.prototype.getState = undefined;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN5bmNocm9ub3VzLmpzIl0sIm5hbWVzIjpbIlByb21pc2UiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImVuYWJsZVN5bmNocm9ub3VzIiwicHJvdG90eXBlIiwiaXNQZW5kaW5nIiwiZ2V0U3RhdGUiLCJpc0Z1bGZpbGxlZCIsImlzUmVqZWN0ZWQiLCJnZXRWYWx1ZSIsIl82NSIsIl81NSIsIkVycm9yIiwiZ2V0UmVhc29uIiwiZGlzYWJsZVN5bmNocm9ub3VzIiwidW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxXQUFELENBQXJCOztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJILE9BQWpCOztBQUNBQSxPQUFPLENBQUNJLGlCQUFSLEdBQTRCLFlBQVk7QUFDdENKLEVBQUFBLE9BQU8sQ0FBQ0ssU0FBUixDQUFrQkMsU0FBbEIsR0FBOEIsWUFBVztBQUN2QyxXQUFPLEtBQUtDLFFBQUwsTUFBbUIsQ0FBMUI7QUFDRCxHQUZEOztBQUlBUCxFQUFBQSxPQUFPLENBQUNLLFNBQVIsQ0FBa0JHLFdBQWxCLEdBQWdDLFlBQVc7QUFDekMsV0FBTyxLQUFLRCxRQUFMLE1BQW1CLENBQTFCO0FBQ0QsR0FGRDs7QUFJQVAsRUFBQUEsT0FBTyxDQUFDSyxTQUFSLENBQWtCSSxVQUFsQixHQUErQixZQUFXO0FBQ3hDLFdBQU8sS0FBS0YsUUFBTCxNQUFtQixDQUExQjtBQUNELEdBRkQ7O0FBSUFQLEVBQUFBLE9BQU8sQ0FBQ0ssU0FBUixDQUFrQkssUUFBbEIsR0FBNkIsWUFBWTtBQUN2QyxRQUFJLEtBQUtDLEdBQUwsS0FBYSxDQUFqQixFQUFvQjtBQUNsQixhQUFPLEtBQUtDLEdBQUwsQ0FBU0YsUUFBVCxFQUFQO0FBQ0Q7O0FBRUQsUUFBSSxDQUFDLEtBQUtGLFdBQUwsRUFBTCxFQUF5QjtBQUN2QixZQUFNLElBQUlLLEtBQUosQ0FBVSwrQ0FBVixDQUFOO0FBQ0Q7O0FBRUQsV0FBTyxLQUFLRCxHQUFaO0FBQ0QsR0FWRDs7QUFZQVosRUFBQUEsT0FBTyxDQUFDSyxTQUFSLENBQWtCUyxTQUFsQixHQUE4QixZQUFZO0FBQ3hDLFFBQUksS0FBS0gsR0FBTCxLQUFhLENBQWpCLEVBQW9CO0FBQ2xCLGFBQU8sS0FBS0MsR0FBTCxDQUFTRSxTQUFULEVBQVA7QUFDRDs7QUFFRCxRQUFJLENBQUMsS0FBS0wsVUFBTCxFQUFMLEVBQXdCO0FBQ3RCLFlBQU0sSUFBSUksS0FBSixDQUFVLDBEQUFWLENBQU47QUFDRDs7QUFFRCxXQUFPLEtBQUtELEdBQVo7QUFDRCxHQVZEOztBQVlBWixFQUFBQSxPQUFPLENBQUNLLFNBQVIsQ0FBa0JFLFFBQWxCLEdBQTZCLFlBQVk7QUFDdkMsUUFBSSxLQUFLSSxHQUFMLEtBQWEsQ0FBakIsRUFBb0I7QUFDbEIsYUFBTyxLQUFLQyxHQUFMLENBQVNMLFFBQVQsRUFBUDtBQUNEOztBQUNELFFBQUksS0FBS0ksR0FBTCxLQUFhLENBQUMsQ0FBZCxJQUFtQixLQUFLQSxHQUFMLEtBQWEsQ0FBQyxDQUFyQyxFQUF3QztBQUN0QyxhQUFPLENBQVA7QUFDRDs7QUFFRCxXQUFPLEtBQUtBLEdBQVo7QUFDRCxHQVREO0FBVUQsQ0EvQ0Q7O0FBaURBWCxPQUFPLENBQUNlLGtCQUFSLEdBQTZCLFlBQVc7QUFDdENmLEVBQUFBLE9BQU8sQ0FBQ0ssU0FBUixDQUFrQkMsU0FBbEIsR0FBOEJVLFNBQTlCO0FBQ0FoQixFQUFBQSxPQUFPLENBQUNLLFNBQVIsQ0FBa0JHLFdBQWxCLEdBQWdDUSxTQUFoQztBQUNBaEIsRUFBQUEsT0FBTyxDQUFDSyxTQUFSLENBQWtCSSxVQUFsQixHQUErQk8sU0FBL0I7QUFDQWhCLEVBQUFBLE9BQU8sQ0FBQ0ssU0FBUixDQUFrQkssUUFBbEIsR0FBNkJNLFNBQTdCO0FBQ0FoQixFQUFBQSxPQUFPLENBQUNLLFNBQVIsQ0FBa0JTLFNBQWxCLEdBQThCRSxTQUE5QjtBQUNBaEIsRUFBQUEsT0FBTyxDQUFDSyxTQUFSLENBQWtCRSxRQUFsQixHQUE2QlMsU0FBN0I7QUFDRCxDQVBEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUHJvbWlzZSA9IHJlcXVpcmUoJy4vY29yZS5qcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByb21pc2U7XG5Qcm9taXNlLmVuYWJsZVN5bmNocm9ub3VzID0gZnVuY3Rpb24gKCkge1xuICBQcm9taXNlLnByb3RvdHlwZS5pc1BlbmRpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdGF0ZSgpID09IDA7XG4gIH07XG5cbiAgUHJvbWlzZS5wcm90b3R5cGUuaXNGdWxmaWxsZWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdGF0ZSgpID09IDE7XG4gIH07XG5cbiAgUHJvbWlzZS5wcm90b3R5cGUuaXNSZWplY3RlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0YXRlKCkgPT0gMjtcbiAgfTtcblxuICBQcm9taXNlLnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fNjUgPT09IDMpIHtcbiAgICAgIHJldHVybiB0aGlzLl81NS5nZXRWYWx1ZSgpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5pc0Z1bGZpbGxlZCgpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBnZXQgYSB2YWx1ZSBvZiBhbiB1bmZ1bGZpbGxlZCBwcm9taXNlLicpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl81NTtcbiAgfTtcblxuICBQcm9taXNlLnByb3RvdHlwZS5nZXRSZWFzb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuXzY1ID09PSAzKSB7XG4gICAgICByZXR1cm4gdGhpcy5fNTUuZ2V0UmVhc29uKCk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmlzUmVqZWN0ZWQoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZ2V0IGEgcmVqZWN0aW9uIHJlYXNvbiBvZiBhIG5vbi1yZWplY3RlZCBwcm9taXNlLicpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl81NTtcbiAgfTtcblxuICBQcm9taXNlLnByb3RvdHlwZS5nZXRTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fNjUgPT09IDMpIHtcbiAgICAgIHJldHVybiB0aGlzLl81NS5nZXRTdGF0ZSgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5fNjUgPT09IC0xIHx8IHRoaXMuXzY1ID09PSAtMikge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuXzY1O1xuICB9O1xufTtcblxuUHJvbWlzZS5kaXNhYmxlU3luY2hyb25vdXMgPSBmdW5jdGlvbigpIHtcbiAgUHJvbWlzZS5wcm90b3R5cGUuaXNQZW5kaW5nID0gdW5kZWZpbmVkO1xuICBQcm9taXNlLnByb3RvdHlwZS5pc0Z1bGZpbGxlZCA9IHVuZGVmaW5lZDtcbiAgUHJvbWlzZS5wcm90b3R5cGUuaXNSZWplY3RlZCA9IHVuZGVmaW5lZDtcbiAgUHJvbWlzZS5wcm90b3R5cGUuZ2V0VmFsdWUgPSB1bmRlZmluZWQ7XG4gIFByb21pc2UucHJvdG90eXBlLmdldFJlYXNvbiA9IHVuZGVmaW5lZDtcbiAgUHJvbWlzZS5wcm90b3R5cGUuZ2V0U3RhdGUgPSB1bmRlZmluZWQ7XG59O1xuIl19