a2ad1b33393f55bedd48165d1e821e63
'use strict';

var iconvLite = require('iconv-lite');

var Iconv = require('./iconv-loader');

module.exports.convert = convert;

function convert(str, to, from, useLite) {
  from = checkEncoding(from || 'UTF-8');
  to = checkEncoding(to || 'UTF-8');
  str = str || '';
  var result;

  if (from !== 'UTF-8' && typeof str === 'string') {
    str = new Buffer(str, 'binary');
  }

  if (from === to) {
    if (typeof str === 'string') {
      result = new Buffer(str);
    } else {
      result = str;
    }
  } else if (Iconv && !useLite) {
    try {
      result = convertIconv(str, to, from);
    } catch (E) {
      console.error(E);

      try {
        result = convertIconvLite(str, to, from);
      } catch (E) {
        console.error(E);
        result = str;
      }
    }
  } else {
    try {
      result = convertIconvLite(str, to, from);
    } catch (E) {
      console.error(E);
      result = str;
    }
  }

  if (typeof result === 'string') {
    result = new Buffer(result, 'utf-8');
  }

  return result;
}

function convertIconv(str, to, from) {
  var response, iconv;
  iconv = new Iconv(from, to + '//TRANSLIT//IGNORE');
  response = iconv.convert(str);
  return response.slice(0, response.length);
}

function convertIconvLite(str, to, from) {
  if (to === 'UTF-8') {
    return iconvLite.decode(str, from);
  } else if (from === 'UTF-8') {
    return iconvLite.encode(str, to);
  } else {
    return iconvLite.encode(iconvLite.decode(str, from), to);
  }
}

function checkEncoding(name) {
  return (name || '').toString().trim().replace(/^latin[\-_]?(\d+)$/i, 'ISO-8859-$1').replace(/^win(?:dows)?[\-_]?(\d+)$/i, 'WINDOWS-$1').replace(/^utf[\-_]?(\d+)$/i, 'UTF-$1').replace(/^ks_c_5601\-1987$/i, 'CP949').replace(/^us[\-_]?ascii$/i, 'ASCII').toUpperCase();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVuY29kaW5nLmpzIl0sIm5hbWVzIjpbImljb252TGl0ZSIsInJlcXVpcmUiLCJJY29udiIsIm1vZHVsZSIsImV4cG9ydHMiLCJjb252ZXJ0Iiwic3RyIiwidG8iLCJmcm9tIiwidXNlTGl0ZSIsImNoZWNrRW5jb2RpbmciLCJyZXN1bHQiLCJCdWZmZXIiLCJjb252ZXJ0SWNvbnYiLCJFIiwiY29uc29sZSIsImVycm9yIiwiY29udmVydEljb252TGl0ZSIsInJlc3BvbnNlIiwiaWNvbnYiLCJzbGljZSIsImxlbmd0aCIsImRlY29kZSIsImVuY29kZSIsIm5hbWUiLCJ0b1N0cmluZyIsInRyaW0iLCJyZXBsYWNlIiwidG9VcHBlckNhc2UiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLFNBQVMsR0FBR0MsT0FBTyxDQUFDLFlBQUQsQ0FBdkI7O0FBR0EsSUFBSUMsS0FBSyxHQUFHRCxPQUFPLENBQUMsZ0JBQUQsQ0FBbkI7O0FBR0FFLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlQyxPQUFmLEdBQXlCQSxPQUF6Qjs7QUFXQSxTQUFTQSxPQUFULENBQWlCQyxHQUFqQixFQUFzQkMsRUFBdEIsRUFBMEJDLElBQTFCLEVBQWdDQyxPQUFoQyxFQUF5QztBQUNyQ0QsRUFBQUEsSUFBSSxHQUFHRSxhQUFhLENBQUNGLElBQUksSUFBSSxPQUFULENBQXBCO0FBQ0FELEVBQUFBLEVBQUUsR0FBR0csYUFBYSxDQUFDSCxFQUFFLElBQUksT0FBUCxDQUFsQjtBQUNBRCxFQUFBQSxHQUFHLEdBQUdBLEdBQUcsSUFBSSxFQUFiO0FBRUEsTUFBSUssTUFBSjs7QUFFQSxNQUFJSCxJQUFJLEtBQUssT0FBVCxJQUFvQixPQUFPRixHQUFQLEtBQWUsUUFBdkMsRUFBaUQ7QUFDN0NBLElBQUFBLEdBQUcsR0FBRyxJQUFJTSxNQUFKLENBQVdOLEdBQVgsRUFBZ0IsUUFBaEIsQ0FBTjtBQUNIOztBQUVELE1BQUlFLElBQUksS0FBS0QsRUFBYixFQUFpQjtBQUNiLFFBQUksT0FBT0Qs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b3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBpY29udkxpdGUgPSByZXF1aXJlKCdpY29udi1saXRlJyk7XG4vLyBMb2FkIEljb252IGZyb20gYW4gZXh0ZXJuYWwgZmlsZSB0byBiZSBhYmxlIHRvIGRpc2FibGUgSWNvbnYgZm9yIHdlYnBhY2tcbi8vIEFkZCAvXFwvaWNvbnYtbG9hZGVyJC8gdG8gd2VicGFjay5JZ25vcmVQbHVnaW4gdG8gaWdub3JlIGl0XG52YXIgSWNvbnYgPSByZXF1aXJlKCcuL2ljb252LWxvYWRlcicpO1xuXG4vLyBFeHBvc2UgdG8gdGhlIHdvcmxkXG5tb2R1bGUuZXhwb3J0cy5jb252ZXJ0ID0gY29udmVydDtcblxuLyoqXG4gKiBDb252ZXJ0IGVuY29kaW5nIG9mIGFuIFVURi04IHN0cmluZyBvciBhIGJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfEJ1ZmZlcn0gc3RyIFN0cmluZyB0byBiZSBjb252ZXJ0ZWRcbiAqIEBwYXJhbSB7U3RyaW5nfSB0byBFbmNvZGluZyB0byBiZSBjb252ZXJ0ZWQgdG9cbiAqIEBwYXJhbSB7U3RyaW5nfSBbZnJvbT0nVVRGLTgnXSBFbmNvZGluZyB0byBiZSBjb252ZXJ0ZWQgZnJvbVxuICogQHBhcmFtIHtCb29sZWFufSB1c2VMaXRlIElmIHNldCB0byB0dXJlLCBmb3JjZSB0byB1c2UgaWNvbnZMaXRlXG4gKiBAcmV0dXJuIHtCdWZmZXJ9IEVuY29kZWQgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnQoc3RyLCB0bywgZnJvbSwgdXNlTGl0ZSkge1xuICAgIGZyb20gPSBjaGVja0VuY29kaW5nKGZyb20gfHwgJ1VURi04Jyk7XG4gICAgdG8gPSBjaGVja0VuY29kaW5nKHRvIHx8ICdVVEYtOCcpO1xuICAgIHN0ciA9IHN0ciB8fCAnJztcblxuICAgIHZhciByZXN1bHQ7XG5cbiAgICBpZiAoZnJvbSAhPT0gJ1VURi04JyAmJiB0eXBlb2Ygc3RyID09PSAnc3RyaW5nJykge1xuICAgICAgICBzdHIgPSBuZXcgQnVmZmVyKHN0ciwgJ2JpbmFyeScpO1xuICAgIH1cblxuICAgIGlmIChmcm9tID09PSB0bykge1xuICAgICAgICBpZiAodHlwZW9mIHN0ciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBCdWZmZXIoc3RyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHN0cjtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoSWNvbnYgJiYgIXVzZUxpdGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGNvbnZlcnRJY29udihzdHIsIHRvLCBmcm9tKTtcbiAgICAgICAgfSBjYXRjaCAoRSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihFKTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gY29udmVydEljb252TGl0ZShzdHIsIHRvLCBmcm9tKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKEUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKEUpO1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHN0cjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSBjb252ZXJ0SWNvbnZMaXRlKHN0ciwgdG8sIGZyb20pO1xuICAgICAgICB9IGNhdGNoIChFKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKEUpO1xuICAgICAgICAgICAgcmVzdWx0ID0gc3RyO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmVzdWx0ID0gbmV3IEJ1ZmZlcihyZXN1bHQsICd1dGYtOCcpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ29udmVydCBlbmNvZGluZyBvZiBhIHN0cmluZyB3aXRoIG5vZGUtaWNvbnYgKGlmIGF2YWlsYWJsZSlcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xCdWZmZXJ9IHN0ciBTdHJpbmcgdG8gYmUgY29udmVydGVkXG4gKiBAcGFyYW0ge1N0cmluZ30gdG8gRW5jb2RpbmcgdG8gYmUgY29udmVydGVkIHRvXG4gKiBAcGFyYW0ge1N0cmluZ30gW2Zyb209J1VURi04J10gRW5jb2RpbmcgdG8gYmUgY29udmVydGVkIGZyb21cbiAqIEByZXR1cm4ge0J1ZmZlcn0gRW5jb2RlZCBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gY29udmVydEljb252KHN0ciwgdG8sIGZyb20pIHtcbiAgICB2YXIgcmVzcG9uc2UsIGljb252O1xuICAgIGljb252ID0gbmV3IEljb252KGZyb20sIHRvICsgJy8vVFJBTlNMSVQvL0lHTk9SRScpO1xuICAgIHJlc3BvbnNlID0gaWNvbnYuY29udmVydChzdHIpO1xuICAgIHJldHVybiByZXNwb25zZS5zbGljZSgwLCByZXNwb25zZS5sZW5ndGgpO1xufVxuXG4vKipcbiAqIENvbnZlcnQgZW5jb2Rpbmcgb2YgYXN0cmluZyB3aXRoIGljb252LWxpdGVcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xCdWZmZXJ9IHN0ciBTdHJpbmcgdG8gYmUgY29udmVydGVkXG4gKiBAcGFyYW0ge1N0cmluZ30gdG8gRW5jb2RpbmcgdG8gYmUgY29udmVydGVkIHRvXG4gKiBAcGFyYW0ge1N0cmluZ30gW2Zyb209J1VURi04J10gRW5jb2RpbmcgdG8gYmUgY29udmVydGVkIGZyb21cbiAqIEByZXR1cm4ge0J1ZmZlcn0gRW5jb2RlZCBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gY29udmVydEljb252TGl0ZShzdHIsIHRvLCBmcm9tKSB7XG4gICAgaWYgKHRvID09PSAnVVRGLTgnKSB7XG4gICAgICAgIHJldHVybiBpY29udkxpdGUuZGVjb2RlKHN0ciwgZnJvbSk7XG4gICAgfSBlbHNlIGlmIChmcm9tID09PSAnVVRGLTgnKSB7XG4gICAgICAgIHJldHVybiBpY29udkxpdGUuZW5jb2RlKHN0ciwgdG8pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpY29udkxpdGUuZW5jb2RlKGljb252TGl0ZS5kZWNvZGUoc3RyLCBmcm9tKSwgdG8pO1xuICAgIH1cbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBjaGFyc2V0IG5hbWUgaWYgbmVlZGVkXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgQ2hhcmFjdGVyIHNldFxuICogQHJldHVybiB7U3RyaW5nfSBDaGFyYWN0ZXIgc2V0IG5hbWVcbiAqL1xuZnVuY3Rpb24gY2hlY2tFbmNvZGluZyhuYW1lKSB7XG4gICAgcmV0dXJuIChuYW1lIHx8ICcnKS50b1N0cmluZygpLnRyaW0oKS5cbiAgICByZXBsYWNlKC9ebGF0aW5bXFwtX10/KFxcZCspJC9pLCAnSVNPLTg4NTktJDEnKS5cbiAgICByZXBsYWNlKC9ed2luKD86ZG93cyk/W1xcLV9dPyhcXGQrKSQvaSwgJ1dJTkRPV1MtJDEnKS5cbiAgICByZXBsYWNlKC9edXRmW1xcLV9dPyhcXGQrKSQvaSwgJ1VURi0kMScpLlxuICAgIHJlcGxhY2UoL15rc19jXzU2MDFcXC0xOTg3JC9pLCAnQ1A5NDknKS5cbiAgICByZXBsYWNlKC9edXNbXFwtX10/YXNjaWkkL2ksICdBU0NJSScpLlxuICAgIHRvVXBwZXJDYXNlKCk7XG59XG4iXX0=