4bb2dae88e0a5f66b62c3cf2d1f3706c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withNextInputAutoFocusInput = exports.withNextInputAutoFocusForm = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _withFormik = _interopRequireDefault(require("./withFormik"));

var withNextInputAutoFocusContextType = {
  setInput: _propTypes.default.func,
  handleSubmitEditing: _propTypes.default.func,
  getReturnKeyType: _propTypes.default.func
};

var getInputs = function getInputs(children) {
  return _react.default.Children.toArray(children).reduce(function (partialInputs, child) {
    if (child && child.props && child.props.children) {
      return partialInputs.concat(getInputs(child.props.children));
    }

    if (child && child.props && !!child.props.name) return partialInputs.concat(child);
    return partialInputs;
  }, []);
};

var withNextInputAutoFocusForm = function withNextInputAutoFocusForm(WrappedComponent) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    submitAfterLastInput: true
  },
      submitAfterLastInput = _ref.submitAfterLastInput;

  var WithNextInputAutoFocusForm = function (_React$PureComponent) {
    (0, _inherits2.default)(WithNextInputAutoFocusForm, _React$PureComponent);

    function WithNextInputAutoFocusForm(props) {
      var _this;

      (0, _classCallCheck2.default)(this, WithNextInputAutoFocusForm);
      _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf3.default)(WithNextInputAutoFocusForm).call(this, props));
      _this.inputRefs = {};

      _this.getInputPosition = function (name) {
        return _this.inputs.findIndex(function (input) {
          return input.props.name === name;
        });
      };

      _this.getChildContext = function () {
        return {
          setInput: function setInput(name, component) {
            _this.inputRefs[name] = component;
          },
          handleSubmitEditing: function handleSubmitEditing(name) {
            var inputPosition = _this.getInputPosition(name);

            var nextInputs = _this.inputs.slice(inputPosition + 1);

            var nextFocusableInput = nextInputs.find(function (element) {
              return _this.inputRefs[element.props.name] && _this.inputRefs[element.props.name].focus;
            });

            if (nextFocusableInput) {
              _this.inputRefs[nextFocusableInput.props.name].focus();
            } else {
              if (submitAfterLastInput) _this.props.formik.submitForm();
            }
          },
          getReturnKeyType: function getReturnKeyType(name) {
            var inputPosition = _this.getInputPosition(name);

            var isLastInput = inputPosition === _this.inputs.length - 1;
            return isLastInput ? "done" : "next";
          }
        };
      };

      var children = props.children;
      _this.inputs = getInputs(children || []);
      return _this;
    }

    (0, _createClass2.default)(WithNextInputAutoFocusForm, [{
      key: "render",
      value: function render() {
        return _react.default.createElement(WrappedComponent, this.props);
      }
    }]);
    return WithNextInputAutoFocusForm;
  }(_react.default.PureComponent);

  WithNextInputAutoFocusForm.childContextTypes = withNextInputAutoFocusContextType;
  return (0, _withFormik.default)(WithNextInputAutoFocusForm);
};

exports.withNextInputAutoFocusForm = withNextInputAutoFocusForm;

var withNextInputAutoFocusInput = function withNextInputAutoFocusInput(Input) {
  var WithNextInputAutoFocusInput = function (_React$Component) {
    (0, _inherits2.default)(WithNextInputAutoFocusInput, _React$Component);

    function WithNextInputAutoFocusInput() {
      var _getPrototypeOf2;

      var _this2;

      (0, _classCallCheck2.default)(this, WithNextInputAutoFocusInput);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this2 = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(WithNextInputAutoFocusInput)).call.apply(_getPrototypeOf2, [this].concat(args)));

      _this2.setInput = function (component) {
        _this2.context.setInput(_this2.props.name, component);
      };

      _this2.onSubmitEditing = function () {
        _this2.context.handleSubmitEditing(_this2.props.name);

        if (_this2.props.onSubmitEditing) _this2.props.onSubmitEditing();
      };

      return _this2;
    }

    (0, _createClass2.default)(WithNextInputAutoFocusInput, [{
      key: "render",
      value: function render() {
        var getReturnKeyType = this.context.getReturnKeyType;
        var name = this.props.name;
        return _react.default.createElement(Input, (0, _extends2.default)({
          returnKeyType: getReturnKeyType(name)
        }, this.props, {
          ref: this.setInput,
          onSubmitEditing: this.onSubmitEditing
        }));
      }
    }]);
    return WithNextInputAutoFocusInput;
  }(_react.default.Component);

  WithNextInputAutoFocusInput.contextTypes = withNextInputAutoFocusContextType;
  return WithNextInputAutoFocusInput;
};

exports.withNextInputAutoFocusInput = withNextInputAutoFocusInput;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,