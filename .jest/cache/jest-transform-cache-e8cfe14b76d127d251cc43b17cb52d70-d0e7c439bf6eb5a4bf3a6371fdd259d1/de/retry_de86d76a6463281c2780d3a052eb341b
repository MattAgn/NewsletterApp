84a73f2dbc3ad89ffd0b55cc3a9a5752
"use strict";

var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Subscriber_1 = require("../Subscriber");

function retry(count) {
  if (count === void 0) {
    count = -1;
  }

  return function (source) {
    return source.lift(new RetryOperator(count, source));
  };
}

exports.retry = retry;

var RetryOperator = function () {
  function RetryOperator(count, source) {
    this.count = count;
    this.source = source;
  }

  RetryOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));
  };

  return RetryOperator;
}();

var RetrySubscriber = function (_super) {
  __extends(RetrySubscriber, _super);

  function RetrySubscriber(destination, count, source) {
    var _this = _super.call(this, destination) || this;

    _this.count = count;
    _this.source = source;
    return _this;
  }

  RetrySubscriber.prototype.error = function (err) {
    if (!this.isStopped) {
      var _a = this,
          source = _a.source,
          count = _a.count;

      if (count === 0) {
        return _super.prototype.error.call(this, err);
      } else if (count > -1) {
        this.count = count - 1;
      }

      source.subscribe(this._unsubscribeAndRecycle());
    }
  };

  return RetrySubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvcmV0cnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSxJQUFBLFlBQUEsR0FBQSxPQUFBLENBQUEsZUFBQSxDQUFBOztBQW1EQSxTQUFnQixLQUFoQixDQUF5QixLQUF6QixFQUEyQztBQUFsQixNQUFBLEtBQUEsS0FBQSxLQUFBLENBQUEsRUFBQTtBQUFBLElBQUEsS0FBQSxHQUFBLENBQWlCLENBQWpCO0FBQWtCOztBQUN6QyxTQUFPLFVBQUMsTUFBRCxFQUFzQjtBQUFLLFdBQUEsTUFBTSxDQUFDLElBQVAsQ0FBWSxJQUFJLGFBQUosQ0FBa0IsS0FBbEIsRUFBWixNQUFZLENBQVosQ0FBQTtBQUE2QyxHQUEvRTtBQUNEOztBQUZELE9BQUEsQ0FBQSxLQUFBLEdBQUEsS0FBQTs7QUFJQSxJQUFBLGFBQUEsR0FBQSxZQUFBO0FBQ0UsV0FBQSxhQUFBLENBQW9CLEtBQXBCLEVBQ29CLE1BRHBCLEVBQ3lDO0FBRHJCLFNBQUEsS0FBQSxHQUFBLEtBQUE7QUFDQSxTQUFBLE1BQUEsR0FBQSxNQUFBO0FBQ25COztBQUVELEVBQUEsYUFBQSxDQUFBLFNBQUEsQ0FBQSxJQUFBLEdBQUEsVUFBSyxVQUFMLEVBQWdDLE1BQWhDLEVBQTJDO0FBQ3pDLFdBQU8sTUFBTSxDQUFDLFNBQVAsQ0FBaUIsSUFBSSxlQUFKLENBQW9CLFVBQXBCLEVBQWdDLEtBQUssS0FBckMsRUFBNEMsS0FBSyxNQUFqRCxDQUFqQixDQUFQO0FBQ0QsR0FGRDs7QUFHRixTQUFBLGFBQUE7QUFBQyxDQVJELEVBQUE7O0FBZUEsSUFBQSxlQUFBLEdBQUEsVUFBQSxNQUFBLEVBQUE7QUFBaUMsRUFBQSxTQUFBLENBQUEsZUFBQSxFQUFBLE1BQUEsQ0FBQTs7QUFDL0IsV0FBQSxlQUFBLENBQVksV0FBWixFQUNvQixLQURwQixFQUVvQixNQUZwQixFQUV5QztBQUZ6QyxRQUFBLEtBQUEsR0FHRSxNQUFBLENBQUEsSUFBQSxDQUFBLElBQUEsRUFBTSxXQUFOLEtBQWtCLElBSHBCOztBQUNvQixJQUFBLEtBQUEsQ0FBQSxLQUFBLEdBQUEsS0FBQTtBQUNBLElBQUEsS0FBQSxDQUFBLE1BQUEsR0FBQSxNQUFBOztBQUVuQjs7QUFDRCxFQUFBLGVBQUEsQ0FBQSxTQUFBLENBQUEsS0FBQSxHQUFBLFVBQU0sR0FBTixFQUFjO0FBQ1osUUFBSSxDQUFDLEtBQUssU0FBVixFQUFxQjtBQUNiLFVBQUEsRUFBQSxHQUFBLElBQUE7QUFBQSxVQUFFLE1BQUEsR0FBQSxFQUFBLENBQUEsTUFBRjtBQUFBLFVBQVUsS0FBQSxHQUFBLEVBQUEsQ0FBQSxLQUFWOztBQUNOLFVBQUksS0FBSyxLQUFLLENBQWQsRUFBaUI7QUFDZixlQUFPLE1BQUEsQ0FBQSxTQUFBLENBQU0sS0FBTixDQUFXLElBQVgsQ0FBVyxJQUFYLEVBQVksR0FBWixDQUFQO0FBQ0QsT0FGRCxNQUVPLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBYixFQUFnQjtBQUNyQixhQUFLLEtBQUwsR0FBYSxLQUFLLEdBQUcsQ0FBckI7QUFDRDs7QUFDRCxNQUFBLE1BQU0sQ0FBQyxTQUFQLENBQWlCLEtBQUssc0JBQUwsRUFBakI7QUFDRDtBQUNGLEdBVkQ7O0FBV0YsU0FBQSxlQUFBO0FBQUMsQ0FqQkQsQ0FBaUMsWUFBQSxDQUFBLFVBQWpDLENBQUEifQ==