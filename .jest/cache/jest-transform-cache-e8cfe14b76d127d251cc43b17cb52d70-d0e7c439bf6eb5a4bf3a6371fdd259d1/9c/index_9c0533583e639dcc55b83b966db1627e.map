{"version":3,"sources":["index.js"],"names":["setUpAndTearDown","require","fetchHandler","inspecting","FetchMock","config","fallbackToNetwork","includeContentLength","sendAsJson","warnOnFallback","overwriteRoutes","undefined","createInstance","isLibrary","instance","Object","create","_uncompiledRoutes","slice","routes","map","compileRoute","fallbackResponse","_calls","_holdingPromises","bindMethods","MATCHED","UNMATCHED","fetchMock","bind","reset","restore","resetHistory","resetBehavior","sandbox","proxy","url","options","isSandbox","module","exports"],"mappings":";;;;AAAA,IAAMA,gBAAgB,GAAGC,OAAO,CAAC,wBAAD,CAAhC;;AACA,IAAMC,YAAY,GAAGD,OAAO,CAAC,iBAAD,CAA5B;;AACA,IAAME,UAAU,GAAGF,OAAO,CAAC,cAAD,CAA1B;;AAEA,IAAMG,SAAS,GAAG,uBAAc,EAAd,EAAkBF,YAAlB,EAAgCF,gBAAhC,EAAkDG,UAAlD,CAAlB;AAEAC,SAAS,CAACC,MAAV,GAAmB;AAClBC,EAAAA,iBAAiB,EAAE,KADD;AAElBC,EAAAA,oBAAoB,EAAE,IAFJ;AAGlBC,EAAAA,UAAU,EAAE,IAHM;AAIlBC,EAAAA,cAAc,EAAE,IAJE;AAKlBC,EAAAA,eAAe,EAAEC;AALC,CAAnB;;AAQAP,SAAS,CAACQ,cAAV,GAA2B,UAASC,SAAT,EAAoB;AAC9C,MAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAcZ,SAAd,CAAjB;AACAU,EAAAA,QAAQ,CAACG,iBAAT,GAA6B,CAAC,KAAKA,iBAAL,IAA0B,EAA3B,EAA+BC,KAA/B,EAA7B;AACAJ,EAAAA,QAAQ,CAACK,MAAT,GAAkBL,QAAQ,CAACG,iBAAT,CAA2BG,GAA3B,CAA+B,UAAAf,MAAM;AAAA,WACtDS,QAAQ,CAACO,YAAT,CAAsBhB,MAAtB,CADsD;AAAA,GAArC,CAAlB;AAGAS,EAAAA,QAAQ,CAACQ,gBAAT,GAA4B,KAAKA,gBAAL,IAAyBX,SAArD;AACAG,EAAAA,QAAQ,CAACT,MAAT,GAAkB,uBAAc,EAAd,EAAkB,KAAKA,MAAL,IAAeD,SAAS,CAACC,MAA3C,CAAlB;AACAS,EAAAA,QAAQ,CAACS,MAAT,GAAkB,EAAlB;AACAT,EAAAA,QAAQ,CAACU,gBAAT,GAA4B,EAA5B;AACAV,EAAAA,QAAQ,CAACW,WAAT;;AACA,MAAIZ,SAAJ,EAAe;AACd,2BAAcC,QAAd,EAAwB;AACvBY,MAAAA,OAAO,EAAE,IADc;AAEvBC,MAAAA,SAAS,EAAE,KAFY;AAGvBC,MAAAA,SAAS,EAAEd;AAHY,KAAxB;AAKA;;AACD,SAAOA,QAAP;AACA,CAnBD;;AAqBAV,SAAS,CAACqB,WAAV,GAAwB,YAAW;AAClC,OAAKvB,YAAL,GAAoBE,SAAS,CAACF,YAAV,CAAuB2B,IAAvB,CAA4B,IAA5B,CAApB;AACA,OAAKC,KAAL,GAAa,KAAKC,OAAL,GAAe3B,SAAS,CAAC0B,KAAV,CAAgBD,IAAhB,CAAqB,IAArB,CAA5B;AACA,OAAKG,YAAL,GAAoB5B,SAAS,CAAC4B,YAAV,CAAuBH,IAAvB,CAA4B,IAA5B,CAApB;AACA,OAAKI,aAAL,GAAqB7B,SAAS,CAAC6B,aAAV,CAAwBJ,IAAxB,CAA6B,IAA7B,CAArB;AACA,CALD;;AAOAzB,SAAS,CAAC8B,OAAV,GAAoB,YAAW;AAI9B,MAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,GAAD,EAAMC,OAAN;AAAA,WAAkBH,OAAO,CAAChC,YAAR,CAAqBkC,GAArB,EAA0BC,OAA1B,CAAlB;AAAA,GAAd;;AAEA,MAAMH,OAAO,GAAG,uBACfC,KADe,EAEf/B,SAFe,EAGf,KAAKQ,cAAL,EAHe,CAAhB;AAMAsB,EAAAA,OAAO,CAACT,WAAR;AACAS,EAAAA,OAAO,CAACI,SAAR,GAAoB,IAApB;AACA,SAAOJ,OAAP;AACA,CAfD;;AAiBAK,MAAM,CAACC,OAAP,GAAiBpC,SAAjB","sourcesContent":["const setUpAndTearDown = require('./set-up-and-tear-down');\nconst fetchHandler = require('./fetch-handler');\nconst inspecting = require('./inspecting');\n\nconst FetchMock = Object.assign({}, fetchHandler, setUpAndTearDown, inspecting);\n\nFetchMock.config = {\n\tfallbackToNetwork: false,\n\tincludeContentLength: true,\n\tsendAsJson: true,\n\twarnOnFallback: true,\n\toverwriteRoutes: undefined\n};\n\nFetchMock.createInstance = function(isLibrary) {\n\tconst instance = Object.create(FetchMock);\n\tinstance._uncompiledRoutes = (this._uncompiledRoutes || []).slice();\n\tinstance.routes = instance._uncompiledRoutes.map(config =>\n\t\tinstance.compileRoute(config)\n\t);\n\tinstance.fallbackResponse = this.fallbackResponse || undefined;\n\tinstance.config = Object.assign({}, this.config || FetchMock.config);\n\tinstance._calls = [];\n\tinstance._holdingPromises = [];\n\tinstance.bindMethods();\n\tif (isLibrary) {\n\t\tObject.assign(instance, {\n\t\t\tMATCHED: true,\n\t\t\tUNMATCHED: false,\n\t\t\tfetchMock: instance\n\t\t});\n\t}\n\treturn instance;\n};\n\nFetchMock.bindMethods = function() {\n\tthis.fetchHandler = FetchMock.fetchHandler.bind(this);\n\tthis.reset = this.restore = FetchMock.reset.bind(this);\n\tthis.resetHistory = FetchMock.resetHistory.bind(this);\n\tthis.resetBehavior = FetchMock.resetBehavior.bind(this);\n};\n\nFetchMock.sandbox = function() {\n\t// this construct allows us to create a fetch-mock instance which is also\n\t// a callable function, while circumventing circularity when defining the\n\t// object that this function should be bound to\n\tconst proxy = (url, options) => sandbox.fetchHandler(url, options);\n\n\tconst sandbox = Object.assign(\n\t\tproxy, // Ensures that the entire returned object is a callable function\n\t\tFetchMock, // prototype methods\n\t\tthis.createInstance() // instance data\n\t);\n\n\tsandbox.bindMethods();\n\tsandbox.isSandbox = true;\n\treturn sandbox;\n};\n\nmodule.exports = FetchMock;\n"]}