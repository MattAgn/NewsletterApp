f4837534902cdeb81205f621f1310d11
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var isWhat = require('is-what');

function assignProp(carry, key, newVal, originalObject) {
  var propType = originalObject.propertyIsEnumerable(key) ? 'enumerable' : 'nonenumerable';
  if (propType === 'enumerable') carry[key] = newVal;

  if (propType === 'nonenumerable') {
    Object.defineProperty(carry, key, {
      value: newVal,
      enumerable: false,
      writable: true,
      configurable: true
    });
  }
}

function mergeRecursively(origin, newComer, extensions) {
  if (!isWhat.isPlainObject(newComer)) {
    if (extensions && isWhat.isArray(extensions)) {
      extensions.forEach(function (extend) {
        newComer = extend(origin, newComer);
      });
    }

    return newComer;
  }

  var newObject = {};

  if (isWhat.isPlainObject(origin)) {
    var props_1 = Object.getOwnPropertyNames(origin);
    var symbols_1 = Object.getOwnPropertySymbols(origin);
    newObject = props_1.concat(symbols_1).reduce(function (carry, key) {
      var targetVal = origin[key];

      if (!isWhat.isSymbol(key) && !Object.getOwnPropertyNames(newComer).includes(key) || isWhat.isSymbol(key) && !Object.getOwnPropertySymbols(newComer).includes(key)) {
        assignProp(carry, key, targetVal, origin);
      }

      return carry;
    }, {});
  }

  var props = Object.getOwnPropertyNames(newComer);
  var symbols = Object.getOwnPropertySymbols(newComer);
  var result = props.concat(symbols).reduce(function (carry, key) {
    var newVal = newComer[key];
    var targetVal = isWhat.isPlainObject(origin) ? origin[key] : undefined;

    if (extensions && isWhat.isArray(extensions)) {
      extensions.forEach(function (extend) {
        newVal = extend(targetVal, newVal);
      });
    }

    if (targetVal !== undefined && isWhat.isPlainObject(newVal)) {
      newVal = mergeRecursively(targetVal, newVal, extensions);
    }

    assignProp(carry, key, newVal, newComer);
    return carry;
  }, newObject);
  return result;
}

function merge(origin) {
  var newComers = [];

  for (var _i = 1; _i < arguments.length; _i++) {
    newComers[_i - 1] = arguments[_i];
  }

  var extensions = null;
  var base = origin;

  if (isWhat.isPlainObject(origin) && origin.extensions && Object.keys(origin).length === 1) {
    base = {};
    extensions = origin.extensions;
  }

  return newComers.reduce(function (result, newComer) {
    return mergeRecursively(result, newComer, extensions);
  }, base);
}

function concatArrays(originVal, newVal) {
  if (isWhat.isArray(originVal) && isWhat.isArray(newVal)) {
    return originVal.concat(newVal);
  }

  return newVal;
}

exports.merge = merge;
exports.concatArrays = concatArrays;
exports.default = merge;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,