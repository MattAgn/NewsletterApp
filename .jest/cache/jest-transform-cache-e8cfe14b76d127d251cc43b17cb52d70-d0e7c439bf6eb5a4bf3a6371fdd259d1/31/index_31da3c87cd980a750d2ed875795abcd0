f70b3fec06db03fbe85bd5551d2f794f
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends3 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var Stream = _interopDefault(require('stream'));

var http = _interopDefault(require('http'));

var Url = _interopDefault(require('url'));

var https = _interopDefault(require('https'));

var zlib = _interopDefault(require('zlib'));

var Readable = Stream.Readable;
var BUFFER = Symbol('buffer');
var TYPE = Symbol('type');

var Blob = function () {
  function Blob() {
    (0, _classCallCheck2.default)(this, Blob);
    this[TYPE] = '';
    var blobParts = arguments[0];
    var options = arguments[1];
    var buffers = [];
    var size = 0;

    if (blobParts) {
      var a = blobParts;
      var length = Number(a.length);

      for (var i = 0; i < length; i++) {
        var element = a[i];
        var buffer = void 0;

        if (element instanceof Buffer) {
          buffer = element;
        } else if (ArrayBuffer.isView(element)) {
          buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
        } else if (element instanceof ArrayBuffer) {
          buffer = Buffer.from(element);
        } else if (element instanceof Blob) {
          buffer = element[BUFFER];
        } else {
          buffer = Buffer.from(typeof element === 'string' ? element : String(element));
        }

        size += buffer.length;
        buffers.push(buffer);
      }
    }

    this[BUFFER] = Buffer.concat(buffers);
    var type = options && options.type !== undefined && String(options.type).toLowerCase();

    if (type && !/[^\u0020-\u007E]/.test(type)) {
      this[TYPE] = type;
    }
  }

  (0, _createClass2.default)(Blob, [{
    key: "text",
    value: function text() {
      return Promise.resolve(this[BUFFER].toString());
    }
  }, {
    key: "arrayBuffer",
    value: function arrayBuffer() {
      var buf = this[BUFFER];
      var ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
      return Promise.resolve(ab);
    }
  }, {
    key: "stream",
    value: function stream() {
      var readable = new Readable();

      readable._read = function () {};

      readable.push(this[BUFFER]);
      readable.push(null);
      return readable;
    }
  }, {
    key: "toString",
    value: function toString() {
      return '[object Blob]';
    }
  }, {
    key: "slice",
    value: function slice() {
      var size = this.size;
      var start = arguments[0];
      var end = arguments[1];
      var relativeStart, relativeEnd;

      if (start === undefined) {
        relativeStart = 0;
      } else if (start < 0) {
        relativeStart = Math.max(size + start, 0);
      } else {
        relativeStart = Math.min(start, size);
      }

      if (end === undefined) {
        relativeEnd = size;
      } else if (end < 0) {
        relativeEnd = Math.max(size + end, 0);
      } else {
        relativeEnd = Math.min(end, size);
      }

      var span = Math.max(relativeEnd - relativeStart, 0);
      var buffer = this[BUFFER];
      var slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
      var blob = new Blob([], {
        type: arguments[2]
      });
      blob[BUFFER] = slicedBuffer;
      return blob;
    }
  }, {
    key: "size",
    get: function get() {
      return this[BUFFER].length;
    }
  }, {
    key: "type",
    get: function get() {
      return this[TYPE];
    }
  }]);
  return Blob;
}();

Object.defineProperties(Blob.prototype, {
  size: {
    enumerable: true
  },
  type: {
    enumerable: true
  },
  slice: {
    enumerable: true
  }
});
Object.defineProperty(Blob.prototype, typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag", {
  value: 'Blob',
  writable: false,
  enumerable: false,
  configurable: true
});

function FetchError(message, type, systemError) {
  Error.call(this, message);
  this.message = message;
  this.type = type;

  if (systemError) {
    this.code = this.errno = systemError.code;
  }

  Error.captureStackTrace(this, this.constructor);
}

FetchError.prototype = Object.create(Error.prototype);
FetchError.prototype.constructor = FetchError;
FetchError.prototype.name = 'FetchError';
var convert;

try {
  convert = require('encoding').convert;
} catch (e) {}

var INTERNALS = Symbol('Body internals');
var PassThrough = Stream.PassThrough;

function Body(body) {
  var _this = this;

  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$size = _ref.size;

  var size = _ref$size === undefined ? 0 : _ref$size;
  var _ref$timeout = _ref.timeout;
  var timeout = _ref$timeout === undefined ? 0 : _ref$timeout;

  if (body == null) {
    body = null;
  } else if (isURLSearchParams(body)) {
    body = Buffer.from(body.toString());
  } else if (isBlob(body)) ;else if (Buffer.isBuffer(body)) ;else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
    body = Buffer.from(body);
  } else if (ArrayBuffer.isView(body)) {
    body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
  } else if (body instanceof Stream) ;else {
    body = Buffer.from(String(body));
  }

  this[INTERNALS] = {
    body: body,
    disturbed: false,
    error: null
  };
  this.size = size;
  this.timeout = timeout;

  if (body instanceof Stream) {
    body.on('error', function (err) {
      var error = err.name === 'AbortError' ? err : new FetchError("Invalid response body while trying to fetch " + _this.url + ": " + err.message, 'system', err);
      _this[INTERNALS].error = error;
    });
  }
}

Body.prototype = {
  get body() {
    return this[INTERNALS].body;
  },

  get bodyUsed() {
    return this[INTERNALS].disturbed;
  },

  arrayBuffer: function arrayBuffer() {
    return consumeBody.call(this).then(function (buf) {
      return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
    });
  },
  blob: function blob() {
    var ct = this.headers && this.headers.get('content-type') || '';
    return consumeBody.call(this).then(function (buf) {
      return (0, _extends3.default)(new Blob([], {
        type: ct.toLowerCase()
      }), (0, _defineProperty2.default)({}, BUFFER, buf));
    });
  },
  json: function json() {
    var _this2 = this;

    return consumeBody.call(this).then(function (buffer) {
      try {
        return JSON.parse(buffer.toString());
      } catch (err) {
        return Body.Promise.reject(new FetchError("invalid json response body at " + _this2.url + " reason: " + err.message, 'invalid-json'));
      }
    });
  },
  text: function text() {
    return consumeBody.call(this).then(function (buffer) {
      return buffer.toString();
    });
  },
  buffer: function buffer() {
    return consumeBody.call(this);
  },
  textConverted: function textConverted() {
    var _this3 = this;

    return consumeBody.call(this).then(function (buffer) {
      return convertBody(buffer, _this3.headers);
    });
  }
};
Object.defineProperties(Body.prototype, {
  body: {
    enumerable: true
  },
  bodyUsed: {
    enumerable: true
  },
  arrayBuffer: {
    enumerable: true
  },
  blob: {
    enumerable: true
  },
  json: {
    enumerable: true
  },
  text: {
    enumerable: true
  }
});

Body.mixIn = function (proto) {
  for (var _iterator = Object.getOwnPropertyNames(Body.prototype), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
    var _ref2;

    if (_isArray) {
      if (_i >= _iterator.length) break;
      _ref2 = _iterator[_i++];
    } else {
      _i = _iterator.next();
      if (_i.done) break;
      _ref2 = _i.value;
    }

    var _name = _ref2;

    if (!(_name in proto)) {
      var desc = Object.getOwnPropertyDescriptor(Body.prototype, _name);
      Object.defineProperty(proto, _name, desc);
    }
  }
};

function consumeBody() {
  var _this4 = this;

  if (this[INTERNALS].disturbed) {
    return Body.Promise.reject(new TypeError("body used already for: " + this.url));
  }

  this[INTERNALS].disturbed = true;

  if (this[INTERNALS].error) {
    return Body.Promise.reject(this[INTERNALS].error);
  }

  var body = this.body;

  if (body === null) {
    return Body.Promise.resolve(Buffer.alloc(0));
  }

  if (isBlob(body)) {
    body = body.stream();
  }

  if (Buffer.isBuffer(body)) {
    return Body.Promise.resolve(body);
  }

  if (!(body instanceof Stream)) {
    return Body.Promise.resolve(Buffer.alloc(0));
  }

  var accum = [];
  var accumBytes = 0;
  var abort = false;
  return new Body.Promise(function (resolve, reject) {
    var resTimeout;

    if (_this4.timeout) {
      resTimeout = setTimeout(function () {
        abort = true;
        reject(new FetchError("Response timeout while trying to fetch " + _this4.url + " (over " + _this4.timeout + "ms)", 'body-timeout'));
      }, _this4.timeout);
    }

    body.on('error', function (err) {
      if (err.name === 'AbortError') {
        abort = true;
        reject(err);
      } else {
        reject(new FetchError("Invalid response body while trying to fetch " + _this4.url + ": " + err.message, 'system', err));
      }
    });
    body.on('data', function (chunk) {
      if (abort || chunk === null) {
        return;
      }

      if (_this4.size && accumBytes + chunk.length > _this4.size) {
        abort = true;
        reject(new FetchError("content size at " + _this4.url + " over limit: " + _this4.size, 'max-size'));
        return;
      }

      accumBytes += chunk.length;
      accum.push(chunk);
    });
    body.on('end', function () {
      if (abort) {
        return;
      }

      clearTimeout(resTimeout);

      try {
        resolve(Buffer.concat(accum, accumBytes));
      } catch (err) {
        reject(new FetchError("Could not create Buffer from response body for " + _this4.url + ": " + err.message, 'system', err));
      }
    });
  });
}

function convertBody(buffer, headers) {
  if (typeof convert !== 'function') {
    throw new Error('The package `encoding` must be installed to use the textConverted() function');
  }

  var ct = headers.get('content-type');
  var charset = 'utf-8';
  var res, str;

  if (ct) {
    res = /charset=([^;]*)/i.exec(ct);
  }

  str = buffer.slice(0, 1024).toString();

  if (!res && str) {
    res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
  }

  if (!res && str) {
    res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);

    if (res) {
      res = /charset=(.*)/i.exec(res.pop());
    }
  }

  if (!res && str) {
    res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
  }

  if (res) {
    charset = res.pop();

    if (charset === 'gb2312' || charset === 'gbk') {
      charset = 'gb18030';
    }
  }

  return convert(buffer, 'UTF-8', charset).toString();
}

function isURLSearchParams(obj) {
  if (typeof obj !== 'object' || typeof obj.append !== 'function' || typeof obj.delete !== 'function' || typeof obj.get !== 'function' || typeof obj.getAll !== 'function' || typeof obj.has !== 'function' || typeof obj.set !== 'function') {
    return false;
  }

  return obj.constructor.name === 'URLSearchParams' || Object.prototype.toString.call(obj) === '[object URLSearchParams]' || typeof obj.sort === 'function';
}

function isBlob(obj) {
  return typeof obj === 'object' && typeof obj.arrayBuffer === 'function' && typeof obj.type === 'string' && typeof obj.stream === 'function' && typeof obj.constructor === 'function' && typeof obj.constructor.name === 'string' && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag"]);
}

function _clone(instance) {
  var p1, p2;
  var body = instance.body;

  if (instance.bodyUsed) {
    throw new Error('cannot clone body after it is used');
  }

  if (body instanceof Stream && typeof body.getBoundary !== 'function') {
    p1 = new PassThrough();
    p2 = new PassThrough();
    body.pipe(p1);
    body.pipe(p2);
    instance[INTERNALS].body = p1;
    body = p2;
  }

  return body;
}

function extractContentType(body) {
  if (body === null) {
    return null;
  } else if (typeof body === 'string') {
    return 'text/plain;charset=UTF-8';
  } else if (isURLSearchParams(body)) {
    return 'application/x-www-form-urlencoded;charset=UTF-8';
  } else if (isBlob(body)) {
    return body.type || null;
  } else if (Buffer.isBuffer(body)) {
    return null;
  } else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {
    return null;
  } else if (ArrayBuffer.isView(body)) {
    return null;
  } else if (typeof body.getBoundary === 'function') {
    return "multipart/form-data;boundary=" + body.getBoundary();
  } else if (body instanceof Stream) {
    return null;
  } else {
    return 'text/plain;charset=UTF-8';
  }
}

function getTotalBytes(instance) {
  var body = instance.body;

  if (body === null) {
    return 0;
  } else if (isBlob(body)) {
    return body.size;
  } else if (Buffer.isBuffer(body)) {
    return body.length;
  } else if (body && typeof body.getLengthSync === 'function') {
    if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || body.hasKnownLength && body.hasKnownLength()) {
      return body.getLengthSync();
    }

    return null;
  } else {
    return null;
  }
}

function writeToStream(dest, instance) {
  var body = instance.body;

  if (body === null) {
    dest.end();
  } else if (isBlob(body)) {
    body.stream().pipe(dest);
  } else if (Buffer.isBuffer(body)) {
    dest.write(body);
    dest.end();
  } else {
    body.pipe(dest);
  }
}

Body.Promise = global.Promise;
var invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
var invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;

function validateName(name) {
  name = "" + name;

  if (invalidTokenRegex.test(name) || name === '') {
    throw new TypeError(name + " is not a legal HTTP header name");
  }
}

function validateValue(value) {
  value = "" + value;

  if (invalidHeaderCharRegex.test(value)) {
    throw new TypeError(value + " is not a legal HTTP header value");
  }
}

function find(map, name) {
  name = name.toLowerCase();

  for (var key in map) {
    if (key.toLowerCase() === name) {
      return key;
    }
  }

  return undefined;
}

var MAP = Symbol('map');

var Headers = function () {
  function Headers() {
    (0, _classCallCheck2.default)(this, Headers);
    var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
    this[MAP] = Object.create(null);

    if (init instanceof Headers) {
      var rawHeaders = init.raw();
      var headerNames = Object.keys(rawHeaders);

      for (var _i2 = 0, _headerNames = headerNames; _i2 < _headerNames.length; _i2++) {
        var headerName = _headerNames[_i2];

        for (var _iterator2 = rawHeaders[headerName], _isArray2 = Array.isArray(_iterator2), _i3 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref3;

          if (_isArray2) {
            if (_i3 >= _iterator2.length) break;
            _ref3 = _iterator2[_i3++];
          } else {
            _i3 = _iterator2.next();
            if (_i3.done) break;
            _ref3 = _i3.value;
          }

          var _value = _ref3;
          this.append(headerName, _value);
        }
      }

      return;
    }

    if (init == null) ;else if (typeof init === 'object') {
      var method = init[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"];

      if (method != null) {
        if (typeof method !== 'function') {
          throw new TypeError('Header pairs must be iterable');
        }

        var pairs = [];

        for (var _iterator3 = init, _isArray3 = Array.isArray(_iterator3), _i4 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          var _ref4;

          if (_isArray3) {
            if (_i4 >= _iterator3.length) break;
            _ref4 = _iterator3[_i4++];
          } else {
            _i4 = _iterator3.next();
            if (_i4.done) break;
            _ref4 = _i4.value;
          }

          var _pair2 = _ref4;

          if (typeof _pair2 !== 'object' || typeof _pair2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] !== 'function') {
            throw new TypeError('Each header pair must be iterable');
          }

          pairs.push(Array.from(_pair2));
        }

        for (var _i5 = 0, _pairs = pairs; _i5 < _pairs.length; _i5++) {
          var _pair = _pairs[_i5];

          if (_pair.length !== 2) {
            throw new TypeError('Each header pair must be a name/value tuple');
          }

          this.append(_pair[0], _pair[1]);
        }
      } else {
        for (var _i6 = 0, _Object$keys = Object.keys(init); _i6 < _Object$keys.length; _i6++) {
          var key = _Object$keys[_i6];
          var _value2 = init[key];
          this.append(key, _value2);
        }
      }
    } else {
      throw new TypeError('Provided initializer must be an object');
    }
  }

  (0, _createClass2.default)(Headers, [{
    key: "get",
    value: function get(name) {
      name = "" + name;
      validateName(name);
      var key = find(this[MAP], name);

      if (key === undefined) {
        return null;
      }

      return this[MAP][key].join(', ');
    }
  }, {
    key: "forEach",
    value: function forEach(callback) {
      var thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
      var pairs = getHeaders(this);
      var i = 0;

      while (i < pairs.length) {
        var _pairs$i = pairs[i];
        var name = _pairs$i[0],
            value = _pairs$i[1];
        callback.call(thisArg, value, name, this);
        pairs = getHeaders(this);
        i++;
      }
    }
  }, {
    key: "set",
    value: function set(name, value) {
      name = "" + name;
      value = "" + value;
      validateName(name);
      validateValue(value);
      var key = find(this[MAP], name);
      this[MAP][key !== undefined ? key : name] = [value];
    }
  }, {
    key: "append",
    value: function append(name, value) {
      name = "" + name;
      value = "" + value;
      validateName(name);
      validateValue(value);
      var key = find(this[MAP], name);

      if (key !== undefined) {
        this[MAP][key].push(value);
      } else {
        this[MAP][name] = [value];
      }
    }
  }, {
    key: "has",
    value: function has(name) {
      name = "" + name;
      validateName(name);
      return find(this[MAP], name) !== undefined;
    }
  }, {
    key: "delete",
    value: function _delete(name) {
      name = "" + name;
      validateName(name);
      var key = find(this[MAP], name);

      if (key !== undefined) {
        delete this[MAP][key];
      }
    }
  }, {
    key: "raw",
    value: function raw() {
      return this[MAP];
    }
  }, {
    key: "keys",
    value: function keys() {
      return createHeadersIterator(this, 'key');
    }
  }, {
    key: "values",
    value: function values() {
      return createHeadersIterator(this, 'value');
    }
  }, {
    key: typeof Symbol === "function" ? Symbol.iterator : "@@iterator",
    value: function value() {
      return createHeadersIterator(this, 'key+value');
    }
  }]);
  return Headers;
}();

Headers.prototype.entries = Headers.prototype[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"];
Object.defineProperty(Headers.prototype, typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag", {
  value: 'Headers',
  writable: false,
  enumerable: false,
  configurable: true
});
Object.defineProperties(Headers.prototype, {
  get: {
    enumerable: true
  },
  forEach: {
    enumerable: true
  },
  set: {
    enumerable: true
  },
  append: {
    enumerable: true
  },
  has: {
    enumerable: true
  },
  delete: {
    enumerable: true
  },
  keys: {
    enumerable: true
  },
  values: {
    enumerable: true
  },
  entries: {
    enumerable: true
  }
});

function getHeaders(headers) {
  var kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'key+value';
  var keys = Object.keys(headers[MAP]).sort();
  return keys.map(kind === 'key' ? function (k) {
    return k.toLowerCase();
  } : kind === 'value' ? function (k) {
    return headers[MAP][k].join(', ');
  } : function (k) {
    return [k.toLowerCase(), headers[MAP][k].join(', ')];
  });
}

var INTERNAL = Symbol('internal');

function createHeadersIterator(target, kind) {
  var iterator = Object.create(HeadersIteratorPrototype);
  iterator[INTERNAL] = {
    target: target,
    kind: kind,
    index: 0
  };
  return iterator;
}

var HeadersIteratorPrototype = Object.setPrototypeOf({
  next: function next() {
    if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
      throw new TypeError('Value of `this` is not a HeadersIterator');
    }

    var _INTERNAL = this[INTERNAL];
    var target = _INTERNAL.target,
        kind = _INTERNAL.kind,
        index = _INTERNAL.index;
    var values = getHeaders(target, kind);
    var len = values.length;

    if (index >= len) {
      return {
        value: undefined,
        done: true
      };
    }

    this[INTERNAL].index = index + 1;
    return {
      value: values[index],
      done: false
    };
  }
}, Object.getPrototypeOf(Object.getPrototypeOf([][typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]())));
Object.defineProperty(HeadersIteratorPrototype, typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag", {
  value: 'HeadersIterator',
  writable: false,
  enumerable: false,
  configurable: true
});

function exportNodeCompatibleHeaders(headers) {
  var obj = (0, _extends3.default)({
    __proto__: null
  }, headers[MAP]);
  var hostHeaderKey = find(headers[MAP], 'Host');

  if (hostHeaderKey !== undefined) {
    obj[hostHeaderKey] = obj[hostHeaderKey][0];
  }

  return obj;
}

function createHeadersLenient(obj) {
  var headers = new Headers();

  for (var _i7 = 0, _Object$keys2 = Object.keys(obj); _i7 < _Object$keys2.length; _i7++) {
    var name = _Object$keys2[_i7];

    if (invalidTokenRegex.test(name)) {
      continue;
    }

    if (Array.isArray(obj[name])) {
      for (var _iterator4 = obj[name], _isArray4 = Array.isArray(_iterator4), _i8 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
        var _ref5;

        if (_isArray4) {
          if (_i8 >= _iterator4.length) break;
          _ref5 = _iterator4[_i8++];
        } else {
          _i8 = _iterator4.next();
          if (_i8.done) break;
          _ref5 = _i8.value;
        }

        var _val = _ref5;

        if (invalidHeaderCharRegex.test(_val)) {
          continue;
        }

        if (headers[MAP][name] === undefined) {
          headers[MAP][name] = [_val];
        } else {
          headers[MAP][name].push(_val);
        }
      }
    } else if (!invalidHeaderCharRegex.test(obj[name])) {
      headers[MAP][name] = [obj[name]];
    }
  }

  return headers;
}

var INTERNALS$1 = Symbol('Response internals');
var STATUS_CODES = http.STATUS_CODES;

var Response = function () {
  function Response() {
    (0, _classCallCheck2.default)(this, Response);
    var body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    Body.call(this, body, opts);
    var status = opts.status || 200;
    var headers = new Headers(opts.headers);

    if (body != null && !headers.has('Content-Type')) {
      var contentType = extractContentType(body);

      if (contentType) {
        headers.append('Content-Type', contentType);
      }
    }

    this[INTERNALS$1] = {
      url: opts.url,
      status: status,
      statusText: opts.statusText || STATUS_CODES[status],
      headers: headers,
      counter: opts.counter
    };
  }

  (0, _createClass2.default)(Response, [{
    key: "clone",
    value: function clone() {
      return new Response(_clone(this), {
        url: this.url,
        status: this.status,
        statusText: this.statusText,
        headers: this.headers,
        ok: this.ok,
        redirected: this.redirected
      });
    }
  }, {
    key: "url",
    get: function get() {
      return this[INTERNALS$1].url || '';
    }
  }, {
    key: "status",
    get: function get() {
      return this[INTERNALS$1].status;
    }
  }, {
    key: "ok",
    get: function get() {
      return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
    }
  }, {
    key: "redirected",
    get: function get() {
      return this[INTERNALS$1].counter > 0;
    }
  }, {
    key: "statusText",
    get: function get() {
      return this[INTERNALS$1].statusText;
    }
  }, {
    key: "headers",
    get: function get() {
      return this[INTERNALS$1].headers;
    }
  }]);
  return Response;
}();

Body.mixIn(Response.prototype);
Object.defineProperties(Response.prototype, {
  url: {
    enumerable: true
  },
  status: {
    enumerable: true
  },
  ok: {
    enumerable: true
  },
  redirected: {
    enumerable: true
  },
  statusText: {
    enumerable: true
  },
  headers: {
    enumerable: true
  },
  clone: {
    enumerable: true
  }
});
Object.defineProperty(Response.prototype, typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag", {
  value: 'Response',
  writable: false,
  enumerable: false,
  configurable: true
});
var INTERNALS$2 = Symbol('Request internals');
var parse_url = Url.parse;
var format_url = Url.format;
var streamDestructionSupported = 'destroy' in Stream.Readable.prototype;

function isRequest(input) {
  return typeof input === 'object' && typeof input[INTERNALS$2] === 'object';
}

function isAbortSignal(signal) {
  var proto = signal && typeof signal === 'object' && Object.getPrototypeOf(signal);
  return !!(proto && proto.constructor.name === 'AbortSignal');
}

var Request = function () {
  function Request(input) {
    (0, _classCallCheck2.default)(this, Request);
    var init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var parsedURL;

    if (!isRequest(input)) {
      if (input && input.href) {
        parsedURL = parse_url(input.href);
      } else {
        parsedURL = parse_url("" + input);
      }

      input = {};
    } else {
      parsedURL = parse_url(input.url);
    }

    var method = init.method || input.method || 'GET';
    method = method.toUpperCase();

    if ((init.body != null || isRequest(input) && input.body !== null) && (method === 'GET' || method === 'HEAD')) {
      throw new TypeError('Request with GET/HEAD method cannot have body');
    }

    var inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? _clone(input) : null;
    Body.call(this, inputBody, {
      timeout: init.timeout || input.timeout || 0,
      size: init.size || input.size || 0
    });
    var headers = new Headers(init.headers || input.headers || {});

    if (inputBody != null && !headers.has('Content-Type')) {
      var contentType = extractContentType(inputBody);

      if (contentType) {
        headers.append('Content-Type', contentType);
      }
    }

    var signal = isRequest(input) ? input.signal : null;
    if ('signal' in init) signal = init.signal;

    if (signal != null && !isAbortSignal(signal)) {
      throw new TypeError('Expected signal to be an instanceof AbortSignal');
    }

    this[INTERNALS$2] = {
      method: method,
      redirect: init.redirect || input.redirect || 'follow',
      headers: headers,
      parsedURL: parsedURL,
      signal: signal
    };
    this.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;
    this.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;
    this.counter = init.counter || input.counter || 0;
    this.agent = init.agent || input.agent;
  }

  (0, _createClass2.default)(Request, [{
    key: "clone",
    value: function clone() {
      return new Request(this);
    }
  }, {
    key: "method",
    get: function get() {
      return this[INTERNALS$2].method;
    }
  }, {
    key: "url",
    get: function get() {
      return format_url(this[INTERNALS$2].parsedURL);
    }
  }, {
    key: "headers",
    get: function get() {
      return this[INTERNALS$2].headers;
    }
  }, {
    key: "redirect",
    get: function get() {
      return this[INTERNALS$2].redirect;
    }
  }, {
    key: "signal",
    get: function get() {
      return this[INTERNALS$2].signal;
    }
  }]);
  return Request;
}();

Body.mixIn(Request.prototype);
Object.defineProperty(Request.prototype, typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag", {
  value: 'Request',
  writable: false,
  enumerable: false,
  configurable: true
});
Object.defineProperties(Request.prototype, {
  method: {
    enumerable: true
  },
  url: {
    enumerable: true
  },
  headers: {
    enumerable: true
  },
  redirect: {
    enumerable: true
  },
  clone: {
    enumerable: true
  },
  signal: {
    enumerable: true
  }
});

function getNodeRequestOptions(request) {
  var parsedURL = request[INTERNALS$2].parsedURL;
  var headers = new Headers(request[INTERNALS$2].headers);

  if (!headers.has('Accept')) {
    headers.set('Accept', '*/*');
  }

  if (!parsedURL.protocol || !parsedURL.hostname) {
    throw new TypeError('Only absolute URLs are supported');
  }

  if (!/^https?:$/.test(parsedURL.protocol)) {
    throw new TypeError('Only HTTP(S) protocols are supported');
  }

  if (request.signal && request.body instanceof Stream.Readable && !streamDestructionSupported) {
    throw new Error('Cancellation of streamed requests with AbortSignal is not supported in node < 8');
  }

  var contentLengthValue = null;

  if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {
    contentLengthValue = '0';
  }

  if (request.body != null) {
    var totalBytes = getTotalBytes(request);

    if (typeof totalBytes === 'number') {
      contentLengthValue = String(totalBytes);
    }
  }

  if (contentLengthValue) {
    headers.set('Content-Length', contentLengthValue);
  }

  if (!headers.has('User-Agent')) {
    headers.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');
  }

  if (request.compress && !headers.has('Accept-Encoding')) {
    headers.set('Accept-Encoding', 'gzip,deflate');
  }

  var agent = request.agent;

  if (typeof agent === 'function') {
    agent = agent(parsedURL);
  }

  if (!headers.has('Connection') && !agent) {
    headers.set('Connection', 'close');
  }

  return (0, _extends3.default)({}, parsedURL, {
    method: request.method,
    headers: exportNodeCompatibleHeaders(headers),
    agent: agent
  });
}

function AbortError(message) {
  Error.call(this, message);
  this.type = 'aborted';
  this.message = message;
  Error.captureStackTrace(this, this.constructor);
}

AbortError.prototype = Object.create(Error.prototype);
AbortError.prototype.constructor = AbortError;
AbortError.prototype.name = 'AbortError';
var PassThrough$1 = Stream.PassThrough;
var resolve_url = Url.resolve;

function fetch(url, opts) {
  if (!fetch.Promise) {
    throw new Error('native promise missing, set fetch.Promise to your favorite alternative');
  }

  Body.Promise = fetch.Promise;
  return new fetch.Promise(function (resolve, reject) {
    var request = new Request(url, opts);
    var options = getNodeRequestOptions(request);
    var send = (options.protocol === 'https:' ? https : http).request;
    var signal = request.signal;
    var response = null;

    var abort = function abort() {
      var error = new AbortError('The user aborted a request.');
      reject(error);

      if (request.body && request.body instanceof Stream.Readable) {
        request.body.destroy(error);
      }

      if (!response || !response.body) return;
      response.body.emit('error', error);
    };

    if (signal && signal.aborted) {
      abort();
      return;
    }

    var abortAndFinalize = function abortAndFinalize() {
      abort();
      finalize();
    };

    var req = send(options);
    var reqTimeout;

    if (signal) {
      signal.addEventListener('abort', abortAndFinalize);
    }

    function finalize() {
      req.abort();
      if (signal) signal.removeEventListener('abort', abortAndFinalize);
      clearTimeout(reqTimeout);
    }

    if (request.timeout) {
      req.once('socket', function (socket) {
        reqTimeout = setTimeout(function () {
          reject(new FetchError("network timeout at: " + request.url, 'request-timeout'));
          finalize();
        }, request.timeout);
      });
    }

    req.on('error', function (err) {
      reject(new FetchError("request to " + request.url + " failed, reason: " + err.message, 'system', err));
      finalize();
    });
    req.on('response', function (res) {
      clearTimeout(reqTimeout);
      var headers = createHeadersLenient(res.headers);

      if (fetch.isRedirect(res.statusCode)) {
        var location = headers.get('Location');
        var locationURL = location === null ? null : resolve_url(request.url, location);

        switch (request.redirect) {
          case 'error':
            reject(new FetchError("redirect mode is set to error: " + request.url, 'no-redirect'));
            finalize();
            return;

          case 'manual':
            if (locationURL !== null) {
              try {
                headers.set('Location', locationURL);
              } catch (err) {
                reject(err);
              }
            }

            break;

          case 'follow':
            if (locationURL === null) {
              break;
            }

            if (request.counter >= request.follow) {
              reject(new FetchError("maximum redirect reached at: " + request.url, 'max-redirect'));
              finalize();
              return;
            }

            var requestOpts = {
              headers: new Headers(request.headers),
              follow: request.follow,
              counter: request.counter + 1,
              agent: request.agent,
              compress: request.compress,
              method: request.method,
              body: request.body,
              signal: request.signal,
              timeout: request.timeout
            };

            if (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {
              reject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));
              finalize();
              return;
            }

            if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === 'POST') {
              requestOpts.method = 'GET';
              requestOpts.body = undefined;
              requestOpts.headers.delete('content-length');
            }

            resolve(fetch(new Request(locationURL, requestOpts)));
            finalize();
            return;
        }
      }

      res.once('end', function () {
        if (signal) signal.removeEventListener('abort', abortAndFinalize);
      });
      var body = res.pipe(new PassThrough$1());
      var response_options = {
        url: request.url,
        status: res.statusCode,
        statusText: res.statusMessage,
        headers: headers,
        size: request.size,
        timeout: request.timeout,
        counter: request.counter
      };
      var codings = headers.get('Content-Encoding');

      if (!request.compress || request.method === 'HEAD' || codings === null || res.statusCode === 204 || res.statusCode === 304) {
        response = new Response(body, response_options);
        resolve(response);
        return;
      }

      var zlibOptions = {
        flush: zlib.Z_SYNC_FLUSH,
        finishFlush: zlib.Z_SYNC_FLUSH
      };

      if (codings == 'gzip' || codings == 'x-gzip') {
        body = body.pipe(zlib.createGunzip(zlibOptions));
        response = new Response(body, response_options);
        resolve(response);
        return;
      }

      if (codings == 'deflate' || codings == 'x-deflate') {
        var raw = res.pipe(new PassThrough$1());
        raw.once('data', function (chunk) {
          if ((chunk[0] & 0x0F) === 0x08) {
            body = body.pipe(zlib.createInflate());
          } else {
            body = body.pipe(zlib.createInflateRaw());
          }

          response = new Response(body, response_options);
          resolve(response);
        });
        return;
      }

      if (codings == 'br' && typeof zlib.createBrotliDecompress === 'function') {
        body = body.pipe(zlib.createBrotliDecompress());
        response = new Response(body, response_options);
        resolve(response);
        return;
      }

      response = new Response(body, response_options);
      resolve(response);
    });
    writeToStream(req, request);
  });
}

fetch.isRedirect = function (code) {
  return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
};

fetch.Promise = global.Promise;
module.exports = exports = fetch;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports;
exports.Headers = Headers;
exports.Request = Request;
exports.Response = Response;
exports.FetchError = FetchError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,