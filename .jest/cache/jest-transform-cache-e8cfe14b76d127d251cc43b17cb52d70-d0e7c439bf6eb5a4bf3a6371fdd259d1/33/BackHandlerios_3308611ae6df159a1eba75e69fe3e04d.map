{"version":3,"sources":["BackHandler.ios.js"],"names":["Platform","require","TVEventHandler","emptyFunction","BackHandler","isTV","_tvEventHandler","_backPressSubscriptions","Set","enable","cmp","evt","eventType","invokeDefault","subscriptions","Array","from","values","reverse","i","length","exitApp","addEventListener","eventName","handler","add","remove","removeEventListener","delete","_eventName","_handler","module","exports"],"mappings":"AAaA;;AAEA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAxB;;AACA,IAAMC,cAAc,GAAGD,OAAO,CAAC,sCAAD,CAA9B;;AAIA,SAASE,aAAT,GAA+B,CAAE;;AA4CjC,IAAIC,WAAJ;;AAEA,IAAIJ,QAAQ,CAACK,IAAb,EAAmB;AACjB,MAAMC,eAAe,GAAG,IAAIJ,cAAJ,EAAxB;;AACA,MAAMK,uBAAuB,GAAG,IAAIC,GAAJ,EAAhC;;AAEAF,EAAAA,eAAe,CAACG,MAAhB,CAAuB,IAAvB,EAA6B,UAASC,GAAT,EAAcC,GAAd,EAAmB;AAC9C,QAAIA,GAAG,IAAIA,GAAG,CAACC,SAAJ,KAAkB,MAA7B,EAAqC;AACnC,UAAIC,aAAa,GAAG,IAApB;AACA,UAAMC,aAAa,GAAGC,KAAK,CAACC,IAAN,CACpBT,uBAAuB,CAACU,MAAxB,EADoB,EAEpBC,OAFoB,EAAtB;;AAIA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,aAAa,CAACM,MAAlC,EAA0C,EAAED,CAA5C,EAA+C;AAC7C,YAAIL,aAAa,CAACK,CAAD,CAAb,EAAJ,EAAwB;AACtBN,UAAAA,aAAa,GAAG,KAAhB;AACA;AACD;AACF;;AAED,UAAIA,aAAJ,EAAmB;AACjBT,QAAAA,WAAW,CAACiB,OAAZ;AACD;AACF;AACF,GAlBD;;AAoBAjB,EAAAA,WAAW,GAAG;AACZiB,IAAAA,OAAO,EAAElB,aADG;AAGZmB,IAAAA,gBAAgB,EAAE,0BAChBC,SADgB,EAEhBC,OAFgB,EAGM;AACtBjB,MAAAA,uBAAuB,CAACkB,GAAxB,CAA4BD,OAA5B;;AACA,aAAO;AACLE,QAAAA,MAAM,EAAE;AAAA,iBAAMtB,WAAW,CAACuB,mBAAZ,CAAgCJ,SAAhC,EAA2CC,OAA3C,CAAN;AAAA;AADH,OAAP;AAGD,KAXW;AAaZG,IAAAA,mBAAmB,EAAE,6BACnBJ,SADmB,EAEnBC,OAFmB,EAGb;AACNjB,MAAAA,uBAAuB,CAACqB,MAAxB,CAA+BJ,OAA/B;AACD;AAlBW,GAAd;AAoBD,CA5CD,MA4CO;AACLpB,EAAAA,WAAW,GAAG;AACZiB,IAAAA,OAAO,EAAElB,aADG;AAEZmB,IAAAA,gBAFY,4BAEKO,UAFL,EAEqCC,QAFrC,EAEyD;AACnE,aAAO;AACLJ,QAAAA,MAAM,EAAEvB;AADH,OAAP;AAGD,KANW;AAOZwB,IAAAA,mBAPY,+BAOQE,UAPR,EAOwCC,QAPxC,EAO4D,CAAE;AAP9D,GAAd;AASD;;AAEDC,MAAM,CAACC,OAAP,GAAiB5B,WAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * On Apple TV, this implements back navigation using the TV remote's menu button.\n * On iOS, this just implements a stub.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst Platform = require('./Platform');\nconst TVEventHandler = require('../Components/AppleTV/TVEventHandler');\n\ntype BackPressEventName = 'backPress' | 'hardwareBackPress';\n\nfunction emptyFunction(): void {}\n\n/**\n * Detect hardware button presses for back navigation.\n *\n * Android: Detect hardware back button presses, and programmatically invoke the default back button\n * functionality to exit the app if there are no listeners or if none of the listeners return true.\n *\n * tvOS: Detect presses of the menu button on the TV remote.  (Still to be implemented:\n * programmatically disable menu button handling\n * functionality to exit the app if there are no listeners or if none of the listeners return true.)\n *\n * iOS: Not applicable.\n *\n * The event subscriptions are called in reverse order (i.e. last registered subscription first),\n * and if one subscription returns true then subscriptions registered earlier will not be called.\n *\n * Example:\n *\n * ```javascript\n * BackHandler.addEventListener('hardwareBackPress', function() {\n *  // this.onMainScreen and this.goBack are just examples, you need to use your own implementation here\n *  // Typically you would use the navigator here to go to the last state.\n *\n *  if (!this.onMainScreen()) {\n *    this.goBack();\n *    return true;\n *  }\n *  return false;\n * });\n * ```\n */\ntype TBackHandler = {|\n  +exitApp: () => void,\n  +addEventListener: (\n    eventName: BackPressEventName,\n    handler: Function,\n  ) => {remove: () => void},\n  +removeEventListener: (\n    eventName: BackPressEventName,\n    handler: Function,\n  ) => void,\n|};\n\nlet BackHandler: TBackHandler;\n\nif (Platform.isTV) {\n  const _tvEventHandler = new TVEventHandler();\n  const _backPressSubscriptions = new Set();\n\n  _tvEventHandler.enable(this, function(cmp, evt) {\n    if (evt && evt.eventType === 'menu') {\n      let invokeDefault = true;\n      const subscriptions = Array.from(\n        _backPressSubscriptions.values(),\n      ).reverse();\n\n      for (let i = 0; i < subscriptions.length; ++i) {\n        if (subscriptions[i]()) {\n          invokeDefault = false;\n          break;\n        }\n      }\n\n      if (invokeDefault) {\n        BackHandler.exitApp();\n      }\n    }\n  });\n\n  BackHandler = {\n    exitApp: emptyFunction,\n\n    addEventListener: function(\n      eventName: BackPressEventName,\n      handler: Function,\n    ): {remove: () => void} {\n      _backPressSubscriptions.add(handler);\n      return {\n        remove: () => BackHandler.removeEventListener(eventName, handler),\n      };\n    },\n\n    removeEventListener: function(\n      eventName: BackPressEventName,\n      handler: Function,\n    ): void {\n      _backPressSubscriptions.delete(handler);\n    },\n  };\n} else {\n  BackHandler = {\n    exitApp: emptyFunction,\n    addEventListener(_eventName: BackPressEventName, _handler: Function) {\n      return {\n        remove: emptyFunction,\n      };\n    },\n    removeEventListener(_eventName: BackPressEventName, _handler: Function) {},\n  };\n}\n\nmodule.exports = BackHandler;\n"]}