{"version":3,"sources":["bezier.js"],"names":["NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","float32ArraySupported","Float32Array","A","aA1","aA2","B","C","calcBezier","aT","getSlope","binarySubdivide","aX","_aA","_aB","mX1","mX2","currentX","currentT","i","aA","aB","Math","abs","newtonRaphsonIterate","_aGuessT","aGuessT","currentSlope","module","exports","bezier","mY1","mY2","Error","sampleValues","Array","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope","BezierEasing","x"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * BezierEasing - use bezier curve for transition easing function\n * https://github.com/gre/bezier-easing\n *\n * @flow strict\n * @format\n * @copyright 2014-2015 GaÃ«tan Renaudeau. MIT License.\n */\n\n'use strict';\n\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\nconst NEWTON_ITERATIONS = 4;\nconst NEWTON_MIN_SLOPE = 0.001;\nconst SUBDIVISION_PRECISION = 0.0000001;\nconst SUBDIVISION_MAX_ITERATIONS = 10;\n\nconst kSplineTableSize = 11;\nconst kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\nconst float32ArraySupported = typeof Float32Array === 'function';\n\nfunction A(aA1, aA2) {\n  return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n}\nfunction B(aA1, aA2) {\n  return 3.0 * aA2 - 6.0 * aA1;\n}\nfunction C(aA1) {\n  return 3.0 * aA1;\n}\n\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nfunction calcBezier(aT, aA1, aA2) {\n  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n}\n\n// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\nfunction getSlope(aT, aA1, aA2) {\n  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n}\n\nfunction binarySubdivide(aX, _aA, _aB, mX1, mX2) {\n  let currentX,\n    currentT,\n    i = 0,\n    aA = _aA,\n    aB = _aB;\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (\n    Math.abs(currentX) > SUBDIVISION_PRECISION &&\n    ++i < SUBDIVISION_MAX_ITERATIONS\n  );\n  return currentT;\n}\n\nfunction newtonRaphsonIterate(aX, _aGuessT, mX1, mX2) {\n  let aGuessT = _aGuessT;\n  for (let i = 0; i < NEWTON_ITERATIONS; ++i) {\n    const currentSlope = getSlope(aGuessT, mX1, mX2);\n    if (currentSlope === 0.0) {\n      return aGuessT;\n    }\n    const currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n    aGuessT -= currentX / currentSlope;\n  }\n  return aGuessT;\n}\n\nmodule.exports = function bezier(\n  mX1: number,\n  mY1: number,\n  mX2: number,\n  mY2: number,\n) {\n  if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {\n    throw new Error('bezier x values must be in [0, 1] range');\n  }\n\n  // Precompute samples table\n  const sampleValues = float32ArraySupported\n    ? new Float32Array(kSplineTableSize)\n    : new Array(kSplineTableSize);\n  if (mX1 !== mY1 || mX2 !== mY2) {\n    for (let i = 0; i < kSplineTableSize; ++i) {\n      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n    }\n  }\n\n  function getTForX(aX) {\n    let intervalStart = 0.0;\n    let currentSample = 1;\n    const lastSample = kSplineTableSize - 1;\n\n    for (\n      ;\n      currentSample !== lastSample && sampleValues[currentSample] <= aX;\n      ++currentSample\n    ) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n\n    // Interpolate to provide an initial guess for t\n    const dist =\n      (aX - sampleValues[currentSample]) /\n      (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    const guessForT = intervalStart + dist * kSampleStepSize;\n\n    const initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(\n        aX,\n        intervalStart,\n        intervalStart + kSampleStepSize,\n        mX1,\n        mX2,\n      );\n    }\n  }\n\n  return function BezierEasing(x: number): number {\n    if (mX1 === mY1 && mX2 === mY2) {\n      return x; // linear\n    }\n    // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n    if (x === 0) {\n      return 0;\n    }\n    if (x === 1) {\n      return 1;\n    }\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n};\n"]}