492546d0be1a9386ee6a9ea53a38e9aa
"use strict";

var rawAsap = require("./raw");

var freeTasks = [];
module.exports = asap;

function asap(task) {
  var rawTask;

  if (freeTasks.length) {
    rawTask = freeTasks.pop();
  } else {
    rawTask = new RawTask();
  }

  rawTask.task = task;
  rawTask.domain = process.domain;
  rawAsap(rawTask);
}

function RawTask() {
  this.task = null;
  this.domain = null;
}

RawTask.prototype.call = function () {
  if (this.domain) {
    this.domain.enter();
  }

  var threw = true;

  try {
    this.task.call();
    threw = false;

    if (this.domain) {
      this.domain.exit();
    }
  } finally {
    if (threw) {
      rawAsap.requestFlush();
    }

    this.task = null;
    this.domain = null;
    freeTasks.push(this);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzYXAuanMiXSwibmFtZXMiOlsicmF3QXNhcCIsInJlcXVpcmUiLCJmcmVlVGFza3MiLCJtb2R1bGUiLCJleHBvcnRzIiwiYXNhcCIsInRhc2siLCJyYXdUYXNrIiwibGVuZ3RoIiwicG9wIiwiUmF3VGFzayIsImRvbWFpbiIsInByb2Nlc3MiLCJwcm90b3R5cGUiLCJjYWxsIiwiZW50ZXIiLCJ0aHJldyIsImV4aXQiLCJyZXF1ZXN0Rmx1c2giLCJwdXNoIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxPQUFELENBQXJCOztBQUNBLElBQUlDLFNBQVMsR0FBRyxFQUFoQjtBQVlBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJDLElBQWpCOztBQUNBLFNBQVNBLElBQVQsQ0FBY0MsSUFBZCxFQUFvQjtBQUNoQixNQUFJQyxPQUFKOztBQUNBLE1BQUlMLFNBQVMsQ0FBQ00sTUFBZCxFQUFzQjtBQUNsQkQsSUFBQUEsT0FBTyxHQUFHTCxTQUFTLENBQUNPLEdBQVYsRUFBVjtBQUNILEdBRkQsTUFFTztBQUNIRixJQUFBQSxPQUFPLEdBQUcsSUFBSUcsT0FBSixFQUFWO0FBQ0g7O0FBQ0RILEVBQUFBLE9BQU8sQ0FBQ0QsSUFBUixHQUFlQSxJQUFmO0FBQ0FDLEVBQUFBLE9BQU8sQ0FBQ0ksTUFBUixHQUFpQkMsT0FBTyxDQUFDRCxNQUF6QjtBQUNBWCxFQUFBQSxPQUFPLENBQUNPLE9BQUQsQ0FBUDtBQUNIOztBQUVELFNBQVNHLE9BQVQsR0FBbUI7QUFDZixPQUFLSixJQUFMLEdBQVksSUFBWjtBQUNBLE9BQUtLLE1BQUwsR0FBYyxJQUFkO0FBQ0g7O0FBRURELE9BQU8sQ0FBQ0csU0FBUixDQUFrQkMsSUFBbEIsR0FBeUIsWUFBWTtBQUNqQyxNQUFJLEtBQUtILE1BQVQsRUFBaUI7QUFDYixTQUFLQSxNQUFMLENBQVlJLEtBQVo7QUFDSDs7QUFDRCxNQUFJQyxLQUFLLEdBQUcsSUFBWjs7QUFDQSxNQUFJO0FBQ0EsU0FBS1YsSUFBTCxDQUFVUSxJQUFWO0FBQ0FFLElBQUFBLEtBQUssR0FBRyxLQUFSOztBQUdBLFFBQUksS0FBS0wsTUFBVCxFQUFpQjtBQUNiLFdBQUtBLE1BQUwsQ0FBWU0sSUFBWjtBQUNIO0FBQ0osR0FSRCxTQVFVO0FBR04sUUFBSUQsS0FBSixFQUFXO0FBTVBoQixNQUFBQSxPQUFPLENBQUNrQixZQUFSO0FBQ0g7O0FBR0QsU0FBS1osSUFBTCxHQUFZLElBQVo7QUFDQSxTQUFLSyxNQUFMLEdBQWMsSUFBZDtBQUNBVCxJQUFBQSxTQUFTLENBQUNpQixJQUFWLENBQWUsSUFBZjtBQUNIO0FBQ0osQ0E5QkQiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIHJhd0FzYXAgPSByZXF1aXJlKFwiLi9yYXdcIik7XG52YXIgZnJlZVRhc2tzID0gW107XG5cbi8qKlxuICogQ2FsbHMgYSB0YXNrIGFzIHNvb24gYXMgcG9zc2libGUgYWZ0ZXIgcmV0dXJuaW5nLCBpbiBpdHMgb3duIGV2ZW50LCB3aXRoXG4gKiBwcmlvcml0eSBvdmVyIElPIGV2ZW50cy4gQW4gZXhjZXB0aW9uIHRocm93biBpbiBhIHRhc2sgY2FuIGJlIGhhbmRsZWQgYnlcbiAqIGBwcm9jZXNzLm9uKFwidW5jYXVnaHRFeGNlcHRpb25cIikgb3IgYGRvbWFpbi5vbihcImVycm9yXCIpYCwgYnV0IHdpbGwgb3RoZXJ3aXNlXG4gKiBjcmFzaCB0aGUgcHJvY2Vzcy4gSWYgdGhlIGVycm9yIGlzIGhhbmRsZWQsIGFsbCBzdWJzZXF1ZW50IHRhc2tzIHdpbGxcbiAqIHJlc3VtZS5cbiAqXG4gKiBAcGFyYW0ge3tjYWxsfX0gdGFzayBBIGNhbGxhYmxlIG9iamVjdCwgdHlwaWNhbGx5IGEgZnVuY3Rpb24gdGhhdCB0YWtlcyBub1xuICogYXJndW1lbnRzLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGFzYXA7XG5mdW5jdGlvbiBhc2FwKHRhc2spIHtcbiAgICB2YXIgcmF3VGFzaztcbiAgICBpZiAoZnJlZVRhc2tzLmxlbmd0aCkge1xuICAgICAgICByYXdUYXNrID0gZnJlZVRhc2tzLnBvcCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJhd1Rhc2sgPSBuZXcgUmF3VGFzaygpO1xuICAgIH1cbiAgICByYXdUYXNrLnRhc2sgPSB0YXNrO1xuICAgIHJhd1Rhc2suZG9tYWluID0gcHJvY2Vzcy5kb21haW47XG4gICAgcmF3QXNhcChyYXdUYXNrKTtcbn1cblxuZnVuY3Rpb24gUmF3VGFzaygpIHtcbiAgICB0aGlzLnRhc2sgPSBudWxsO1xuICAgIHRoaXMuZG9tYWluID0gbnVsbDtcbn1cblxuUmF3VGFzay5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5kb21haW4pIHtcbiAgICAgICAgdGhpcy5kb21haW4uZW50ZXIoKTtcbiAgICB9XG4gICAgdmFyIHRocmV3ID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgICB0aGlzLnRhc2suY2FsbCgpO1xuICAgICAgICB0aHJldyA9IGZhbHNlO1xuICAgICAgICAvLyBJZiB0aGUgdGFzayB0aHJvd3MgYW4gZXhjZXB0aW9uIChwcmVzdW1hYmx5KSBOb2RlLmpzIHJlc3RvcmVzIHRoZVxuICAgICAgICAvLyBkb21haW4gc3RhY2sgZm9yIHRoZSBuZXh0IGV2ZW50LlxuICAgICAgICBpZiAodGhpcy5kb21haW4pIHtcbiAgICAgICAgICAgIHRoaXMuZG9tYWluLmV4aXQoKTtcbiAgICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICAgIC8vIFdlIHVzZSB0cnkvZmluYWxseSBhbmQgYSB0aHJldyBmbGFnIHRvIGF2b2lkIG1lc3NpbmcgdXAgc3RhY2sgdHJhY2VzXG4gICAgICAgIC8vIHdoZW4gd2UgY2F0Y2ggYW5kIHJlbGVhc2UgZXJyb3JzLlxuICAgICAgICBpZiAodGhyZXcpIHtcbiAgICAgICAgICAgIC8vIEluIE5vZGUuanMsIHVuY2F1Z2h0IGV4Y2VwdGlvbnMgYXJlIGNvbnNpZGVyZWQgZmF0YWwgZXJyb3JzLlxuICAgICAgICAgICAgLy8gUmUtdGhyb3cgdGhlbSB0byBpbnRlcnJ1cHQgZmx1c2hpbmchXG4gICAgICAgICAgICAvLyBFbnN1cmUgdGhhdCBmbHVzaGluZyBjb250aW51ZXMgaWYgYW4gdW5jYXVnaHQgZXhjZXB0aW9uIGlzXG4gICAgICAgICAgICAvLyBzdXBwcmVzc2VkIGxpc3RlbmluZyBwcm9jZXNzLm9uKFwidW5jYXVnaHRFeGNlcHRpb25cIikgb3JcbiAgICAgICAgICAgIC8vIGRvbWFpbi5vbihcImVycm9yXCIpLlxuICAgICAgICAgICAgcmF3QXNhcC5yZXF1ZXN0Rmx1c2goKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGUgdGFzayB0aHJldyBhbiBlcnJvciwgd2UgZG8gbm90IHdhbnQgdG8gZXhpdCB0aGUgZG9tYWluIGhlcmUuXG4gICAgICAgIC8vIEV4aXRpbmcgdGhlIGRvbWFpbiB3b3VsZCBwcmV2ZW50IHRoZSBkb21haW4gZnJvbSBjYXRjaGluZyB0aGUgZXJyb3IuXG4gICAgICAgIHRoaXMudGFzayA9IG51bGw7XG4gICAgICAgIHRoaXMuZG9tYWluID0gbnVsbDtcbiAgICAgICAgZnJlZVRhc2tzLnB1c2godGhpcyk7XG4gICAgfVxufTtcblxuIl19