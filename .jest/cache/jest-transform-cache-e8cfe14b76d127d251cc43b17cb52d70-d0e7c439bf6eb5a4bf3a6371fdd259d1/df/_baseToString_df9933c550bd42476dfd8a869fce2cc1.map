{"version":3,"sources":["_baseToString.js"],"names":["Symbol","require","arrayMap","isArray","isSymbol","INFINITY","symbolProto","prototype","undefined","symbolToString","toString","baseToString","value","call","result","module","exports"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAApB;AAAA,IACIC,QAAQ,GAAGD,OAAO,CAAC,aAAD,CADtB;AAAA,IAEIE,OAAO,GAAGF,OAAO,CAAC,WAAD,CAFrB;AAAA,IAGIG,QAAQ,GAAGH,OAAO,CAAC,YAAD,CAHtB;;AAMA,IAAII,QAAQ,GAAG,IAAI,CAAnB;AAGA,IAAIC,WAAW,GAAGN,MAAM,kCAAGA,MAAM,CAACO,SAAV,mBAAsBC,SAA9C;AAAA,IACIC,cAAc,GAAGH,WAAW,GAAGA,WAAW,CAACI,QAAf,GAA0BF,SAD1D;;AAWA,SAASG,YAAT,CAAsBC,KAAtB,EAA6B;AAE3B,MAAI,OAAOA,KAAP,IAAgB,QAApB,EAA8B;AAC5B,WAAOA,KAAP;AACD;;AACD,MAAIT,OAAO,CAACS,KAAD,CAAX,EAAoB;AAElB,WAAOV,QAAQ,CAACU,KAAD,EAAQD,YAAR,CAAR,GAAgC,EAAvC;AACD;;AACD,MAAIP,QAAQ,CAACQ,KAAD,CAAZ,EAAqB;AACnB,WAAOH,cAAc,GAAGA,cAAc,CAACI,IAAf,CAAoBD,KAApB,CAAH,GAAgC,EAArD;AACD;;AACD,MAAIE,MAAM,GAAIF,KAAK,GAAG,EAAtB;AACA,SAAQE,MAAM,IAAI,GAAV,IAAkB,IAAIF,KAAL,IAAe,CAACP,QAAlC,GAA8C,IAA9C,GAAqDS,MAA5D;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBL,YAAjB","sourcesContent":["var Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n"]}