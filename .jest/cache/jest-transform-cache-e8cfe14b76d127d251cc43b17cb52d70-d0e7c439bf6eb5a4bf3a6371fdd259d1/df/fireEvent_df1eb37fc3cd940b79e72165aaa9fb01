ca7dda2f80f8d1f6b8ec128367158e22
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _act = _interopRequireDefault(require("./act"));

var _errors = require("./helpers/errors");

var findEventHandler = function findEventHandler(element, eventName, callsite) {
  var eventHandler = toEventHandlerName(eventName);

  if (typeof element.props[eventHandler] === 'function') {
    return element.props[eventHandler];
  } else if (typeof element.props[eventName] === 'function') {
    return element.props[eventName];
  }

  if (element.parent === null || element.parent.parent === null) {
    throw new _errors.ErrorWithStack("No handler function found for event: \"" + eventName + "\"", callsite || invokeEvent);
  }

  return findEventHandler(element.parent, eventName, callsite);
};

var invokeEvent = function invokeEvent(element, eventName, callsite) {
  for (var _len = arguments.length, data = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    data[_key - 3] = arguments[_key];
  }

  var handler = findEventHandler(element, eventName, callsite);

  if (!handler) {
    return null;
  }

  var returnValue;
  (0, _act.default)(function () {
    returnValue = handler.apply(void 0, data);
  });
  return returnValue;
};

var toEventHandlerName = function toEventHandlerName(eventName) {
  return "on" + eventName.charAt(0).toUpperCase() + eventName.slice(1);
};

var pressHandler = function pressHandler(element) {
  return invokeEvent(element, 'press', pressHandler);
};

var changeTextHandler = function changeTextHandler(element) {
  for (var _len2 = arguments.length, data = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    data[_key2 - 1] = arguments[_key2];
  }

  return invokeEvent.apply(void 0, [element, 'changeText', changeTextHandler].concat(data));
};

var scrollHandler = function scrollHandler(element) {
  for (var _len3 = arguments.length, data = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    data[_key3 - 1] = arguments[_key3];
  }

  return invokeEvent.apply(void 0, [element, 'scroll', scrollHandler].concat(data));
};

var fireEvent = function fireEvent(element, eventName) {
  for (var _len4 = arguments.length, data = new Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {
    data[_key4 - 2] = arguments[_key4];
  }

  return invokeEvent.apply(void 0, [element, eventName, fireEvent].concat(data));
};

fireEvent.press = pressHandler;
fireEvent.changeText = changeTextHandler;
fireEvent.scroll = scrollHandler;
var _default = fireEvent;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,