b3cdfd5a916e387a7ad29212ee1d44dd
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var conversions = require("webidl-conversions");

var utils = require("./utils.js");

var impl = utils.implSymbol;
var IteratorPrototype = Object.create(utils.IteratorPrototype, (0, _defineProperty2.default)({
  next: {
    value: function next() {
      var internal = this[utils.iterInternalSymbol];
      var target = internal.target,
          kind = internal.kind,
          index = internal.index;
      var values = Array.from(target[impl]);
      var len = values.length;

      if (index >= len) {
        return {
          value: undefined,
          done: true
        };
      }

      var pair = values[index];
      internal.index = index + 1;

      var _pair$map = pair.map(utils.tryWrapperForImpl),
          _pair$map2 = (0, _slicedToArray2.default)(_pair$map, 2),
          key = _pair$map2[0],
          value = _pair$map2[1];

      var result;

      switch (kind) {
        case "key":
          result = key;
          break;

        case "value":
          result = value;
          break;

        case "key+value":
          result = [key, value];
          break;
      }

      return {
        value: result,
        done: false
      };
    },
    writable: true,
    enumerable: true,
    configurable: true
  }
}, typeof Symbol === "function" ? typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag" : "@@toStringTag", {
  value: "URLSearchParamsIterator",
  writable: false,
  enumerable: false,
  configurable: true
}));

function URLSearchParams() {
  var args = [];

  for (var i = 0; i < arguments.length && i < 1; ++i) {
    args[i] = arguments[i];
  }

  if (args[0] !== undefined) {
    if (utils.isObject(args[0])) {
      if (args[0][typeof Symbol === "function" ? Symbol.iterator : "@@iterator"] !== undefined) {
        if (!utils.isObject(args[0])) {
          throw new TypeError("Failed to construct 'URLSearchParams': parameter 1" + " sequence" + " is not an iterable object.");
        } else {
          var V = [];
          var tmp = args[0];

          for (var _iterator = tmp, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var _nextItem = _ref;

            if (!utils.isObject(_nextItem)) {
              throw new TypeError("Failed to construct 'URLSearchParams': parameter 1" + " sequence" + "'s element" + " is not an iterable object.");
            } else {
              var _V = [];
              var _tmp = _nextItem;

              for (var _iterator2 = _tmp, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
                var _ref2;

                if (_isArray2) {
                  if (_i2 >= _iterator2.length) break;
                  _ref2 = _iterator2[_i2++];
                } else {
                  _i2 = _iterator2.next();
                  if (_i2.done) break;
                  _ref2 = _i2.value;
                }

                var _nextItem3 = _ref2;
                _nextItem3 = conversions["USVString"](_nextItem3, {
                  context: "Failed to construct 'URLSearchParams': parameter 1" + " sequence" + "'s element" + "'s element"
                });

                _V.push(_nextItem3);
              }

              _nextItem = _V;
            }

            V.push(_nextItem);
          }

          args[0] = V;
        }
      } else {
        if (!utils.isObject(args[0])) {
          throw new TypeError("Failed to construct 'URLSearchParams': parameter 1" + " record" + " is not an object.");
        } else {
          var result = Object.create(null);

          for (var _iterator3 = Reflect.ownKeys(args[0]), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
            var _ref3;

            if (_isArray3) {
              if (_i3 >= _iterator3.length) break;
              _ref3 = _iterator3[_i3++];
            } else {
              _i3 = _iterator3.next();
              if (_i3.done) break;
              _ref3 = _i3.value;
            }

            var _key = _ref3;
            var desc = Object.getOwnPropertyDescriptor(args[0], _key);

            if (desc && desc.enumerable) {
              var typedKey = _key;
              var typedValue = args[0][_key];
              typedKey = conversions["USVString"](typedKey, {
                context: "Failed to construct 'URLSearchParams': parameter 1" + " record" + "'s key"
              });
              typedValue = conversions["USVString"](typedValue, {
                context: "Failed to construct 'URLSearchParams': parameter 1" + " record" + "'s value"
              });
              result[typedKey] = typedValue;
            }
          }

          args[0] = result;
        }
      }
    } else {
      args[0] = conversions["USVString"](args[0], {
        context: "Failed to construct 'URLSearchParams': parameter 1"
      });
    }
  } else {
    args[0] = "";
  }

  iface.setup(this, args);
}

Object.defineProperty(URLSearchParams, "prototype", {
  value: URLSearchParams.prototype,
  writable: false,
  enumerable: false,
  configurable: false
});
Object.defineProperty(URLSearchParams.prototype, typeof Symbol === "function" ? Symbol.iterator : "@@iterator", {
  writable: true,
  enumerable: false,
  configurable: true,
  value: function entries() {
    if (!this || !module.exports.is(this)) {
      throw new TypeError("Illegal invocation");
    }

    return module.exports.createDefaultIterator(this, "key+value");
  }
});

URLSearchParams.prototype.forEach = function forEach(callback) {
  if (!this || !module.exports.is(this)) {
    throw new TypeError("Illegal invocation");
  }

  if (arguments.length < 1) {
    throw new TypeError("Failed to execute 'forEach' on 'URLSearchParams': 1 argument required, " + "but only 0 present.");
  }

  if (typeof callback !== "function") {
    throw new TypeError("Failed to execute 'forEach' on 'URLSearchParams': The callback provided " + "as parameter 1 is not a function.");
  }

  var thisArg = arguments[1];
  var pairs = Array.from(this[impl]);
  var i = 0;

  while (i < pairs.length) {
    var _pairs$i$map = pairs[i].map(utils.tryWrapperForImpl),
        _pairs$i$map2 = (0, _slicedToArray2.default)(_pairs$i$map, 2),
        key = _pairs$i$map2[0],
        value = _pairs$i$map2[1];

    callback.call(thisArg, value, key, this);
    pairs = Array.from(this[impl]);
    i++;
  }
};

URLSearchParams.prototype.append = function append(name, value) {
  var _this$impl;

  if (!this || !module.exports.is(this)) {
    throw new TypeError("Illegal invocation");
  }

  if (arguments.length < 2) {
    throw new TypeError("Failed to execute 'append' on 'URLSearchParams': 2 " + "arguments required, but only " + arguments.length + " present.");
  }

  var args = [];

  for (var i = 0; i < arguments.length && i < 2; ++i) {
    args[i] = arguments[i];
  }

  args[0] = conversions["USVString"](args[0], {
    context: "Failed to execute 'append' on 'URLSearchParams': parameter 1"
  });
  args[1] = conversions["USVString"](args[1], {
    context: "Failed to execute 'append' on 'URLSearchParams': parameter 2"
  });
  return (_this$impl = this[impl]).append.apply(_this$impl, args);
};

URLSearchParams.prototype.delete = function _(name) {
  var _this$impl2;

  if (!this || !module.exports.is(this)) {
    throw new TypeError("Illegal invocation");
  }

  if (arguments.length < 1) {
    throw new TypeError("Failed to execute 'delete' on 'URLSearchParams': 1 " + "argument required, but only " + arguments.length + " present.");
  }

  var args = [];

  for (var i = 0; i < arguments.length && i < 1; ++i) {
    args[i] = arguments[i];
  }

  args[0] = conversions["USVString"](args[0], {
    context: "Failed to execute 'delete' on 'URLSearchParams': parameter 1"
  });
  return (_this$impl2 = this[impl]).delete.apply(_this$impl2, args);
};

URLSearchParams.prototype.get = function get(name) {
  var _this$impl3;

  if (!this || !module.exports.is(this)) {
    throw new TypeError("Illegal invocation");
  }

  if (arguments.length < 1) {
    throw new TypeError("Failed to execute 'get' on 'URLSearchParams': 1 " + "argument required, but only " + arguments.length + " present.");
  }

  var args = [];

  for (var i = 0; i < arguments.length && i < 1; ++i) {
    args[i] = arguments[i];
  }

  args[0] = conversions["USVString"](args[0], {
    context: "Failed to execute 'get' on 'URLSearchParams': parameter 1"
  });
  return (_this$impl3 = this[impl]).get.apply(_this$impl3, args);
};

URLSearchParams.prototype.getAll = function getAll(name) {
  var _this$impl4;

  if (!this || !module.exports.is(this)) {
    throw new TypeError("Illegal invocation");
  }

  if (arguments.length < 1) {
    throw new TypeError("Failed to execute 'getAll' on 'URLSearchParams': 1 " + "argument required, but only " + arguments.length + " present.");
  }

  var args = [];

  for (var i = 0; i < arguments.length && i < 1; ++i) {
    args[i] = arguments[i];
  }

  args[0] = conversions["USVString"](args[0], {
    context: "Failed to execute 'getAll' on 'URLSearchParams': parameter 1"
  });
  return utils.tryWrapperForImpl((_this$impl4 = this[impl]).getAll.apply(_this$impl4, args));
};

URLSearchParams.prototype.has = function has(name) {
  var _this$impl5;

  if (!this || !module.exports.is(this)) {
    throw new TypeError("Illegal invocation");
  }

  if (arguments.length < 1) {
    throw new TypeError("Failed to execute 'has' on 'URLSearchParams': 1 " + "argument required, but only " + arguments.length + " present.");
  }

  var args = [];

  for (var i = 0; i < arguments.length && i < 1; ++i) {
    args[i] = arguments[i];
  }

  args[0] = conversions["USVString"](args[0], {
    context: "Failed to execute 'has' on 'URLSearchParams': parameter 1"
  });
  return (_this$impl5 = this[impl]).has.apply(_this$impl5, args);
};

URLSearchParams.prototype.set = function set(name, value) {
  var _this$impl6;

  if (!this || !module.exports.is(this)) {
    throw new TypeError("Illegal invocation");
  }

  if (arguments.length < 2) {
    throw new TypeError("Failed to execute 'set' on 'URLSearchParams': 2 " + "arguments required, but only " + arguments.length + " present.");
  }

  var args = [];

  for (var i = 0; i < arguments.length && i < 2; ++i) {
    args[i] = arguments[i];
  }

  args[0] = conversions["USVString"](args[0], {
    context: "Failed to execute 'set' on 'URLSearchParams': parameter 1"
  });
  args[1] = conversions["USVString"](args[1], {
    context: "Failed to execute 'set' on 'URLSearchParams': parameter 2"
  });
  return (_this$impl6 = this[impl]).set.apply(_this$impl6, args);
};

URLSearchParams.prototype.sort = function sort() {
  if (!this || !module.exports.is(this)) {
    throw new TypeError("Illegal invocation");
  }

  return this[impl].sort();
};

URLSearchParams.prototype.toString = function toString() {
  if (!this || !module.exports.is(this)) {
    throw new TypeError("Illegal invocation");
  }

  return this[impl].toString();
};

URLSearchParams.prototype.entries = URLSearchParams.prototype[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"];

URLSearchParams.prototype.keys = function keys() {
  if (!this || !module.exports.is(this)) {
    throw new TypeError("Illegal invocation");
  }

  return module.exports.createDefaultIterator(this, "key");
};

URLSearchParams.prototype.values = function values() {
  if (!this || !module.exports.is(this)) {
    throw new TypeError("Illegal invocation");
  }

  return module.exports.createDefaultIterator(this, "value");
};

Object.defineProperty(URLSearchParams.prototype, typeof Symbol === "function" ? Symbol.toStringTag : "@@toStringTag", {
  value: "URLSearchParams",
  writable: false,
  enumerable: false,
  configurable: true
});
var iface = {
  mixedInto: [],
  is: function is(obj) {
    if (obj) {
      if (obj[impl] instanceof Impl.implementation) {
        return true;
      }

      for (var i = 0; i < module.exports.mixedInto.length; ++i) {
        if (obj instanceof module.exports.mixedInto[i]) {
          return true;
        }
      }
    }

    return false;
  },
  isImpl: function isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      var wrapper = utils.wrapperForImpl(obj);

      for (var i = 0; i < module.exports.mixedInto.length; ++i) {
        if (wrapper instanceof module.exports.mixedInto[i]) {
          return true;
        }
      }
    }

    return false;
  },
  convert: function convert(obj) {
    var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref4$context = _ref4.context,
        context = _ref4$context === void 0 ? "The provided value" : _ref4$context;

    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }

    throw new TypeError(context + " is not of type 'URLSearchParams'.");
  },
  createDefaultIterator: function createDefaultIterator(target, kind) {
    var iterator = Object.create(IteratorPrototype);
    Object.defineProperty(iterator, utils.iterInternalSymbol, {
      value: {
        target: target,
        kind: kind,
        index: 0
      },
      writable: false,
      enumerable: false,
      configurable: true
    });
    return iterator;
  },
  create: function create(constructorArgs, privateData) {
    var obj = Object.create(URLSearchParams.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return obj;
  },
  createImpl: function createImpl(constructorArgs, privateData) {
    var obj = Object.create(URLSearchParams.prototype);
    obj = this.setup(obj, constructorArgs, privateData);
    return utils.implForWrapper(obj);
  },
  _internalSetup: function _internalSetup(obj) {},
  setup: function setup(obj, constructorArgs, privateData) {
    if (!privateData) privateData = {};
    privateData.wrapper = obj;

    this._internalSetup(obj);

    Object.defineProperty(obj, impl, {
      value: new Impl.implementation(constructorArgs, privateData),
      writable: false,
      enumerable: false,
      configurable: true
    });
    obj[impl][utils.wrapperSymbol] = obj;

    if (Impl.init) {
      Impl.init(obj[impl], privateData);
    }

    return obj;
  },
  interface: URLSearchParams,
  expose: {
    Window: {
      URLSearchParams: URLSearchParams
    },
    Worker: {
      URLSearchParams: URLSearchParams
    }
  }
};
module.exports = iface;

var Impl = require(".//URLSearchParams-impl.js");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,