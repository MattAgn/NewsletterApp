da02fa6cbba4642329b29f2a6f09739b
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var EventEmitter = require('../vendor/emitter/EventEmitter');

var Platform = require('./Platform');

var RCTDeviceEventEmitter = require('../EventEmitter/RCTDeviceEventEmitter');

var invariant = require('invariant');

var eventEmitter = new EventEmitter();
var dimensionsInitialized = false;
var dimensions = {};

var Dimensions = function () {
  function Dimensions() {
    (0, _classCallCheck2.default)(this, Dimensions);
  }

  (0, _createClass2.default)(Dimensions, null, [{
    key: "set",
    value: function set(dims) {
      if (dims && dims.windowPhysicalPixels) {
        dims = JSON.parse(JSON.stringify(dims));
        var windowPhysicalPixels = dims.windowPhysicalPixels;
        dims.window = {
          width: windowPhysicalPixels.width / windowPhysicalPixels.scale,
          height: windowPhysicalPixels.height / windowPhysicalPixels.scale,
          scale: windowPhysicalPixels.scale,
          fontScale: windowPhysicalPixels.fontScale
        };

        if (Platform.OS === 'android') {
          var screenPhysicalPixels = dims.screenPhysicalPixels;
          dims.screen = {
            width: screenPhysicalPixels.width / screenPhysicalPixels.scale,
            height: screenPhysicalPixels.height / screenPhysicalPixels.scale,
            scale: screenPhysicalPixels.scale,
            fontScale: screenPhysicalPixels.fontScale
          };
          delete dims.screenPhysicalPixels;
        } else {
          dims.screen = dims.window;
        }

        delete dims.windowPhysicalPixels;
      }

      (0, _extends2.default)(dimensions, dims);

      if (dimensionsInitialized) {
        eventEmitter.emit('change', {
          window: dimensions.window,
          screen: dimensions.screen
        });
      } else {
        dimensionsInitialized = true;
      }
    }
  }, {
    key: "get",
    value: function get(dim) {
      invariant(dimensions[dim], 'No dimension set for key ' + dim);
      return dimensions[dim];
    }
  }, {
    key: "addEventListener",
    value: function addEventListener(type, handler) {
      invariant(type === 'change', 'Trying to subscribe to unknown event: "%s"', type);
      eventEmitter.addListener(type, handler);
    }
  }, {
    key: "removeEventListener",
    value: function removeEventListener(type, handler) {
      invariant(type === 'change', 'Trying to remove listener for unknown event: "%s"', type);
      eventEmitter.removeListener(type, handler);
    }
  }]);
  return Dimensions;
}();

var dims = global.nativeExtensions && global.nativeExtensions.DeviceInfo && global.nativeExtensions.DeviceInfo.Dimensions;
var nativeExtensionsEnabled = true;

if (!dims) {
  var DeviceInfo = require('./DeviceInfo');

  dims = DeviceInfo.Dimensions;
  nativeExtensionsEnabled = false;
}

invariant(dims, 'Either DeviceInfo native extension or DeviceInfo Native Module must be registered');
Dimensions.set(dims);

if (!nativeExtensionsEnabled) {
  RCTDeviceEventEmitter.addListener('didUpdateDimensions', function (update) {
    Dimensions.set(update);
  });
}

module.exports = Dimensions;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,