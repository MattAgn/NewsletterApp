{"version":3,"sources":["../src/connect.tsx","../src/utils.ts","../src/Formik.tsx","../src/Field.tsx","../src/Form.tsx","../src/withFormik.tsx","../src/FieldArray.tsx","../src/FastField.tsx","../src/ErrorMessage.tsx"],"names":["React.createElement","React.Component","React.Children"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport createContext from 'create-react-context';\nimport { FormikContext } from './types';\n\nexport const {\n  Provider: FormikProvider,\n  Consumer: FormikConsumer,\n}: React.Context<FormikContext<any>> = (createContext as any)({} as any);\n\n/**\n * Connect any component to Formik context, and inject as a prop called `formik`;\n * @param Comp React Component\n */\nexport function connect<OuterProps, Values = {}>(\n  Comp: React.ComponentType<OuterProps & { formik: FormikContext<Values> }>\n) {\n  const C: React.SFC<OuterProps> = (props: OuterProps) => (\n    <FormikConsumer>\n      {formik => <Comp {...props} formik={formik} />}\n    </FormikConsumer>\n  );\n  const componentDisplayName =\n    Comp.displayName ||\n    Comp.name ||\n    (Comp.constructor && Comp.constructor.name) ||\n    'Component';\n\n  // Assign Comp to C.WrappedComponent so we can access the inner component in tests\n  // For example, <Field.WrappedComponent /> gets us <FieldInner/>\n  (C as React.SFC<OuterProps> & {\n    WrappedComponent: React.ReactNode;\n  }).WrappedComponent = Comp;\n\n  C.displayName = `FormikConnect(${componentDisplayName})`;\n\n  return hoistNonReactStatics(\n    C,\n    Comp as React.ComponentClass<OuterProps & { formik: FormikContext<Values> }> // cast type to ComponentClass (even if SFC)\n  ) as React.ComponentType<OuterProps>;\n}\n","import clone from 'lodash/clone';\nimport toPath from 'lodash/toPath';\nimport * as React from 'react';\n\n// Assertions\n\n/** @private is the given object a Function? */\nexport const isFunction = (obj: any): obj is Function =>\n  typeof obj === 'function';\n\n/** @private is the given object an Object? */\nexport const isObject = (obj: any): boolean =>\n  obj !== null && typeof obj === 'object';\n\n/** @private is the given object an integer? */\nexport const isInteger = (obj: any): boolean =>\n  String(Math.floor(Number(obj))) === obj;\n\n/** @private is the given object a string? */\nexport const isString = (obj: any): obj is string =>\n  Object.prototype.toString.call(obj) === '[object String]';\n\n/** @private is the given object a NaN? */\nexport const isNaN = (obj: any): boolean => obj !== obj;\n\n/** @private Does a React component have exactly 0 children? */\nexport const isEmptyChildren = (children: any): boolean =>\n  React.Children.count(children) === 0;\n\n/** @private is the given object/value a promise? */\nexport const isPromise = (value: any): value is PromiseLike<any> =>\n  isObject(value) && isFunction(value.then);\n\n/** @private is the given object/value a type of synthetic event? */\nexport const isInputEvent = (value: any): value is React.SyntheticEvent<any> =>\n  value && isObject(value) && isObject(value.target);\n\n/**\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\n * not safe to call document.activeElement if there is nothing focused.\n *\n * The activeElement will be null only if the document or document body is not\n * yet defined.\n *\n * @param {?Document} doc Defaults to current document.\n * @return {Element | null}\n * @see https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/dom/getActiveElement.js\n */\nexport function getActiveElement(doc?: Document): Element | null {\n  doc = doc || (typeof document !== 'undefined' ? document : undefined);\n  if (typeof doc === 'undefined') {\n    return null;\n  }\n  try {\n    return doc.activeElement || doc.body;\n  } catch (e) {\n    return doc.body;\n  }\n}\n\n/**\n * Make a promise cancellable by @istarkov\n * @see https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html\n */\nexport function makeCancelable<T extends Promise<any>>(\n  promise: T\n): [T, () => void] {\n  let hasCanceled: boolean = false;\n\n  const wrappedPromise: any = new Promise((resolve, reject) => {\n    promise.then(\n      val => (hasCanceled ? reject({ isCanceled: true }) : resolve(val)),\n      error => (hasCanceled ? reject({ isCanceled: true }) : reject(error))\n    );\n  });\n\n  return [\n    wrappedPromise,\n    function cancel() {\n      hasCanceled = true;\n    },\n  ];\n}\n\n/**\n * Deeply get a value from an object via its path.\n */\nexport function getIn(\n  obj: any,\n  key: string | string[],\n  def?: any,\n  p: number = 0\n) {\n  const path = toPath(key);\n  while (obj && p < path.length) {\n    obj = obj[path[p++]];\n  }\n  return obj === undefined ? def : obj;\n}\n\n/**\n * Deeply set a value from in object via it's path. If the value at `path`\n * has changed, return a shallow copy of obj with `value` set at `path`.\n * If `value` has not changed, return the original `obj`.\n *\n * Existing objects / arrays along `path` are also shallow copied. Sibling\n * objects along path retain the same internal js reference. Since new\n * objects / arrays are only created along `path`, we can test if anything\n * changed in a nested structure by comparing the object's reference in\n * the old and new object, similar to how russian doll cache invalidation\n * works.\n *\n * In earlier versions of this function, which used cloneDeep, there were\n * issues whereby settings a nested value would mutate the parent\n * instead of creating a new object. `clone` avoids that bug making a\n * shallow copy of the objects along the update path\n * so no object is mutated in place.\n *\n * Before changing this function, please read through the following\n * discussions.\n *\n * @see https://github.com/developit/linkstate\n * @see https://github.com/jaredpalmer/formik/pull/123\n */\nexport function setIn(obj: any, path: string, value: any): any {\n  let res: any = clone(obj); // this keeps inheritance when obj is a class\n  let resVal: any = res;\n  let i = 0;\n  let pathArray = toPath(path);\n\n  for (; i < pathArray.length - 1; i++) {\n    const currentPath: string = pathArray[i];\n    let currentObj: any = getIn(obj, pathArray.slice(0, i + 1));\n\n    if (currentObj) {\n      resVal = resVal[currentPath] = clone(currentObj);\n    } else {\n      const nextPath: string = pathArray[i + 1];\n      resVal = resVal[currentPath] =\n        isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};\n    }\n  }\n\n  // Return original object if new value is the same as current\n  if ((i === 0 ? obj : resVal)[pathArray[i]] === value) {\n    return obj;\n  }\n\n  if (value === undefined) {\n    delete resVal[pathArray[i]];\n  } else {\n    resVal[pathArray[i]] = value;\n  }\n\n  // If the path array has a single element, the loop did not run.\n  // Deleting on `resVal` had no effect in this scenario, so we delete on the result instead.\n  if (i === 0 && value === undefined) {\n    delete res[pathArray[i]];\n  }\n\n  return res;\n}\n\n/**\n * Recursively a set the same value for all keys and arrays nested object, cloning\n * @param object\n * @param value\n * @param visited\n * @param response\n */\nexport function setNestedObjectValues<T>(\n  object: any,\n  value: any,\n  visited: any = new WeakMap(),\n  response: any = {}\n): T {\n  for (let k of Object.keys(object)) {\n    const val = object[k];\n    if (isObject(val)) {\n      if (!visited.get(val)) {\n        visited.set(val, true);\n        // In order to keep array values consistent for both dot path  and\n        // bracket syntax, we need to check if this is an array so that\n        // this will output  { friends: [true] } and not { friends: { \"0\": true } }\n        response[k] = Array.isArray(val) ? [] : {};\n        setNestedObjectValues(val, value, visited, response[k]);\n      }\n    } else {\n      response[k] = value;\n    }\n  }\n\n  return response;\n}\n","import * as React from 'react';\nimport isEqual from 'react-fast-compare';\nimport deepmerge from 'deepmerge';\nimport { FormikProvider } from './connect';\nimport warning from 'tiny-warning';\nimport {\n  FormikActions,\n  FormikConfig,\n  FormikErrors,\n  FormikState,\n  FormikTouched,\n  FormikValues,\n  FormikProps,\n} from './types';\nimport {\n  isEmptyChildren,\n  isFunction,\n  isNaN,\n  isPromise,\n  isString,\n  isInputEvent,\n  setIn,\n  setNestedObjectValues,\n  getActiveElement,\n  getIn,\n  makeCancelable,\n} from './utils';\n\nexport class Formik<Values = FormikValues> extends React.Component<\n  FormikConfig<Values>,\n  FormikState<Values>\n> {\n  static defaultProps = {\n    validateOnChange: true,\n    validateOnBlur: true,\n    isInitialValid: false,\n    enableReinitialize: false,\n  };\n\n  initialValues: Values;\n  didMount: boolean;\n  hcCache: {\n    [key: string]: (e: unknown | React.ChangeEvent<any>) => void;\n  } = {};\n  hbCache: {\n    [key: string]: (e: any) => void;\n  } = {};\n  fields: {\n    [field: string]: React.Component<any>;\n  };\n  validator: any;\n\n  constructor(props: FormikConfig<Values>) {\n    super(props);\n    this.state = {\n      values: props.initialValues || ({} as any),\n      errors: {},\n      touched: {},\n      isSubmitting: false,\n      isValidating: false,\n      submitCount: 0,\n      status: props.initialStatus,\n    };\n    this.didMount = false;\n    this.fields = {};\n    this.initialValues = props.initialValues || ({} as any);\n    warning(\n      !(props.component && props.render),\n      'You should not use <Formik component> and <Formik render> in the same <Formik> component; <Formik render> will be ignored'\n    );\n\n    warning(\n      !(props.component && props.children && !isEmptyChildren(props.children)),\n      'You should not use <Formik component> and <Formik children> in the same <Formik> component; <Formik children> will be ignored'\n    );\n\n    warning(\n      !(props.render && props.children && !isEmptyChildren(props.children)),\n      'You should not use <Formik render> and <Formik children> in the same <Formik> component; <Formik children> will be ignored'\n    );\n  }\n\n  registerField = (name: string, Comp: React.Component<any>) => {\n    this.fields[name] = Comp;\n  };\n\n  unregisterField = (name: string) => {\n    delete this.fields[name];\n  };\n\n  componentDidMount() {\n    this.didMount = true;\n  }\n\n  componentWillUnmount() {\n    // This allows us to prevent setting state on an\n    // unmounted component. This can occur if Formik is in a modal, and submission\n    // toggles show/hide, and validation of a blur field takes longer than validation\n    // before a submit.\n    // @see https://github.com/jaredpalmer/formik/issues/597\n    // @see https://reactjs.org/blog/2015/12/16/ismounted-antipattern.html\n    this.didMount = false;\n\n    // Cancel validation on unmount.\n    if (this.validator) {\n      this.validator();\n    }\n  }\n\n  componentDidUpdate(prevProps: Readonly<FormikConfig<Values>>) {\n    // If the initialValues change, reset the form\n    if (\n      this.props.enableReinitialize &&\n      !isEqual(prevProps.initialValues, this.props.initialValues)\n    ) {\n      this.initialValues = this.props.initialValues;\n      // @todo refactor to use getDerivedStateFromProps?\n      this.resetForm(this.props.initialValues);\n    }\n  }\n\n  setErrors = (errors: FormikErrors<Values>) => {\n    this.setState({ errors });\n  };\n\n  setTouched = (touched: FormikTouched<Values>) => {\n    this.setState({ touched }, () => {\n      if (this.props.validateOnBlur) {\n        this.runValidations(this.state.values);\n      }\n    });\n  };\n\n  setValues = (values: FormikState<Values>['values']) => {\n    this.setState({ values }, () => {\n      if (this.props.validateOnChange) {\n        this.runValidations(values);\n      }\n    });\n  };\n\n  setStatus = (status?: any) => {\n    this.setState({ status });\n  };\n\n  setError = (error: any) => {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        `Warning: Formik\\'s setError(error) is deprecated and may be removed in future releases. Please use Formik\\'s setStatus(status) instead. It works identically. For more info see https://github.com/jaredpalmer/formik#setstatus-status-any--void`\n      );\n    }\n    this.setState({ error });\n  };\n\n  setSubmitting = (isSubmitting: boolean) => {\n    if (this.didMount) {\n      this.setState({ isSubmitting });\n    }\n  };\n\n  /**\n   * Run field level validation\n   */\n  validateField = (field: string): Promise<Object> => {\n    this.setState({ isValidating: true });\n    return this.runSingleFieldLevelValidation(\n      field,\n      getIn(this.state.values, field)\n    ).then(error => {\n      if (this.didMount) {\n        this.setState({\n          errors: setIn(this.state.errors, field, error),\n          isValidating: false,\n        });\n      }\n      return error;\n    });\n  };\n\n  runSingleFieldLevelValidation = (\n    field: string,\n    value: void | string\n  ): Promise<string> => {\n    return new Promise(resolve =>\n      resolve(this.fields[field].props.validate(value))\n    ).then(x => x, e => e);\n  };\n\n  runFieldLevelValidations(\n    values: FormikValues\n  ): Promise<FormikErrors<Values>> {\n    const fieldKeysWithValidation: string[] = Object.keys(this.fields).filter(\n      f =>\n        this.fields &&\n        this.fields[f] &&\n        this.fields[f].props.validate &&\n        isFunction(this.fields[f].props.validate)\n    );\n\n    // Construct an array with all of the field validation functions\n    const fieldValidations: Promise<string>[] =\n      fieldKeysWithValidation.length > 0\n        ? fieldKeysWithValidation.map(f =>\n            this.runSingleFieldLevelValidation(f, getIn(values, f))\n          )\n        : [Promise.resolve('DO_NOT_DELETE_YOU_WILL_BE_FIRED')]; // use special case ;)\n\n    return Promise.all(fieldValidations).then((fieldErrorsList: string[]) =>\n      fieldErrorsList.reduce(\n        (prev, curr, index) => {\n          if (curr === 'DO_NOT_DELETE_YOU_WILL_BE_FIRED') {\n            return prev;\n          }\n          if (!!curr) {\n            prev = setIn(prev, fieldKeysWithValidation[index], curr);\n          }\n          return prev;\n        },\n        {} as FormikErrors<Values>\n      )\n    );\n  }\n\n  runValidateHandler(values: FormikValues): Promise<FormikErrors<Values>> {\n    return new Promise(resolve => {\n      const maybePromisedErrors = (this.props.validate as any)(values);\n      if (maybePromisedErrors === undefined) {\n        resolve({});\n      } else if (isPromise(maybePromisedErrors)) {\n        (maybePromisedErrors as Promise<any>).then(\n          () => {\n            resolve({});\n          },\n          errors => {\n            resolve(errors);\n          }\n        );\n      } else {\n        resolve(maybePromisedErrors);\n      }\n    });\n  }\n\n  /**\n   * Run validation against a Yup schema and optionally run a function if successful\n   */\n  runValidationSchema = (values: FormikValues) => {\n    return new Promise(resolve => {\n      const { validationSchema } = this.props;\n      const schema = isFunction(validationSchema)\n        ? validationSchema()\n        : validationSchema;\n      validateYupSchema(values, schema).then(\n        () => {\n          resolve({});\n        },\n        (err: any) => {\n          resolve(yupToFormErrors(err));\n        }\n      );\n    });\n  };\n\n  /**\n   * Run all validations methods and update state accordingly\n   */\n  runValidations = (\n    values: FormikValues = this.state.values\n  ): Promise<FormikErrors<Values>> => {\n    if (this.validator) {\n      this.validator();\n    }\n\n    const [promise, cancel] = makeCancelable(\n      Promise.all([\n        this.runFieldLevelValidations(values),\n        this.props.validationSchema ? this.runValidationSchema(values) : {},\n        this.props.validate ? this.runValidateHandler(values) : {},\n      ]).then(([fieldErrors, schemaErrors, handlerErrors]) => {\n        return deepmerge.all<FormikErrors<Values>>(\n          [fieldErrors, schemaErrors, handlerErrors],\n          { arrayMerge }\n        );\n      })\n    );\n    this.validator = cancel;\n    return promise\n      .then((errors: FormikErrors<Values>) => {\n        if (this.didMount) {\n          this.setState(prevState => {\n            if (!isEqual(prevState.errors, errors)) {\n              return { errors };\n            }\n            return null; // abort the update\n          });\n        }\n        return errors;\n      })\n      .catch(x => x);\n  };\n\n  handleChange = (\n    eventOrPath: string | React.ChangeEvent<any>\n  ): void | ((eventOrValue: unknown | React.ChangeEvent<any>) => void) => {\n    // this function actually handles the change\n    const executeChange = (\n      eventOrValue: unknown | React.ChangeEvent<any>,\n      maybePath?: string\n    ) => {\n      // To allow using handleChange with React Native (Web) or other UI libraries, we\n      // allow for the first argument to be either a value or the standard change event.\n      let field = maybePath;\n      let value: unknown;\n      if (isInputEvent(eventOrValue)) {\n        const event = eventOrValue as React.ChangeEvent<any>;\n        // If we can, persist the event, https://reactjs.org/docs/events.html#event-pooling\n        if (event.persist) {\n          event.persist();\n        }\n        const { type, name, id, checked, outerHTML } = event.target;\n        field = maybePath ? maybePath : name ? name : id;\n        if (!field && process.env.NODE_ENV !== 'production') {\n          warnAboutMissingIdentifier({\n            htmlContent: outerHTML,\n            documentationAnchorLink: 'handlechange-e-reactchangeeventany--void',\n            handlerName: 'handleChange',\n          });\n        }\n        value = event.target.value;\n        if (/number|range/.test(type)) {\n          const parsed = parseFloat(event.target.value);\n          value = isNaN(parsed) ? '' : parsed;\n        }\n        if (/checkbox/.test(type)) {\n          value = checked;\n        }\n      } else {\n        value = eventOrValue;\n      }\n\n      if (field) {\n        // Set form fields by name\n        this.setState(\n          prevState => ({\n            ...prevState,\n            values: setIn(prevState.values, field!, value),\n          }),\n          () => {\n            if (this.props.validateOnChange) {\n              this.runValidations(setIn(this.state.values, field!, value));\n            }\n          }\n        );\n      }\n    };\n\n    // Actually execute logic above....\n    if (isString(eventOrPath)) {\n      const path = eventOrPath;\n      // cache these handlers by key like Preact's linkState does for perf boost\n      if (!isFunction(this.hcCache[path])) {\n        // set a new handle function in cache\n        this.hcCache[path] = (eventOrValue: unknown | React.ChangeEvent<any>) =>\n          executeChange(eventOrValue, path);\n      }\n      return this.hcCache[path]; // return the cached function\n    } else {\n      const event = eventOrPath;\n      executeChange(event);\n    }\n  };\n\n  setFieldValue = (\n    field: string,\n    value: any,\n    shouldValidate: boolean = true\n  ) => {\n    if (this.didMount) {\n      // Set form field by name\n      this.setState(\n        prevState => ({\n          ...prevState,\n          values: setIn(prevState.values, field, value),\n        }),\n        () => {\n          if (this.props.validateOnChange && shouldValidate) {\n            this.runValidations(this.state.values);\n          }\n        }\n      );\n    }\n  };\n\n  handleSubmit = (e: React.FormEvent<HTMLFormElement> | undefined) => {\n    if (e && e.preventDefault) {\n      e.preventDefault();\n    }\n\n    // Warn if form submission is triggered by a <button> without a\n    // specified `type` attribute during development. This mitigates\n    // a common gotcha in forms with both reset and submit buttons,\n    // where the dev forgets to add type=\"button\" to the reset button.\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      typeof document !== 'undefined'\n    ) {\n      // Safely get the active element (works with IE)\n      const activeElement = getActiveElement();\n      if (\n        activeElement !== null &&\n        activeElement instanceof HTMLButtonElement\n      ) {\n        warning(\n          !!(\n            activeElement.attributes &&\n            activeElement.attributes.getNamedItem('type')\n          ),\n          'You submitted a Formik form using a button with an unspecified `type` attribute.  Most browsers default button elements to `type=\"submit\"`. If this is not a submit button, please add `type=\"button\"`.'\n        );\n      }\n    }\n\n    this.submitForm();\n  };\n\n  submitForm = () => {\n    // Recursively set all values to `true`.\n    this.setState(prevState => ({\n      touched: setNestedObjectValues<FormikTouched<Values>>(\n        prevState.values,\n        true\n      ),\n      isSubmitting: true,\n      isValidating: true,\n      submitCount: prevState.submitCount + 1,\n    }));\n\n    return this.runValidations(this.state.values).then(combinedErrors => {\n      if (this.didMount) {\n        this.setState({ isValidating: false });\n      }\n      const isValid = Object.keys(combinedErrors).length === 0;\n      if (isValid) {\n        this.executeSubmit();\n      } else if (this.didMount) {\n        // ^^^ Make sure Formik is still mounted before calling setState\n        this.setState({ isSubmitting: false });\n      }\n    });\n  };\n\n  executeSubmit = () => {\n    this.props.onSubmit(this.state.values, this.getFormikActions());\n  };\n\n  handleBlur = (\n    eventOrPath: string | React.FocusEvent<any>\n  ): void | ((e?: React.FocusEvent<any>) => void) => {\n    const executeBlur = (\n      maybeEvent?: React.FocusEvent<any>,\n      maybePath?: string\n    ) => {\n      let field = maybePath;\n      if (isInputEvent(maybeEvent)) {\n        const event = maybeEvent as React.FocusEvent<any>;\n        // If we can, persist the event, https://reactjs.org/docs/events.html#event-pooling\n        if (event.persist) {\n          event.persist();\n        }\n        const { name, id, outerHTML } = event.target;\n        field = name ? name : id;\n        if (!field && process.env.NODE_ENV !== 'production') {\n          warnAboutMissingIdentifier({\n            htmlContent: outerHTML,\n            documentationAnchorLink: 'handleblur-e-reactfocuseventany--void',\n            handlerName: 'handleBlur',\n          });\n        }\n      }\n\n      this.setState(prevState => ({\n        touched: setIn(prevState.touched, field!, true),\n      }));\n\n      if (this.props.validateOnBlur) {\n        this.runValidations(this.state.values);\n      }\n    };\n    if (isString(eventOrPath)) {\n      const path = eventOrPath;\n      // cache these handlers by key like Preact's linkState does for perf boost\n      if (!isFunction(this.hbCache[path])) {\n        // set a new handle function in cache\n        this.hbCache[path] = (event?: React.FocusEvent<any>) =>\n          executeBlur(event, path);\n      }\n      return this.hbCache[path]; // return the cached function\n    } else {\n      const event = eventOrPath;\n      executeBlur(event);\n    }\n  };\n\n  setFieldTouched = (\n    field: string,\n    touched: boolean = true,\n    shouldValidate: boolean = true\n  ) => {\n    // Set touched field by name\n    this.setState(\n      prevState => ({\n        ...prevState,\n        touched: setIn(prevState.touched, field, touched),\n      }),\n      () => {\n        if (this.props.validateOnBlur && shouldValidate) {\n          this.runValidations(this.state.values);\n        }\n      }\n    );\n  };\n\n  setFieldError = (field: string, message: string | undefined) => {\n    // Set form field by name\n    this.setState(prevState => ({\n      ...prevState,\n      errors: setIn(prevState.errors, field, message),\n    }));\n  };\n\n  resetForm = (nextValues?: Values) => {\n    const values = nextValues ? nextValues : this.props.initialValues;\n\n    this.initialValues = values;\n\n    this.setState({\n      isSubmitting: false,\n      isValidating: false,\n      errors: {},\n      touched: {},\n      error: undefined,\n      status: this.props.initialStatus,\n      values,\n      submitCount: 0,\n    });\n  };\n\n  handleReset = () => {\n    if (this.props.onReset) {\n      const maybePromisedOnReset = (this.props.onReset as any)(\n        this.state.values,\n        this.getFormikActions()\n      );\n\n      if (isPromise(maybePromisedOnReset)) {\n        (maybePromisedOnReset as Promise<any>).then(this.resetForm);\n      } else {\n        this.resetForm();\n      }\n    } else {\n      this.resetForm();\n    }\n  };\n\n  setFormikState = (s: any, callback?: (() => void)) =>\n    this.setState(s, callback);\n\n  validateForm = (values: Values) => {\n    this.setState({ isValidating: true });\n    return this.runValidations(values).then(errors => {\n      if (this.didMount) {\n        this.setState({ isValidating: false });\n      }\n      return errors;\n    });\n  };\n\n  getFormikActions = (): FormikActions<Values> => {\n    return {\n      resetForm: this.resetForm,\n      submitForm: this.submitForm,\n      validateForm: this.validateForm,\n      validateField: this.validateField,\n      setError: this.setError,\n      setErrors: this.setErrors,\n      setFieldError: this.setFieldError,\n      setFieldTouched: this.setFieldTouched,\n      setFieldValue: this.setFieldValue,\n      setStatus: this.setStatus,\n      setSubmitting: this.setSubmitting,\n      setTouched: this.setTouched,\n      setValues: this.setValues,\n      setFormikState: this.setFormikState,\n    };\n  };\n\n  getFormikComputedProps = () => {\n    const { isInitialValid } = this.props;\n    const dirty = !isEqual(this.initialValues, this.state.values);\n    return {\n      dirty,\n      isValid: dirty\n        ? this.state.errors && Object.keys(this.state.errors).length === 0\n        : isInitialValid !== false && isFunction(isInitialValid)\n          ? (isInitialValid as (props: this['props']) => boolean)(this.props)\n          : (isInitialValid as boolean),\n      initialValues: this.initialValues,\n    };\n  };\n\n  getFormikBag = () => {\n    return {\n      ...this.state,\n      ...this.getFormikActions(),\n      ...this.getFormikComputedProps(),\n      // Field needs to communicate with Formik during resets\n      registerField: this.registerField,\n      unregisterField: this.unregisterField,\n      handleBlur: this.handleBlur,\n      handleChange: this.handleChange,\n      handleReset: this.handleReset,\n      handleSubmit: this.handleSubmit,\n      validateOnChange: this.props.validateOnChange,\n      validateOnBlur: this.props.validateOnBlur,\n    };\n  };\n\n  getFormikContext = () => {\n    return {\n      ...this.getFormikBag(),\n      validationSchema: this.props.validationSchema,\n      validate: this.props.validate,\n      initialValues: this.initialValues,\n    };\n  };\n\n  render() {\n    const { component, render, children } = this.props;\n    const props = this.getFormikBag();\n    const ctx = this.getFormikContext();\n    return (\n      <FormikProvider value={ctx}>\n        {component\n          ? React.createElement(component as any, props)\n          : render\n            ? render(props)\n            : children // children come last, always called\n              ? isFunction(children)\n                ? (children as ((\n                    props: FormikProps<Values>\n                  ) => React.ReactNode))(props as FormikProps<Values>)\n                : !isEmptyChildren(children)\n                  ? React.Children.only(children)\n                  : null\n              : null}\n      </FormikProvider>\n    );\n  }\n}\n\nfunction warnAboutMissingIdentifier({\n  htmlContent,\n  documentationAnchorLink,\n  handlerName,\n}: {\n  htmlContent: string;\n  documentationAnchorLink: string;\n  handlerName: string;\n}) {\n  console.warn(\n    `Warning: Formik called \\`${handlerName}\\`, but you forgot to pass an \\`id\\` or \\`name\\` attribute to your input:\n\n    ${htmlContent}\n\n    Formik cannot determine which value to update. For more info see https://github.com/jaredpalmer/formik#${documentationAnchorLink}\n  `\n  );\n}\n\n/**\n * Transform Yup ValidationError to a more usable object\n */\nexport function yupToFormErrors<Values>(yupError: any): FormikErrors<Values> {\n  let errors: any = {} as FormikErrors<Values>;\n  if (yupError.inner.length === 0) {\n    return setIn(errors, yupError.path, yupError.message);\n  }\n  for (let err of yupError.inner) {\n    if (!errors[err.path]) {\n      errors = setIn(errors, err.path, err.message);\n    }\n  }\n  return errors;\n}\n\n/**\n * Validate a yup schema.\n */\nexport function validateYupSchema<T extends FormikValues>(\n  values: T,\n  schema: any,\n  sync: boolean = false,\n  context: any = {}\n): Promise<Partial<T>> {\n  let validateData: Partial<T> = {};\n  for (let k in values) {\n    if (values.hasOwnProperty(k)) {\n      const key = String(k);\n      validateData[key] = values[key] !== '' ? values[key] : undefined;\n    }\n  }\n  return schema[sync ? 'validateSync' : 'validate'](validateData, {\n    abortEarly: false,\n    context: context,\n  });\n}\n\n/**\n * deepmerge array merging algorithm\n * https://github.com/KyleAMathews/deepmerge#combine-array\n */\nfunction arrayMerge(target: any[], source: any[], options: any): any[] {\n  const destination = target.slice();\n\n  source.forEach(function(e: any, i: number) {\n    if (typeof destination[i] === 'undefined') {\n      const cloneRequested = options.clone !== false;\n      const shouldClone = cloneRequested && options.isMergeableObject(e);\n      destination[i] = shouldClone\n        ? deepmerge(Array.isArray(e) ? [] : {}, e, options)\n        : e;\n    } else if (options.isMergeableObject(e)) {\n      destination[i] = deepmerge(target[i], e, options);\n    } else if (target.indexOf(e) === -1) {\n      destination.push(e);\n    }\n  });\n  return destination;\n}\n","import * as React from 'react';\n\nimport { connect } from './connect';\nimport {\n  FormikProps,\n  GenericFieldHTMLAttributes,\n  FormikContext,\n  FormikHandlers,\n} from './types';\nimport warning from 'tiny-warning';\nimport { getIn, isEmptyChildren, isFunction } from './utils';\n\n/**\n * Note: These typings could be more restrictive, but then it would limit the\n * reusability of custom <Field/> components.\n *\n * @example\n * interface MyProps {\n *   ...\n * }\n *\n * export const MyInput: React.SFC<MyProps & FieldProps> = ({\n *   field,\n *   form,\n *   ...props\n * }) =>\n *   <div>\n *     <input {...field} {...props}/>\n *     {form.touched[field.name] && form.errors[field.name]}\n *   </div>\n */\nexport interface FieldProps<V = any> {\n  field: {\n    /** Classic React change handler, keyed by input name */\n    onChange: FormikHandlers['handleChange'];\n    /** Mark input as touched */\n    onBlur: FormikHandlers['handleBlur'];\n    /** Value of the input */\n    value: any;\n    /* name of the input */\n    name: string;\n  };\n  form: FormikProps<V>; // if ppl want to restrict this for a given form, let them.\n}\n\nexport interface FieldConfig {\n  /**\n   * Field component to render. Can either be a string like 'select' or a component.\n   */\n  component?:\n    | string\n    | React.ComponentType<FieldProps<any>>\n    | React.ComponentType<void>;\n\n  /**\n   * Render prop (works like React router's <Route render={props =>} />)\n   */\n  render?: ((props: FieldProps<any>) => React.ReactNode);\n\n  /**\n   * Children render function <Field name>{props => ...}</Field>)\n   */\n  children?: ((props: FieldProps<any>) => React.ReactNode) | React.ReactNode;\n\n  /**\n   * Validate a single field value independently\n   */\n  validate?: ((value: any) => string | Promise<void> | undefined);\n\n  /**\n   * Field name\n   */\n  name: string;\n\n  /** HTML input type */\n  type?: string;\n\n  /** Field value */\n  value?: any;\n\n  /** Inner ref */\n  innerRef?: (instance: any) => void;\n}\n\nexport type FieldAttributes<T> = GenericFieldHTMLAttributes & FieldConfig & T;\n\n/**\n * Custom Field component for quickly hooking into Formik\n * context and wiring up forms.\n */\nclass FieldInner<Values = {}, Props = {}> extends React.Component<\n  FieldAttributes<Props> & { formik: FormikContext<Values> },\n  {}\n> {\n  constructor(\n    props: FieldAttributes<Props> & { formik: FormikContext<Values> }\n  ) {\n    super(props);\n    const { render, children, component } = props;\n    warning(\n      !(component && render),\n      'You should not use <Field component> and <Field render> in the same <Field> component; <Field component> will be ignored'\n    );\n\n    warning(\n      !(component && children && isFunction(children)),\n      'You should not use <Field component> and <Field children> as a function in the same <Field> component; <Field component> will be ignored.'\n    );\n\n    warning(\n      !(render && children && !isEmptyChildren(children)),\n      'You should not use <Field render> and <Field children> in the same <Field> component; <Field children> will be ignored'\n    );\n  }\n\n  componentDidMount() {\n    // Register the Field with the parent Formik. Parent will cycle through\n    // registered Field's validate fns right prior to submit\n    this.props.formik.registerField(this.props.name, this);\n  }\n\n  componentDidUpdate(\n    prevProps: FieldAttributes<Props> & { formik: FormikContext<Values> }\n  ) {\n    if (this.props.name !== prevProps.name) {\n      this.props.formik.unregisterField(prevProps.name);\n      this.props.formik.registerField(this.props.name, this);\n    }\n\n    if (this.props.validate !== prevProps.validate) {\n      this.props.formik.registerField(this.props.name, this);\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.formik.unregisterField(this.props.name);\n  }\n\n  render() {\n    const {\n      validate,\n      name,\n      render,\n      children,\n      component = 'input',\n      formik,\n      ...props\n    } = (this.props as FieldAttributes<Props> & {\n      formik: FormikContext<Values>;\n    }) as any;\n    const {\n      validate: _validate,\n      validationSchema: _validationSchema,\n      ...restOfFormik\n    } = formik;\n    const field = {\n      value:\n        props.type === 'radio' || props.type === 'checkbox'\n          ? props.value // React uses checked={} for these inputs\n          : getIn(formik.values, name),\n      name,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n    };\n    const bag = { field, form: restOfFormik };\n\n    if (render) {\n      return (render as any)(bag);\n    }\n\n    if (isFunction(children)) {\n      return (children as (props: FieldProps<any>) => React.ReactNode)(bag);\n    }\n\n    if (typeof component === 'string') {\n      const { innerRef, ...rest } = props;\n      return React.createElement(component as any, {\n        ref: innerRef,\n        ...field,\n        ...rest,\n        children,\n      });\n    }\n\n    return React.createElement(component as any, {\n      ...bag,\n      ...props,\n      children,\n    });\n  }\n}\n\nexport const Field = connect<FieldAttributes<any>, any>(FieldInner);\n","import * as React from 'react';\nimport { connect } from './connect';\n\nexport type FormikFormProps = Pick<\n  React.FormHTMLAttributes<HTMLFormElement>,\n  Exclude<\n    keyof React.FormHTMLAttributes<HTMLFormElement>,\n    'onReset' | 'onSubmit'\n  >\n>;\n\nexport const Form = connect<FormikFormProps>(\n  ({ formik: { handleReset, handleSubmit }, ...props }) => (\n    <form onReset={handleReset} onSubmit={handleSubmit} {...props} />\n  )\n);\n\nForm.displayName = 'Form';\n","import hoistNonReactStatics from 'hoist-non-react-statics';\nimport * as React from 'react';\nimport { Formik } from './Formik';\nimport {\n  FormikActions,\n  FormikProps,\n  FormikSharedConfig,\n  FormikValues,\n} from './types';\nimport { isFunction } from './utils';\n\n/**\n * State, handlers, and helpers injected as props into the wrapped form component.\n * Used with withFormik()\n *\n * @deprecated  Use `OuterProps & FormikProps<Values>` instead.\n */\nexport type InjectedFormikProps<Props, Values> = Props & FormikProps<Values>;\n\n/**\n * Formik actions + { props }\n */\nexport type FormikBag<P, V> = { props: P } & FormikActions<V>;\n\n/**\n * withFormik() configuration options. Backwards compatible.\n */\nexport interface WithFormikConfig<\n  Props,\n  Values extends FormikValues = FormikValues,\n  DeprecatedPayload = Values\n> extends FormikSharedConfig<Props> {\n  /**\n   * Set the display name of the component. Useful for React DevTools.\n   */\n  displayName?: string;\n\n  /**\n   * Submission handler\n   */\n  handleSubmit: (values: Values, formikBag: FormikBag<Props, Values>) => void;\n\n  /**\n   * Map props to the form values\n   */\n  mapPropsToValues?: (props: Props) => Values;\n\n  /**\n   * Map props to the form values\n   */\n  mapPropsToStatus?: (props: Props) => any;\n\n  /**\n   * @deprecated in 0.9.0 (but needed to break TS types)\n   */\n  mapValuesToPayload?: (values: Values) => DeprecatedPayload;\n\n  /**\n   * A Yup Schema or a function that returns a Yup schema\n   */\n  validationSchema?: any | ((props: Props) => any);\n\n  /**\n   * Validation function. Must return an error object or promise that\n   * throws an error object where that object keys map to corresponding value.\n   */\n  validate?: (values: Values, props: Props) => void | object | Promise<any>;\n}\n\nexport type CompositeComponent<P> =\n  | React.ComponentClass<P>\n  | React.StatelessComponent<P>;\n\nexport interface ComponentDecorator<TOwnProps, TMergedProps> {\n  (component: CompositeComponent<TMergedProps>): React.ComponentType<TOwnProps>;\n}\n\nexport interface InferableComponentDecorator<TOwnProps> {\n  <T extends CompositeComponent<TOwnProps>>(component: T): T;\n}\n\n/**\n * A public higher-order component to access the imperative API\n */\nexport function withFormik<\n  OuterProps,\n  Values extends FormikValues,\n  Payload = Values\n>({\n  mapPropsToValues = (vanillaProps: OuterProps): Values => {\n    let val: Values = {} as Values;\n    for (let k in vanillaProps) {\n      if (\n        vanillaProps.hasOwnProperty(k) &&\n        typeof vanillaProps[k] !== 'function'\n      ) {\n        (val as any)[k] = vanillaProps[k];\n      }\n    }\n    return val as Values;\n  },\n  ...config\n}: WithFormikConfig<OuterProps, Values, Payload>): ComponentDecorator<\n  OuterProps,\n  OuterProps & FormikProps<Values>\n> {\n  return function createFormik(\n    Component: CompositeComponent<OuterProps & FormikProps<Values>>\n  ): React.ComponentClass<OuterProps> {\n    const componentDisplayName =\n      Component.displayName ||\n      Component.name ||\n      (Component.constructor && Component.constructor.name) ||\n      'Component';\n    /**\n     * We need to use closures here for to provide the wrapped component's props to\n     * the respective withFormik config methods.\n     */\n    class C extends React.Component<OuterProps, {}> {\n      static displayName = `WithFormik(${componentDisplayName})`;\n\n      validate = (values: Values): void | object | Promise<any> => {\n        return config.validate!(values, this.props);\n      };\n\n      validationSchema = () => {\n        return isFunction(config.validationSchema)\n          ? config.validationSchema!(this.props)\n          : config.validationSchema;\n      };\n\n      handleSubmit = (values: Values, actions: FormikActions<Values>) => {\n        return config.handleSubmit(values, {\n          ...actions,\n          props: this.props,\n        });\n      };\n\n      /**\n       * Just avoiding a render callback for perf here\n       */\n      renderFormComponent = (formikProps: FormikProps<Values>) => {\n        return <Component {...this.props} {...formikProps} />;\n      };\n\n      render() {\n        const { children, ...props } = this.props as any;\n        return (\n          <Formik\n            {...props}\n            {...config}\n            validate={config.validate && this.validate}\n            validationSchema={config.validationSchema && this.validationSchema}\n            initialValues={mapPropsToValues(this.props)}\n            initialStatus={\n              config.mapPropsToStatus && config.mapPropsToStatus(this.props)\n            }\n            onSubmit={this.handleSubmit as any}\n            render={this.renderFormComponent}\n          />\n        );\n      }\n    }\n\n    return hoistNonReactStatics(\n      C,\n      Component as React.ComponentClass<OuterProps & FormikProps<Values>> // cast type to ComponentClass (even if SFC)\n    ) as React.ComponentClass<OuterProps>;\n  };\n}\n","import * as React from 'react';\nimport cloneDeep from 'lodash/cloneDeep';\nimport { connect } from './connect';\nimport {\n  FormikContext,\n  FormikState,\n  SharedRenderProps,\n  FormikProps,\n} from './types';\nimport { getIn, isEmptyChildren, isFunction, setIn } from './utils';\n\nexport type FieldArrayRenderProps = ArrayHelpers & {\n  form: FormikProps<any>;\n  name: string;\n};\n\nexport type FieldArrayConfig = {\n  /** Really the path to the array field to be updated */\n  name: string;\n  /** Should field array validate the form AFTER array updates/changes? */\n  validateOnChange?: boolean;\n} & SharedRenderProps<FieldArrayRenderProps>;\nexport interface ArrayHelpers {\n  /** Imperatively add a value to the end of an array */\n  push: (obj: any) => void;\n  /** Curried fn to add a value to the end of an array */\n  handlePush: (obj: any) => () => void;\n  /** Imperatively swap two values in an array */\n  swap: (indexA: number, indexB: number) => void;\n  /** Curried fn to swap two values in an array */\n  handleSwap: (indexA: number, indexB: number) => () => void;\n  /** Imperatively move an element in an array to another index */\n  move: (from: number, to: number) => void;\n  /** Imperatively move an element in an array to another index */\n  handleMove: (from: number, to: number) => () => void;\n  /** Imperatively insert an element at a given index into the array */\n  insert: (index: number, value: any) => void;\n  /** Curried fn to insert an element at a given index into the array */\n  handleInsert: (index: number, value: any) => () => void;\n  /** Imperatively replace a value at an index of an array  */\n  replace: (index: number, value: any) => void;\n  /** Curried fn to replace an element at a given index into the array */\n  handleReplace: (index: number, value: any) => () => void;\n  /** Imperatively add an element to the beginning of an array and return its length */\n  unshift: (value: any) => number;\n  /** Curried fn to add an element to the beginning of an array */\n  handleUnshift: (value: any) => () => void;\n  /** Curried fn to remove an element at an index of an array */\n  handleRemove: (index: number) => () => void;\n  /** Curried fn to remove a value from the end of the array */\n  handlePop: () => () => void;\n  /** Imperatively remove and element at an index of an array */\n  remove<T>(index: number): T | undefined;\n  /** Imperatively remove and return value from the end of the array */\n  pop<T>(): T | undefined;\n}\n\n/**\n * Some array helpers!\n */\nexport const move = (array: any[], from: number, to: number) => {\n  const copy = [...(array || [])];\n  const value = copy[from];\n  copy.splice(from, 1);\n  copy.splice(to, 0, value);\n  return copy;\n};\n\nexport const swap = (array: any[], indexA: number, indexB: number) => {\n  const copy = [...(array || [])];\n  const a = copy[indexA];\n  copy[indexA] = copy[indexB];\n  copy[indexB] = a;\n  return copy;\n};\n\nexport const insert = (array: any[], index: number, value: any) => {\n  const copy = [...(array || [])];\n  copy.splice(index, 0, value);\n  return copy;\n};\n\nexport const replace = (array: any[], index: number, value: any) => {\n  const copy = [...(array || [])];\n  copy[index] = value;\n  return copy;\n};\nclass FieldArrayInner<Values = {}> extends React.Component<\n  FieldArrayConfig & { formik: FormikContext<Values> },\n  {}\n> {\n  static defaultProps = {\n    validateOnChange: true,\n  };\n\n  constructor(props: FieldArrayConfig & { formik: FormikContext<Values> }) {\n    super(props);\n    // We need TypeScript generics on these, so we'll bind them in the constructor\n    this.remove = this.remove.bind(this) as any;\n    this.pop = this.pop.bind(this) as any;\n  }\n\n  updateArrayField = (\n    fn: Function,\n    alterTouched: boolean | Function,\n    alterErrors: boolean | Function\n  ) => {\n    const {\n      name,\n      validateOnChange,\n      formik: { setFormikState, validateForm },\n    } = this.props;\n    setFormikState(\n      (prevState: FormikState<any>) => {\n        let updateErrors = typeof alterErrors === 'function' ? alterErrors : fn;\n        let updateTouched =\n          typeof alterTouched === 'function' ? alterTouched : fn;\n\n        return {\n          ...prevState,\n          values: setIn(\n            prevState.values,\n            name,\n            fn(getIn(prevState.values, name))\n          ),\n          errors: alterErrors\n            ? setIn(\n                prevState.errors,\n                name,\n                updateErrors(getIn(prevState.errors, name))\n              )\n            : prevState.errors,\n          touched: alterTouched\n            ? setIn(\n                prevState.touched,\n                name,\n                updateTouched(getIn(prevState.touched, name))\n              )\n            : prevState.touched,\n        };\n      },\n      () => {\n        if (validateOnChange) {\n          validateForm();\n        }\n      }\n    );\n  };\n\n  push = (value: any) =>\n    this.updateArrayField(\n      (array: any[]) => [...(array || []), cloneDeep(value)],\n      false,\n      false\n    );\n\n  handlePush = (value: any) => () => this.push(value);\n\n  swap = (indexA: number, indexB: number) =>\n    this.updateArrayField(\n      (array: any[]) => swap(array, indexA, indexB),\n      true,\n      true\n    );\n\n  handleSwap = (indexA: number, indexB: number) => () =>\n    this.swap(indexA, indexB);\n\n  move = (from: number, to: number) =>\n    this.updateArrayField((array: any[]) => move(array, from, to), true, true);\n\n  handleMove = (from: number, to: number) => () => this.move(from, to);\n\n  insert = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => insert(array, index, value),\n      (array: any[]) => insert(array, index, null),\n      (array: any[]) => insert(array, index, null)\n    );\n\n  handleInsert = (index: number, value: any) => () => this.insert(index, value);\n\n  replace = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => replace(array, index, value),\n      false,\n      false\n    );\n\n  handleReplace = (index: number, value: any) => () =>\n    this.replace(index, value);\n\n  unshift = (value: any) => {\n    let length = -1;\n    this.updateArrayField(\n      (array: any[]) => {\n        const arr = array ? [value, ...array] : [value];\n        if (length < 0) {\n          length = arr.length;\n        }\n        return arr;\n      },\n      (array: any[]) => {\n        const arr = array ? [null, ...array] : [null];\n        if (length < 0) length = arr.length;\n        return arr;\n      },\n      (array: any[]) => {\n        const arr = array ? [null, ...array] : [null];\n        if (length < 0) length = arr.length;\n        return arr;\n      }\n    );\n    return length;\n  };\n\n  handleUnshift = (value: any) => () => this.unshift(value);\n\n  remove<T>(index: number): T {\n    // We need to make sure we also remove relevant pieces of `touched` and `errors`\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array?: any[]) => {\n        const copy = array ? [...array] : [];\n        if (!result) {\n          result = copy[index];\n        }\n        if (isFunction(copy.splice)) {\n          copy.splice(index, 1);\n        }\n        return copy;\n      },\n      true,\n      true\n    );\n\n    return result;\n  }\n\n  handleRemove = (index: number) => () => this.remove<any>(index);\n\n  pop<T>(): T {\n    // Remove relevant pieces of `touched` and `errors` too!\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array: any[]) => {\n        const tmp = array;\n        if (!result) {\n          result = tmp && tmp.pop && tmp.pop();\n        }\n        return tmp;\n      },\n      true,\n      true\n    );\n\n    return result;\n  }\n\n  handlePop = () => () => this.pop<any>();\n\n  render() {\n    const arrayHelpers: ArrayHelpers = {\n      push: this.push,\n      pop: this.pop,\n      swap: this.swap,\n      move: this.move,\n      insert: this.insert,\n      replace: this.replace,\n      unshift: this.unshift,\n      remove: this.remove,\n      handlePush: this.handlePush,\n      handlePop: this.handlePop,\n      handleSwap: this.handleSwap,\n      handleMove: this.handleMove,\n      handleInsert: this.handleInsert,\n      handleReplace: this.handleReplace,\n      handleUnshift: this.handleUnshift,\n      handleRemove: this.handleRemove,\n    };\n\n    const {\n      component,\n      render,\n      children,\n      name,\n      formik: {\n        validate: _validate,\n        validationSchema: _validationSchema,\n        ...restOfFormik\n      },\n    } = this.props;\n\n    const props: FieldArrayRenderProps = {\n      ...arrayHelpers,\n      form: restOfFormik,\n      name,\n    };\n\n    return component\n      ? React.createElement(component as any, props)\n      : render\n        ? (render as any)(props)\n        : children // children come last, always called\n          ? typeof children === 'function'\n            ? (children as any)(props)\n            : !isEmptyChildren(children) ? React.Children.only(children) : null\n          : null;\n  }\n}\n\nexport const FieldArray = connect<FieldArrayConfig, any>(FieldArrayInner);\n","import * as React from 'react';\n\nimport { connect } from './connect';\nimport {\n  FormikProps,\n  GenericFieldHTMLAttributes,\n  FormikContext,\n} from './types';\nimport warning from 'tiny-warning';\nimport { getIn, isEmptyChildren, isFunction } from './utils';\n\nexport interface FastFieldProps<V = any> {\n  field: {\n    /** Classic React change handler, keyed by input name */\n    onChange: (e: React.ChangeEvent<any>) => void;\n    /** Mark input as touched */\n    onBlur: (e: any) => void;\n    /** Value of the input */\n    value: any;\n    /* name of the input */\n    name: string;\n  };\n  form: FormikProps<V>; // if ppl want to restrict this for a given form, let them.\n}\n\nexport interface FastFieldConfig<T> {\n  /**\n   * Field component to render. Can either be a string like 'select' or a component.\n   */\n  component?:\n    | string\n    | React.ComponentType<FastFieldProps<any>>\n    | React.ComponentType<void>;\n\n  /**\n   * Render prop (works like React router's <Route render={props =>} />)\n   */\n  render?: ((props: FastFieldProps<any>) => React.ReactNode);\n\n  /**\n   * Children render function <Field name>{props => ...}</Field>)\n   */\n  children?:\n    | ((props: FastFieldProps<any>) => React.ReactNode)\n    | React.ReactNode;\n\n  /**\n   * Validate a single field value independently\n   */\n  validate?: ((value: any) => string | Promise<void> | undefined);\n\n  /** Override FastField's default shouldComponentUpdate */\n  shouldUpdate?: (\n    nextProps: T & GenericFieldHTMLAttributes & { formik: FormikContext<any> },\n    props: {}\n  ) => boolean;\n\n  /**\n   * Field name\n   */\n  name: string;\n\n  /** HTML class */\n  className?: string;\n\n  /** HTML input type */\n  type?: string;\n\n  /** Field value */\n  value?: any;\n\n  /** Inner ref */\n  innerRef?: (instance: any) => void;\n}\n\nexport type FastFieldAttributes<T> = GenericFieldHTMLAttributes &\n  FastFieldConfig<T> &\n  T;\n\n/**\n * Custom Field component for quickly hooking into Formik\n * context and wiring up forms.\n */\nclass FastFieldInner<Values = {}, Props = {}> extends React.Component<\n  FastFieldAttributes<Props> & { formik: FormikContext<Values> },\n  {}\n> {\n  constructor(\n    props: FastFieldAttributes<Props> & { formik: FormikContext<Values> }\n  ) {\n    super(props);\n    const { render, children, component } = props;\n    warning(\n      !(component && render),\n      'You should not use <FastField component> and <FastField render> in the same <FastField> component; <FastField component> will be ignored'\n    );\n\n    warning(\n      !(component && children && isFunction(children)),\n      'You should not use <FastField component> and <FastField children> as a function in the same <FastField> component; <FastField component> will be ignored.'\n    );\n\n    warning(\n      !(render && children && !isEmptyChildren(children)),\n      'You should not use <FastField render> and <FastField children> in the same <FastField> component; <FastField children> will be ignored'\n    );\n  }\n\n  shouldComponentUpdate(\n    props: FastFieldAttributes<Props> & { formik: FormikContext<Values> }\n  ) {\n    if (this.props.shouldUpdate) {\n      return this.props.shouldUpdate(props, this.props);\n    } else if (\n      getIn(this.props.formik.values, this.props.name) !==\n        getIn(props.formik.values, this.props.name) ||\n      getIn(this.props.formik.errors, this.props.name) !==\n        getIn(props.formik.errors, this.props.name) ||\n      getIn(this.props.formik.touched, this.props.name) !==\n        getIn(props.formik.touched, this.props.name) ||\n      Object.keys(this.props).length !== Object.keys(props).length ||\n      this.props.formik.isSubmitting !== props.formik.isSubmitting\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  componentDidMount() {\n    // Register the Field with the parent Formik. Parent will cycle through\n    // registered Field's validate fns right prior to submit\n    this.props.formik.registerField(this.props.name, this);\n  }\n\n  componentDidUpdate(\n    prevProps: FastFieldAttributes<Props> & { formik: FormikContext<Values> }\n  ) {\n    if (this.props.name !== prevProps.name) {\n      this.props.formik.unregisterField(prevProps.name);\n      this.props.formik.registerField(this.props.name, this);\n    }\n\n    if (this.props.validate !== prevProps.validate) {\n      this.props.formik.registerField(this.props.name, this);\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.formik.unregisterField(this.props.name);\n  }\n\n  render() {\n    const {\n      validate,\n      name,\n      render,\n      children,\n      component = 'input',\n      formik,\n      shouldUpdate,\n      ...props\n    } = (this.props as FastFieldAttributes<Props> & {\n      formik: FormikContext<Values>;\n    }) as any;\n    const {\n      validate: _validate,\n      validationSchema: _validationSchema,\n      ...restOfFormik\n    } = formik;\n    const field = {\n      value:\n        props.type === 'radio' || props.type === 'checkbox'\n          ? props.value // React uses checked={} for these inputs\n          : getIn(formik.values, name),\n      name,\n      onChange: formik.handleChange,\n      onBlur: formik.handleBlur,\n    };\n    const bag = { field, form: restOfFormik };\n\n    if (render) {\n      return (render as any)(bag);\n    }\n\n    if (isFunction(children)) {\n      return (children as (props: FastFieldProps<any>) => React.ReactNode)(bag);\n    }\n\n    if (typeof component === 'string') {\n      const { innerRef, ...rest } = props;\n      return React.createElement(component as any, {\n        ref: innerRef,\n        ...field,\n        ...rest,\n        children,\n      });\n    }\n\n    return React.createElement(component as any, {\n      ...bag,\n      ...props,\n      children,\n    });\n  }\n}\n\nexport const FastField = connect<FastFieldAttributes<any>, any>(FastFieldInner);\n","import * as React from 'react';\nimport { FormikContext } from './types';\nimport { getIn, isFunction } from './utils';\nimport { connect } from './connect';\n\nexport interface ErrorMessageProps {\n  name: string;\n  className?: string;\n  component?: string | React.ComponentType;\n  children?: ((errorMessage: string) => React.ReactNode);\n  render?: ((errorMessage: string) => React.ReactNode);\n}\n\nclass ErrorMessageImpl extends React.Component<\n  ErrorMessageProps & { formik: FormikContext<any> }\n> {\n  shouldComponentUpdate(\n    props: ErrorMessageProps & { formik: FormikContext<any> }\n  ) {\n    if (\n      getIn(this.props.formik.errors, this.props.name) !==\n        getIn(props.formik.errors, this.props.name) ||\n      getIn(this.props.formik.touched, this.props.name) !==\n        getIn(props.formik.touched, this.props.name) ||\n      Object.keys(this.props).length !== Object.keys(props).length\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  render() {\n    let { component, formik, render, children, name, ...rest } = this.props;\n\n    const touch = getIn(formik.touched, name);\n    const error = getIn(formik.errors, name);\n\n    return !!touch && !!error\n      ? render\n        ? isFunction(render) ? render(error) : null\n        : children\n          ? isFunction(children) ? children(error) : null\n          : component\n            ? React.createElement(component, rest as any, error)\n            : error\n      : null;\n  }\n}\n\nexport const ErrorMessage = connect<\n  ErrorMessageProps,\n  ErrorMessageProps & { formik: FormikContext<any> }\n>(ErrorMessageImpl);\n"]}