{"version":3,"sources":["FillRateHelper.js"],"names":["performanceNow","require","warning","Info","any_blank_count","any_blank_ms","any_blank_speed_sum","mostly_blank_count","mostly_blank_ms","pixels_blank","pixels_sampled","pixels_scrolled","total_time_spent","sample_count","DEBUG","_listeners","_minSampleCount","_sampleRate","FillRateHelper","callback","push","remove","filter","listener","sampleRate","minSampleCount","getFrameMetrics","_anyBlankStartTime","_enabled","_info","_mostlyBlankStartTime","_samplesStartTime","_getFrameMetrics","Math","random","_resetData","console","debug","start","info","derived","avg_blankness","avg_speed","avg_speed_when_any_blank","any_blank_per_min","any_blank_time_frac","mostly_blank_per_min","mostly_blank_time_frac","key","round","forEach","props","state","scrollMetrics","getItemCount","data","dOffset","offset","velocity","visibleLength","abs","scrollSpeed","now","blankTop","first","firstFrame","last","inLayout","min","max","blankBottom","lastFrame","bottomEdge","length","blankness","deactivateAndFlush","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst performanceNow = require('fbjs/lib/performanceNow');\nconst warning = require('fbjs/lib/warning');\n\nexport type FillRateInfo = Info;\n\nclass Info {\n  any_blank_count = 0;\n  any_blank_ms = 0;\n  any_blank_speed_sum = 0;\n  mostly_blank_count = 0;\n  mostly_blank_ms = 0;\n  pixels_blank = 0;\n  pixels_sampled = 0;\n  pixels_scrolled = 0;\n  total_time_spent = 0;\n  sample_count = 0;\n}\n\ntype FrameMetrics = {inLayout?: boolean, length: number, offset: number};\n\nconst DEBUG = false;\n\nlet _listeners: Array<(Info) => void> = [];\nlet _minSampleCount = 10;\nlet _sampleRate = DEBUG ? 1 : null;\n\n/**\n * A helper class for detecting when the maximem fill rate of `VirtualizedList` is exceeded.\n * By default the sampling rate is set to zero and this will do nothing. If you want to collect\n * samples (e.g. to log them), make sure to call `FillRateHelper.setSampleRate(0.0-1.0)`.\n *\n * Listeners and sample rate are global for all `VirtualizedList`s - typical usage will combine with\n * `SceneTracker.getActiveScene` to determine the context of the events.\n */\nclass FillRateHelper {\n  _anyBlankStartTime = (null: ?number);\n  _enabled = false;\n  _getFrameMetrics: (index: number) => ?FrameMetrics;\n  _info = new Info();\n  _mostlyBlankStartTime = (null: ?number);\n  _samplesStartTime = (null: ?number);\n\n  static addListener(callback: FillRateInfo => void): {remove: () => void} {\n    warning(\n      _sampleRate !== null,\n      'Call `FillRateHelper.setSampleRate` before `addListener`.',\n    );\n    _listeners.push(callback);\n    return {\n      remove: () => {\n        _listeners = _listeners.filter(listener => callback !== listener);\n      },\n    };\n  }\n\n  static setSampleRate(sampleRate: number) {\n    _sampleRate = sampleRate;\n  }\n\n  static setMinSampleCount(minSampleCount: number) {\n    _minSampleCount = minSampleCount;\n  }\n\n  constructor(getFrameMetrics: (index: number) => ?FrameMetrics) {\n    this._getFrameMetrics = getFrameMetrics;\n    this._enabled = (_sampleRate || 0) > Math.random();\n    this._resetData();\n  }\n\n  activate() {\n    if (this._enabled && this._samplesStartTime == null) {\n      DEBUG && console.debug('FillRateHelper: activate');\n      this._samplesStartTime = performanceNow();\n    }\n  }\n\n  deactivateAndFlush() {\n    if (!this._enabled) {\n      return;\n    }\n    const start = this._samplesStartTime; // const for flow\n    if (start == null) {\n      DEBUG &&\n        console.debug('FillRateHelper: bail on deactivate with no start time');\n      return;\n    }\n    if (this._info.sample_count < _minSampleCount) {\n      // Don't bother with under-sampled events.\n      this._resetData();\n      return;\n    }\n    const total_time_spent = performanceNow() - start;\n    const info: any = {\n      ...this._info,\n      total_time_spent,\n    };\n    if (DEBUG) {\n      const derived = {\n        avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,\n        avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),\n        avg_speed_when_any_blank:\n          this._info.any_blank_speed_sum / this._info.any_blank_count,\n        any_blank_per_min:\n          this._info.any_blank_count / (total_time_spent / 1000 / 60),\n        any_blank_time_frac: this._info.any_blank_ms / total_time_spent,\n        mostly_blank_per_min:\n          this._info.mostly_blank_count / (total_time_spent / 1000 / 60),\n        mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent,\n      };\n      for (const key in derived) {\n        derived[key] = Math.round(1000 * derived[key]) / 1000;\n      }\n      console.debug('FillRateHelper deactivateAndFlush: ', {derived, info});\n    }\n    _listeners.forEach(listener => listener(info));\n    this._resetData();\n  }\n\n  computeBlankness(\n    props: {\n      data: Array<any>,\n      getItemCount: (data: Array<any>) => number,\n      initialNumToRender: number,\n    },\n    state: {\n      first: number,\n      last: number,\n    },\n    scrollMetrics: {\n      dOffset: number,\n      offset: number,\n      velocity: number,\n      visibleLength: number,\n    },\n  ): number {\n    if (\n      !this._enabled ||\n      props.getItemCount(props.data) === 0 ||\n      this._samplesStartTime == null\n    ) {\n      return 0;\n    }\n    const {dOffset, offset, velocity, visibleLength} = scrollMetrics;\n\n    // Denominator metrics that we track for all events - most of the time there is no blankness and\n    // we want to capture that.\n    this._info.sample_count++;\n    this._info.pixels_sampled += Math.round(visibleLength);\n    this._info.pixels_scrolled += Math.round(Math.abs(dOffset));\n    const scrollSpeed = Math.round(Math.abs(velocity) * 1000); // px / sec\n\n    // Whether blank now or not, record the elapsed time blank if we were blank last time.\n    const now = performanceNow();\n    if (this._anyBlankStartTime != null) {\n      this._info.any_blank_ms += now - this._anyBlankStartTime;\n    }\n    this._anyBlankStartTime = null;\n    if (this._mostlyBlankStartTime != null) {\n      this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;\n    }\n    this._mostlyBlankStartTime = null;\n\n    let blankTop = 0;\n    let first = state.first;\n    let firstFrame = this._getFrameMetrics(first);\n    while (first <= state.last && (!firstFrame || !firstFrame.inLayout)) {\n      firstFrame = this._getFrameMetrics(first);\n      first++;\n    }\n    // Only count blankTop if we aren't rendering the first item, otherwise we will count the header\n    // as blank.\n    if (firstFrame && first > 0) {\n      blankTop = Math.min(\n        visibleLength,\n        Math.max(0, firstFrame.offset - offset),\n      );\n    }\n    let blankBottom = 0;\n    let last = state.last;\n    let lastFrame = this._getFrameMetrics(last);\n    while (last >= state.first && (!lastFrame || !lastFrame.inLayout)) {\n      lastFrame = this._getFrameMetrics(last);\n      last--;\n    }\n    // Only count blankBottom if we aren't rendering the last item, otherwise we will count the\n    // footer as blank.\n    if (lastFrame && last < props.getItemCount(props.data) - 1) {\n      const bottomEdge = lastFrame.offset + lastFrame.length;\n      blankBottom = Math.min(\n        visibleLength,\n        Math.max(0, offset + visibleLength - bottomEdge),\n      );\n    }\n    const pixels_blank = Math.round(blankTop + blankBottom);\n    const blankness = pixels_blank / visibleLength;\n    if (blankness > 0) {\n      this._anyBlankStartTime = now;\n      this._info.any_blank_speed_sum += scrollSpeed;\n      this._info.any_blank_count++;\n      this._info.pixels_blank += pixels_blank;\n      if (blankness > 0.5) {\n        this._mostlyBlankStartTime = now;\n        this._info.mostly_blank_count++;\n      }\n    } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {\n      this.deactivateAndFlush();\n    }\n    return blankness;\n  }\n\n  enabled(): boolean {\n    return this._enabled;\n  }\n\n  _resetData() {\n    this._anyBlankStartTime = null;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n  }\n}\n\nmodule.exports = FillRateHelper;\n"]}