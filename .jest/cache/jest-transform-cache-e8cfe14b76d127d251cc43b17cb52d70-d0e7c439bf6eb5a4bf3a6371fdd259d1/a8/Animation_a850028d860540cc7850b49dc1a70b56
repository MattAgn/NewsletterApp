89d41325ce6d91f7721fa5af7d3c64fd
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var NativeAnimatedHelper = require('../NativeAnimatedHelper');

var Animation = function () {
  function Animation() {
    (0, _classCallCheck2.default)(this, Animation);
  }

  (0, _createClass2.default)(Animation, [{
    key: "start",
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}
  }, {
    key: "stop",
    value: function stop() {
      if (this.__nativeId) {
        NativeAnimatedHelper.API.stopAnimation(this.__nativeId);
      }
    }
  }, {
    key: "__getNativeAnimationConfig",
    value: function __getNativeAnimationConfig() {
      throw new Error('This animation type cannot be offloaded to native');
    }
  }, {
    key: "__debouncedOnEnd",
    value: function __debouncedOnEnd(result) {
      var onEnd = this.__onEnd;
      this.__onEnd = null;
      onEnd && onEnd(result);
    }
  }, {
    key: "__startNativeAnimation",
    value: function __startNativeAnimation(animatedValue) {
      animatedValue.__makeNative();

      this.__nativeId = NativeAnimatedHelper.generateNewAnimationId();
      NativeAnimatedHelper.API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), this.__getNativeAnimationConfig(), this.__debouncedOnEnd.bind(this));
    }
  }]);
  return Animation;
}();

module.exports = Animation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFuaW1hdGlvbi5qcyJdLCJuYW1lcyI6WyJOYXRpdmVBbmltYXRlZEhlbHBlciIsInJlcXVpcmUiLCJBbmltYXRpb24iLCJmcm9tVmFsdWUiLCJvblVwZGF0ZSIsIm9uRW5kIiwicHJldmlvdXNBbmltYXRpb24iLCJhbmltYXRlZFZhbHVlIiwiX19uYXRpdmVJZCIsIkFQSSIsInN0b3BBbmltYXRpb24iLCJFcnJvciIsInJlc3VsdCIsIl9fb25FbmQiLCJfX21ha2VOYXRpdmUiLCJnZW5lcmF0ZU5ld0FuaW1hdGlvbklkIiwic3RhcnRBbmltYXRpbmdOb2RlIiwiX19nZXROYXRpdmVUYWciLCJfX2dldE5hdGl2ZUFuaW1hdGlvbkNvbmZpZyIsIl9fZGVib3VuY2VkT25FbmQiLCJiaW5kIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBU0E7Ozs7Ozs7O0FBRUEsSUFBTUEsb0JBQW9CLEdBQUdDLE9BQU8sQ0FBQyx5QkFBRCxDQUFwQzs7SUFpQk1DLFM7Ozs7Ozs7MEJBT0ZDLFMsRUFDQUMsUSxFQUNBQyxLLEVBQ0FDLGlCLEVBQ0FDLGEsRUFDTSxDQUFFOzs7MkJBQ0c7QUFDWCxVQUFJLEtBQUtDLFVBQVQsRUFBcUI7QUFDbkJSLFFBQUFBLG9CQUFvQixDQUFDUyxHQUFyQixDQUF5QkMsYUFBekIsQ0FBdUMsS0FBS0YsVUFBNUM7QUFDRDtBQUNGOzs7aURBQ2lDO0FBR2hDLFlBQU0sSUFBSUcsS0FBSixDQUFVLG1EQUFWLENBQU47QUFDRDs7O3FDQUVnQkMsTSxFQUF5QjtBQUN4QyxVQUFNUCxLQUFLLEdBQUcsS0FBS1EsT0FBbkI7QUFDQSxXQUFLQSxPQUFMLEdBQWUsSUFBZjtBQUNBUixNQUFBQSxLQUFLLElBQUlBLEtBQUssQ0FBQ08sTUFBRCxDQUFkO0FBQ0Q7OzsyQ0FDc0JMLGEsRUFBb0M7QUFDekRBLE1BQUFBLGFBQWEsQ0FBQ08sWUFBZDs7QUFDQSxXQUFLTixVQUFMLEdBQWtCUixvQkFBb0IsQ0FBQ2Usc0JBQXJCLEVBQWxCO0FBQ0FmLE1BQUFBLG9CQUFvQixDQUFDUyxHQUFyQixDQUF5Qk8sa0JBQXpCLENBQ0UsS0FBS1IsVUFEUCxFQUVFRCxhQUFhLENBQUNVLGNBQWQsRUFGRixFQUdFLEtBQUtDLDBCQUFMLEVBSEYsRUFJRSxLQUFLQyxnQkFBTCxDQUFzQkMsSUFBdEIsQ0FBMkIsSUFBM0IsQ0FKRjtBQU1EOzs7OztBQUdIQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJwQixTQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBOYXRpdmVBbmltYXRlZEhlbHBlciA9IHJlcXVpcmUoJy4uL05hdGl2ZUFuaW1hdGVkSGVscGVyJyk7XG5cbmltcG9ydCB0eXBlIEFuaW1hdGVkVmFsdWUgZnJvbSAnLi4vbm9kZXMvQW5pbWF0ZWRWYWx1ZSc7XG5cbmV4cG9ydCB0eXBlIEVuZFJlc3VsdCA9IHtmaW5pc2hlZDogYm9vbGVhbn07XG5leHBvcnQgdHlwZSBFbmRDYWxsYmFjayA9IChyZXN1bHQ6IEVuZFJlc3VsdCkgPT4gdm9pZDtcblxuZXhwb3J0IHR5cGUgQW5pbWF0aW9uQ29uZmlnID0ge1xuICBpc0ludGVyYWN0aW9uPzogYm9vbGVhbixcbiAgdXNlTmF0aXZlRHJpdmVyPzogYm9vbGVhbixcbiAgb25Db21wbGV0ZT86ID9FbmRDYWxsYmFjayxcbiAgaXRlcmF0aW9ucz86IG51bWJlcixcbn07XG5cbi8vIEltcG9ydGFudCBub3RlOiBzdGFydCgpIGFuZCBzdG9wKCkgd2lsbCBvbmx5IGJlIGNhbGxlZCBhdCBtb3N0IG9uY2UuXG4vLyBPbmNlIGFuIGFuaW1hdGlvbiBoYXMgYmVlbiBzdG9wcGVkIG9yIGZpbmlzaGVkIGl0cyBjb3Vyc2UsIGl0IHdpbGxcbi8vIG5vdCBiZSByZXVzZWQuXG5jbGFzcyBBbmltYXRpb24ge1xuICBfX2FjdGl2ZTogYm9vbGVhbjtcbiAgX19pc0ludGVyYWN0aW9uOiBib29sZWFuO1xuICBfX25hdGl2ZUlkOiBudW1iZXI7XG4gIF9fb25FbmQ6ID9FbmRDYWxsYmFjaztcbiAgX19pdGVyYXRpb25zOiBudW1iZXI7XG4gIHN0YXJ0KFxuICAgIGZyb21WYWx1ZTogbnVtYmVyLFxuICAgIG9uVXBkYXRlOiAodmFsdWU6IG51bWJlcikgPT4gdm9pZCxcbiAgICBvbkVuZDogP0VuZENhbGxiYWNrLFxuICAgIHByZXZpb3VzQW5pbWF0aW9uOiA/QW5pbWF0aW9uLFxuICAgIGFuaW1hdGVkVmFsdWU6IEFuaW1hdGVkVmFsdWUsXG4gICk6IHZvaWQge31cbiAgc3RvcCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fX25hdGl2ZUlkKSB7XG4gICAgICBOYXRpdmVBbmltYXRlZEhlbHBlci5BUEkuc3RvcEFuaW1hdGlvbih0aGlzLl9fbmF0aXZlSWQpO1xuICAgIH1cbiAgfVxuICBfX2dldE5hdGl2ZUFuaW1hdGlvbkNvbmZpZygpOiBhbnkge1xuICAgIC8vIFN1YmNsYXNzZXMgdGhhdCBoYXZlIGNvcnJlc3BvbmRpbmcgYW5pbWF0aW9uIGltcGxlbWVudGF0aW9uIGRvbmUgaW4gbmF0aXZlXG4gICAgLy8gc2hvdWxkIG92ZXJyaWRlIHRoaXMgbWV0aG9kXG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIGFuaW1hdGlvbiB0eXBlIGNhbm5vdCBiZSBvZmZsb2FkZWQgdG8gbmF0aXZlJyk7XG4gIH1cbiAgLy8gSGVscGVyIGZ1bmN0aW9uIGZvciBzdWJjbGFzc2VzIHRvIG1ha2Ugc3VyZSBvbkVuZCBpcyBvbmx5IGNhbGxlZCBvbmNlLlxuICBfX2RlYm91bmNlZE9uRW5kKHJlc3VsdDogRW5kUmVzdWx0KTogdm9pZCB7XG4gICAgY29uc3Qgb25FbmQgPSB0aGlzLl9fb25FbmQ7XG4gICAgdGhpcy5fX29uRW5kID0gbnVsbDtcbiAgICBvbkVuZCAmJiBvbkVuZChyZXN1bHQpO1xuICB9XG4gIF9fc3RhcnROYXRpdmVBbmltYXRpb24oYW5pbWF0ZWRWYWx1ZTogQW5pbWF0ZWRWYWx1ZSk6IHZvaWQge1xuICAgIGFuaW1hdGVkVmFsdWUuX19tYWtlTmF0aXZlKCk7XG4gICAgdGhpcy5fX25hdGl2ZUlkID0gTmF0aXZlQW5pbWF0ZWRIZWxwZXIuZ2VuZXJhdGVOZXdBbmltYXRpb25JZCgpO1xuICAgIE5hdGl2ZUFuaW1hdGVkSGVscGVyLkFQSS5zdGFydEFuaW1hdGluZ05vZGUoXG4gICAgICB0aGlzLl9fbmF0aXZlSWQsXG4gICAgICBhbmltYXRlZFZhbHVlLl9fZ2V0TmF0aXZlVGFnKCksXG4gICAgICB0aGlzLl9fZ2V0TmF0aXZlQW5pbWF0aW9uQ29uZmlnKCksXG4gICAgICB0aGlzLl9fZGVib3VuY2VkT25FbmQuYmluZCh0aGlzKSxcbiAgICApO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQW5pbWF0aW9uO1xuIl19