5967af965e11e6eb5d0642d4b4add569
"use strict";

var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Subject_1 = require("./Subject");

var queue_1 = require("./scheduler/queue");

var Subscription_1 = require("./Subscription");

var observeOn_1 = require("./operators/observeOn");

var ObjectUnsubscribedError_1 = require("./util/ObjectUnsubscribedError");

var SubjectSubscription_1 = require("./SubjectSubscription");

var ReplaySubject = function (_super) {
  __extends(ReplaySubject, _super);

  function ReplaySubject(bufferSize, windowTime, scheduler) {
    if (bufferSize === void 0) {
      bufferSize = Number.POSITIVE_INFINITY;
    }

    if (windowTime === void 0) {
      windowTime = Number.POSITIVE_INFINITY;
    }

    var _this = _super.call(this) || this;

    _this.scheduler = scheduler;
    _this._events = [];
    _this._infiniteTimeWindow = false;
    _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
    _this._windowTime = windowTime < 1 ? 1 : windowTime;

    if (windowTime === Number.POSITIVE_INFINITY) {
      _this._infiniteTimeWindow = true;
      _this.next = _this.nextInfiniteTimeWindow;
    } else {
      _this.next = _this.nextTimeWindow;
    }

    return _this;
  }

  ReplaySubject.prototype.nextInfiniteTimeWindow = function (value) {
    var _events = this._events;

    _events.push(value);

    if (_events.length > this._bufferSize) {
      _events.shift();
    }

    _super.prototype.next.call(this, value);
  };

  ReplaySubject.prototype.nextTimeWindow = function (value) {
    this._events.push(new ReplayEvent(this._getNow(), value));

    this._trimBufferThenGetEvents();

    _super.prototype.next.call(this, value);
  };

  ReplaySubject.prototype._subscribe = function (subscriber) {
    var _infiniteTimeWindow = this._infiniteTimeWindow;

    var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();

    var scheduler = this.scheduler;
    var len = _events.length;
    var subscription;

    if (this.closed) {
      throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
    } else if (this.isStopped || this.hasError) {
      subscription = Subscription_1.Subscription.EMPTY;
    } else {
      this.observers.push(subscriber);
      subscription = new SubjectSubscription_1.SubjectSubscription(this, subscriber);
    }

    if (scheduler) {
      subscriber.add(subscriber = new observeOn_1.ObserveOnSubscriber(subscriber, scheduler));
    }

    if (_infiniteTimeWindow) {
      for (var i = 0; i < len && !subscriber.closed; i++) {
        subscriber.next(_events[i]);
      }
    } else {
      for (var i = 0; i < len && !subscriber.closed; i++) {
        subscriber.next(_events[i].value);
      }
    }

    if (this.hasError) {
      subscriber.error(this.thrownError);
    } else if (this.isStopped) {
      subscriber.complete();
    }

    return subscription;
  };

  ReplaySubject.prototype._getNow = function () {
    return (this.scheduler || queue_1.queue).now();
  };

  ReplaySubject.prototype._trimBufferThenGetEvents = function () {
    var now = this._getNow();

    var _bufferSize = this._bufferSize;
    var _windowTime = this._windowTime;
    var _events = this._events;
    var eventsCount = _events.length;
    var spliceCount = 0;

    while (spliceCount < eventsCount) {
      if (now - _events[spliceCount].time < _windowTime) {
        break;
      }

      spliceCount++;
    }

    if (eventsCount > _bufferSize) {
      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
    }

    if (spliceCount > 0) {
      _events.splice(0, spliceCount);
    }

    return _events;
  };

  return ReplaySubject;
}(Subject_1.Subject);

exports.ReplaySubject = ReplaySubject;

var ReplayEvent = function () {
  function ReplayEvent(time, value) {
    this.time = time;
    this.value = value;
  }

  return ReplayEvent;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbnRlcm5hbC9SZXBsYXlTdWJqZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQSxTQUFBLEdBQUEsT0FBQSxDQUFBLFdBQUEsQ0FBQTs7QUFFQSxJQUFBLE9BQUEsR0FBQSxPQUFBLENBQUEsbUJBQUEsQ0FBQTs7QUFFQSxJQUFBLGNBQUEsR0FBQSxPQUFBLENBQUEsZ0JBQUEsQ0FBQTs7QUFDQSxJQUFBLFdBQUEsR0FBQSxPQUFBLENBQUEsdUJBQUEsQ0FBQTs7QUFDQSxJQUFBLHlCQUFBLEdBQUEsT0FBQSxDQUFBLGdDQUFBLENBQUE7O0FBQ0EsSUFBQSxxQkFBQSxHQUFBLE9BQUEsQ0FBQSx1QkFBQSxDQUFBOztBQVFBLElBQUEsYUFBQSxHQUFBLFVBQUEsTUFBQSxFQUFBO0FBQXNDLEVBQUEsU0FBQSxDQUFBLGFBQUEsRUFBQSxNQUFBLENBQUE7O0FBTXBDLFdBQUEsYUFBQSxDQUFZLFVBQVosRUFDWSxVQURaLEVBRW9CLFNBRnBCLEVBRTZDO0FBRmpDLFFBQUEsVUFBQSxLQUFBLEtBQUEsQ0FBQSxFQUFBO0FBQUEsTUFBQSxVQUFBLEdBQXFCLE1BQU0sQ0FBQyxpQkFBNUI7QUFBNkM7O0FBQzdDLFFBQUEsVUFBQSxLQUFBLEtBQUEsQ0FBQSxFQUFBO0FBQUEsTUFBQSxVQUFBLEdBQXFCLE1BQU0sQ0FBQyxpQkFBNUI7QUFBNkM7O0FBRHpELFFBQUEsS0FBQSxHQUdFLE1BQUEsQ0FBQSxJQUFBLENBQUEsSUFBQSxLQUFPLElBSFQ7O0FBRW9CLElBQUEsS0FBQSxDQUFBLFNBQUEsR0FBQSxTQUFBO0FBUFosSUFBQSxLQUFBLENBQUEsT0FBQSxHQUFrQyxFQUFsQztBQUdBLElBQUEsS0FBQSxDQUFBLG1CQUFBLEdBQStCLEtBQS9CO0FBTU4sSUFBQSxLQUFJLENBQUMsV0FBTCxHQUFtQixVQUFVLEdBQUcsQ0FBYixHQUFpQixDQUFqQixHQUFxQixVQUF4QztB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