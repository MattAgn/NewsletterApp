e11632e56918e8a1b216621897f7b5a5
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var DeprecatedImageStylePropTypes = require('../DeprecatedPropTypes/DeprecatedImageStylePropTypes');

var TextStylePropTypes = require('../Text/TextStylePropTypes');

var DeprecatedViewStylePropTypes = require('../DeprecatedPropTypes/DeprecatedViewStylePropTypes');

var invariant = require('invariant');

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

var StyleSheetValidation = function () {
  function StyleSheetValidation() {
    (0, _classCallCheck2.default)(this, StyleSheetValidation);
  }

  (0, _createClass2.default)(StyleSheetValidation, null, [{
    key: "validateStyleProp",
    value: function validateStyleProp(prop, style, caller) {
      if (!__DEV__ || global.__RCTProfileIsProfiling) {
        return;
      }

      if (allStylePropTypes[prop] === undefined) {
        var message1 = '"' + prop + '" is not a valid style property.';
        var message2 = '\nValid style props: ' + JSON.stringify(Object.keys(allStylePropTypes).sort(), null, '  ');
        styleError(message1, style, caller, message2);
      }

      var error = allStylePropTypes[prop](style, prop, caller, 'prop', null, ReactPropTypesSecret);

      if (error) {
        styleError(error.message, style, caller);
      }
    }
  }, {
    key: "validateStyle",
    value: function validateStyle(name, styles) {
      if (!__DEV__ || global.__RCTProfileIsProfiling) {
        return;
      }

      for (var prop in styles[name]) {
        StyleSheetValidation.validateStyleProp(prop, styles[name], 'StyleSheet ' + name);
      }
    }
  }, {
    key: "addValidStylePropTypes",
    value: function addValidStylePropTypes(stylePropTypes) {
      if (!__DEV__ || global.__RCTProfileIsProfiling) {
        return;
      }

      for (var key in stylePropTypes) {
        allStylePropTypes[key] = stylePropTypes[key];
      }
    }
  }]);
  return StyleSheetValidation;
}();

var styleError = function styleError(message1, style, caller, message2) {
  invariant(false, message1 + '\n' + (caller || '<<unknown>>') + ': ' + JSON.stringify(style, null, '  ') + (message2 || ''));
};

var allStylePropTypes = {};

if (__DEV__ && !global.__RCTProfileIsProfiling) {
  StyleSheetValidation.addValidStylePropTypes(DeprecatedImageStylePropTypes);
  StyleSheetValidation.addValidStylePropTypes(TextStylePropTypes);
  StyleSheetValidation.addValidStylePropTypes(DeprecatedViewStylePropTypes);
}

module.exports = StyleSheetValidation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlN0eWxlU2hlZXRWYWxpZGF0aW9uLmpzIl0sIm5hbWVzIjpbIkRlcHJlY2F0ZWRJbWFnZVN0eWxlUHJvcFR5cGVzIiwicmVxdWlyZSIsIlRleHRTdHlsZVByb3BUeXBlcyIsIkRlcHJlY2F0ZWRWaWV3U3R5bGVQcm9wVHlwZXMiLCJpbnZhcmlhbnQiLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsIlN0eWxlU2hlZXRWYWxpZGF0aW9uIiwicHJvcCIsInN0eWxlIiwiY2FsbGVyIiwiX19ERVZfXyIsImdsb2JhbCIsIl9fUkNUUHJvZmlsZUlzUHJvZmlsaW5nIiwiYWxsU3R5bGVQcm9wVHlwZXMiLCJ1bmRlZmluZWQiLCJtZXNzYWdlMSIsIm1lc3NhZ2UyIiwiSlNPTiIsInN0cmluZ2lmeSIsIk9iamVjdCIsImtleXMiLCJzb3J0Iiwic3R5bGVFcnJvciIsImVycm9yIiwibWVzc2FnZSIsIm5hbWUiLCJzdHlsZXMiLCJ2YWxpZGF0ZVN0eWxlUHJvcCIsInN0eWxlUHJvcFR5cGVzIiwia2V5IiwiYWRkVmFsaWRTdHlsZVByb3BUeXBlcyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVVBOzs7Ozs7OztBQUVBLElBQU1BLDZCQUE2QixHQUFHQyxPQUFPLENBQUMsc0RBQUQsQ0FBN0M7O0FBQ0EsSUFBTUMsa0JBQWtCLEdBQUdELE9BQU8sQ0FBQyw0QkFBRCxDQUFsQzs7QUFDQSxJQUFNRSw0QkFBNEIsR0FBR0YsT0FBTyxDQUFDLHFEQUFELENBQTVDOztBQUVBLElBQU1HLFNBQVMsR0FBR0gsT0FBTyxDQUFDLFdBQUQsQ0FBekI7O0FBTUEsSUFBTUksb0JBQW9CLEdBQUcsOENBQTdCOztJQUVNQyxvQjs7Ozs7OztzQ0FDcUJDLEksRUFBY0MsSyxFQUFlQyxNLEVBQWdCO0FBQ3BFLFVBQUksQ0FBQ0MsT0FBRCxJQUFZQyxNQUFNLENBQUNDLHVCQUF2QixFQUFnRDtBQUM5QztBQUNEOztBQUNELFVBQUlDLGlCQUFpQixDQUFDTixJQUFELENBQWpCLEtBQTRCTyxTQUFoQyxFQUEyQztBQUN6QyxZQUFNQyxRQUFRLEdBQUcsTUFBTVIsSUFBTixHQUFhLGtDQUE5QjtBQUNBLFlBQU1TLFFBQVEsR0FDWiwwQkFDQUMsSUFBSSxDQUFDQyxTQUFMLENBQWVDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZUCxpQkFBWixFQUErQlEsSUFBL0IsRUFBZixFQUFzRCxJQUF0RCxFQUE0RCxJQUE1RCxDQUZGO0FBR0FDLFFBQUFBLFVBQVUsQ0FBQ1AsUUFBRCxFQUFXUCxLQUFYLEVBQWtCQyxNQUFsQixFQUEwQk8sUUFBMUIsQ0FBVjtBQUNEOztBQUNELFVBQU1PLEtBQUssR0FBR1YsaUJBQWlCLENBQUNOLElBQUQsQ0FBakIsQ0FDWkMsS0FEWSxFQUVaRCxJQUZZLEVBR1pFLE1BSFksRUFJWixNQUpZLEVBS1osSUFMWSxFQU1aSixvQkFOWSxDQUFkOztBQVFBLFVBQUlrQixLQUFKLEVBQVc7QUFDVEQsUUFBQUEsVUFBVSxDQUFDQyxLQUFLLENBQUNDLE9BQVAsRUFBZ0JoQixLQUFoQixFQUF1QkMsTUFBdkIsQ0FBVjtBQUNEO0FBQ0Y7OztrQ0FFb0JnQixJLEVBQWNDLE0sRUFBZ0I7QUFDakQsVUFBSSxDQUFDaEIsT0FBRCxJQUFZQyxNQUFNLENBQUNDLHVCQUF2QixFQUFnRDtBQUM5QztBQUNEOztBQUNELFdBQUssSUFBTUwsSUFBWCxJQUFtQm1CLE1BQU0sQ0FBQ0QsSUFBRCxDQUF6QixFQUFpQztBQUMvQm5CLFFBQUFBLG9CQUFvQixDQUFDcUIsaUJBQXJCLENBQ0VwQixJQURGLEVBRUVtQixNQUFNLENBQUNELElBQUQsQ0FGUixFQUdFLGdCQUFnQkEsSUFIbEI7QUFLRDtBQUNGOzs7MkNBSzZCRyxjLEVBQWdCO0FBQzVDLFVBQUksQ0FBQ2xCLE9BQUQsSUFBWUMsTUFBTSxDQUFDQyx1QkFBdkIsRUFBZ0Q7QUFDOUM7QUFDRDs7QUFDRCxXQUFLLElBQU1pQixHQUFYLElBQWtCRCxjQUFsQixFQUFrQztBQUNoQ2YsUUFBQUEsaUJBQWlCLENBQUNnQixHQUFELENBQWpCLEdBQXlCRCxjQUFjLENBQUNDLEdBQUQsQ0FBdkM7QUFDRDtBQUNGOzs7OztBQUdILElBQU1QLFVBQVUsR0FBRyxTQUFiQSxVQUFhLENBQVNQLFFBQVQsRUFBbUJQLEtBQW5CLEVBQTBCQyxNQUExQixFQUFtQ08sUUFBbkMsRUFBOEM7QUFDL0RaLEVBQUFBLFNBQVMsQ0FDUCxLQURPLEVBRVBXLFFBQVEsR0FDTixJQURGLElBRUdOLE1BQU0sSUFBSSxhQUZiLElBR0UsSUFIRixHQUlFUSxJQUFJLENBQUNDLFNBQUwsQ0FBZVYsS0FBZixFQUFzQixJQUF0QixFQUE0QixJQUE1QixDQUpGLElBS0dRLFFBQVEsSUFBSSxFQUxmLENBRk8sQ0FBVDtBQVNELENBVkQ7O0FBWUEsSUFBTUgsaUJBQWlCLEdBQUcsRUFBMUI7O0FBRUEsSUFBSUgsT0FBTyxJQUFJLENBQUNDLE1BQU0sQ0FBQ0MsdUJBQXZCLEVBQWdEO0FBQzlDTixFQUFBQSxvQkFBb0IsQ0FBQ3dCLHNCQUFyQixDQUE0QzlCLDZCQUE1QztBQUNBTSxFQUFBQSxvQkFBb0IsQ0FBQ3dCLHNCQUFyQixDQUE0QzVCLGtCQUE1QztBQUNBSSxFQUFBQSxvQkFBb0IsQ0FBQ3dCLHNCQUFyQixDQUE0QzNCLDRCQUE1QztBQUNEOztBQUVENEIsTUFBTSxDQUFDQyxPQUFQLEdBQWlCMUIsb0JBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvd1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgRGVwcmVjYXRlZEltYWdlU3R5bGVQcm9wVHlwZXMgPSByZXF1aXJlKCcuLi9EZXByZWNhdGVkUHJvcFR5cGVzL0RlcHJlY2F0ZWRJbWFnZVN0eWxlUHJvcFR5cGVzJyk7XG5jb25zdCBUZXh0U3R5bGVQcm9wVHlwZXMgPSByZXF1aXJlKCcuLi9UZXh0L1RleHRTdHlsZVByb3BUeXBlcycpO1xuY29uc3QgRGVwcmVjYXRlZFZpZXdTdHlsZVByb3BUeXBlcyA9IHJlcXVpcmUoJy4uL0RlcHJlY2F0ZWRQcm9wVHlwZXMvRGVwcmVjYXRlZFZpZXdTdHlsZVByb3BUeXBlcycpO1xuXG5jb25zdCBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxuLy8gSGFyZGNvZGVkIGJlY2F1c2UgdGhpcyBpcyBhIGxlZ2l0IGNhc2UgYnV0IHdlIGRvbid0IHdhbnQgdG8gbG9hZCBpdCBmcm9tXG4vLyBhIHByaXZhdGUgQVBJLiBXZSBtaWdodCBsaWtlbHkgd2FudCB0byB1bmlmeSBzdHlsZSBzaGVldCBjcmVhdGlvbiB3aXRoIGhvdyBpdFxuLy8gaXMgZG9uZSBpbiB0aGUgRE9NIHNvIHRoaXMgbWlnaHQgbW92ZSBpbnRvIFJlYWN0LiBJIGtub3cgd2hhdCBJJ20gZG9pbmcgc29cbi8vIHBseiBkb24ndCBmaXJlIG1lLlxuY29uc3QgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5jbGFzcyBTdHlsZVNoZWV0VmFsaWRhdGlvbiB7XG4gIHN0YXRpYyB2YWxpZGF0ZVN0eWxlUHJvcChwcm9wOiBzdHJpbmcsIHN0eWxlOiBPYmplY3QsIGNhbGxlcjogc3RyaW5nKSB7XG4gICAgaWYgKCFfX0RFVl9fIHx8IGdsb2JhbC5fX1JDVFByb2ZpbGVJc1Byb2ZpbGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoYWxsU3R5bGVQcm9wVHlwZXNbcHJvcF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3QgbWVzc2FnZTEgPSAnXCInICsgcHJvcCArICdcIiBpcyBub3QgYSB2YWxpZCBzdHlsZSBwcm9wZXJ0eS4nO1xuICAgICAgY29uc3QgbWVzc2FnZTIgPVxuICAgICAgICAnXFxuVmFsaWQgc3R5bGUgcHJvcHM6ICcgK1xuICAgICAgICBKU09OLnN0cmluZ2lmeShPYmplY3Qua2V5cyhhbGxTdHlsZVByb3BUeXBlcykuc29ydCgpLCBudWxsLCAnICAnKTtcbiAgICAgIHN0eWxlRXJyb3IobWVzc2FnZTEsIHN0eWxlLCBjYWxsZXIsIG1lc3NhZ2UyKTtcbiAgICB9XG4gICAgY29uc3QgZXJyb3IgPSBhbGxTdHlsZVByb3BUeXBlc1twcm9wXShcbiAgICAgIHN0eWxlLFxuICAgICAgcHJvcCxcbiAgICAgIGNhbGxlcixcbiAgICAgICdwcm9wJyxcbiAgICAgIG51bGwsXG4gICAgICBSZWFjdFByb3BUeXBlc1NlY3JldCxcbiAgICApO1xuICAgIGlmIChlcnJvcikge1xuICAgICAgc3R5bGVFcnJvcihlcnJvci5tZXNzYWdlLCBzdHlsZSwgY2FsbGVyKTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgdmFsaWRhdGVTdHlsZShuYW1lOiBzdHJpbmcsIHN0eWxlczogT2JqZWN0KSB7XG4gICAgaWYgKCFfX0RFVl9fIHx8IGdsb2JhbC5fX1JDVFByb2ZpbGVJc1Byb2ZpbGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IHByb3AgaW4gc3R5bGVzW25hbWVdKSB7XG4gICAgICBTdHlsZVNoZWV0VmFsaWRhdGlvbi52YWxpZGF0ZVN0eWxlUHJvcChcbiAgICAgICAgcHJvcCxcbiAgICAgICAgc3R5bGVzW25hbWVdLFxuICAgICAgICAnU3R5bGVTaGVldCAnICsgbmFtZSxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyogJEZsb3dGaXhNZSg+PTAuODUuMCBzaXRlPXJlYWN0X25hdGl2ZV9mYikgVGhpcyBjb21tZW50IHN1cHByZXNzZXMgYW4gZXJyb3JcbiAgICogZm91bmQgd2hlbiBGbG93IHYwLjg1IHdhcyBkZXBsb3llZC4gVG8gc2VlIHRoZSBlcnJvciwgZGVsZXRlIHRoaXMgY29tbWVudFxuICAgKiBhbmQgcnVuIEZsb3cuICovXG4gIHN0YXRpYyBhZGRWYWxpZFN0eWxlUHJvcFR5cGVzKHN0eWxlUHJvcFR5cGVzKSB7XG4gICAgaWYgKCFfX0RFVl9fIHx8IGdsb2JhbC5fX1JDVFByb2ZpbGVJc1Byb2ZpbGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzdHlsZVByb3BUeXBlcykge1xuICAgICAgYWxsU3R5bGVQcm9wVHlwZXNba2V5XSA9IHN0eWxlUHJvcFR5cGVzW2tleV07XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IHN0eWxlRXJyb3IgPSBmdW5jdGlvbihtZXNzYWdlMSwgc3R5bGUsIGNhbGxlcj8sIG1lc3NhZ2UyPykge1xuICBpbnZhcmlhbnQoXG4gICAgZmFsc2UsXG4gICAgbWVzc2FnZTEgK1xuICAgICAgJ1xcbicgK1xuICAgICAgKGNhbGxlciB8fCAnPDx1bmtub3duPj4nKSArXG4gICAgICAnOiAnICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHN0eWxlLCBudWxsLCAnICAnKSArXG4gICAgICAobWVzc2FnZTIgfHwgJycpLFxuICApO1xufTtcblxuY29uc3QgYWxsU3R5bGVQcm9wVHlwZXMgPSB7fTtcblxuaWYgKF9fREVWX18gJiYgIWdsb2JhbC5fX1JDVFByb2ZpbGVJc1Byb2ZpbGluZykge1xuICBTdHlsZVNoZWV0VmFsaWRhdGlvbi5hZGRWYWxpZFN0eWxlUHJvcFR5cGVzKERlcHJlY2F0ZWRJbWFnZVN0eWxlUHJvcFR5cGVzKTtcbiAgU3R5bGVTaGVldFZhbGlkYXRpb24uYWRkVmFsaWRTdHlsZVByb3BUeXBlcyhUZXh0U3R5bGVQcm9wVHlwZXMpO1xuICBTdHlsZVNoZWV0VmFsaWRhdGlvbi5hZGRWYWxpZFN0eWxlUHJvcFR5cGVzKERlcHJlY2F0ZWRWaWV3U3R5bGVQcm9wVHlwZXMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFN0eWxlU2hlZXRWYWxpZGF0aW9uO1xuIl19