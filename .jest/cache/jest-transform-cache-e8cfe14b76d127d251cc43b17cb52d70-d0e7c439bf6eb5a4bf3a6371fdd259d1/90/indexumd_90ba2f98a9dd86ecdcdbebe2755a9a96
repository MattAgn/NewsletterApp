d89cf69e29323f0e21af368bc5c7a4a0
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('rxjs/operators'), require('tslib')) : typeof define === 'function' && define.amd ? define(['exports', 'react', 'rxjs/operators', 'tslib'], factory) : factory(global.RexTils = {}, global.react, global.operators, global.tslib_1);
})(this, function (exports, react, operators, tslib_1) {
  'use strict';

  var pickWithRest = function pickWithRest(props, pickProps) {
    if (props === void 0) {
      props = {};
    }

    if (pickProps === void 0) {
      pickProps = [];
    }

    var rest = tslib_1.__rest(props, pickProps);

    var picked = pickProps.reduce(function (acc, nextPropName) {
      var _a;

      return tslib_1.__assign({}, acc, (_a = {}, _a[nextPropName] = props[nextPropName], _a));
    }, {});
    return tslib_1.__assign({}, picked, {
      rest: rest
    });
  };

  var createPropsGetter = function createPropsGetter(_defaultProps) {
    return function (props) {
      return props;
    };
  };

  var DefaultProps = function DefaultProps(props) {
    return Object.freeze(props);
  };

  var isEmptyChildren = function isEmptyChildren(children) {
    return react.Children.count(children) === 0;
  };

  var ChildrenAsFunction = function ChildrenAsFunction(children) {
    if (typeof children !== 'function') {
      throw new Error('React: ChildrenAsFunctionOnly expected to receive a single function as a child.');
    }

    return children;
  };

  var Pre = function Pre(props) {
    return react.createElement('pre', {}, JSON.stringify(props.children, null, 2));
  };

  function createAction(type, payload) {
    var action = payload === undefined ? {
      type: type
    } : {
      type: type,
      payload: payload
    };
    return action;
  }

  function ofType() {
    var keys = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      keys[_i] = arguments[_i];
    }

    return function (source) {
      return source.pipe(operators.filter(function (action) {
        return keys.indexOf(action.type) !== -1;
      }));
    };
  }

  var isBlank = function isBlank(value) {
    return value == null;
  };

  var isPresent = function isPresent(value) {
    return value != null;
  };

  var isFunction = function isFunction(value) {
    return typeof value === 'function';
  };

  var isBoolean = function isBoolean(value) {
    return typeof value === 'boolean';
  };

  var isString = function isString(value) {
    return typeof value === 'string';
  };

  var isNumber = function isNumber(value) {
    return typeof value === 'number';
  };

  var isArray = function isArray(value) {
    return Array.isArray(value);
  };

  var isObject = function isObject(value) {
    return value != null && !Array.isArray(value) && typeof value === 'object';
  };

  var isDate = function isDate(value) {
    return value instanceof Date && !isNaN(+value);
  };

  var isPromise = function isPromise(value) {
    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
  };

  var isEmpty = function isEmpty(value) {
    if (isString(value) || isArray(value)) {
      return value.length === 0;
    }

    if (isObject(value)) {
      return Object.keys(value).length === 0;
    }

    throw new Error("checked value must be type of string | array | object. You provided " + (value === null ? 'null' : typeof value));
  };

  var noop = function noop() {};

  var identity = function identity(arg) {
    return arg;
  };

  var tuple = function tuple() {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    return args;
  };

  var Enum = function Enum() {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    return Object.freeze(args.reduce(function (acc, next) {
      var _a;

      return tslib_1.__assign({}, acc, (_a = {}, _a[next] = next, _a));
    }, Object.create(null)));
  };

  exports.pickWithRest = pickWithRest;
  exports.createPropsGetter = createPropsGetter;
  exports.DefaultProps = DefaultProps;
  exports.isEmptyChildren = isEmptyChildren;
  exports.ChildrenAsFunction = ChildrenAsFunction;
  exports.Pre = Pre;
  exports.createAction = createAction;
  exports.ofType = ofType;
  exports.isBlank = isBlank;
  exports.isPresent = isPresent;
  exports.isFunction = isFunction;
  exports.isBoolean = isBoolean;
  exports.isString = isString;
  exports.isNumber = isNumber;
  exports.isArray = isArray;
  exports.isObject = isObject;
  exports.isDate = isDate;
  exports.isPromise = isPromise;
  exports.isEmpty = isEmpty;
  exports.noop = noop;
  exports.identity = identity;
  exports.tuple = tuple;
  exports.Enum = Enum;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,