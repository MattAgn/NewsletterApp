b7f85e356fdc8d099f3eb3e1e8991acc
var _inGuard = 0;

var _globalHandler = function onError(e) {
  throw e;
};

var ErrorUtils = {
  setGlobalHandler: function setGlobalHandler(fun) {
    _globalHandler = fun;
  },
  getGlobalHandler: function getGlobalHandler() {
    return _globalHandler;
  },
  reportError: function reportError(error) {
    _globalHandler && _globalHandler(error);
  },
  reportFatalError: function reportFatalError(error) {
    _globalHandler && _globalHandler(error, true);
  },
  applyWithGuard: function applyWithGuard(fun, context, args) {
    try {
      _inGuard++;
      return fun.apply(context, args);
    } catch (e) {
      ErrorUtils.reportError(e);
    } finally {
      _inGuard--;
    }

    return null;
  },
  applyWithGuardIfNeeded: function applyWithGuardIfNeeded(fun, context, args) {
    if (ErrorUtils.inGuard()) {
      return fun.apply(context, args);
    } else {
      ErrorUtils.applyWithGuard(fun, context, args);
    }

    return null;
  },
  inGuard: function inGuard() {
    return _inGuard;
  },
  guard: function guard(fun, name, context) {
    if (typeof fun !== 'function') {
      console.warn('A function must be passed to ErrorUtils.guard, got ', fun);
      return null;
    }

    name = name || fun.name || '<generated guard>';

    function guarded() {
      return ErrorUtils.applyWithGuard(fun, context || this, arguments, null, name);
    }

    return guarded;
  }
};
global.ErrorUtils = ErrorUtils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVycm9yLWd1YXJkLmpzIl0sIm5hbWVzIjpbIl9pbkd1YXJkIiwiX2dsb2JhbEhhbmRsZXIiLCJvbkVycm9yIiwiZSIsIkVycm9yVXRpbHMiLCJzZXRHbG9iYWxIYW5kbGVyIiwiZnVuIiwiZ2V0R2xvYmFsSGFuZGxlciIsInJlcG9ydEVycm9yIiwiZXJyb3IiLCJyZXBvcnRGYXRhbEVycm9yIiwiYXBwbHlXaXRoR3VhcmQiLCJjb250ZXh0IiwiYXJncyIsImFwcGx5IiwiYXBwbHlXaXRoR3VhcmRJZk5lZWRlZCIsImluR3VhcmQiLCJndWFyZCIsIm5hbWUiLCJjb25zb2xlIiwid2FybiIsImd1YXJkZWQiLCJhcmd1bWVudHMiLCJnbG9iYWwiXSwibWFwcGluZ3MiOiJBQVdBLElBQUlBLFFBQVEsR0FBRyxDQUFmOztBQU9BLElBQUlDLGNBQWMsR0FBRyxTQUFTQyxPQUFULENBQWlCQyxDQUFqQixFQUFvQjtBQUN2QyxRQUFNQSxDQUFOO0FBQ0QsQ0FGRDs7QUFZQSxJQUFNQyxVQUFVLEdBQUc7QUFDakJDLEVBQUFBLGdCQURpQiw0QkFDQUMsR0FEQSxFQUNLO0FBQ3BCTCxJQUFBQSxjQUFjLEdBQUdLLEdBQWpCO0FBQ0QsR0FIZ0I7QUFJakJDLEVBQUFBLGdCQUppQiw4QkFJRTtBQUNqQixXQUFPTixjQUFQO0FBQ0QsR0FOZ0I7QUFPakJPLEVBQUFBLFdBUGlCLHVCQU9MQyxLQVBLLEVBT0U7QUFDakJSLElBQUFBLGNBQWMsSUFBSUEsY0FBYyxDQUFDUSxLQUFELENBQWhDO0FBQ0QsR0FUZ0I7QUFVakJDLEVBQUFBLGdCQVZpQiw0QkFVQUQsS0FWQSxFQVVPO0FBQ3RCUixJQUFBQSxjQUFjLElBQUlBLGNBQWMsQ0FBQ1EsS0FBRCxFQUFRLElBQVIsQ0FBaEM7QUFDRCxHQVpnQjtBQWFqQkUsRUFBQUEsY0FiaUIsMEJBYUZMLEdBYkUsRUFhR00sT0FiSCxFQWFZQyxJQWJaLEVBYWtCO0FBQ2pDLFFBQUk7QUFDRmIsTUFBQUEsUUFBUTtBQUNSLGFBQU9NLEdBQUcsQ0FBQ1EsS0FBSixDQUFVRixPQUFWLEVBQW1CQyxJQUFuQixDQUFQO0FBQ0QsS0FIRCxDQUdFLE9BQU9WLENBQVAsRUFBVTtBQUNWQyxNQUFBQSxVQUFVLENBQUNJLFdBQVgsQ0FBdUJMLENBQXZCO0FBQ0QsS0FMRCxTQUtVO0FBQ1JILE1BQUFBLFFBQVE7QUFDVDs7QUFDRCxXQUFPLElBQVA7QUFDRCxHQXZCZ0I7QUF3QmpCZSxFQUFBQSxzQkF4QmlCLGtDQXdCTVQsR0F4Qk4sRUF3QldNLE9BeEJYLEVBd0JvQkMsSUF4QnBCLEVBd0IwQjtBQUN6QyxRQUFJVCxVQUFVLENBQUNZLE9BQVgsRUFBSixFQUEwQjtBQUN4QixhQUFPVixHQUFHLENBQUNRLEtBQUosQ0FBVUYsT0FBVixFQUFtQkMsSUFBbkIsQ0FBUDtBQUNELEtBRkQsTUFFTztBQUNMVCxNQUFBQSxVQUFVLENBQUNPLGNBQVgsQ0FBMEJMLEdBQTFCLEVBQStCTSxPQUEvQixFQUF3Q0MsSUFBeEM7QUFDRDs7QUFDRCxXQUFPLElBQVA7QUFDRCxHQS9CZ0I7QUFnQ2pCRyxFQUFBQSxPQWhDaUIscUJBZ0NQO0FBQ1IsV0FBT2hCLFFBQVA7QUFDRCxHQWxDZ0I7QUFtQ2pCaUIsRUFBQUEsS0FuQ2lCLGlCQW1DWFgsR0FuQ1csRUFtQ05ZLElBbkNNLEVBbUNBTixPQW5DQSxFQW1DUztBQUN4QixRQUFJLE9BQU9OLEdBQVAsS0FBZSxVQUFuQixFQUErQjtBQUM3QmEsTUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWEscURBQWIsRUFBb0VkLEdBQXBFO0FBQ0EsYUFBTyxJQUFQO0FBQ0Q7O0FBQ0RZLElBQUFBLElBQUksR0FBR0EsSUFBSSxJQUFJWixHQUFHLENBQUNZLElBQVosSUFBb0IsbUJBQTNCOztBQUNBLGFBQVNHLE9BQVQsR0FBbUI7QUFDakIsYUFBT2pCLFVBQVUsQ0FBQ08sY0FBWCxDQUNMTCxHQURLLEVBRUxNLE9BQU8sSUFBSSxJQUZOLEVBR0xVLFNBSEssRUFJTCxJQUpLLEVBS0xKLElBTEssQ0FBUDtBQU9EOztBQUVELFdBQU9HLE9BQVA7QUFDRDtBQXBEZ0IsQ0FBbkI7QUF1REFFLE1BQU0sQ0FBQ25CLFVBQVAsR0FBb0JBLFVBQXBCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAcG9seWZpbGxcbiAqIEBub2xpbnRcbiAqL1xuXG5sZXQgX2luR3VhcmQgPSAwO1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIGVycm9yIGhhbmRsZXIgdGhhdCBpcyBjYWxsZWQgd2hlbiB3ZSBlbmNvdW50ZXIgYW4gZXhjZXB0aW9uXG4gKiB3aGVuIGxvYWRpbmcgYSBtb2R1bGUuIFRoaXMgd2lsbCByZXBvcnQgYW55IGVycm9ycyBlbmNvdW50ZXJlZCBiZWZvcmVcbiAqIEV4Y2VwdGlvbnNNYW5hZ2VyIGlzIGNvbmZpZ3VyZWQuXG4gKi9cbmxldCBfZ2xvYmFsSGFuZGxlciA9IGZ1bmN0aW9uIG9uRXJyb3IoZSkge1xuICB0aHJvdyBlO1xufTtcblxuLyoqXG4gKiBUaGUgcGFydGljdWxhciByZXF1aXJlIHJ1bnRpbWUgdGhhdCB3ZSBhcmUgdXNpbmcgbG9va3MgZm9yIGEgZ2xvYmFsXG4gKiBgRXJyb3JVdGlsc2Agb2JqZWN0IGFuZCBpZiBpdCBleGlzdHMsIHRoZW4gaXQgcmVxdWlyZXMgbW9kdWxlcyB3aXRoIHRoZVxuICogZXJyb3IgaGFuZGxlciBzcGVjaWZpZWQgdmlhIEVycm9yVXRpbHMuc2V0R2xvYmFsSGFuZGxlciBieSBjYWxsaW5nIHRoZVxuICogcmVxdWlyZSBmdW5jdGlvbiB3aXRoIGFwcGx5V2l0aEd1YXJkLiBTaW5jZSB0aGUgcmVxdWlyZSBtb2R1bGUgaXMgbG9hZGVkXG4gKiBiZWZvcmUgYW55IG9mIHRoZSBtb2R1bGVzLCB0aGlzIEVycm9yVXRpbHMgbXVzdCBiZSBkZWZpbmVkIChhbmQgdGhlIGhhbmRsZXJcbiAqIHNldCkgZ2xvYmFsbHkgYmVmb3JlIHJlcXVpcmluZyBhbnl0aGluZy5cbiAqL1xuY29uc3QgRXJyb3JVdGlscyA9IHtcbiAgc2V0R2xvYmFsSGFuZGxlcihmdW4pIHtcbiAgICBfZ2xvYmFsSGFuZGxlciA9IGZ1bjtcbiAgfSxcbiAgZ2V0R2xvYmFsSGFuZGxlcigpIHtcbiAgICByZXR1cm4gX2dsb2JhbEhhbmRsZXI7XG4gIH0sXG4gIHJlcG9ydEVycm9yKGVycm9yKSB7XG4gICAgX2dsb2JhbEhhbmRsZXIgJiYgX2dsb2JhbEhhbmRsZXIoZXJyb3IpO1xuICB9LFxuICByZXBvcnRGYXRhbEVycm9yKGVycm9yKSB7XG4gICAgX2dsb2JhbEhhbmRsZXIgJiYgX2dsb2JhbEhhbmRsZXIoZXJyb3IsIHRydWUpO1xuICB9LFxuICBhcHBseVdpdGhHdWFyZChmdW4sIGNvbnRleHQsIGFyZ3MpIHtcbiAgICB0cnkge1xuICAgICAgX2luR3VhcmQrKztcbiAgICAgIHJldHVybiBmdW4uYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgRXJyb3JVdGlscy5yZXBvcnRFcnJvcihlKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgX2luR3VhcmQtLTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIGFwcGx5V2l0aEd1YXJkSWZOZWVkZWQoZnVuLCBjb250ZXh0LCBhcmdzKSB7XG4gICAgaWYgKEVycm9yVXRpbHMuaW5HdWFyZCgpKSB7XG4gICAgICByZXR1cm4gZnVuLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBFcnJvclV0aWxzLmFwcGx5V2l0aEd1YXJkKGZ1biwgY29udGV4dCwgYXJncyk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxuICBpbkd1YXJkKCkge1xuICAgIHJldHVybiBfaW5HdWFyZDtcbiAgfSxcbiAgZ3VhcmQoZnVuLCBuYW1lLCBjb250ZXh0KSB7XG4gICAgaWYgKHR5cGVvZiBmdW4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbnNvbGUud2FybignQSBmdW5jdGlvbiBtdXN0IGJlIHBhc3NlZCB0byBFcnJvclV0aWxzLmd1YXJkLCBnb3QgJywgZnVuKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBuYW1lID0gbmFtZSB8fCBmdW4ubmFtZSB8fCAnPGdlbmVyYXRlZCBndWFyZD4nO1xuICAgIGZ1bmN0aW9uIGd1YXJkZWQoKSB7XG4gICAgICByZXR1cm4gRXJyb3JVdGlscy5hcHBseVdpdGhHdWFyZChcbiAgICAgICAgZnVuLFxuICAgICAgICBjb250ZXh0IHx8IHRoaXMsXG4gICAgICAgIGFyZ3VtZW50cyxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbmFtZSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGd1YXJkZWQ7XG4gIH0sXG59O1xuXG5nbG9iYWwuRXJyb3JVdGlscyA9IEVycm9yVXRpbHM7XG4iXX0=