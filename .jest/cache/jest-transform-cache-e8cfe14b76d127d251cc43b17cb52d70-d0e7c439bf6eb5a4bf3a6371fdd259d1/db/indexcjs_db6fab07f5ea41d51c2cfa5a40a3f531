07091fa4ca7297cdff68698e2a19623a
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function getType(payload) {
  return Object.prototype.toString.call(payload).slice(8, -1);
}

function isUndefined(payload) {
  return getType(payload) === 'Undefined';
}

function isNull(payload) {
  return getType(payload) === 'Null';
}

function isPlainObject(payload) {
  if (getType(payload) !== 'Object') return false;
  return payload.constructor === Object && Object.getPrototypeOf(payload) === Object.prototype;
}

function isObject(payload) {
  return isPlainObject(payload);
}

function isAnyObject(payload) {
  return getType(payload) === 'Object';
}

function isObjectLike(payload) {
  return isAnyObject(payload);
}

function isFunction(payload) {
  return getType(payload) === 'Function';
}

function isArray(payload) {
  return getType(payload) === 'Array';
}

function isString(payload) {
  return getType(payload) === 'String';
}

function isFullString(payload) {
  return isString(payload) && payload !== '';
}

function isEmptyString(payload) {
  return payload === '';
}

function isNumber(payload) {
  return getType(payload) === 'Number' && !isNaN(payload);
}

function isBoolean(payload) {
  return getType(payload) === 'Boolean';
}

function isRegExp(payload) {
  return getType(payload) === 'RegExp';
}

function isDate(payload) {
  return getType(payload) === 'Date' && !isNaN(payload);
}

function isSymbol(payload) {
  return getType(payload) === 'Symbol';
}

function isPrimitive(payload) {
  return isBoolean(payload) || isNull(payload) || isUndefined(payload) || isNumber(payload) || isString(payload) || isSymbol(payload);
}

function isType(payload, type) {
  if (!(type instanceof Function)) {
    throw new TypeError('Type must be a function');
  }

  if (!type.hasOwnProperty('prototype')) {
    throw new TypeError('Type is not a class');
  }

  var name = type.name;
  return getType(payload) === name || Boolean(payload && payload.constructor === type);
}

exports.getType = getType;
exports.isUndefined = isUndefined;
exports.isNull = isNull;
exports.isPlainObject = isPlainObject;
exports.isObject = isObject;
exports.isAnyObject = isAnyObject;
exports.isObjectLike = isObjectLike;
exports.isFunction = isFunction;
exports.isArray = isArray;
exports.isString = isString;
exports.isFullString = isFullString;
exports.isEmptyString = isEmptyString;
exports.isNumber = isNumber;
exports.isBoolean = isBoolean;
exports.isRegExp = isRegExp;
exports.isDate = isDate;
exports.isSymbol = isSymbol;
exports.isPrimitive = isPrimitive;
exports.isType = isType;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,