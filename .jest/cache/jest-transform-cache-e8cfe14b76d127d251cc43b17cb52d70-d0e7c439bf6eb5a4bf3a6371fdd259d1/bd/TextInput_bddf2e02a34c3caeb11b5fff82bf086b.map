{"version":3,"sources":["TextInput.js"],"names":["DeprecatedColorPropType","require","DeprecatedViewPropTypes","DocumentSelectionState","NativeMethodsMixin","Platform","PropTypes","React","ReactNative","StyleSheet","Text","TextAncestor","TextInputState","TouchableWithoutFeedback","UIManager","createReactClass","invariant","requireNativeComponent","warning","AndroidTextInput","RCTMultilineTextInputView","RCTSinglelineTextInputView","OS","onlyMultiline","onTextInput","children","DataDetectorTypes","emptyFunctionThatReturnsTrue","TextInput","displayName","statics","State","currentlyFocusedField","focusTextInput","blurTextInput","propTypes","autoCapitalize","oneOf","autoCompleteType","autoCorrect","bool","spellCheck","autoFocus","allowFontScaling","maxFontSizeMultiplier","number","editable","keyboardType","keyboardAppearance","returnKeyType","returnKeyLabel","string","maxLength","numberOfLines","disableFullscreenUI","enablesReturnKeyAutomatically","multiline","textBreakStrategy","onBlur","func","onFocus","onChange","onChangeText","onContentSizeChange","onEndEditing","onSelectionChange","onSubmitEditing","onKeyPress","onLayout","onScroll","placeholder","placeholderTextColor","scrollEnabled","secureTextEntry","selectionColor","selectionState","instanceOf","selection","shape","start","isRequired","end","value","defaultValue","clearButtonMode","clearTextOnFocus","selectTextOnFocus","blurOnSubmit","style","underlineColorAndroid","inlineImageLeft","inlineImagePadding","rejectResponderTermination","dataDetectorTypes","oneOfType","arrayOf","caretHidden","contextMenuHidden","inputAccessoryViewID","textContentType","getDefaultProps","mixins","isFocused","findNodeHandle","_inputRef","undefined","_focusSubscription","_lastNativeText","_lastNativeSelection","_rafId","componentDidMount","props","tag","registerInput","requestAnimationFrame","focus","componentWillUnmount","remove","blur","unregisterInput","cancelAnimationFrame","clear","setNativeProps","text","render","textInput","getViewManagerConfig","_renderIOS","_renderIOSLegacy","_renderAndroid","_getText","_setNativeRef","ref","textContainer","__DEV__","propKey","error","Error","stack","_onFocus","_onBlur","_onChange","_onSelectionChange","childCount","Children","forEach","inputView","unshift","styles","multilineInput","_onTextInput","_onScroll","_onPress","accessible","accessibilityLabel","accessibilityRole","accessibilityStates","nativeID","testID","RCTTextInputView","Constants","AutoCapitalizationType","event","mostRecentEventCount","nativeEvent","eventCount","forceUpdate","componentDidUpdate","nativeProps","Object","keys","length","update","InternalTextInputType","NativeComponent","TypedTextInput","create","paddingTop","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst DeprecatedColorPropType = require('../../DeprecatedPropTypes/DeprecatedColorPropType');\nconst DeprecatedViewPropTypes = require('../../DeprecatedPropTypes/DeprecatedViewPropTypes');\nconst DocumentSelectionState = require('../../vendor/document/selection/DocumentSelectionState');\nconst NativeMethodsMixin = require('../../Renderer/shims/NativeMethodsMixin');\nconst Platform = require('../../Utilities/Platform');\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst ReactNative = require('../../Renderer/shims/ReactNative');\nconst StyleSheet = require('../../StyleSheet/StyleSheet');\nconst Text = require('../../Text/Text');\nconst TextAncestor = require('../../Text/TextAncestor');\nconst TextInputState = require('./TextInputState');\nconst TouchableWithoutFeedback = require('../Touchable/TouchableWithoutFeedback');\nconst UIManager = require('../../ReactNative/UIManager');\n\nconst createReactClass = require('create-react-class');\nconst invariant = require('invariant');\nconst requireNativeComponent = require('../../ReactNative/requireNativeComponent');\nconst warning = require('fbjs/lib/warning');\n\nimport type {TextStyleProp, ViewStyleProp} from '../../StyleSheet/StyleSheet';\nimport type {ColorValue} from '../../StyleSheet/StyleSheetTypes';\nimport type {ViewProps} from '../View/ViewPropTypes';\nimport type {SyntheticEvent, ScrollEvent} from '../../Types/CoreEventTypes';\nimport type {PressEvent} from '../../Types/CoreEventTypes';\n\nlet AndroidTextInput;\nlet RCTMultilineTextInputView;\nlet RCTSinglelineTextInputView;\n\nif (Platform.OS === 'android') {\n  AndroidTextInput = requireNativeComponent('AndroidTextInput');\n} else if (Platform.OS === 'ios') {\n  RCTMultilineTextInputView = requireNativeComponent(\n    'RCTMultilineTextInputView',\n  );\n  RCTSinglelineTextInputView = requireNativeComponent(\n    'RCTSinglelineTextInputView',\n  );\n}\n\nconst onlyMultiline = {\n  onTextInput: true,\n  children: true,\n};\n\nexport type ChangeEvent = SyntheticEvent<\n  $ReadOnly<{|\n    eventCount: number,\n    target: number,\n    text: string,\n  |}>,\n>;\n\nexport type TextInputEvent = SyntheticEvent<\n  $ReadOnly<{|\n    eventCount: number,\n    previousText: string,\n    range: $ReadOnly<{|\n      start: number,\n      end: number,\n    |}>,\n    target: number,\n    text: string,\n  |}>,\n>;\n\nexport type ContentSizeChangeEvent = SyntheticEvent<\n  $ReadOnly<{|\n    target: number,\n    contentSize: $ReadOnly<{|\n      width: number,\n      height: number,\n    |}>,\n  |}>,\n>;\n\ntype TargetEvent = SyntheticEvent<\n  $ReadOnly<{|\n    target: number,\n  |}>,\n>;\n\nexport type BlurEvent = TargetEvent;\nexport type FocusEvent = TargetEvent;\n\ntype Selection = $ReadOnly<{|\n  start: number,\n  end: number,\n|}>;\n\nexport type SelectionChangeEvent = SyntheticEvent<\n  $ReadOnly<{|\n    selection: Selection,\n    target: number,\n  |}>,\n>;\n\nexport type KeyPressEvent = SyntheticEvent<\n  $ReadOnly<{|\n    key: string,\n    target?: ?number,\n    eventCount?: ?number,\n  |}>,\n>;\n\nexport type EditingEvent = SyntheticEvent<\n  $ReadOnly<{|\n    eventCount: number,\n    text: string,\n    target: number,\n  |}>,\n>;\n\nconst DataDetectorTypes = [\n  'phoneNumber',\n  'link',\n  'address',\n  'calendarEvent',\n  'none',\n  'all',\n];\n\ntype DataDetectorTypesType =\n  | 'phoneNumber'\n  | 'link'\n  | 'address'\n  | 'calendarEvent'\n  | 'none'\n  | 'all';\n\nexport type KeyboardType =\n  // Cross Platform\n  | 'default'\n  | 'email-address'\n  | 'numeric'\n  | 'phone-pad'\n  | 'number-pad'\n  | 'decimal-pad'\n  // iOS-only\n  | 'ascii-capable'\n  | 'numbers-and-punctuation'\n  | 'url'\n  | 'name-phone-pad'\n  | 'twitter'\n  | 'web-search'\n  // Android-only\n  | 'visible-password';\n\nexport type ReturnKeyType =\n  // Cross Platform\n  | 'done'\n  | 'go'\n  | 'next'\n  | 'search'\n  | 'send'\n  // Android-only\n  | 'none'\n  | 'previous'\n  // iOS-only\n  | 'default'\n  | 'emergency-call'\n  | 'google'\n  | 'join'\n  | 'route'\n  | 'yahoo';\n\nexport type AutoCapitalize = 'none' | 'sentences' | 'words' | 'characters';\n\ntype IOSProps = $ReadOnly<{|\n  spellCheck?: ?boolean,\n  keyboardAppearance?: ?('default' | 'light' | 'dark'),\n  enablesReturnKeyAutomatically?: ?boolean,\n  selectionState?: ?DocumentSelectionState,\n  clearButtonMode?: ?('never' | 'while-editing' | 'unless-editing' | 'always'),\n  clearTextOnFocus?: ?boolean,\n  dataDetectorTypes?:\n    | ?DataDetectorTypesType\n    | $ReadOnlyArray<DataDetectorTypesType>,\n  inputAccessoryViewID?: ?string,\n  textContentType?: ?(\n    | 'none'\n    | 'URL'\n    | 'addressCity'\n    | 'addressCityAndState'\n    | 'addressState'\n    | 'countryName'\n    | 'creditCardNumber'\n    | 'emailAddress'\n    | 'familyName'\n    | 'fullStreetAddress'\n    | 'givenName'\n    | 'jobTitle'\n    | 'location'\n    | 'middleName'\n    | 'name'\n    | 'namePrefix'\n    | 'nameSuffix'\n    | 'nickname'\n    | 'organizationName'\n    | 'postalCode'\n    | 'streetAddressLine1'\n    | 'streetAddressLine2'\n    | 'sublocality'\n    | 'telephoneNumber'\n    | 'username'\n    | 'password'\n    | 'newPassword'\n    | 'oneTimeCode'\n  ),\n  scrollEnabled?: ?boolean,\n|}>;\n\ntype AndroidProps = $ReadOnly<{|\n  autoCompleteType?: ?(\n    | 'cc-csc'\n    | 'cc-exp'\n    | 'cc-exp-month'\n    | 'cc-exp-year'\n    | 'cc-number'\n    | 'email'\n    | 'name'\n    | 'password'\n    | 'postal-code'\n    | 'street-address'\n    | 'tel'\n    | 'username'\n    | 'off'\n  ),\n  returnKeyLabel?: ?string,\n  numberOfLines?: ?number,\n  disableFullscreenUI?: ?boolean,\n  textBreakStrategy?: ?('simple' | 'highQuality' | 'balanced'),\n  underlineColorAndroid?: ?ColorValue,\n  inlineImageLeft?: ?string,\n  inlineImagePadding?: ?number,\n  importantForAutofill?: ?(\n    | 'auto'\n    | 'no'\n    | 'noExcludeDescendants'\n    | 'yes'\n    | 'yesExcludeDescendants'\n  ),\n|}>;\n\ntype Props = $ReadOnly<{|\n  ...$Diff<ViewProps, $ReadOnly<{|style: ?ViewStyleProp|}>>,\n  ...IOSProps,\n  ...AndroidProps,\n  autoCapitalize?: ?AutoCapitalize,\n  autoCorrect?: ?boolean,\n  autoFocus?: ?boolean,\n  allowFontScaling?: ?boolean,\n  maxFontSizeMultiplier?: ?number,\n  editable?: ?boolean,\n  keyboardType?: ?KeyboardType,\n  returnKeyType?: ?ReturnKeyType,\n  maxLength?: ?number,\n  multiline?: ?boolean,\n  onBlur?: ?(e: BlurEvent) => mixed,\n  onFocus?: ?(e: FocusEvent) => mixed,\n  onChange?: ?(e: ChangeEvent) => mixed,\n  onChangeText?: ?(text: string) => mixed,\n  onContentSizeChange?: ?(e: ContentSizeChangeEvent) => mixed,\n  onTextInput?: ?(e: TextInputEvent) => mixed,\n  onEndEditing?: ?(e: EditingEvent) => mixed,\n  onSelectionChange?: ?(e: SelectionChangeEvent) => mixed,\n  onSubmitEditing?: ?(e: EditingEvent) => mixed,\n  onKeyPress?: ?(e: KeyPressEvent) => mixed,\n  onScroll?: ?(e: ScrollEvent) => mixed,\n  placeholder?: ?Stringish,\n  placeholderTextColor?: ?ColorValue,\n  secureTextEntry?: ?boolean,\n  selectionColor?: ?ColorValue,\n  selection?: ?$ReadOnly<{|\n    start: number,\n    end?: ?number,\n  |}>,\n  value?: ?Stringish,\n  defaultValue?: ?Stringish,\n  selectTextOnFocus?: ?boolean,\n  blurOnSubmit?: ?boolean,\n  style?: ?TextStyleProp,\n  caretHidden?: ?boolean,\n  contextMenuHidden?: ?boolean,\n|}>;\n\nconst emptyFunctionThatReturnsTrue = () => true;\n\n/**\n * A foundational component for inputting text into the app via a\n * keyboard. Props provide configurability for several features, such as\n * auto-correction, auto-capitalization, placeholder text, and different keyboard\n * types, such as a numeric keypad.\n *\n * The simplest use case is to plop down a `TextInput` and subscribe to the\n * `onChangeText` events to read the user input. There are also other events,\n * such as `onSubmitEditing` and `onFocus` that can be subscribed to. A simple\n * example:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, TextInput } from 'react-native';\n *\n * export default class UselessTextInput extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = { text: 'Useless Placeholder' };\n *   }\n *\n *   render() {\n *     return (\n *       <TextInput\n *         style={{height: 40, borderColor: 'gray', borderWidth: 1}}\n *         onChangeText={(text) => this.setState({text})}\n *         value={this.state.text}\n *       />\n *     );\n *   }\n * }\n *\n * // skip this line if using Create React Native App\n * AppRegistry.registerComponent('AwesomeProject', () => UselessTextInput);\n * ```\n *\n * Two methods exposed via the native element are .focus() and .blur() that\n * will focus or blur the TextInput programmatically.\n *\n * Note that some props are only available with `multiline={true/false}`.\n * Additionally, border styles that apply to only one side of the element\n * (e.g., `borderBottomColor`, `borderLeftWidth`, etc.) will not be applied if\n * `multiline=false`. To achieve the same effect, you can wrap your `TextInput`\n * in a `View`:\n *\n * ```ReactNativeWebPlayer\n * import React, { Component } from 'react';\n * import { AppRegistry, View, TextInput } from 'react-native';\n *\n * class UselessTextInput extends Component {\n *   render() {\n *     return (\n *       <TextInput\n *         {...this.props} // Inherit any props passed to it; e.g., multiline, numberOfLines below\n *         editable = {true}\n *         maxLength = {40}\n *       />\n *     );\n *   }\n * }\n *\n * export default class UselessTextInputMultiline extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {\n *       text: 'Useless Multiline Placeholder',\n *     };\n *   }\n *\n *   // If you type something in the text box that is a color, the background will change to that\n *   // color.\n *   render() {\n *     return (\n *      <View style={{\n *        backgroundColor: this.state.text,\n *        borderBottomColor: '#000000',\n *        borderBottomWidth: 1 }}\n *      >\n *        <UselessTextInput\n *          multiline = {true}\n *          numberOfLines = {4}\n *          onChangeText={(text) => this.setState({text})}\n *          value={this.state.text}\n *        />\n *      </View>\n *     );\n *   }\n * }\n *\n * // skip these lines if using Create React Native App\n * AppRegistry.registerComponent(\n *  'AwesomeProject',\n *  () => UselessTextInputMultiline\n * );\n * ```\n *\n * `TextInput` has by default a border at the bottom of its view. This border\n * has its padding set by the background image provided by the system, and it\n * cannot be changed. Solutions to avoid this is to either not set height\n * explicitly, case in which the system will take care of displaying the border\n * in the correct position, or to not display the border by setting\n * `underlineColorAndroid` to transparent.\n *\n * Note that on Android performing text selection in input can change\n * app's activity `windowSoftInputMode` param to `adjustResize`.\n * This may cause issues with components that have position: 'absolute'\n * while keyboard is active. To avoid this behavior either specify `windowSoftInputMode`\n * in AndroidManifest.xml ( https://developer.android.com/guide/topics/manifest/activity-element.html )\n * or control this param programmatically with native code.\n *\n */\n\nconst TextInput = createReactClass({\n  displayName: 'TextInput',\n  statics: {\n    State: {\n      currentlyFocusedField: TextInputState.currentlyFocusedField,\n      focusTextInput: TextInputState.focusTextInput,\n      blurTextInput: TextInputState.blurTextInput,\n    },\n  },\n  propTypes: {\n    ...DeprecatedViewPropTypes,\n    /**\n     * Can tell `TextInput` to automatically capitalize certain characters.\n     *\n     * - `characters`: all characters.\n     * - `words`: first letter of each word.\n     * - `sentences`: first letter of each sentence (*default*).\n     * - `none`: don't auto capitalize anything.\n     */\n    autoCapitalize: PropTypes.oneOf([\n      'none',\n      'sentences',\n      'words',\n      'characters',\n    ]),\n    /**\n     * Determines which content to suggest on auto complete, e.g.`username`.\n     * To disable auto complete, use `off`.\n     *\n     * *Android Only*\n     *\n     * The following values work on Android only:\n     *\n     * - `username`\n     * - `password`\n     * - `email`\n     * - `name`\n     * - `tel`\n     * - `street-address`\n     * - `postal-code`\n     * - `cc-number`\n     * - `cc-csc`\n     * - `cc-exp`\n     * - `cc-exp-month`\n     * - `cc-exp-year`\n     * - `off`\n     *\n     * @platform android\n     */\n    autoCompleteType: PropTypes.oneOf([\n      'cc-csc',\n      'cc-exp',\n      'cc-exp-month',\n      'cc-exp-year',\n      'cc-number',\n      'email',\n      'name',\n      'password',\n      'postal-code',\n      'street-address',\n      'tel',\n      'username',\n      'off',\n    ]),\n    /**\n     * If `false`, disables auto-correct. The default value is `true`.\n     */\n    autoCorrect: PropTypes.bool,\n    /**\n     * If `false`, disables spell-check style (i.e. red underlines).\n     * The default value is inherited from `autoCorrect`.\n     * @platform ios\n     */\n    spellCheck: PropTypes.bool,\n    /**\n     * If `true`, focuses the input on `componentDidMount`.\n     * The default value is `false`.\n     */\n    autoFocus: PropTypes.bool,\n    /**\n     * Specifies whether fonts should scale to respect Text Size accessibility settings. The\n     * default is `true`.\n     */\n    allowFontScaling: PropTypes.bool,\n    /**\n     * Specifies largest possible scale a font can reach when `allowFontScaling` is enabled.\n     * Possible values:\n     * `null/undefined` (default): inherit from the parent node or the global default (0)\n     * `0`: no max, ignore parent/global default\n     * `>= 1`: sets the maxFontSizeMultiplier of this node to this value\n     */\n    maxFontSizeMultiplier: PropTypes.number,\n    /**\n     * If `false`, text is not editable. The default value is `true`.\n     */\n    editable: PropTypes.bool,\n    /**\n     * Determines which keyboard to open, e.g.`numeric`.\n     *\n     * The following values work across platforms:\n     *\n     * - `default`\n     * - `numeric`\n     * - `number-pad`\n     * - `decimal-pad`\n     * - `email-address`\n     * - `phone-pad`\n     *\n     * *iOS Only*\n     *\n     * The following values work on iOS only:\n     *\n     * - `ascii-capable`\n     * - `numbers-and-punctuation`\n     * - `url`\n     * - `name-phone-pad`\n     * - `twitter`\n     * - `web-search`\n     *\n     * *Android Only*\n     *\n     * The following values work on Android only:\n     *\n     * - `visible-password`\n     */\n    keyboardType: PropTypes.oneOf([\n      // Cross-platform\n      'default',\n      'email-address',\n      'numeric',\n      'phone-pad',\n      'number-pad',\n      // iOS-only\n      'ascii-capable',\n      'numbers-and-punctuation',\n      'url',\n      'name-phone-pad',\n      'decimal-pad',\n      'twitter',\n      'web-search',\n      // Android-only\n      'visible-password',\n    ]),\n    /**\n     * Determines the color of the keyboard.\n     * @platform ios\n     */\n    keyboardAppearance: PropTypes.oneOf(['default', 'light', 'dark']),\n    /**\n     * Determines how the return key should look. On Android you can also use\n     * `returnKeyLabel`.\n     *\n     * *Cross platform*\n     *\n     * The following values work across platforms:\n     *\n     * - `done`\n     * - `go`\n     * - `next`\n     * - `search`\n     * - `send`\n     *\n     * *Android Only*\n     *\n     * The following values work on Android only:\n     *\n     * - `none`\n     * - `previous`\n     *\n     * *iOS Only*\n     *\n     * The following values work on iOS only:\n     *\n     * - `default`\n     * - `emergency-call`\n     * - `google`\n     * - `join`\n     * - `route`\n     * - `yahoo`\n     */\n    returnKeyType: PropTypes.oneOf([\n      // Cross-platform\n      'done',\n      'go',\n      'next',\n      'search',\n      'send',\n      // Android-only\n      'none',\n      'previous',\n      // iOS-only\n      'default',\n      'emergency-call',\n      'google',\n      'join',\n      'route',\n      'yahoo',\n    ]),\n    /**\n     * Sets the return key to the label. Use it instead of `returnKeyType`.\n     * @platform android\n     */\n    returnKeyLabel: PropTypes.string,\n    /**\n     * Limits the maximum number of characters that can be entered. Use this\n     * instead of implementing the logic in JS to avoid flicker.\n     */\n    maxLength: PropTypes.number,\n    /**\n     * Sets the number of lines for a `TextInput`. Use it with multiline set to\n     * `true` to be able to fill the lines.\n     * @platform android\n     */\n    numberOfLines: PropTypes.number,\n    /**\n     * When `false`, if there is a small amount of space available around a text input\n     * (e.g. landscape orientation on a phone), the OS may choose to have the user edit\n     * the text inside of a full screen text input mode. When `true`, this feature is\n     * disabled and users will always edit the text directly inside of the text input.\n     * Defaults to `false`.\n     * @platform android\n     */\n    disableFullscreenUI: PropTypes.bool,\n    /**\n     * If `true`, the keyboard disables the return key when there is no text and\n     * automatically enables it when there is text. The default value is `false`.\n     * @platform ios\n     */\n    enablesReturnKeyAutomatically: PropTypes.bool,\n    /**\n     * If `true`, the text input can be multiple lines.\n     * The default value is `false`.\n     */\n    multiline: PropTypes.bool,\n    /**\n     * Set text break strategy on Android API Level 23+, possible values are `simple`, `highQuality`, `balanced`\n     * The default value is `simple`.\n     * @platform android\n     */\n    textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),\n    /**\n     * Callback that is called when the text input is blurred.\n     */\n    onBlur: PropTypes.func,\n    /**\n     * Callback that is called when the text input is focused.\n     */\n    onFocus: PropTypes.func,\n    /**\n     * Callback that is called when the text input's text changes.\n     */\n    onChange: PropTypes.func,\n    /**\n     * Callback that is called when the text input's text changes.\n     * Changed text is passed as an argument to the callback handler.\n     */\n    onChangeText: PropTypes.func,\n    /**\n     * Callback that is called when the text input's content size changes.\n     * This will be called with\n     * `{ nativeEvent: { contentSize: { width, height } } }`.\n     *\n     * Only called for multiline text inputs.\n     */\n    onContentSizeChange: PropTypes.func,\n    onTextInput: PropTypes.func,\n    /**\n     * Callback that is called when text input ends.\n     */\n    onEndEditing: PropTypes.func,\n    /**\n     * Callback that is called when the text input selection is changed.\n     * This will be called with\n     * `{ nativeEvent: { selection: { start, end } } }`.\n     */\n    onSelectionChange: PropTypes.func,\n    /**\n     * Callback that is called when the text input's submit button is pressed.\n     * Invalid if `multiline={true}` is specified.\n     */\n    onSubmitEditing: PropTypes.func,\n    /**\n     * Callback that is called when a key is pressed.\n     * This will be called with `{ nativeEvent: { key: keyValue } }`\n     * where `keyValue` is `'Enter'` or `'Backspace'` for respective keys and\n     * the typed-in character otherwise including `' '` for space.\n     * Fires before `onChange` callbacks.\n     */\n    onKeyPress: PropTypes.func,\n    /**\n     * Invoked on mount and layout changes with `{x, y, width, height}`.\n     */\n    onLayout: PropTypes.func,\n    /**\n     * Invoked on content scroll with `{ nativeEvent: { contentOffset: { x, y } } }`.\n     * May also contain other properties from ScrollEvent but on Android contentSize\n     * is not provided for performance reasons.\n     */\n    onScroll: PropTypes.func,\n    /**\n     * The string that will be rendered before text input has been entered.\n     */\n    placeholder: PropTypes.string,\n    /**\n     * The text color of the placeholder string.\n     */\n    placeholderTextColor: DeprecatedColorPropType,\n    /**\n     * If `false`, scrolling of the text view will be disabled.\n     * The default value is `true`. Does only work with 'multiline={true}'.\n     * @platform ios\n     */\n    scrollEnabled: PropTypes.bool,\n    /**\n     * If `true`, the text input obscures the text entered so that sensitive text\n     * like passwords stay secure. The default value is `false`. Does not work with 'multiline={true}'.\n     */\n    secureTextEntry: PropTypes.bool,\n    /**\n     * The highlight and cursor color of the text input.\n     */\n    selectionColor: DeprecatedColorPropType,\n    /**\n     * An instance of `DocumentSelectionState`, this is some state that is responsible for\n     * maintaining selection information for a document.\n     *\n     * Some functionality that can be performed with this instance is:\n     *\n     * - `blur()`\n     * - `focus()`\n     * - `update()`\n     *\n     * > You can reference `DocumentSelectionState` in\n     * > [`vendor/document/selection/DocumentSelectionState.js`](https://github.com/facebook/react-native/blob/master/Libraries/vendor/document/selection/DocumentSelectionState.js)\n     *\n     * @platform ios\n     */\n    selectionState: PropTypes.instanceOf(DocumentSelectionState),\n    /**\n     * The start and end of the text input's selection. Set start and end to\n     * the same value to position the cursor.\n     */\n    selection: PropTypes.shape({\n      start: PropTypes.number.isRequired,\n      end: PropTypes.number,\n    }),\n    /**\n     * The value to show for the text input. `TextInput` is a controlled\n     * component, which means the native value will be forced to match this\n     * value prop if provided. For most uses, this works great, but in some\n     * cases this may cause flickering - one common cause is preventing edits\n     * by keeping value the same. In addition to simply setting the same value,\n     * either set `editable={false}`, or set/update `maxLength` to prevent\n     * unwanted edits without flicker.\n     */\n    value: PropTypes.string,\n    /**\n     * Provides an initial value that will change when the user starts typing.\n     * Useful for simple use-cases where you do not want to deal with listening\n     * to events and updating the value prop to keep the controlled state in sync.\n     */\n    defaultValue: PropTypes.string,\n    /**\n     * When the clear button should appear on the right side of the text view.\n     * This property is supported only for single-line TextInput component.\n     * @platform ios\n     */\n    clearButtonMode: PropTypes.oneOf([\n      'never',\n      'while-editing',\n      'unless-editing',\n      'always',\n    ]),\n    /**\n     * If `true`, clears the text field automatically when editing begins.\n     * @platform ios\n     */\n    clearTextOnFocus: PropTypes.bool,\n    /**\n     * If `true`, all text will automatically be selected on focus.\n     */\n    selectTextOnFocus: PropTypes.bool,\n    /**\n     * If `true`, the text field will blur when submitted.\n     * The default value is true for single-line fields and false for\n     * multiline fields. Note that for multiline fields, setting `blurOnSubmit`\n     * to `true` means that pressing return will blur the field and trigger the\n     * `onSubmitEditing` event instead of inserting a newline into the field.\n     */\n    blurOnSubmit: PropTypes.bool,\n    /**\n     * Note that not all Text styles are supported, an incomplete list of what is not supported includes:\n     *\n     * - `borderLeftWidth`\n     * - `borderTopWidth`\n     * - `borderRightWidth`\n     * - `borderBottomWidth`\n     * - `borderTopLeftRadius`\n     * - `borderTopRightRadius`\n     * - `borderBottomRightRadius`\n     * - `borderBottomLeftRadius`\n     *\n     * see [Issue#7070](https://github.com/facebook/react-native/issues/7070)\n     * for more detail.\n     *\n     * [Styles](docs/style.html)\n     */\n    style: Text.propTypes.style,\n    /**\n     * The color of the `TextInput` underline.\n     * @platform android\n     */\n    underlineColorAndroid: DeprecatedColorPropType,\n\n    /**\n     * If defined, the provided image resource will be rendered on the left.\n     * The image resource must be inside `/android/app/src/main/res/drawable` and referenced\n     * like\n     * ```\n     * <TextInput\n     *  inlineImageLeft='search_icon'\n     * />\n     * ```\n     * @platform android\n     */\n    inlineImageLeft: PropTypes.string,\n\n    /**\n     * Padding between the inline image, if any, and the text input itself.\n     * @platform android\n     */\n    inlineImagePadding: PropTypes.number,\n\n    /**\n     * If `true`, allows TextInput to pass touch events to the parent component.\n     * This allows components such as SwipeableListView to be swipeable from the TextInput on iOS,\n     * as is the case on Android by default.\n     * If `false`, TextInput always asks to handle the input (except when disabled).\n     * @platform ios\n     */\n    rejectResponderTermination: PropTypes.bool,\n\n    /**\n     * Determines the types of data converted to clickable URLs in the text input.\n     * Only valid if `multiline={true}` and `editable={false}`.\n     * By default no data types are detected.\n     *\n     * You can provide one type or an array of many types.\n     *\n     * Possible values for `dataDetectorTypes` are:\n     *\n     * - `'phoneNumber'`\n     * - `'link'`\n     * - `'address'`\n     * - `'calendarEvent'`\n     * - `'none'`\n     * - `'all'`\n     *\n     * @platform ios\n     */\n    dataDetectorTypes: PropTypes.oneOfType([\n      PropTypes.oneOf(DataDetectorTypes),\n      PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes)),\n    ]),\n    /**\n     * If `true`, caret is hidden. The default value is `false`.\n     * This property is supported only for single-line TextInput component on iOS.\n     */\n    caretHidden: PropTypes.bool,\n    /*\n     * If `true`, contextMenuHidden is hidden. The default value is `false`.\n     */\n    contextMenuHidden: PropTypes.bool,\n    /**\n     * An optional identifier which links a custom InputAccessoryView to\n     * this text input. The InputAccessoryView is rendered above the\n     * keyboard when this text input is focused.\n     * @platform ios\n     */\n    inputAccessoryViewID: PropTypes.string,\n    /**\n     * Give the keyboard and the system information about the\n     * expected semantic meaning for the content that users enter.\n     * @platform ios\n     */\n    textContentType: PropTypes.oneOf([\n      'none',\n      'URL',\n      'addressCity',\n      'addressCityAndState',\n      'addressState',\n      'countryName',\n      'creditCardNumber',\n      'emailAddress',\n      'familyName',\n      'fullStreetAddress',\n      'givenName',\n      'jobTitle',\n      'location',\n      'middleName',\n      'name',\n      'namePrefix',\n      'nameSuffix',\n      'nickname',\n      'organizationName',\n      'postalCode',\n      'streetAddressLine1',\n      'streetAddressLine2',\n      'sublocality',\n      'telephoneNumber',\n      'username',\n      'password',\n      'newPassword',\n      'oneTimeCode',\n    ]),\n  },\n  getDefaultProps() {\n    return {\n      allowFontScaling: true,\n      rejectResponderTermination: true,\n      underlineColorAndroid: 'transparent',\n    };\n  },\n  /**\n   * `NativeMethodsMixin` will look for this when invoking `setNativeProps`. We\n   * make `this` look like an actual native component class.\n   */\n  mixins: [NativeMethodsMixin],\n\n  /**\n   * Returns `true` if the input is currently focused; `false` otherwise.\n   */\n  isFocused: function(): boolean {\n    return (\n      TextInputState.currentlyFocusedField() ===\n      ReactNative.findNodeHandle(this._inputRef)\n    );\n  },\n\n  _inputRef: (undefined: any),\n  _focusSubscription: (undefined: ?Function),\n  _lastNativeText: (undefined: ?string),\n  _lastNativeSelection: (undefined: ?Selection),\n  _rafId: (null: ?AnimationFrameID),\n\n  componentDidMount: function() {\n    this._lastNativeText = this.props.value;\n    const tag = ReactNative.findNodeHandle(this._inputRef);\n    if (tag != null) {\n      // tag is null only in unit tests\n      TextInputState.registerInput(tag);\n    }\n\n    if (this.props.autoFocus) {\n      this._rafId = requestAnimationFrame(this.focus);\n    }\n  },\n\n  componentWillUnmount: function() {\n    this._focusSubscription && this._focusSubscription.remove();\n    if (this.isFocused()) {\n      this.blur();\n    }\n    const tag = ReactNative.findNodeHandle(this._inputRef);\n    if (tag != null) {\n      TextInputState.unregisterInput(tag);\n    }\n    if (this._rafId != null) {\n      cancelAnimationFrame(this._rafId);\n    }\n  },\n\n  /**\n   * Removes all text from the `TextInput`.\n   */\n  clear: function() {\n    this.setNativeProps({text: ''});\n  },\n\n  render: function() {\n    let textInput;\n    if (Platform.OS === 'ios') {\n      textInput = UIManager.getViewManagerConfig('RCTVirtualText')\n        ? this._renderIOS()\n        : this._renderIOSLegacy();\n    } else if (Platform.OS === 'android') {\n      textInput = this._renderAndroid();\n    }\n    return (\n      <TextAncestor.Provider value={true}>{textInput}</TextAncestor.Provider>\n    );\n  },\n\n  _getText: function(): ?string {\n    return typeof this.props.value === 'string'\n      ? this.props.value\n      : typeof this.props.defaultValue === 'string'\n      ? this.props.defaultValue\n      : '';\n  },\n\n  _setNativeRef: function(ref: any) {\n    this._inputRef = ref;\n  },\n\n  _renderIOSLegacy: function() {\n    let textContainer;\n\n    const props = Object.assign({}, this.props);\n    props.style = [this.props.style];\n\n    if (props.selection && props.selection.end == null) {\n      props.selection = {\n        start: props.selection.start,\n        end: props.selection.start,\n      };\n    }\n\n    if (!props.multiline) {\n      if (__DEV__) {\n        for (const propKey in onlyMultiline) {\n          if (props[propKey]) {\n            const error = new Error(\n              'TextInput prop `' +\n                propKey +\n                '` is only supported with multiline.',\n            );\n            warning(false, '%s', error.stack);\n          }\n        }\n      }\n      textContainer = (\n        <RCTSinglelineTextInputView\n          ref={this._setNativeRef}\n          {...props}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n          onChange={this._onChange}\n          onSelectionChange={this._onSelectionChange}\n          onSelectionChangeShouldSetResponder={emptyFunctionThatReturnsTrue}\n          text={this._getText()}\n        />\n      );\n    } else {\n      let children = props.children;\n      let childCount = 0;\n      React.Children.forEach(children, () => ++childCount);\n      invariant(\n        !(props.value && childCount),\n        'Cannot specify both value and children.',\n      );\n      if (childCount >= 1) {\n        children = (\n          <Text\n            style={props.style}\n            allowFontScaling={props.allowFontScaling}\n            maxFontSizeMultiplier={props.maxFontSizeMultiplier}>\n            {children}\n          </Text>\n        );\n      }\n      if (props.inputView) {\n        children = [children, props.inputView];\n      }\n      props.style.unshift(styles.multilineInput);\n      textContainer = (\n        <RCTMultilineTextInputView\n          ref={this._setNativeRef}\n          {...props}\n          children={children}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n          onChange={this._onChange}\n          onContentSizeChange={this.props.onContentSizeChange}\n          onSelectionChange={this._onSelectionChange}\n          onTextInput={this._onTextInput}\n          onSelectionChangeShouldSetResponder={emptyFunctionThatReturnsTrue}\n          text={this._getText()}\n          dataDetectorTypes={this.props.dataDetectorTypes}\n          onScroll={this._onScroll}\n        />\n      );\n    }\n\n    return (\n      <TouchableWithoutFeedback\n        onLayout={props.onLayout}\n        onPress={this._onPress}\n        rejectResponderTermination={true}\n        accessible={props.accessible}\n        accessibilityLabel={props.accessibilityLabel}\n        accessibilityRole={props.accessibilityRole}\n        accessibilityStates={props.accessibilityStates}\n        nativeID={this.props.nativeID}\n        testID={props.testID}>\n        {textContainer}\n      </TouchableWithoutFeedback>\n    );\n  },\n\n  _renderIOS: function() {\n    const props = Object.assign({}, this.props);\n    props.style = [this.props.style];\n\n    if (props.selection && props.selection.end == null) {\n      props.selection = {\n        start: props.selection.start,\n        end: props.selection.start,\n      };\n    }\n\n    const RCTTextInputView = props.multiline\n      ? RCTMultilineTextInputView\n      : RCTSinglelineTextInputView;\n\n    if (props.multiline) {\n      props.style.unshift(styles.multilineInput);\n    }\n\n    const textContainer = (\n      <RCTTextInputView\n        ref={this._setNativeRef}\n        {...props}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n        onChange={this._onChange}\n        onContentSizeChange={this.props.onContentSizeChange}\n        onSelectionChange={this._onSelectionChange}\n        onTextInput={this._onTextInput}\n        onSelectionChangeShouldSetResponder={emptyFunctionThatReturnsTrue}\n        text={this._getText()}\n        dataDetectorTypes={this.props.dataDetectorTypes}\n        onScroll={this._onScroll}\n      />\n    );\n\n    return (\n      <TouchableWithoutFeedback\n        onLayout={props.onLayout}\n        onPress={this._onPress}\n        rejectResponderTermination={props.rejectResponderTermination}\n        accessible={props.accessible}\n        accessibilityLabel={props.accessibilityLabel}\n        accessibilityRole={props.accessibilityRole}\n        accessibilityStates={props.accessibilityStates}\n        nativeID={this.props.nativeID}\n        testID={props.testID}>\n        {textContainer}\n      </TouchableWithoutFeedback>\n    );\n  },\n\n  _renderAndroid: function() {\n    const props = Object.assign({}, this.props);\n    props.style = [this.props.style];\n    props.autoCapitalize = UIManager.getViewManagerConfig(\n      'AndroidTextInput',\n    ).Constants.AutoCapitalizationType[props.autoCapitalize || 'sentences'];\n    let children = this.props.children;\n    let childCount = 0;\n    React.Children.forEach(children, () => ++childCount);\n    invariant(\n      !(this.props.value && childCount),\n      'Cannot specify both value and children.',\n    );\n    if (childCount > 1) {\n      children = <Text>{children}</Text>;\n    }\n\n    if (props.selection && props.selection.end == null) {\n      props.selection = {\n        start: props.selection.start,\n        end: props.selection.start,\n      };\n    }\n\n    const textContainer = (\n      <AndroidTextInput\n        ref={this._setNativeRef}\n        {...props}\n        mostRecentEventCount={0}\n        onFocus={this._onFocus}\n        onBlur={this._onBlur}\n        onChange={this._onChange}\n        onSelectionChange={this._onSelectionChange}\n        onTextInput={this._onTextInput}\n        text={this._getText()}\n        children={children}\n        disableFullscreenUI={this.props.disableFullscreenUI}\n        textBreakStrategy={this.props.textBreakStrategy}\n        onScroll={this._onScroll}\n      />\n    );\n\n    return (\n      <TouchableWithoutFeedback\n        onLayout={props.onLayout}\n        onPress={this._onPress}\n        accessible={this.props.accessible}\n        accessibilityLabel={this.props.accessibilityLabel}\n        accessibilityRole={this.props.accessibilityRole}\n        accessibilityStates={this.props.accessibilityStates}\n        nativeID={this.props.nativeID}\n        testID={this.props.testID}>\n        {textContainer}\n      </TouchableWithoutFeedback>\n    );\n  },\n\n  _onFocus: function(event: FocusEvent) {\n    if (this.props.onFocus) {\n      this.props.onFocus(event);\n    }\n\n    if (this.props.selectionState) {\n      this.props.selectionState.focus();\n    }\n  },\n\n  _onPress: function(event: PressEvent) {\n    if (this.props.editable || this.props.editable === undefined) {\n      this.focus();\n    }\n  },\n\n  _onChange: function(event: ChangeEvent) {\n    // Make sure to fire the mostRecentEventCount first so it is already set on\n    // native when the text value is set.\n    if (this._inputRef && this._inputRef.setNativeProps) {\n      ReactNative.setNativeProps(this._inputRef, {\n        mostRecentEventCount: event.nativeEvent.eventCount,\n      });\n    }\n\n    const text = event.nativeEvent.text;\n    this.props.onChange && this.props.onChange(event);\n    this.props.onChangeText && this.props.onChangeText(text);\n\n    if (!this._inputRef) {\n      // calling `this.props.onChange` or `this.props.onChangeText`\n      // may clean up the input itself. Exits here.\n      return;\n    }\n\n    this._lastNativeText = text;\n    this.forceUpdate();\n  },\n\n  _onSelectionChange: function(event: SelectionChangeEvent) {\n    this.props.onSelectionChange && this.props.onSelectionChange(event);\n\n    if (!this._inputRef) {\n      // calling `this.props.onSelectionChange`\n      // may clean up the input itself. Exits here.\n      return;\n    }\n\n    this._lastNativeSelection = event.nativeEvent.selection;\n\n    if (this.props.selection || this.props.selectionState) {\n      this.forceUpdate();\n    }\n  },\n\n  componentDidUpdate: function() {\n    // This is necessary in case native updates the text and JS decides\n    // that the update should be ignored and we should stick with the value\n    // that we have in JS.\n    const nativeProps = {};\n\n    if (\n      this._lastNativeText !== this.props.value &&\n      typeof this.props.value === 'string'\n    ) {\n      nativeProps.text = this.props.value;\n    }\n\n    // Selection is also a controlled prop, if the native value doesn't match\n    // JS, update to the JS value.\n    const {selection} = this.props;\n    if (\n      this._lastNativeSelection &&\n      selection &&\n      (this._lastNativeSelection.start !== selection.start ||\n        this._lastNativeSelection.end !== selection.end)\n    ) {\n      nativeProps.selection = this.props.selection;\n    }\n\n    if (\n      Object.keys(nativeProps).length > 0 &&\n      this._inputRef &&\n      this._inputRef.setNativeProps\n    ) {\n      ReactNative.setNativeProps(this._inputRef, nativeProps);\n    }\n\n    if (this.props.selectionState && selection) {\n      this.props.selectionState.update(selection.start, selection.end);\n    }\n  },\n\n  _onBlur: function(event: BlurEvent) {\n    // This is a hack to fix https://fburl.com/toehyir8\n    // @todo(rsnara) Figure out why this is necessary.\n    this.blur();\n    if (this.props.onBlur) {\n      this.props.onBlur(event);\n    }\n\n    if (this.props.selectionState) {\n      this.props.selectionState.blur();\n    }\n  },\n\n  _onTextInput: function(event: TextInputEvent) {\n    this.props.onTextInput && this.props.onTextInput(event);\n  },\n\n  _onScroll: function(event: ScrollEvent) {\n    this.props.onScroll && this.props.onScroll(event);\n  },\n});\n\nclass InternalTextInputType extends ReactNative.NativeComponent<Props> {\n  clear() {}\n\n  // $FlowFixMe\n  isFocused(): boolean {}\n}\n\nconst TypedTextInput = ((TextInput: any): Class<InternalTextInputType>);\n\nconst styles = StyleSheet.create({\n  multilineInput: {\n    // This default top inset makes RCTMultilineTextInputView seem as close as possible\n    // to single-line RCTSinglelineTextInputView defaults, using the system defaults\n    // of font size 17 and a height of 31 points.\n    paddingTop: 5,\n  },\n});\n\nmodule.exports = TypedTextInput;\n"]}