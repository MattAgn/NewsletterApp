ad7d7385f1ca554937ee4086eb6f7c44
'use strict';

var React = require('react');

var SafeAreaView = require('../../Components/SafeAreaView/SafeAreaView');

var StyleSheet = require('../../StyleSheet/StyleSheet');

var Text = require('../../Text/Text');

var View = require('../../Components/View/View');

var YellowBoxPressable = require('./YellowBoxPressable');

var YellowBoxStyle = require('./YellowBoxStyle');

var YellowBoxInspectorFooter = function YellowBoxInspectorFooter(props) {
  return React.createElement(View, {
    style: styles.root
  }, React.createElement(YellowBoxPressable, {
    backgroundColor: {
      default: 'transparent',
      pressed: YellowBoxStyle.getHighlightColor(1)
    },
    onPress: props.onMinimize,
    style: styles.button
  }, React.createElement(View, {
    style: styles.content
  }, React.createElement(Text, {
    style: styles.label
  }, "Minimize")), React.createElement(SafeAreaView, null)), React.createElement(YellowBoxPressable, {
    backgroundColor: {
      default: 'transparent',
      pressed: YellowBoxStyle.getHighlightColor(1)
    },
    onPress: props.onDismiss,
    style: styles.button
  }, React.createElement(View, {
    style: styles.content
  }, React.createElement(Text, {
    style: styles.label
  }, "Dismiss")), React.createElement(SafeAreaView, null)));
};

var styles = StyleSheet.create({
  root: {
    backgroundColor: YellowBoxStyle.getBackgroundColor(0.95),
    flexDirection: 'row'
  },
  button: {
    flex: 1
  },
  content: {
    alignItems: 'center',
    height: 48,
    justifyContent: 'center'
  },
  label: {
    color: YellowBoxStyle.getTextColor(1),
    fontSize: 14,
    includeFontPadding: false,
    lineHeight: 18
  }
});
module.exports = YellowBoxInspectorFooter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlllbGxvd0JveEluc3BlY3RvckZvb3Rlci5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJTYWZlQXJlYVZpZXciLCJTdHlsZVNoZWV0IiwiVGV4dCIsIlZpZXciLCJZZWxsb3dCb3hQcmVzc2FibGUiLCJZZWxsb3dCb3hTdHlsZSIsIlllbGxvd0JveEluc3BlY3RvckZvb3RlciIsInByb3BzIiwic3R5bGVzIiwicm9vdCIsImRlZmF1bHQiLCJwcmVzc2VkIiwiZ2V0SGlnaGxpZ2h0Q29sb3IiLCJvbk1pbmltaXplIiwiYnV0dG9uIiwiY29udGVudCIsImxhYmVsIiwib25EaXNtaXNzIiwiY3JlYXRlIiwiYmFja2dyb3VuZENvbG9yIiwiZ2V0QmFja2dyb3VuZENvbG9yIiwiZmxleERpcmVjdGlvbiIsImZsZXgiLCJhbGlnbkl0ZW1zIiwiaGVpZ2h0IiwianVzdGlmeUNvbnRlbnQiLCJjb2xvciIsImdldFRleHRDb2xvciIsImZvbnRTaXplIiwiaW5jbHVkZUZvbnRQYWRkaW5nIiwibGluZUhlaWdodCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVVBOztBQUVBLElBQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsSUFBTUMsWUFBWSxHQUFHRCxPQUFPLENBQUMsNENBQUQsQ0FBNUI7O0FBQ0EsSUFBTUUsVUFBVSxHQUFHRixPQUFPLENBQUMsNkJBQUQsQ0FBMUI7O0FBQ0EsSUFBTUcsSUFBSSxHQUFHSCxPQUFPLENBQUMsaUJBQUQsQ0FBcEI7O0FBQ0EsSUFBTUksSUFBSSxHQUFHSixPQUFPLENBQUMsNEJBQUQsQ0FBcEI7O0FBQ0EsSUFBTUssa0JBQWtCLEdBQUdMLE9BQU8sQ0FBQyxzQkFBRCxDQUFsQzs7QUFDQSxJQUFNTSxjQUFjLEdBQUdOLE9BQU8sQ0FBQyxrQkFBRCxDQUE5Qjs7QUFPQSxJQUFNTyx3QkFBd0IsR0FBRyxTQUEzQkEsd0JBQTJCLENBQUNDLEtBQUQ7QUFBQSxTQUMvQixvQkFBQyxJQUFEO0FBQU0sSUFBQSxLQUFLLEVBQUVDLE1BQU0sQ0FBQ0M7QUFBcEIsS0FDRSxvQkFBQyxrQkFBRDtBQUNFLElBQUEsZUFBZSxFQUFFO0FBQ2ZDLE1BQUFBLE9BQU8sRUFBRSxhQURNO0FBRWZDLE1BQUFBLE9BQU8sRUFBRU4sY0FBYyxDQUFDTyxpQkFBZixDQUFpQyxDQUFqQztBQUZNLEtBRG5CO0FBS0UsSUFBQSxPQUFPLEVBQUVMLEtBQUssQ0FBQ00sVUFMakI7QUFNRSxJQUFBLEtBQUssRUFBRUwsTUFBTSxDQUFDTTtBQU5oQixLQU9FLG9CQUFDLElBQUQ7QUFBTSxJQUFBLEtBQUssRUFBRU4sTUFBTSxDQUFDTztBQUFwQixLQUNFLG9CQUFDLElBQUQ7QUFBTSxJQUFBLEtBQUssRUFBRVAsTUFBTSxDQUFDUTtBQUFwQixnQkFERixDQVBGLEVBVUUsb0JBQUMsWUFBRCxPQVZGLENBREYsRUFhRSxvQkFBQyxrQkFBRDtBQUNFLElBQUEsZUFBZSxFQUFFO0FBQ2ZOLE1BQUFBLE9BQU8sRUFBRSxhQURNO0FBRWZDLE1BQUFBLE9BQU8sRUFBRU4sY0FBYyxDQUFDTyxpQkFBZixDQUFpQyxDQUFqQztBQUZNLEtBRG5CO0FBS0UsSUFBQSxPQUFPLEVBQUVMLEtBQUssQ0FBQ1UsU0FMakI7QUFNRSxJQUFBLEtBQUssRUFBRVQsTUFBTSxDQUFDTTtBQU5oQixLQU9FLG9CQUFDLElBQUQ7QUFBTSxJQUFBLEtBQUssRUFBRU4sTUFBTSxDQUFDTztBQUFwQixLQUNFLG9CQUFDLElBQUQ7QUFBTSxJQUFBLEtBQUssRUFBRVAsTUFBTSxDQUFDUTtBQUFwQixlQURGLENBUEYsRUFVRSxvQkFBQyxZQUFELE9BVkYsQ0FiRixDQUQrQjtBQUFBLENBQWpDOztBQTZCQSxJQUFNUixNQUFNLEdBQUdQLFVBQVUsQ0FBQ2lCLE1BQVgsQ0FBa0I7QUFDL0JULEVBQUFBLElBQUksRUFBRTtBQUNKVSxJQUFBQSxlQUFlLEVBQUVkLGNBQWMsQ0FBQ2Usa0JBQWYsQ0FBa0MsSUFBbEMsQ0FEYjtBQUVKQyxJQUFBQSxhQUFhLEVBQUU7QUFGWCxHQUR5QjtBQUsvQlAsRUFBQUEsTUFBTSxFQUFFO0FBQ05RLElBQUFBLElBQUksRUFBRTtBQURBLEdBTHVCO0FBUS9CUCxFQUFBQSxPQUFPLEVBQUU7QUFDUFEsSUFBQUEsVUFBVSxFQUFFLFFBREw7QUFFUEMsSUFBQUEsTUFBTSxFQUFFLEVBRkQ7QUFHUEMsSUFBQUEsY0FBYyxFQUFFO0FBSFQsR0FSc0I7QUFhL0JULEVBQUFBLEtBQUssRUFBRTtBQUNMVSxJQUFBQSxLQUFLLEVBQUVyQixjQUFjLENBQUNzQixZQUFmLENBQTRCLENBQTVCLENBREY7QUFFTEMsSUFBQUEsUUFBUSxFQUFFLEVBRkw7QUFHTEMsSUFBQUEsa0JBQWtCLEVBQUUsS0FIZjtBQUlMQyxJQUFBQSxVQUFVLEVBQUU7QUFKUDtBQWJ3QixDQUFsQixDQUFmO0FBcUJBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIxQix3QkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgU2FmZUFyZWFWaWV3ID0gcmVxdWlyZSgnLi4vLi4vQ29tcG9uZW50cy9TYWZlQXJlYVZpZXcvU2FmZUFyZWFWaWV3Jyk7XG5jb25zdCBTdHlsZVNoZWV0ID0gcmVxdWlyZSgnLi4vLi4vU3R5bGVTaGVldC9TdHlsZVNoZWV0Jyk7XG5jb25zdCBUZXh0ID0gcmVxdWlyZSgnLi4vLi4vVGV4dC9UZXh0Jyk7XG5jb25zdCBWaWV3ID0gcmVxdWlyZSgnLi4vLi4vQ29tcG9uZW50cy9WaWV3L1ZpZXcnKTtcbmNvbnN0IFllbGxvd0JveFByZXNzYWJsZSA9IHJlcXVpcmUoJy4vWWVsbG93Qm94UHJlc3NhYmxlJyk7XG5jb25zdCBZZWxsb3dCb3hTdHlsZSA9IHJlcXVpcmUoJy4vWWVsbG93Qm94U3R5bGUnKTtcblxudHlwZSBQcm9wcyA9ICRSZWFkT25seTx7fFxuICBvbkRpc21pc3M6ICgpID0+IHZvaWQsXG4gIG9uTWluaW1pemU6ICgpID0+IHZvaWQsXG58fT47XG5cbmNvbnN0IFllbGxvd0JveEluc3BlY3RvckZvb3RlciA9IChwcm9wczogUHJvcHMpOiBSZWFjdC5Ob2RlID0+IChcbiAgPFZpZXcgc3R5bGU9e3N0eWxlcy5yb290fT5cbiAgICA8WWVsbG93Qm94UHJlc3NhYmxlXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I9e3tcbiAgICAgICAgZGVmYXVsdDogJ3RyYW5zcGFyZW50JyxcbiAgICAgICAgcHJlc3NlZDogWWVsbG93Qm94U3R5bGUuZ2V0SGlnaGxpZ2h0Q29sb3IoMSksXG4gICAgICB9fVxuICAgICAgb25QcmVzcz17cHJvcHMub25NaW5pbWl6ZX1cbiAgICAgIHN0eWxlPXtzdHlsZXMuYnV0dG9ufT5cbiAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuY29udGVudH0+XG4gICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMubGFiZWx9Pk1pbmltaXplPC9UZXh0PlxuICAgICAgPC9WaWV3PlxuICAgICAgPFNhZmVBcmVhVmlldyAvPlxuICAgIDwvWWVsbG93Qm94UHJlc3NhYmxlPlxuICAgIDxZZWxsb3dCb3hQcmVzc2FibGVcbiAgICAgIGJhY2tncm91bmRDb2xvcj17e1xuICAgICAgICBkZWZhdWx0OiAndHJhbnNwYXJlbnQnLFxuICAgICAgICBwcmVzc2VkOiBZZWxsb3dCb3hTdHlsZS5nZXRIaWdobGlnaHRDb2xvcigxKSxcbiAgICAgIH19XG4gICAgICBvblByZXNzPXtwcm9wcy5vbkRpc21pc3N9XG4gICAgICBzdHlsZT17c3R5bGVzLmJ1dHRvbn0+XG4gICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmNvbnRlbnR9PlxuICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLmxhYmVsfT5EaXNtaXNzPC9UZXh0PlxuICAgICAgPC9WaWV3PlxuICAgICAgPFNhZmVBcmVhVmlldyAvPlxuICAgIDwvWWVsbG93Qm94UHJlc3NhYmxlPlxuICA8L1ZpZXc+XG4pO1xuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIHJvb3Q6IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IFllbGxvd0JveFN0eWxlLmdldEJhY2tncm91bmRDb2xvcigwLjk1KSxcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgfSxcbiAgYnV0dG9uOiB7XG4gICAgZmxleDogMSxcbiAgfSxcbiAgY29udGVudDoge1xuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGhlaWdodDogNDgsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICB9LFxuICBsYWJlbDoge1xuICAgIGNvbG9yOiBZZWxsb3dCb3hTdHlsZS5nZXRUZXh0Q29sb3IoMSksXG4gICAgZm9udFNpemU6IDE0LFxuICAgIGluY2x1ZGVGb250UGFkZGluZzogZmFsc2UsXG4gICAgbGluZUhlaWdodDogMTgsXG4gIH0sXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBZZWxsb3dCb3hJbnNwZWN0b3JGb290ZXI7XG4iXX0=