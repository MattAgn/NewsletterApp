61ef7fe2d756a400b89329e7e3430619
var DataView = require('./_DataView'),
    Map = require('./_Map'),
    Promise = require('./_Promise'),
    Set = require('./_Set'),
    WeakMap = require('./_WeakMap'),
    baseGetTag = require('./_baseGetTag'),
    toSource = require('./_toSource');

var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';
var dataViewTag = '[object DataView]';
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);
var getTag = baseGetTag;

if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
  getTag = function getTag(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString:
          return dataViewTag;

        case mapCtorString:
          return mapTag;

        case promiseCtorString:
          return promiseTag;

        case setCtorString:
          return setTag;

        case weakMapCtorString:
          return weakMapTag;
      }
    }

    return result;
  };
}

module.exports = getTag;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9nZXRUYWcuanMiXSwibmFtZXMiOlsiRGF0YVZpZXciLCJyZXF1aXJlIiwiTWFwIiwiUHJvbWlzZSIsIlNldCIsIldlYWtNYXAiLCJiYXNlR2V0VGFnIiwidG9Tb3VyY2UiLCJtYXBUYWciLCJvYmplY3RUYWciLCJwcm9taXNlVGFnIiwic2V0VGFnIiwid2Vha01hcFRhZyIsImRhdGFWaWV3VGFnIiwiZGF0YVZpZXdDdG9yU3RyaW5nIiwibWFwQ3RvclN0cmluZyIsInByb21pc2VDdG9yU3RyaW5nIiwic2V0Q3RvclN0cmluZyIsIndlYWtNYXBDdG9yU3RyaW5nIiwiZ2V0VGFnIiwiQXJyYXlCdWZmZXIiLCJyZXNvbHZlIiwidmFsdWUiLCJyZXN1bHQiLCJDdG9yIiwiY29uc3RydWN0b3IiLCJ1bmRlZmluZWQiLCJjdG9yU3RyaW5nIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsUUFBUSxHQUFHQyxPQUFPLENBQUMsYUFBRCxDQUF0QjtBQUFBLElBQ0lDLEdBQUcsR0FBR0QsT0FBTyxDQUFDLFFBQUQsQ0FEakI7QUFBQSxJQUVJRSxPQUFPLEdBQUdGLE9BQU8sQ0FBQyxZQUFELENBRnJCO0FBQUEsSUFHSUcsR0FBRyxHQUFHSCxPQUFPLENBQUMsUUFBRCxDQUhqQjtBQUFBLElBSUlJLE9BQU8sR0FBR0osT0FBTyxDQUFDLFlBQUQsQ0FKckI7QUFBQSxJQUtJSyxVQUFVLEdBQUdMLE9BQU8sQ0FBQyxlQUFELENBTHhCO0FBQUEsSUFNSU0sUUFBUSxHQUFHTixPQUFPLENBQUMsYUFBRCxDQU50Qjs7QUFTQSxJQUFJTyxNQUFNLEdBQUcsY0FBYjtBQUFBLElBQ0lDLFNBQVMsR0FBRyxpQkFEaEI7QUFBQSxJQUVJQyxVQUFVLEdBQUcsa0JBRmpCO0FBQUEsSUFHSUMsTUFBTSxHQUFHLGNBSGI7QUFBQSxJQUlJQyxVQUFVLEdBQUcsa0JBSmpCO0FBTUEsSUFBSUMsV0FBVyxHQUFHLG1CQUFsQjtBQUdBLElBQUlDLGtCQUFrQixHQUFHUCxRQUFRLENBQUNQLFFBQUQsQ0FBakM7QUFBQSxJQUNJZSxhQUFhLEdBQUdSLFFBQVEsQ0FBQ0wsR0FBRCxDQUQ1QjtBQUFBLElBRUljLGlCQUFpQixHQUFHVCxRQUFRLENBQUNKLE9BQUQsQ0FGaEM7QUFBQSxJQUdJYyxhQUFhLEdBQUdWLFFBQVEsQ0FBQ0gsR0FBRCxDQUg1QjtBQUFBLElBSUljLGlCQUFpQixHQUFHWCxRQUFRLENBQUNGLE9BQUQsQ0FKaEM7QUFhQSxJQUFJYyxNQUFNLEdBQUdiLFVBQWI7O0FBR0EsSUFBS04sUUFBUSxJQUFJbUIsTUFBTSxDQUFDLElBQUluQixRQUFKLENBQWEsSUFBSW9CLFdBQUosQ0FBZ0IsQ0FBaEIsQ0FBYixDQUFELENBQU4sSUFBNENQLFdBQXpELElBQ0NYLEdBQUcsSUFBSWlCLE1BQU0sQ0FBQyxJQUFJakIsR0FBSixFQUFELENBQU4sSUFBbUJNLE1BRDNCLElBRUNMLE9BQU8sSUFBSWdCLE1BQU0sQ0FBQ2hCLE9BQU8sQ0FBQ2tCLE9BQVIsRUFBRCxDQUFOLElBQTZCWCxVQUZ6QyxJQUdDTixHQUFHLElBQUllLE1BQU0sQ0FBQyxJQUFJZixHQUFKLEVBQUQsQ0FBTixJQUFtQk8sTUFIM0IsSUFJQ04sT0FBTyxJQUFJYyxNQUFNLENBQUMsSUFBSWQsT0FBSixFQUFELENBQU4sSUFBdUJPLFVBSnZDLEVBSW9EO0FBQ2xETyxFQUFBQSxNQUFNLEdBQUcsZ0JBQVNHLEtBQVQsRUFBZ0I7QUFDdkIsUUFBSUMsTUFBTSxHQUFHakIsVUFBVSxDQUFDZ0IsS0FBRCxDQUF2QjtBQUFBLFFBQ0lFLElBQUksR0FBR0QsTUFBTSxJQUFJZCxTQUFWLEdBQXNCYSxLQUFLLENBQUNHLFdBQTVCLEdBQTBDQyxTQURyRDtBQUFBLFFBRUlDLFVBQVUsR0FBR0gsSUFBSSxHQUFHakIsUUFBUSxDQUFDaUIsSUFBRCxDQUFYLEdBQW9CLEVBRnpDOztBQUlBLFFBQUlHLFVBQUosRUFBZ0I7QUFDZCxjQUFRQSxVQUFSO0FBQ0UsYUFBS2Isa0JBQUw7QUFBeUIsaUJBQU9ELFdBQVA7O0FBQ3pCLGFBQUtFLGFBQUw7QUFBb0IsaUJBQU9QLE1BQVA7O0FBQ3BCLGFBQUtRLGlCQUFMO0FBQXdCLGlCQUFPTixVQUFQOztBQUN4QixhQUFLTyxhQUFMO0FBQW9CLGlCQUFPTixNQUFQOztBQUNwQixhQUFLTyxpQkFBTDtBQUF3QixpQkFBT04sVUFBUDtBQUwxQjtBQU9EOztBQUNELFdBQU9XLE1BQVA7QUFDRCxHQWZEO0FBZ0JEOztBQUVESyxNQUFNLENBQUNDLE9BQVAsR0FBaUJWLE1BQWpCIiwic291cmNlc0NvbnRlbnQiOlsidmFyIERhdGFWaWV3ID0gcmVxdWlyZSgnLi9fRGF0YVZpZXcnKSxcbiAgICBNYXAgPSByZXF1aXJlKCcuL19NYXAnKSxcbiAgICBQcm9taXNlID0gcmVxdWlyZSgnLi9fUHJvbWlzZScpLFxuICAgIFNldCA9IHJlcXVpcmUoJy4vX1NldCcpLFxuICAgIFdlYWtNYXAgPSByZXF1aXJlKCcuL19XZWFrTWFwJyksXG4gICAgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICB0b1NvdXJjZSA9IHJlcXVpcmUoJy4vX3RvU291cmNlJyk7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICBwcm9taXNlVGFnID0gJ1tvYmplY3QgUHJvbWlzZV0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XSc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG52YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xudmFyIGdldFRhZyA9IGJhc2VHZXRUYWc7XG5cbi8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cbmlmICgoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRhVmlld1RhZykgfHxcbiAgICAoTWFwICYmIGdldFRhZyhuZXcgTWFwKSAhPSBtYXBUYWcpIHx8XG4gICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgIChTZXQgJiYgZ2V0VGFnKG5ldyBTZXQpICE9IHNldFRhZykgfHxcbiAgICAoV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXApICE9IHdlYWtNYXBUYWcpKSB7XG4gIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGJhc2VHZXRUYWcodmFsdWUpLFxuICAgICAgICBDdG9yID0gcmVzdWx0ID09IG9iamVjdFRhZyA/IHZhbHVlLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogJyc7XG5cbiAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0VGFnO1xuIl19