c938564a67f01bc9ccaf8d1b622fe7ee
'use strict';

var React = require('react');

var StyleSheet = require('../../StyleSheet/StyleSheet');

var Text = require('../../Text/Text');

var YellowBoxPressable = require('./YellowBoxPressable');

var YellowBoxStyle = require('./YellowBoxStyle');

var YellowBoxInspectorStackFrame = function YellowBoxInspectorStackFrame(props) {
  var frame = props.frame,
      onPress = props.onPress;
  return React.createElement(YellowBoxPressable, {
    backgroundColor: {
      default: YellowBoxStyle.getBackgroundColor(0),
      pressed: YellowBoxStyle.getHighlightColor(1)
    },
    onPress: onPress,
    style: styles.frame
  }, React.createElement(Text, {
    style: styles.frameName
  }, frame.methodName), React.createElement(Text, {
    ellipsizeMode: "middle",
    numberOfLines: 1,
    style: styles.frameLocation
  }, getFrameLocation(frame.file) + ":" + frame.lineNumber + (frame.column == null ? '' : ':' + frame.column)));
};

var getFrameLocation = function getFrameLocation(uri) {
  var queryIndex = uri.indexOf('?');
  var query = queryIndex < 0 ? '' : uri.substr(queryIndex);
  var path = queryIndex < 0 ? uri : uri.substr(0, queryIndex);
  var file = path.substr(path.lastIndexOf('/') + 1);
  return file + query;
};

var styles = StyleSheet.create({
  frame: {
    paddingHorizontal: 12,
    paddingVertical: 4
  },
  frameName: {
    color: YellowBoxStyle.getTextColor(1),
    fontSize: 14,
    includeFontPadding: false,
    lineHeight: 18
  },
  frameLocation: {
    color: YellowBoxStyle.getTextColor(0.7),
    fontSize: 12,
    fontWeight: '300',
    includeFontPadding: false,
    lineHeight: 16
  }
});
module.exports = YellowBoxInspectorStackFrame;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlllbGxvd0JveEluc3BlY3RvclN0YWNrRnJhbWUuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJyZXF1aXJlIiwiU3R5bGVTaGVldCIsIlRleHQiLCJZZWxsb3dCb3hQcmVzc2FibGUiLCJZZWxsb3dCb3hTdHlsZSIsIlllbGxvd0JveEluc3BlY3RvclN0YWNrRnJhbWUiLCJwcm9wcyIsImZyYW1lIiwib25QcmVzcyIsImRlZmF1bHQiLCJnZXRCYWNrZ3JvdW5kQ29sb3IiLCJwcmVzc2VkIiwiZ2V0SGlnaGxpZ2h0Q29sb3IiLCJzdHlsZXMiLCJmcmFtZU5hbWUiLCJtZXRob2ROYW1lIiwiZnJhbWVMb2NhdGlvbiIsImdldEZyYW1lTG9jYXRpb24iLCJmaWxlIiwibGluZU51bWJlciIsImNvbHVtbiIsInVyaSIsInF1ZXJ5SW5kZXgiLCJpbmRleE9mIiwicXVlcnkiLCJzdWJzdHIiLCJwYXRoIiwibGFzdEluZGV4T2YiLCJjcmVhdGUiLCJwYWRkaW5nSG9yaXpvbnRhbCIsInBhZGRpbmdWZXJ0aWNhbCIsImNvbG9yIiwiZ2V0VGV4dENvbG9yIiwiZm9udFNpemUiLCJpbmNsdWRlRm9udFBhZGRpbmciLCJsaW5lSGVpZ2h0IiwiZm9udFdlaWdodCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVVBOztBQUVBLElBQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsSUFBTUMsVUFBVSxHQUFHRCxPQUFPLENBQUMsNkJBQUQsQ0FBMUI7O0FBQ0EsSUFBTUUsSUFBSSxHQUFHRixPQUFPLENBQUMsaUJBQUQsQ0FBcEI7O0FBQ0EsSUFBTUcsa0JBQWtCLEdBQUdILE9BQU8sQ0FBQyxzQkFBRCxDQUFsQzs7QUFDQSxJQUFNSSxjQUFjLEdBQUdKLE9BQU8sQ0FBQyxrQkFBRCxDQUE5Qjs7QUFVQSxJQUFNSyw0QkFBNEIsR0FBRyxTQUEvQkEsNEJBQStCLENBQUNDLEtBQUQsRUFBOEI7QUFBQSxNQUMxREMsS0FEMEQsR0FDeENELEtBRHdDLENBQzFEQyxLQUQwRDtBQUFBLE1BQ25EQyxPQURtRCxHQUN4Q0YsS0FEd0MsQ0FDbkRFLE9BRG1EO0FBR2pFLFNBQ0Usb0JBQUMsa0JBQUQ7QUFDRSxJQUFBLGVBQWUsRUFBRTtBQUNmQyxNQUFBQSxPQUFPLEVBQUVMLGNBQWMsQ0FBQ00sa0JBQWYsQ0FBa0MsQ0FBbEMsQ0FETTtBQUVmQyxNQUFBQSxPQUFPLEVBQUVQLGNBQWMsQ0FBQ1EsaUJBQWYsQ0FBaUMsQ0FBakM7QUFGTSxLQURuQjtBQUtFLElBQUEsT0FBTyxFQUFFSixPQUxYO0FBTUUsSUFBQSxLQUFLLEVBQUVLLE1BQU0sQ0FBQ047QUFOaEIsS0FPRSxvQkFBQyxJQUFEO0FBQU0sSUFBQSxLQUFLLEVBQUVNLE1BQU0sQ0FBQ0M7QUFBcEIsS0FBZ0NQLEtBQUssQ0FBQ1EsVUFBdEMsQ0FQRixFQVFFLG9CQUFDLElBQUQ7QUFDRSxJQUFBLGFBQWEsRUFBQyxRQURoQjtBQUVFLElBQUEsYUFBYSxFQUFFLENBRmpCO0FBR0UsSUFBQSxLQUFLLEVBQUVGLE1BQU0sQ0FBQ0c7QUFIaEIsS0FJTUMsZ0JBQWdCLENBQUNWLEtBQUssQ0FBQ1csSUFBUCxDQUp0QixTQUlzQ1gsS0FBSyxDQUFDWSxVQUo1QyxJQUtJWixLQUFLLENBQUNhLE1BQU4sSUFBZ0IsSUFBaEIsR0FBdUIsRUFBdkIsR0FBNEIsTUFBTWIsS0FBSyxDQUFDYSxNQUw1QyxFQVJGLENBREY7QUFtQkQsQ0F0QkQ7O0FBd0JBLElBQU1ILGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBbUIsQ0FBQ0ksR0FBRCxFQUF5QjtBQUNoRCxNQUFNQyxVQUFVLEdBQUdELEdBQUcsQ0FBQ0UsT0FBSixDQUFZLEdBQVosQ0FBbkI7QUFDQSxNQUFNQyxLQUFLLEdBQUdGLFVBQVUsR0FBRyxDQUFiLEdBQWlCLEVBQWpCLEdBQXNCRCxHQUFHLENBQUNJLE1BQUosQ0FBV0gsVUFBWCxDQUFwQztBQUVBLE1BQU1JLElBQUksR0FBR0osVUFBVSxHQUFHLENBQWIsR0FBaUJELEdBQWpCLEdBQXVCQSxHQUFHLENBQUNJLE1BQUosQ0FBVyxDQUFYLEVBQWNILFVBQWQsQ0FBcEM7QUFDQSxNQUFNSixJQUFJLEdBQUdRLElBQUksQ0FBQ0QsTUFBTCxDQUFZQyxJQUFJLENBQUNDLFdBQUwsQ0FBaUIsR0FBakIsSUFBd0IsQ0FBcEMsQ0FBYjtBQUVBLFNBQU9ULElBQUksR0FBR00sS0FBZDtBQUNELENBUkQ7O0FBVUEsSUFBTVgsTUFBTSxHQUFHWixVQUFVLENBQUMyQixNQUFYLENBQWtCO0FBQy9CckIsRUFBQUEsS0FBSyxFQUFFO0FBQ0xzQixJQUFBQSxpQkFBaUIsRUFBRSxFQURkO0FBRUxDLElBQUFBLGVBQWUsRUFBRTtBQUZaLEdBRHdCO0FBSy9CaEIsRUFBQUEsU0FBUyxFQUFFO0FBQ1RpQixJQUFBQSxLQUFLLEVBQUUzQixjQUFjLENBQUM0QixZQUFmLENBQTRCLENBQTVCLENBREU7QUFFVEMsSUFBQUEsUUFBUSxFQUFFLEVBRkQ7QUFHVEMsSUFBQUEsa0JBQWtCLEVBQUUsS0FIWDtBQUlUQyxJQUFBQSxVQUFVLEVBQUU7QUFKSCxHQUxvQjtBQVcvQm5CLEVBQUFBLGFBQWEsRUFBRTtBQUNiZSxJQUFBQSxLQUFLLEVBQUUzQixjQUFjLENBQUM0QixZQUFmLENBQTRCLEdBQTVCLENBRE07QUFFYkMsSUFBQUEsUUFBUSxFQUFFLEVBRkc7QUFHYkcsSUFBQUEsVUFBVSxFQUFFLEtBSEM7QUFJYkYsSUFBQUEsa0JBQWtCLEVBQUUsS0FKUDtBQUtiQyxJQUFBQSxVQUFVLEVBQUU7QUFMQztBQVhnQixDQUFsQixDQUFmO0FBb0JBRSxNQUFNLENBQUNDLE9BQVAsR0FBaUJqQyw0QkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgU3R5bGVTaGVldCA9IHJlcXVpcmUoJy4uLy4uL1N0eWxlU2hlZXQvU3R5bGVTaGVldCcpO1xuY29uc3QgVGV4dCA9IHJlcXVpcmUoJy4uLy4uL1RleHQvVGV4dCcpO1xuY29uc3QgWWVsbG93Qm94UHJlc3NhYmxlID0gcmVxdWlyZSgnLi9ZZWxsb3dCb3hQcmVzc2FibGUnKTtcbmNvbnN0IFllbGxvd0JveFN0eWxlID0gcmVxdWlyZSgnLi9ZZWxsb3dCb3hTdHlsZScpO1xuXG5pbXBvcnQgdHlwZSB7UHJlc3NFdmVudH0gZnJvbSAnLi4vLi4vVHlwZXMvQ29yZUV2ZW50VHlwZXMnO1xuaW1wb3J0IHR5cGUge1N0YWNrRnJhbWV9IGZyb20gJy4uLy4uL0NvcmUvRGV2dG9vbHMvcGFyc2VFcnJvclN0YWNrJztcblxudHlwZSBQcm9wcyA9ICRSZWFkT25seTx7fFxuICBmcmFtZTogU3RhY2tGcmFtZSxcbiAgb25QcmVzcz86ID8oZXZlbnQ6IFByZXNzRXZlbnQpID0+IHZvaWQsXG58fT47XG5cbmNvbnN0IFllbGxvd0JveEluc3BlY3RvclN0YWNrRnJhbWUgPSAocHJvcHM6IFByb3BzKTogUmVhY3QuTm9kZSA9PiB7XG4gIGNvbnN0IHtmcmFtZSwgb25QcmVzc30gPSBwcm9wcztcblxuICByZXR1cm4gKFxuICAgIDxZZWxsb3dCb3hQcmVzc2FibGVcbiAgICAgIGJhY2tncm91bmRDb2xvcj17e1xuICAgICAgICBkZWZhdWx0OiBZZWxsb3dCb3hTdHlsZS5nZXRCYWNrZ3JvdW5kQ29sb3IoMCksXG4gICAgICAgIHByZXNzZWQ6IFllbGxvd0JveFN0eWxlLmdldEhpZ2hsaWdodENvbG9yKDEpLFxuICAgICAgfX1cbiAgICAgIG9uUHJlc3M9e29uUHJlc3N9XG4gICAgICBzdHlsZT17c3R5bGVzLmZyYW1lfT5cbiAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMuZnJhbWVOYW1lfT57ZnJhbWUubWV0aG9kTmFtZX08L1RleHQ+XG4gICAgICA8VGV4dFxuICAgICAgICBlbGxpcHNpemVNb2RlPVwibWlkZGxlXCJcbiAgICAgICAgbnVtYmVyT2ZMaW5lcz17MX1cbiAgICAgICAgc3R5bGU9e3N0eWxlcy5mcmFtZUxvY2F0aW9ufT5cbiAgICAgICAge2Ake2dldEZyYW1lTG9jYXRpb24oZnJhbWUuZmlsZSl9OiR7ZnJhbWUubGluZU51bWJlcn0ke1xuICAgICAgICAgIGZyYW1lLmNvbHVtbiA9PSBudWxsID8gJycgOiAnOicgKyBmcmFtZS5jb2x1bW5cbiAgICAgICAgfWB9XG4gICAgICA8L1RleHQ+XG4gICAgPC9ZZWxsb3dCb3hQcmVzc2FibGU+XG4gICk7XG59O1xuXG5jb25zdCBnZXRGcmFtZUxvY2F0aW9uID0gKHVyaTogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgY29uc3QgcXVlcnlJbmRleCA9IHVyaS5pbmRleE9mKCc/Jyk7XG4gIGNvbnN0IHF1ZXJ5ID0gcXVlcnlJbmRleCA8IDAgPyAnJyA6IHVyaS5zdWJzdHIocXVlcnlJbmRleCk7XG5cbiAgY29uc3QgcGF0aCA9IHF1ZXJ5SW5kZXggPCAwID8gdXJpIDogdXJpLnN1YnN0cigwLCBxdWVyeUluZGV4KTtcbiAgY29uc3QgZmlsZSA9IHBhdGguc3Vic3RyKHBhdGgubGFzdEluZGV4T2YoJy8nKSArIDEpO1xuXG4gIHJldHVybiBmaWxlICsgcXVlcnk7XG59O1xuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGZyYW1lOiB7XG4gICAgcGFkZGluZ0hvcml6b250YWw6IDEyLFxuICAgIHBhZGRpbmdWZXJ0aWNhbDogNCxcbiAgfSxcbiAgZnJhbWVOYW1lOiB7XG4gICAgY29sb3I6IFllbGxvd0JveFN0eWxlLmdldFRleHRDb2xvcigxKSxcbiAgICBmb250U2l6ZTogMTQsXG4gICAgaW5jbHVkZUZvbnRQYWRkaW5nOiBmYWxzZSxcbiAgICBsaW5lSGVpZ2h0OiAxOCxcbiAgfSxcbiAgZnJhbWVMb2NhdGlvbjoge1xuICAgIGNvbG9yOiBZZWxsb3dCb3hTdHlsZS5nZXRUZXh0Q29sb3IoMC43KSxcbiAgICBmb250U2l6ZTogMTIsXG4gICAgZm9udFdlaWdodDogJzMwMCcsXG4gICAgaW5jbHVkZUZvbnRQYWRkaW5nOiBmYWxzZSxcbiAgICBsaW5lSGVpZ2h0OiAxNixcbiAgfSxcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFllbGxvd0JveEluc3BlY3RvclN0YWNrRnJhbWU7XG4iXX0=