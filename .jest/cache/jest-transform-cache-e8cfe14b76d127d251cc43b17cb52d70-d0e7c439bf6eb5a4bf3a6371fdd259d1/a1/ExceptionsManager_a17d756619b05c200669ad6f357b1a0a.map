{"version":3,"sources":["ExceptionsManager.js"],"names":["INTERNAL_CALLSITES_REGEX","RegExp","join","exceptionID","reportException","e","isFatal","require","ExceptionsManager","parseErrorStack","stack","currentExceptionID","message","jsEngine","reportFatalException","reportSoftException","__DEV__","symbolicateStackTrace","then","prettyStack","stackWithoutInternalCallsites","filter","frame","file","match","updateExceptionMessage","Error","catch","error","console","warn","handleException","_errorOriginal","reactConsoleErrorHandler","apply","arguments","reportErrorsAsExceptions","stringifySafe","str","Array","prototype","map","call","slice","framesToPop","installConsoleErrorReporter","bind","undefined","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nimport type {ExtendedError} from './Devtools/parseErrorStack';\n\nconst INTERNAL_CALLSITES_REGEX = new RegExp(\n  [\n    '/Libraries/Renderer/oss/ReactNativeRenderer-dev\\\\.js$',\n    '/Libraries/BatchedBridge/MessageQueue\\\\.js$',\n  ].join('|'),\n);\n\n/**\n * Handles the developer-visible aspect of errors and exceptions\n */\nlet exceptionID = 0;\nfunction reportException(e: ExtendedError, isFatal: boolean) {\n  const {ExceptionsManager} = require('../BatchedBridge/NativeModules');\n  if (ExceptionsManager) {\n    const parseErrorStack = require('./Devtools/parseErrorStack');\n    const stack = parseErrorStack(e);\n    const currentExceptionID = ++exceptionID;\n    const message =\n      e.jsEngine == null ? e.message : `${e.message}, js engine: ${e.jsEngine}`;\n    if (isFatal) {\n      ExceptionsManager.reportFatalException(\n        message,\n        stack,\n        currentExceptionID,\n      );\n    } else {\n      ExceptionsManager.reportSoftException(message, stack, currentExceptionID);\n    }\n    if (__DEV__) {\n      const symbolicateStackTrace = require('./Devtools/symbolicateStackTrace');\n      symbolicateStackTrace(stack)\n        .then(prettyStack => {\n          if (prettyStack) {\n            const stackWithoutInternalCallsites = prettyStack.filter(\n              frame =>\n                frame.file &&\n                frame.file.match(INTERNAL_CALLSITES_REGEX) === null,\n            );\n            ExceptionsManager.updateExceptionMessage(\n              message,\n              stackWithoutInternalCallsites,\n              currentExceptionID,\n            );\n          } else {\n            throw new Error('The stack is null');\n          }\n        })\n        .catch(error =>\n          console.warn('Unable to symbolicate stack trace: ' + error.message),\n        );\n    }\n  }\n}\n\ndeclare var console: typeof console & {\n  _errorOriginal: Function,\n  reportErrorsAsExceptions: boolean,\n};\n\n/**\n * Logs exceptions to the (native) console and displays them\n */\nfunction handleException(e: Error, isFatal: boolean) {\n  // Workaround for reporting errors caused by `throw 'some string'`\n  // Unfortunately there is no way to figure out the stacktrace in this\n  // case, so if you ended up here trying to trace an error, look for\n  // `throw '<error message>'` somewhere in your codebase.\n  if (!e.message) {\n    e = new Error(e);\n  }\n  if (console._errorOriginal) {\n    console._errorOriginal(e.message);\n  } else {\n    console.error(e.message);\n  }\n  reportException(e, isFatal);\n}\n\nfunction reactConsoleErrorHandler() {\n  console._errorOriginal.apply(console, arguments);\n  if (!console.reportErrorsAsExceptions) {\n    return;\n  }\n\n  if (arguments[0] && arguments[0].stack) {\n    reportException(arguments[0], /* isFatal */ false);\n  } else {\n    const stringifySafe = require('../Utilities/stringifySafe');\n    const str = Array.prototype.map.call(arguments, stringifySafe).join(', ');\n    if (str.slice(0, 10) === '\"Warning: ') {\n      // React warnings use console.error so that a stack trace is shown, but\n      // we don't (currently) want these to show a redbox\n      // (Note: Logic duplicated in polyfills/console.js.)\n      return;\n    }\n    const error: ExtendedError = new Error('console.error: ' + str);\n    error.framesToPop = 1;\n    reportException(error, /* isFatal */ false);\n  }\n}\n\n/**\n * Shows a redbox with stacktrace for all console.error messages.  Disable by\n * setting `console.reportErrorsAsExceptions = false;` in your app.\n */\nfunction installConsoleErrorReporter() {\n  // Enable reportErrorsAsExceptions\n  if (console._errorOriginal) {\n    return; // already installed\n  }\n  // Flow doesn't like it when you set arbitrary values on a global object\n  console._errorOriginal = console.error.bind(console);\n  console.error = reactConsoleErrorHandler;\n  if (console.reportErrorsAsExceptions === undefined) {\n    // Individual apps can disable this\n    // Flow doesn't like it when you set arbitrary values on a global object\n    console.reportErrorsAsExceptions = true;\n  }\n}\n\nmodule.exports = {handleException, installConsoleErrorReporter};\n"]}