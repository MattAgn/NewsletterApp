c18dc81b74679d24b035a977b8e4f1d0
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var ErrorUtils = require('../vendor/core/ErrorUtils');

var Systrace = require('../Performance/Systrace');

var deepFreezeAndThrowOnMutationInDev = require('../Utilities/deepFreezeAndThrowOnMutationInDev');

var invariant = require('invariant');

var stringifySafe = require('../Utilities/stringifySafe');

var TO_JS = 0;
var TO_NATIVE = 1;
var MODULE_IDS = 0;
var METHOD_IDS = 1;
var PARAMS = 2;
var MIN_TIME_BETWEEN_FLUSHES_MS = 5;
var TRACE_TAG_REACT_APPS = 1 << 17;
var DEBUG_INFO_LIMIT = 32;

var MessageQueue = function () {
  function MessageQueue() {
    (0, _classCallCheck2.default)(this, MessageQueue);
    this._lazyCallableModules = {};
    this._queue = [[], [], [], 0];
    this._successCallbacks = {};
    this._failureCallbacks = {};
    this._callID = 0;
    this._lastFlush = 0;
    this._eventLoopStartTime = Date.now();
    this._immediatesCallback = null;

    if (__DEV__) {
      this._debugInfo = {};
      this._remoteModuleTable = {};
      this._remoteMethodTable = {};
    }

    this.callFunctionReturnFlushedQueue = this.callFunctionReturnFlushedQueue.bind(this);
    this.callFunctionReturnResultAndFlushedQueue = this.callFunctionReturnResultAndFlushedQueue.bind(this);
    this.flushedQueue = this.flushedQueue.bind(this);
    this.invokeCallbackAndReturnFlushedQueue = this.invokeCallbackAndReturnFlushedQueue.bind(this);
  }

  (0, _createClass2.default)(MessageQueue, [{
    key: "callFunctionReturnFlushedQueue",
    value: function callFunctionReturnFlushedQueue(module, method, args) {
      var _this = this;

      this.__guard(function () {
        _this.__callFunction(module, method, args);
      });

      return this.flushedQueue();
    }
  }, {
    key: "callFunctionReturnResultAndFlushedQueue",
    value: function callFunctionReturnResultAndFlushedQueue(module, method, args) {
      var _this2 = this;

      var result;

      this.__guard(function () {
        result = _this2.__callFunction(module, method, args);
      });

      return [result, this.flushedQueue()];
    }
  }, {
    key: "invokeCallbackAndReturnFlushedQueue",
    value: function invokeCallbackAndReturnFlushedQueue(cbID, args) {
      var _this3 = this;

      this.__guard(function () {
        _this3.__invokeCallback(cbID, args);
      });

      return this.flushedQueue();
    }
  }, {
    key: "flushedQueue",
    value: function flushedQueue() {
      var _this4 = this;

      this.__guard(function () {
        _this4.__callImmediates();
      });

      var queue = this._queue;
      this._queue = [[], [], [], this._callID];
      return queue[0].length ? queue : null;
    }
  }, {
    key: "getEventLoopRunningTime",
    value: function getEventLoopRunningTime() {
      return Date.now() - this._eventLoopStartTime;
    }
  }, {
    key: "registerCallableModule",
    value: function registerCallableModule(name, module) {
      this._lazyCallableModules[name] = function () {
        return module;
      };
    }
  }, {
    key: "registerLazyCallableModule",
    value: function registerLazyCallableModule(name, factory) {
      var module;
      var getValue = factory;

      this._lazyCallableModules[name] = function () {
        if (getValue) {
          module = getValue();
          getValue = null;
        }

        return module;
      };
    }
  }, {
    key: "getCallableModule",
    value: function getCallableModule(name) {
      var getValue = this._lazyCallableModules[name];
      return getValue ? getValue() : null;
    }
  }, {
    key: "callNativeSyncHook",
    value: function callNativeSyncHook(moduleID, methodID, params, onFail, onSucc) {
      if (__DEV__) {
        invariant(global.nativeCallSyncHook, 'Calling synchronous methods on native ' + 'modules is not supported in Chrome.\n\n Consider providing alternative ' + 'methods to expose this method in debug mode, e.g. by exposing constants ' + 'ahead-of-time.');
      }

      this.processCallbacks(moduleID, methodID, params, onFail, onSucc);
      return global.nativeCallSyncHook(moduleID, methodID, params);
    }
  }, {
    key: "processCallbacks",
    value: function processCallbacks(moduleID, methodID, params, onFail, onSucc) {
      if (onFail || onSucc) {
        if (__DEV__) {
          this._debugInfo[this._callID] = [moduleID, methodID];

          if (this._callID > DEBUG_INFO_LIMIT) {
            delete this._debugInfo[this._callID - DEBUG_INFO_LIMIT];
          }
        }

        onFail && params.push(this._callID << 1);
        onSucc && params.push(this._callID << 1 | 1);
        this._successCallbacks[this._callID] = onSucc;
        this._failureCallbacks[this._callID] = onFail;
      }

      if (__DEV__) {
        global.nativeTraceBeginAsyncFlow && global.nativeTraceBeginAsyncFlow(TRACE_TAG_REACT_APPS, 'native', this._callID);
      }

      this._callID++;
    }
  }, {
    key: "enqueueNativeCall",
    value: function enqueueNativeCall(moduleID, methodID, params, onFail, onSucc) {
      this.processCallbacks(moduleID, methodID, params, onFail, onSucc);

      this._queue[MODULE_IDS].push(moduleID);

      this._queue[METHOD_IDS].push(methodID);

      if (__DEV__) {
        var isValidArgument = function isValidArgument(val) {
          var t = typeof val;

          if (t === 'undefined' || t === 'null' || t === 'boolean' || t === 'string') {
            return true;
          }

          if (t === 'number') {
            return isFinite(val);
          }

          if (t === 'function' || t !== 'object') {
            return false;
          }

          if (Array.isArray(val)) {
            return val.every(isValidArgument);
          }

          for (var k in val) {
            if (typeof val[k] !== 'function' && !isValidArgument(val[k])) {
              return false;
            }
          }

          return true;
        };

        var replacer = function replacer(key, val) {
          var t = typeof val;

          if (t === 'function') {
            return '<<Function ' + val.name + '>>';
          } else if (t === 'number' && !isFinite(val)) {
            return '<<' + val.toString() + '>>';
          } else {
            return val;
          }
        };

        invariant(isValidArgument(params), '%s is not usable as a native method argument', JSON.stringify(params, replacer));
        deepFreezeAndThrowOnMutationInDev(params);
      }

      this._queue[PARAMS].push(params);

      var now = Date.now();

      if (global.nativeFlushQueueImmediate && now - this._lastFlush >= MIN_TIME_BETWEEN_FLUSHES_MS) {
        var queue = this._queue;
        this._queue = [[], [], [], this._callID];
        this._lastFlush = now;
        global.nativeFlushQueueImmediate(queue);
      }

      Systrace.counterEvent('pending_js_to_native_queue', this._queue[0].length);

      if (__DEV__ && this.__spy && isFinite(moduleID)) {
        this.__spy({
          type: TO_NATIVE,
          module: this._remoteModuleTable[moduleID],
          method: this._remoteMethodTable[moduleID][methodID],
          args: params
        });
      } else if (this.__spy) {
        this.__spy({
          type: TO_NATIVE,
          module: moduleID + '',
          method: methodID,
          args: params
        });
      }
    }
  }, {
    key: "createDebugLookup",
    value: function createDebugLookup(moduleID, name, methods) {
      if (__DEV__) {
        this._remoteModuleTable[moduleID] = name;
        this._remoteMethodTable[moduleID] = methods;
      }
    }
  }, {
    key: "setImmediatesCallback",
    value: function setImmediatesCallback(fn) {
      this._immediatesCallback = fn;
    }
  }, {
    key: "__guard",
    value: function __guard(fn) {
      if (this.__shouldPauseOnThrow()) {
        fn();
      } else {
        try {
          fn();
        } catch (error) {
          ErrorUtils.reportFatalError(error);
        }
      }
    }
  }, {
    key: "__shouldPauseOnThrow",
    value: function __shouldPauseOnThrow() {
      return typeof DebuggerInternal !== 'undefined' && DebuggerInternal.shouldPauseOnThrow === true;
    }
  }, {
    key: "__callImmediates",
    value: function __callImmediates() {
      Systrace.beginEvent('JSTimers.callImmediates()');

      if (this._immediatesCallback != null) {
        this._immediatesCallback();
      }

      Systrace.endEvent();
    }
  }, {
    key: "__callFunction",
    value: function __callFunction(module, method, args) {
      this._lastFlush = Date.now();
      this._eventLoopStartTime = this._lastFlush;

      if (__DEV__ || this.__spy) {
        Systrace.beginEvent(module + "." + method + "(" + stringifySafe(args) + ")");
      } else {
        Systrace.beginEvent(module + "." + method + "(...)");
      }

      if (this.__spy) {
        this.__spy({
          type: TO_JS,
          module: module,
          method: method,
          args: args
        });
      }

      var moduleMethods = this.getCallableModule(module);
      invariant(!!moduleMethods, 'Module %s is not a registered callable module (calling %s)', module, method);
      invariant(!!moduleMethods[method], 'Method %s does not exist on module %s', method, module);
      var result = moduleMethods[method].apply(moduleMethods, args);
      Systrace.endEvent();
      return result;
    }
  }, {
    key: "__invokeCallback",
    value: function __invokeCallback(cbID, args) {
      this._lastFlush = Date.now();
      this._eventLoopStartTime = this._lastFlush;
      var callID = cbID >>> 1;
      var isSuccess = cbID & 1;
      var callback = isSuccess ? this._successCallbacks[callID] : this._failureCallbacks[callID];

      if (__DEV__) {
        var debug = this._debugInfo[callID];

        var _module = debug && this._remoteModuleTable[debug[0]];

        var method = debug && this._remoteMethodTable[debug[0]][debug[1]];
        invariant(callback, "No callback found with cbID " + cbID + " and callID " + callID + " for " + (method ? " " + _module + "." + method + " - most likely the callback was already invoked" : "module " + (_module || '<unknown>')) + (". Args: '" + stringifySafe(args) + "'"));
        var profileName = debug ? '<callback for ' + _module + '.' + method + '>' : cbID;

        if (callback && this.__spy) {
          this.__spy({
            type: TO_JS,
            module: null,
            method: profileName,
            args: args
          });
        }

        Systrace.beginEvent("MessageQueue.invokeCallback(" + profileName + ", " + stringifySafe(args) + ")");
      }

      if (!callback) {
        return;
      }

      delete this._successCallbacks[callID];
      delete this._failureCallbacks[callID];
      callback.apply(void 0, (0, _toConsumableArray2.default)(args));

      if (__DEV__) {
        Systrace.endEvent();
      }
    }
  }], [{
    key: "spy",
    value: function spy(spyOrToggle) {
      if (spyOrToggle === true) {
        MessageQueue.prototype.__spy = function (info) {
          console.log((info.type === TO_JS ? 'N->JS' : 'JS->N') + " : " + ("" + (info.module ? info.module + '.' : '') + info.method) + ("(" + JSON.stringify(info.args) + ")"));
        };
      } else if (spyOrToggle === false) {
        MessageQueue.prototype.__spy = null;
      } else {
        MessageQueue.prototype.__spy = spyOrToggle;
      }
    }
  }]);
  return MessageQueue;
}();

module.exports = MessageQueue;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk1lc3NhZ2VRdWV1ZS5qcyJdLCJuYW1lcyI6WyJFcnJvclV0aWxzIiwicmVxdWlyZSIsIlN5c3RyYWNlIiwiZGVlcEZyZWV6ZUFuZFRocm93T25NdXRhdGlvbkluRGV2IiwiaW52YXJpYW50Iiwic3RyaW5naWZ5U2FmZSIsIlRPX0pTIiwiVE9fTkFUSVZFIiwiTU9EVUxFX0lEUyIsIk1FVEhPRF9JRFMiLCJQQVJBTVMiLCJNSU5fVElNRV9CRVRXRUVOX0ZMVVNIRVNfTVMiLCJUUkFDRV9UQUdfUkVBQ1RfQVBQUyIsIkRFQlVHX0lORk9fTElNSVQiLCJNZXNzYWdlUXVldWUiLCJfbGF6eUNhbGxhYmxlTW9kdWxlcyIsIl9xdWV1ZSIsIl9zdWNjZXNzQ2FsbGJhY2tzIiwiX2ZhaWx1cmVDYWxsYmFja3MiLCJfY2FsbElEIiwiX2xhc3RGbHVzaCIsIl9ldmVudExvb3BTdGFydFRpbWUiLCJEYXRlIiwibm93IiwiX2ltbWVkaWF0ZXNDYWxsYmFjayIsIl9fREVWX18iLCJfZGVidWdJbmZvIiwiX3JlbW90ZU1vZHVsZVRhYmxlIiwiX3JlbW90ZU1ldGhvZFRhYmxlIiwiY2FsbEZ1bmN0aW9uUmV0dXJuRmx1c2hlZFF1ZXVlIiwiYmluZCIsImNhbGxGdW5jdGlvblJldHVyblJlc3VsdEFuZEZsdXNoZWRRdWV1ZSIsImZsdXNoZWRRdWV1ZSIsImludm9rZUNhbGxiYWNrQW5kUmV0dXJuRmx1c2hlZFF1ZXVlIiwibW9kdWxlIiwibWV0aG9kIiwiYXJncyIsIl9fZ3VhcmQiLCJfX2NhbGxGdW5jdGlvbiIsInJlc3VsdCIsImNiSUQiLCJfX2ludm9rZUNhbGxiYWNrIiwiX19jYWxsSW1tZWRpYXRlcyIsInF1ZXVlIiwibGVuZ3RoIiwibmFtZSIsImZhY3RvcnkiLCJnZXRWYWx1ZSIsIm1vZHVsZUlEIiwibWV0aG9kSUQiLCJwYXJhbXMiLCJvbkZhaWwiLCJvblN1Y2MiLCJnbG9iYWwiLCJuYXRpdmVDYWxsU3luY0hvb2siLCJwcm9jZXNzQ2FsbGJhY2tzIiwicHVzaCIsIm5hdGl2ZVRyYWNlQmVnaW5Bc3luY0Zsb3ciLCJpc1ZhbGlkQXJndW1lbnQiLCJ2YWwiLCJ0IiwiaXNGaW5pdGUiLCJBcnJheSIsImlzQXJyYXkiLCJldmVyeSIsImsiLCJyZXBsYWNlciIsImtleSIsInRvU3RyaW5nIiwiSlNPTiIsInN0cmluZ2lmeSIsIm5hdGl2ZUZsdXNoUXVldWVJbW1lZGlhdGUiLCJjb3VudGVyRXZlbnQiLCJfX3NweSIsInR5cGUiLCJtZXRob2RzIiwiZm4iLCJfX3Nob3VsZFBhdXNlT25UaHJvdyIsImVycm9yIiwicmVwb3J0RmF0YWxFcnJvciIsIkRlYnVnZ2VySW50ZXJuYWwiLCJzaG91bGRQYXVzZU9uVGhyb3ciLCJiZWdpbkV2ZW50IiwiZW5kRXZlbnQiLCJtb2R1bGVNZXRob2RzIiwiZ2V0Q2FsbGFibGVNb2R1bGUiLCJhcHBseSIsImNhbGxJRCIsImlzU3VjY2VzcyIsImNhbGxiYWNrIiwiZGVidWciLCJwcm9maWxlTmFtZSIsInNweU9yVG9nZ2xlIiwicHJvdG90eXBlIiwiaW5mbyIsImNvbnNvbGUiLCJsb2ciLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFVQTs7Ozs7Ozs7OztBQUVBLElBQU1BLFVBQVUsR0FBR0MsT0FBTyxDQUFDLDJCQUFELENBQTFCOztBQUNBLElBQU1DLFFBQVEsR0FBR0QsT0FBTyxDQUFDLHlCQUFELENBQXhCOztBQUVBLElBQU1FLGlDQUFpQyxHQUFHRixPQUFPLENBQUMsZ0RBQUQsQ0FBakQ7O0FBQ0EsSUFBTUcsU0FBUyxHQUFHSCxPQUFPLENBQUMsV0FBRCxDQUF6Qjs7QUFDQSxJQUFNSSxhQUFhLEdBQUdKLE9BQU8sQ0FBQyw0QkFBRCxDQUE3Qjs7QUFTQSxJQUFNSyxLQUFLLEdBQUcsQ0FBZDtBQUNBLElBQU1DLFNBQVMsR0FBRyxDQUFsQjtBQUVBLElBQU1DLFVBQVUsR0FBRyxDQUFuQjtBQUNBLElBQU1DLFVBQVUsR0FBRyxDQUFuQjtBQUNBLElBQU1DLE1BQU0sR0FBRyxDQUFmO0FBQ0EsSUFBTUMsMkJBQTJCLEdBQUcsQ0FB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YW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBFcnJvclV0aWxzID0gcmVxdWlyZSgnLi4vdmVuZG9yL2NvcmUvRXJyb3JVdGlscycpO1xuY29uc3QgU3lzdHJhY2UgPSByZXF1aXJlKCcuLi9QZXJmb3JtYW5jZS9TeXN0cmFjZScpO1xuXG5jb25zdCBkZWVwRnJlZXplQW5kVGhyb3dPbk11dGF0aW9uSW5EZXYgPSByZXF1aXJlKCcuLi9VdGlsaXRpZXMvZGVlcEZyZWV6ZUFuZFRocm93T25NdXRhdGlvbkluRGV2Jyk7XG5jb25zdCBpbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcbmNvbnN0IHN0cmluZ2lmeVNhZmUgPSByZXF1aXJlKCcuLi9VdGlsaXRpZXMvc3RyaW5naWZ5U2FmZScpO1xuXG5leHBvcnQgdHlwZSBTcHlEYXRhID0ge1xuICB0eXBlOiBudW1iZXIsXG4gIG1vZHVsZTogP3N0cmluZyxcbiAgbWV0aG9kOiBzdHJpbmcgfCBudW1iZXIsXG4gIGFyZ3M6IGFueVtdLFxufTtcblxuY29uc3QgVE9fSlMgPSAwO1xuY29uc3QgVE9fTkFUSVZFID0gMTtcblxuY29uc3QgTU9EVUxFX0lEUyA9IDA7XG5jb25zdCBNRVRIT0RfSURTID0gMTtcbmNvbnN0IFBBUkFNUyA9IDI7XG5jb25zdCBNSU5fVElNRV9CRVRXRUVOX0ZMVVNIRVNfTVMgPSA1O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZVxuY29uc3QgVFJBQ0VfVEFHX1JFQUNUX0FQUFMgPSAxIDw8IDE3O1xuXG5jb25zdCBERUJVR19JTkZPX0xJTUlUID0gMzI7XG5cbmNsYXNzIE1lc3NhZ2VRdWV1ZSB7XG4gIF9sYXp5Q2FsbGFibGVNb2R1bGVzOiB7W2tleTogc3RyaW5nXTogKHZvaWQpID0+IE9iamVjdH07XG4gIF9xdWV1ZTogW251bWJlcltdLCBudW1iZXJbXSwgYW55W10sIG51bWJlcl07XG4gIF9zdWNjZXNzQ2FsbGJhY2tzOiB7W2tleTogbnVtYmVyXTogP0Z1bmN0aW9ufTtcbiAgX2ZhaWx1cmVDYWxsYmFja3M6IHtba2V5OiBudW1iZXJdOiA/RnVuY3Rpb259O1xuICBfY2FsbElEOiBudW1iZXI7XG4gIF9sYXN0Rmx1c2g6IG51bWJlcjtcbiAgX2V2ZW50TG9vcFN0YXJ0VGltZTogbnVtYmVyO1xuICBfaW1tZWRpYXRlc0NhbGxiYWNrOiA/KCkgPT4gdm9pZDtcblxuICBfZGVidWdJbmZvOiB7W251bWJlcl06IFtudW1iZXIsIG51bWJlcl19O1xuICBfcmVtb3RlTW9kdWxlVGFibGU6IHtbbnVtYmVyXTogc3RyaW5nfTtcbiAgX3JlbW90ZU1ldGhvZFRhYmxlOiB7W251bWJlcl06IHN0cmluZ1tdfTtcblxuICBfX3NweTogPyhkYXRhOiBTcHlEYXRhKSA9PiB2b2lkO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2xhenlDYWxsYWJsZU1vZHVsZXMgPSB7fTtcbiAgICB0aGlzLl9xdWV1ZSA9IFtbXSwgW10sIFtdLCAwXTtcbiAgICB0aGlzLl9zdWNjZXNzQ2FsbGJhY2tzID0ge307XG4gICAgdGhpcy5fZmFpbHVyZUNhbGxiYWNrcyA9IHt9O1xuICAgIHRoaXMuX2NhbGxJRCA9IDA7XG4gICAgdGhpcy5fbGFzdEZsdXNoID0gMDtcbiAgICB0aGlzLl9ldmVudExvb3BTdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIHRoaXMuX2ltbWVkaWF0ZXNDYWxsYmFjayA9IG51bGw7XG5cbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgdGhpcy5fZGVidWdJbmZvID0ge307XG4gICAgICB0aGlzLl9yZW1vdGVNb2R1bGVUYWJsZSA9IHt9O1xuICAgICAgdGhpcy5fcmVtb3RlTWV0aG9kVGFibGUgPSB7fTtcbiAgICB9XG5cbiAgICAodGhpczogYW55KS5jYWxsRnVuY3Rpb25SZXR1cm5GbHVzaGVkUXVldWUgPSB0aGlzLmNhbGxGdW5jdGlvblJldHVybkZsdXNoZWRRdWV1ZS5iaW5kKFxuICAgICAgdGhpcyxcbiAgICApO1xuICAgICh0aGlzOiBhbnkpLmNhbGxGdW5jdGlvblJldHVyblJlc3VsdEFuZEZsdXNoZWRRdWV1ZSA9IHRoaXMuY2FsbEZ1bmN0aW9uUmV0dXJuUmVzdWx0QW5kRmx1c2hlZFF1ZXVlLmJpbmQoXG4gICAgICB0aGlzLFxuICAgICk7XG4gICAgKHRoaXM6IGFueSkuZmx1c2hlZFF1ZXVlID0gdGhpcy5mbHVzaGVkUXVldWUuYmluZCh0aGlzKTtcbiAgICAodGhpczogYW55KS5pbnZva2VDYWxsYmFja0FuZFJldHVybkZsdXNoZWRRdWV1ZSA9IHRoaXMuaW52b2tlQ2FsbGJhY2tBbmRSZXR1cm5GbHVzaGVkUXVldWUuYmluZChcbiAgICAgIHRoaXMsXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdWJsaWMgQVBJc1xuICAgKi9cblxuICBzdGF0aWMgc3B5KHNweU9yVG9nZ2xlOiBib29sZWFuIHwgKChkYXRhOiBTcHlEYXRhKSA9PiB2b2lkKSkge1xuICAgIGlmIChzcHlPclRvZ2dsZSA9PT0gdHJ1ZSkge1xuICAgICAgTWVzc2FnZVF1ZXVlLnByb3RvdHlwZS5fX3NweSA9IGluZm8gPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICBgJHtpbmZvLnR5cGUgPT09IFRPX0pTID8gJ04tPkpTJyA6ICdKUy0+Tid9IDogYCArXG4gICAgICAgICAgICBgJHtpbmZvLm1vZHVsZSA/IGluZm8ubW9kdWxlICsgJy4nIDogJyd9JHtpbmZvLm1ldGhvZH1gICtcbiAgICAgICAgICAgIGAoJHtKU09OLnN0cmluZ2lmeShpbmZvLmFyZ3MpfSlgLFxuICAgICAgICApO1xuICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKHNweU9yVG9nZ2xlID09PSBmYWxzZSkge1xuICAgICAgTWVzc2FnZVF1ZXVlLnByb3RvdHlwZS5fX3NweSA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIE1lc3NhZ2VRdWV1ZS5wcm90b3R5cGUuX19zcHkgPSBzcHlPclRvZ2dsZTtcbiAgICB9XG4gIH1cblxuICBjYWxsRnVuY3Rpb25SZXR1cm5GbHVzaGVkUXVldWUobW9kdWxlOiBzdHJpbmcsIG1ldGhvZDogc3RyaW5nLCBhcmdzOiBhbnlbXSkge1xuICAgIHRoaXMuX19ndWFyZCgoKSA9PiB7XG4gICAgICB0aGlzLl9fY2FsbEZ1bmN0aW9uKG1vZHVsZSwgbWV0aG9kLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzLmZsdXNoZWRRdWV1ZSgpO1xuICB9XG5cbiAgY2FsbEZ1bmN0aW9uUmV0dXJuUmVzdWx0QW5kRmx1c2hlZFF1ZXVlKFxuICAgIG1vZHVsZTogc3RyaW5nLFxuICAgIG1ldGhvZDogc3RyaW5nLFxuICAgIGFyZ3M6IGFueVtdLFxuICApIHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIHRoaXMuX19ndWFyZCgoKSA9PiB7XG4gICAgICByZXN1bHQgPSB0aGlzLl9fY2FsbEZ1bmN0aW9uKG1vZHVsZSwgbWV0aG9kLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBbcmVzdWx0LCB0aGlzLmZsdXNoZWRRdWV1ZSgpXTtcbiAgfVxuXG4gIGludm9rZUNhbGxiYWNrQW5kUmV0dXJuRmx1c2hlZFF1ZXVlKGNiSUQ6IG51bWJlciwgYXJnczogYW55W10pIHtcbiAgICB0aGlzLl9fZ3VhcmQoKCkgPT4ge1xuICAgICAgdGhpcy5fX2ludm9rZUNhbGxiYWNrKGNiSUQsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXMuZmx1c2hlZFF1ZXVlKCk7XG4gIH1cblxuICBmbHVzaGVkUXVldWUoKSB7XG4gICAgdGhpcy5fX2d1YXJkKCgpID0+IHtcbiAgICAgIHRoaXMuX19jYWxsSW1tZWRpYXRlcygpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgcXVldWUgPSB0aGlzLl9xdWV1ZTtcbiAgICB0aGlzLl9xdWV1ZSA9IFtbXSwgW10sIFtdLCB0aGlzLl9jYWxsSURdO1xuICAgIHJldHVybiBxdWV1ZVswXS5sZW5ndGggPyBxdWV1ZSA6IG51bGw7XG4gIH1cblxuICBnZXRFdmVudExvb3BSdW5uaW5nVGltZSgpIHtcbiAgICByZXR1cm4gRGF0ZS5ub3coKSAtIHRoaXMuX2V2ZW50TG9vcFN0YXJ0VGltZTtcbiAgfVxuXG4gIHJlZ2lzdGVyQ2FsbGFibGVNb2R1bGUobmFtZTogc3RyaW5nLCBtb2R1bGU6IE9iamVjdCkge1xuICAgIHRoaXMuX2xhenlDYWxsYWJsZU1vZHVsZXNbbmFtZV0gPSAoKSA9PiBtb2R1bGU7XG4gIH1cblxuICByZWdpc3RlckxhenlDYWxsYWJsZU1vZHVsZShuYW1lOiBzdHJpbmcsIGZhY3Rvcnk6IHZvaWQgPT4gT2JqZWN0KSB7XG4gICAgbGV0IG1vZHVsZTogT2JqZWN0O1xuICAgIGxldCBnZXRWYWx1ZTogPyh2b2lkKSA9PiBPYmplY3QgPSBmYWN0b3J5O1xuICAgIHRoaXMuX2xhenlDYWxsYWJsZU1vZHVsZXNbbmFtZV0gPSAoKSA9PiB7XG4gICAgICBpZiAoZ2V0VmFsdWUpIHtcbiAgICAgICAgbW9kdWxlID0gZ2V0VmFsdWUoKTtcbiAgICAgICAgZ2V0VmFsdWUgPSBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1vZHVsZTtcbiAgICB9O1xuICB9XG5cbiAgZ2V0Q2FsbGFibGVNb2R1bGUobmFtZTogc3RyaW5nKSB7XG4gICAgY29uc3QgZ2V0VmFsdWUgPSB0aGlzLl9sYXp5Q2FsbGFibGVNb2R1bGVzW25hbWVdO1xuICAgIHJldHVybiBnZXRWYWx1ZSA/IGdldFZhbHVlKCkgOiBudWxsO1xuICB9XG5cbiAgY2FsbE5hdGl2ZVN5bmNIb29rKFxuICAgIG1vZHVsZUlEOiBudW1iZXIsXG4gICAgbWV0aG9kSUQ6IG51bWJlcixcbiAgICBwYXJhbXM6IGFueVtdLFxuICAgIG9uRmFpbDogP0Z1bmN0aW9uLFxuICAgIG9uU3VjYzogP0Z1bmN0aW9uLFxuICApIHtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBnbG9iYWwubmF0aXZlQ2FsbFN5bmNIb29rLFxuICAgICAgICAnQ2FsbGluZyBzeW5jaHJvbm91cyBtZXRob2RzIG9uIG5hdGl2ZSAnICtcbiAgICAgICAgICAnbW9kdWxlcyBpcyBub3Qgc3VwcG9ydGVkIGluIENocm9tZS5cXG5cXG4gQ29uc2lkZXIgcHJvdmlkaW5nIGFsdGVybmF0aXZlICcgK1xuICAgICAgICAgICdtZXRob2RzIHRvIGV4cG9zZSB0aGlzIG1ldGhvZCBpbiBkZWJ1ZyBtb2RlLCBlLmcuIGJ5IGV4cG9zaW5nIGNvbnN0YW50cyAnICtcbiAgICAgICAgICAnYWhlYWQtb2YtdGltZS4nLFxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5wcm9jZXNzQ2FsbGJhY2tzKG1vZHVsZUlELCBtZXRob2RJRCwgcGFyYW1zLCBvbkZhaWwsIG9uU3VjYyk7XG4gICAgcmV0dXJuIGdsb2JhbC5uYXRpdmVDYWxsU3luY0hvb2sobW9kdWxlSUQsIG1ldGhvZElELCBwYXJhbXMpO1xuICB9XG5cbiAgcHJvY2Vzc0NhbGxiYWNrcyhcbiAgICBtb2R1bGVJRDogbnVtYmVyLFxuICAgIG1ldGhvZElEOiBudW1iZXIsXG4gICAgcGFyYW1zOiBhbnlbXSxcbiAgICBvbkZhaWw6ID9GdW5jdGlvbixcbiAgICBvblN1Y2M6ID9GdW5jdGlvbixcbiAgKSB7XG4gICAgaWYgKG9uRmFpbCB8fCBvblN1Y2MpIHtcbiAgICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgIHRoaXMuX2RlYnVnSW5mb1t0aGlzLl9jYWxsSURdID0gW21vZHVsZUlELCBtZXRob2RJRF07XG4gICAgICAgIGlmICh0aGlzLl9jYWxsSUQgPiBERUJVR19JTkZPX0xJTUlUKSB7XG4gICAgICAgICAgZGVsZXRlIHRoaXMuX2RlYnVnSW5mb1t0aGlzLl9jYWxsSUQgLSBERUJVR19JTkZPX0xJTUlUXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gRW5jb2RlIGNhbGxJRHMgaW50byBwYWlycyBvZiBjYWxsYmFjayBpZGVudGlmaWVycyBieSBzaGlmdGluZyBsZWZ0IGFuZCB1c2luZyB0aGUgcmlnaHRtb3N0IGJpdFxuICAgICAgLy8gdG8gaW5kaWNhdGUgZmFpbCAoMCkgb3Igc3VjY2VzcyAoMSlcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG4gICAgICBvbkZhaWwgJiYgcGFyYW1zLnB1c2godGhpcy5fY2FsbElEIDw8IDEpO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcbiAgICAgIG9uU3VjYyAmJiBwYXJhbXMucHVzaCgodGhpcy5fY2FsbElEIDw8IDEpIHwgMSk7XG4gICAgICB0aGlzLl9zdWNjZXNzQ2FsbGJhY2tzW3RoaXMuX2NhbGxJRF0gPSBvblN1Y2M7XG4gICAgICB0aGlzLl9mYWlsdXJlQ2FsbGJhY2tzW3RoaXMuX2NhbGxJRF0gPSBvbkZhaWw7XG4gICAgfVxuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICBnbG9iYWwubmF0aXZlVHJhY2VCZWdpbkFzeW5jRmxvdyAmJlxuICAgICAgICBnbG9iYWwubmF0aXZlVHJhY2VCZWdpbkFzeW5jRmxvdyhcbiAgICAgICAgICBUUkFDRV9UQUdfUkVBQ1RfQVBQUyxcbiAgICAgICAgICAnbmF0aXZlJyxcbiAgICAgICAgICB0aGlzLl9jYWxsSUQsXG4gICAgICAgICk7XG4gICAgfVxuICAgIHRoaXMuX2NhbGxJRCsrO1xuICB9XG5cbiAgZW5xdWV1ZU5hdGl2ZUNhbGwoXG4gICAgbW9kdWxlSUQ6IG51bWJlcixcbiAgICBtZXRob2RJRDogbnVtYmVyLFxuICAgIHBhcmFtczogYW55W10sXG4gICAgb25GYWlsOiA/RnVuY3Rpb24sXG4gICAgb25TdWNjOiA/RnVuY3Rpb24sXG4gICkge1xuICAgIHRoaXMucHJvY2Vzc0NhbGxiYWNrcyhtb2R1bGVJRCwgbWV0aG9kSUQsIHBhcmFtcywgb25GYWlsLCBvblN1Y2MpO1xuXG4gICAgdGhpcy5fcXVldWVbTU9EVUxFX0lEU10ucHVzaChtb2R1bGVJRCk7XG4gICAgdGhpcy5fcXVldWVbTUVUSE9EX0lEU10ucHVzaChtZXRob2RJRCk7XG5cbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgLy8gVmFsaWRhdGUgdGhhdCBwYXJhbWV0ZXJzIHBhc3NlZCBvdmVyIHRoZSBicmlkZ2UgYXJlXG4gICAgICAvLyBmb2xseS1jb252ZXJ0aWJsZS4gIEFzIGEgc3BlY2lhbCBjYXNlLCBpZiBhIHByb3AgdmFsdWUgaXMgYVxuICAgICAgLy8gZnVuY3Rpb24gaXQgaXMgcGVybWl0dGVkIGhlcmUsIGFuZCBzcGVjaWFsLWNhc2VkIGluIHRoZVxuICAgICAgLy8gY29udmVyc2lvbi5cbiAgICAgIGNvbnN0IGlzVmFsaWRBcmd1bWVudCA9IHZhbCA9PiB7XG4gICAgICAgIGNvbnN0IHQgPSB0eXBlb2YgdmFsO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgdCA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgICAgICB0ID09PSAnbnVsbCcgfHxcbiAgICAgICAgICB0ID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgICB0ID09PSAnc3RyaW5nJ1xuICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICByZXR1cm4gaXNGaW5pdGUodmFsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodCA9PT0gJ2Z1bmN0aW9uJyB8fCB0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbC5ldmVyeShpc1ZhbGlkQXJndW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3QgayBpbiB2YWwpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHZhbFtrXSAhPT0gJ2Z1bmN0aW9uJyAmJiAhaXNWYWxpZEFyZ3VtZW50KHZhbFtrXSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9O1xuXG4gICAgICAvLyBSZXBsYWNlbWVudCBhbGxvd3Mgbm9ybWFsbHkgbm9uLUpTT04tY29udmVydGlibGUgdmFsdWVzIHRvIGJlXG4gICAgICAvLyBzZWVuLiAgVGhlcmUgaXMgYW1iaWd1aXR5IHdpdGggc3RyaW5nIHZhbHVlcywgYnV0IGluIGNvbnRleHQsXG4gICAgICAvLyBpdCBzaG91bGQgYXQgbGVhc3QgYmUgYSBzdHJvbmcgaGludC5cbiAgICAgIGNvbnN0IHJlcGxhY2VyID0gKGtleSwgdmFsKSA9PiB7XG4gICAgICAgIGNvbnN0IHQgPSB0eXBlb2YgdmFsO1xuICAgICAgICBpZiAodCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHJldHVybiAnPDxGdW5jdGlvbiAnICsgdmFsLm5hbWUgKyAnPj4nO1xuICAgICAgICB9IGVsc2UgaWYgKHQgPT09ICdudW1iZXInICYmICFpc0Zpbml0ZSh2YWwpKSB7XG4gICAgICAgICAgcmV0dXJuICc8PCcgKyB2YWwudG9TdHJpbmcoKSArICc+Pic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgLy8gTm90ZSB0aGF0IEpTT04uc3RyaW5naWZ5XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIGlzVmFsaWRBcmd1bWVudChwYXJhbXMpLFxuICAgICAgICAnJXMgaXMgbm90IHVzYWJsZSBhcyBhIG5hdGl2ZSBtZXRob2QgYXJndW1lbnQnLFxuICAgICAgICBKU09OLnN0cmluZ2lmeShwYXJhbXMsIHJlcGxhY2VyKSxcbiAgICAgICk7XG5cbiAgICAgIC8vIFRoZSBwYXJhbXMgb2JqZWN0IHNob3VsZCBub3QgYmUgbXV0YXRlZCBhZnRlciBiZWluZyBxdWV1ZWRcbiAgICAgIGRlZXBGcmVlemVBbmRUaHJvd09uTXV0YXRpb25JbkRldigocGFyYW1zOiBhbnkpKTtcbiAgICB9XG4gICAgdGhpcy5fcXVldWVbUEFSQU1TXS5wdXNoKHBhcmFtcyk7XG5cbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuICAgIGlmIChcbiAgICAgIGdsb2JhbC5uYXRpdmVGbHVzaFF1ZXVlSW1tZWRpYXRlICYmXG4gICAgICBub3cgLSB0aGlzLl9sYXN0Rmx1c2ggPj0gTUlOX1RJTUVfQkVUV0VFTl9GTFVTSEVTX01TXG4gICAgKSB7XG4gICAgICBjb25zdCBxdWV1ZSA9IHRoaXMuX3F1ZXVlO1xuICAgICAgdGhpcy5fcXVldWUgPSBbW10sIFtdLCBbXSwgdGhpcy5fY2FsbElEXTtcbiAgICAgIHRoaXMuX2xhc3RGbHVzaCA9IG5vdztcbiAgICAgIGdsb2JhbC5uYXRpdmVGbHVzaFF1ZXVlSW1tZWRpYXRlKHF1ZXVlKTtcbiAgICB9XG4gICAgU3lzdHJhY2UuY291bnRlckV2ZW50KCdwZW5kaW5nX2pzX3RvX25hdGl2ZV9xdWV1ZScsIHRoaXMuX3F1ZXVlWzBdLmxlbmd0aCk7XG4gICAgaWYgKF9fREVWX18gJiYgdGhpcy5fX3NweSAmJiBpc0Zpbml0ZShtb2R1bGVJRCkpIHtcbiAgICAgIHRoaXMuX19zcHkoe1xuICAgICAgICB0eXBlOiBUT19OQVRJVkUsXG4gICAgICAgIG1vZHVsZTogdGhpcy5fcmVtb3RlTW9kdWxlVGFibGVbbW9kdWxlSURdLFxuICAgICAgICBtZXRob2Q6IHRoaXMuX3JlbW90ZU1ldGhvZFRhYmxlW21vZHVsZUlEXVttZXRob2RJRF0sXG4gICAgICAgIGFyZ3M6IHBhcmFtcyxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fX3NweSkge1xuICAgICAgdGhpcy5fX3NweSh7XG4gICAgICAgIHR5cGU6IFRPX05BVElWRSxcbiAgICAgICAgbW9kdWxlOiBtb2R1bGVJRCArICcnLFxuICAgICAgICBtZXRob2Q6IG1ldGhvZElELFxuICAgICAgICBhcmdzOiBwYXJhbXMsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBjcmVhdGVEZWJ1Z0xvb2t1cChtb2R1bGVJRDogbnVtYmVyLCBuYW1lOiBzdHJpbmcsIG1ldGhvZHM6IHN0cmluZ1tdKSB7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgIHRoaXMuX3JlbW90ZU1vZHVsZVRhYmxlW21vZHVsZUlEXSA9IG5hbWU7XG4gICAgICB0aGlzLl9yZW1vdGVNZXRob2RUYWJsZVttb2R1bGVJRF0gPSBtZXRob2RzO1xuICAgIH1cbiAgfVxuXG4gIC8vIEZvciBKU1RpbWVycyB0byByZWdpc3RlciBpdHMgY2FsbGJhY2suIE90aGVyd2lzZSBhIGNpcmN1bGFyIGRlcGVuZGVuY3lcbiAgLy8gYmV0d2VlbiBtb2R1bGVzIGlzIGludHJvZHVjZWQuIE5vdGUgdGhhdCBvbmx5IG9uZSBjYWxsYmFjayBtYXkgYmVcbiAgLy8gcmVnaXN0ZXJlZCBhdCBhIHRpbWUuXG4gIHNldEltbWVkaWF0ZXNDYWxsYmFjayhmbjogKCkgPT4gdm9pZCkge1xuICAgIHRoaXMuX2ltbWVkaWF0ZXNDYWxsYmFjayA9IGZuO1xuICB9XG5cbiAgLyoqXG4gICAqIFByaXZhdGUgbWV0aG9kc1xuICAgKi9cblxuICBfX2d1YXJkKGZuOiAoKSA9PiB2b2lkKSB7XG4gICAgaWYgKHRoaXMuX19zaG91bGRQYXVzZU9uVGhyb3coKSkge1xuICAgICAgZm4oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIEVycm9yVXRpbHMucmVwb3J0RmF0YWxFcnJvcihlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gTWVzc2FnZVF1ZXVlIGluc3RhbGxzIGEgZ2xvYmFsIGhhbmRsZXIgdG8gY2F0Y2ggYWxsIGV4Y2VwdGlvbnMgd2hlcmUgSlMgdXNlcnMgY2FuIHJlZ2lzdGVyIHRoZWlyIG93biBiZWhhdmlvclxuICAvLyBUaGlzIGhhbmRsZXIgbWFrZXMgYWxsIGV4Y2VwdGlvbnMgdG8gYmUgcHJvcGFnYXRlZCBmcm9tIGluc2lkZSBNZXNzYWdlUXVldWUgcmF0aGVyIHRoYW4gYnkgdGhlIFZNIGF0IHRoZWlyIG9yaWdpblxuICAvLyBUaGlzIG1ha2VzIHN0YWNrdHJhY2VzIHRvIGJlIHBsYWNlZCBhdCBNZXNzYWdlUXVldWUgcmF0aGVyIHRoYW4gYXQgd2hlcmUgdGhleSB3ZXJlIGxhdW5jaGVkXG4gIC8vIFRoZSBwYXJhbWV0ZXIgRGVidWdnZXJJbnRlcm5hbC5zaG91bGRQYXVzZU9uVGhyb3cgaXMgdXNlZCB0byBjaGVjayBiZWZvcmUgY2F0Y2hpbmcgYWxsIGV4Y2VwdGlvbnMgYW5kXG4gIC8vIGNhbiBiZSBjb25maWd1cmVkIGJ5IHRoZSBWTSBvciBhbnkgSW5zcGVjdG9yXG4gIF9fc2hvdWxkUGF1c2VPblRocm93KCkge1xuICAgIHJldHVybiAoXG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICB0eXBlb2YgRGVidWdnZXJJbnRlcm5hbCAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgIERlYnVnZ2VySW50ZXJuYWwuc2hvdWxkUGF1c2VPblRocm93ID09PSB0cnVlIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiAgICApO1xuICB9XG5cbiAgX19jYWxsSW1tZWRpYXRlcygpIHtcbiAgICBTeXN0cmFjZS5iZWdpbkV2ZW50KCdKU1RpbWVycy5jYWxsSW1tZWRpYXRlcygpJyk7XG4gICAgaWYgKHRoaXMuX2ltbWVkaWF0ZXNDYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICB0aGlzLl9pbW1lZGlhdGVzQ2FsbGJhY2soKTtcbiAgICB9XG4gICAgU3lzdHJhY2UuZW5kRXZlbnQoKTtcbiAgfVxuXG4gIF9fY2FsbEZ1bmN0aW9uKG1vZHVsZTogc3RyaW5nLCBtZXRob2Q6IHN0cmluZywgYXJnczogYW55W10pOiBhbnkge1xuICAgIHRoaXMuX2xhc3RGbHVzaCA9IERhdGUubm93KCk7XG4gICAgdGhpcy5fZXZlbnRMb29wU3RhcnRUaW1lID0gdGhpcy5fbGFzdEZsdXNoO1xuICAgIGlmIChfX0RFVl9fIHx8IHRoaXMuX19zcHkpIHtcbiAgICAgIFN5c3RyYWNlLmJlZ2luRXZlbnQoYCR7bW9kdWxlfS4ke21ldGhvZH0oJHtzdHJpbmdpZnlTYWZlKGFyZ3MpfSlgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgU3lzdHJhY2UuYmVnaW5FdmVudChgJHttb2R1bGV9LiR7bWV0aG9kfSguLi4pYCk7XG4gICAgfVxuICAgIGlmICh0aGlzLl9fc3B5KSB7XG4gICAgICB0aGlzLl9fc3B5KHt0eXBlOiBUT19KUywgbW9kdWxlLCBtZXRob2QsIGFyZ3N9KTtcbiAgICB9XG4gICAgY29uc3QgbW9kdWxlTWV0aG9kcyA9IHRoaXMuZ2V0Q2FsbGFibGVNb2R1bGUobW9kdWxlKTtcbiAgICBpbnZhcmlhbnQoXG4gICAgICAhIW1vZHVsZU1ldGhvZHMsXG4gICAgICAnTW9kdWxlICVzIGlzIG5vdCBhIHJlZ2lzdGVyZWQgY2FsbGFibGUgbW9kdWxlIChjYWxsaW5nICVzKScsXG4gICAgICBtb2R1bGUsXG4gICAgICBtZXRob2QsXG4gICAgKTtcbiAgICBpbnZhcmlhbnQoXG4gICAgICAhIW1vZHVsZU1ldGhvZHNbbWV0aG9kXSxcbiAgICAgICdNZXRob2QgJXMgZG9lcyBub3QgZXhpc3Qgb24gbW9kdWxlICVzJyxcbiAgICAgIG1ldGhvZCxcbiAgICAgIG1vZHVsZSxcbiAgICApO1xuICAgIGNvbnN0IHJlc3VsdCA9IG1vZHVsZU1ldGhvZHNbbWV0aG9kXS5hcHBseShtb2R1bGVNZXRob2RzLCBhcmdzKTtcbiAgICBTeXN0cmFjZS5lbmRFdmVudCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBfX2ludm9rZUNhbGxiYWNrKGNiSUQ6IG51bWJlciwgYXJnczogYW55W10pIHtcbiAgICB0aGlzLl9sYXN0Rmx1c2ggPSBEYXRlLm5vdygpO1xuICAgIHRoaXMuX2V2ZW50TG9vcFN0YXJ0VGltZSA9IHRoaXMuX2xhc3RGbHVzaDtcblxuICAgIC8vIFRoZSByaWdodG1vc3QgYml0IG9mIGNiSUQgaW5kaWNhdGVzIGZhaWwgKDApIG9yIHN1Y2Nlc3MgKDEpLCB0aGUgb3RoZXIgYml0cyBhcmUgdGhlIGNhbGxJRCBzaGlmdGVkIGxlZnQuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWJpdHdpc2VcbiAgICBjb25zdCBjYWxsSUQgPSBjYklEID4+PiAxO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1iaXR3aXNlXG4gICAgY29uc3QgaXNTdWNjZXNzID0gY2JJRCAmIDE7XG4gICAgY29uc3QgY2FsbGJhY2sgPSBpc1N1Y2Nlc3NcbiAgICAgID8gdGhpcy5fc3VjY2Vzc0NhbGxiYWNrc1tjYWxsSURdXG4gICAgICA6IHRoaXMuX2ZhaWx1cmVDYWxsYmFja3NbY2FsbElEXTtcblxuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICBjb25zdCBkZWJ1ZyA9IHRoaXMuX2RlYnVnSW5mb1tjYWxsSURdO1xuICAgICAgY29uc3QgbW9kdWxlID0gZGVidWcgJiYgdGhpcy5fcmVtb3RlTW9kdWxlVGFibGVbZGVidWdbMF1dO1xuICAgICAgY29uc3QgbWV0aG9kID0gZGVidWcgJiYgdGhpcy5fcmVtb3RlTWV0aG9kVGFibGVbZGVidWdbMF1dW2RlYnVnWzFdXTtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgY2FsbGJhY2ssXG4gICAgICAgIGBObyBjYWxsYmFjayBmb3VuZCB3aXRoIGNiSUQgJHtjYklEfSBhbmQgY2FsbElEICR7Y2FsbElEfSBmb3IgYCArXG4gICAgICAgICAgKG1ldGhvZFxuICAgICAgICAgICAgPyBgICR7bW9kdWxlfS4ke21ldGhvZH0gLSBtb3N0IGxpa2VseSB0aGUgY2FsbGJhY2sgd2FzIGFscmVhZHkgaW52b2tlZGBcbiAgICAgICAgICAgIDogYG1vZHVsZSAke21vZHVsZSB8fCAnPHVua25vd24+J31gKSArXG4gICAgICAgICAgYC4gQXJnczogJyR7c3RyaW5naWZ5U2FmZShhcmdzKX0nYCxcbiAgICAgICk7XG4gICAgICBjb25zdCBwcm9maWxlTmFtZSA9IGRlYnVnXG4gICAgICAgID8gJzxjYWxsYmFjayBmb3IgJyArIG1vZHVsZSArICcuJyArIG1ldGhvZCArICc+J1xuICAgICAgICA6IGNiSUQ7XG4gICAgICBpZiAoY2FsbGJhY2sgJiYgdGhpcy5fX3NweSkge1xuICAgICAgICB0aGlzLl9fc3B5KHt0eXBlOiBUT19KUywgbW9kdWxlOiBudWxsLCBtZXRob2Q6IHByb2ZpbGVOYW1lLCBhcmdzfSk7XG4gICAgICB9XG4gICAgICBTeXN0cmFjZS5iZWdpbkV2ZW50KFxuICAgICAgICBgTWVzc2FnZVF1ZXVlLmludm9rZUNhbGxiYWNrKCR7cHJvZmlsZU5hbWV9LCAke3N0cmluZ2lmeVNhZmUoYXJncyl9KWAsXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBkZWxldGUgdGhpcy5fc3VjY2Vzc0NhbGxiYWNrc1tjYWxsSURdO1xuICAgIGRlbGV0ZSB0aGlzLl9mYWlsdXJlQ2FsbGJhY2tzW2NhbGxJRF07XG4gICAgY2FsbGJhY2soLi4uYXJncyk7XG5cbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgU3lzdHJhY2UuZW5kRXZlbnQoKTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNZXNzYWdlUXVldWU7XG4iXX0=