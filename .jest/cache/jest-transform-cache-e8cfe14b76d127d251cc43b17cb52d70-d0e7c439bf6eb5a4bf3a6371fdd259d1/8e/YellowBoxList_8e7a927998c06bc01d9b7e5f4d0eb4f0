ae8928810939950a88b036dd9d75fbca
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var Dimensions = require('../../Utilities/Dimensions');

var React = require('react');

var FlatList = require('../../Lists/FlatList');

var SafeAreaView = require('../../Components/SafeAreaView/SafeAreaView');

var StyleSheet = require('../../StyleSheet/StyleSheet');

var View = require('../../Components/View/View');

var YellowBoxButton = require('./YellowBoxButton');

var YellowBoxInspector = require('./YellowBoxInspector');

var YellowBoxListRow = require('./YellowBoxListRow');

var YellowBoxStyle = require('./YellowBoxStyle');

var VIEWPORT_RATIO = 0.5;
var MAX_ITEMS = Math.floor(Dimensions.get('window').height * VIEWPORT_RATIO / (YellowBoxListRow.GUTTER + YellowBoxListRow.HEIGHT));

var YellowBoxList = function (_React$Component) {
  (0, _inherits2.default)(YellowBoxList, _React$Component);

  function YellowBoxList() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, YellowBoxList);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(YellowBoxList)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.state = {
      selectedCategory: null
    };

    _this._handleInspectorDismiss = function () {
      var category = _this.state.selectedCategory;

      if (category == null) {
        return;
      }

      _this.setState({
        selectedCategory: null
      }, function () {
        _this.props.onDismiss(category);
      });
    };

    _this._handleInspectorMinimize = function () {
      _this.setState({
        selectedCategory: null
      });
    };

    _this._handleRowPress = function (category) {
      _this.setState({
        selectedCategory: category
      });
    };

    return _this;
  }

  (0, _createClass2.default)(YellowBoxList, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var selectedWarnings = this.state.selectedCategory == null ? null : this.props.registry.get(this.state.selectedCategory);

      if (selectedWarnings != null) {
        return React.createElement(View, {
          style: StyleSheet.absoluteFill
        }, React.createElement(YellowBoxInspector, {
          onDismiss: this._handleInspectorDismiss,
          onMinimize: this._handleInspectorMinimize,
          warnings: selectedWarnings
        }));
      }

      var items = [];

      for (var _iterator = this.props.registry, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
        var _ref3;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref3 = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref3 = _i.value;
        }

        var _ref5 = _ref3;

        var _ref2 = (0, _slicedToArray2.default)(_ref5, 2);

        var _category2 = _ref2[0];
        var _warnings = _ref2[1];
        items.unshift({
          category: _category2,
          warnings: _warnings
        });
      }

      var listStyle = {
        height: Math.min(items.length, MAX_ITEMS + 0.5) * (YellowBoxListRow.GUTTER + YellowBoxListRow.HEIGHT)
      };
      return items.length === 0 ? null : React.createElement(View, {
        style: styles.list
      }, React.createElement(View, {
        pointerEvents: "box-none",
        style: styles.dismissAll
      }, React.createElement(YellowBoxButton, {
        hitSlop: {
          bottom: 4,
          left: 4,
          right: 4,
          top: 4
        },
        label: "Dismiss All",
        onPress: this.props.onDismissAll
      })), React.createElement(FlatList, {
        data: items,
        keyExtractor: function keyExtractor(item) {
          return item.category;
        },
        renderItem: function renderItem(_ref4) {
          var item = _ref4.item;
          return React.createElement(YellowBoxListRow, (0, _extends2.default)({}, item, {
            onPress: _this2._handleRowPress
          }));
        },
        scrollEnabled: items.length > MAX_ITEMS,
        scrollsToTop: false,
        style: listStyle
      }), React.createElement(SafeAreaView, {
        style: styles.safeArea
      }));
    }
  }]);
  return YellowBoxList;
}(React.Component);

var styles = StyleSheet.create({
  list: {
    bottom: 0,
    position: 'absolute',
    width: '100%'
  },
  dismissAll: {
    bottom: '100%',
    flexDirection: 'row',
    justifyContent: 'flex-end',
    paddingBottom: 4,
    paddingEnd: 4,
    position: 'absolute',
    width: '100%'
  },
  safeArea: {
    backgroundColor: YellowBoxStyle.getBackgroundColor(0.95),
    marginTop: StyleSheet.hairlineWidth
  }
});
module.exports = YellowBoxList;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,