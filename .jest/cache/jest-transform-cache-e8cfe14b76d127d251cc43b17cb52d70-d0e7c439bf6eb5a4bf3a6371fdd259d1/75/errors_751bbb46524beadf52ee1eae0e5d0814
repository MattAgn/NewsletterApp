40796397251993b9b8726288c84d9fb0
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createQueryByError = exports.prepareErrorMessage = exports.logDeprecationWarning = exports.createLibraryNotSupportedError = exports.ErrorWithStack = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _wrapNativeSuper2 = _interopRequireDefault(require("@babel/runtime/helpers/wrapNativeSuper"));

var ErrorWithStack = function (_Error) {
  (0, _inherits2.default)(ErrorWithStack, _Error);

  function ErrorWithStack(message, callsite) {
    var _this;

    (0, _classCallCheck2.default)(this, ErrorWithStack);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(ErrorWithStack).call(this, message));

    if (Error.captureStackTrace) {
      Error.captureStackTrace((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), callsite);
    }

    return _this;
  }

  return ErrorWithStack;
}((0, _wrapNativeSuper2.default)(Error));

exports.ErrorWithStack = ErrorWithStack;

var createLibraryNotSupportedError = function createLibraryNotSupportedError(error) {
  return new Error("Currently the only supported library to search by text is \"react-native\".\n\n" + error.message);
};

exports.createLibraryNotSupportedError = createLibraryNotSupportedError;
var warned = {
  getByName: false,
  getAllByName: false,
  queryByName: false,
  queryAllByName: false
};

var logDeprecationWarning = function logDeprecationWarning(deprecatedFnName, alternativeFnName) {
  if (warned[deprecatedFnName]) {
    return;
  }

  console.warn("Deprecation Warning:\n\n  \"" + deprecatedFnName + "\" is deprecated and will be removed in next major release. Please use \"" + alternativeFnName + "\" instead.\n\n  Docs: https://github.com/callstack/react-native-testing-library#" + alternativeFnName.toLowerCase() + "-type-reactcomponenttype\n    ");
  warned[deprecatedFnName] = true;
};

exports.logDeprecationWarning = logDeprecationWarning;

var prepareErrorMessage = function prepareErrorMessage(error) {
  return error.message.replace(/ matching custom predicate[^]*/gm, '');
};

exports.prepareErrorMessage = prepareErrorMessage;

var createQueryByError = function createQueryByError(error, callsite) {
  if (error.message.includes('No instances found')) {
    return null;
  }

  throw new ErrorWithStack(error.message, callsite);
};

exports.createQueryByError = createQueryByError;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVycm9ycy5qcyJdLCJuYW1lcyI6WyJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiY3JlYXRlUXVlcnlCeUVycm9yIiwicHJlcGFyZUVycm9yTWVzc2FnZSIsImxvZ0RlcHJlY2F0aW9uV2FybmluZyIsImNyZWF0ZUxpYnJhcnlOb3RTdXBwb3J0ZWRFcnJvciIsIkVycm9yV2l0aFN0YWNrIiwiX2NsYXNzQ2FsbENoZWNrMiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsIl9nZXRQcm90b3R5cGVPZjIiLCJfaW5oZXJpdHMyIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZDIiLCJfd3JhcE5hdGl2ZVN1cGVyMiIsIl9FcnJvciIsImRlZmF1bHQiLCJtZXNzYWdlIiwiY2FsbHNpdGUiLCJfdGhpcyIsImNhbGwiLCJFcnJvciIsImNhcHR1cmVTdGFja1RyYWNlIiwiZXJyb3IiLCJ3YXJuZWQiLCJnZXRCeU5hbWUiLCJnZXRBbGxCeU5hbWUiLCJxdWVyeUJ5TmFtZSIsInF1ZXJ5QWxsQnlOYW1lIiwiZGVwcmVjYXRlZEZuTmFtZSIsImFsdGVybmF0aXZlRm5OYW1lIiwiY29uc29sZSIsIndhcm4iLCJ0b0xvd2VyQ2FzZSIsInJlcGxhY2UiLCJpbmNsdWRlcyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsc0JBQXNCLEdBQUNDLE9BQU8sQ0FBQyw4Q0FBRCxDQUFsQzs7QUFBbUZDLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBOEIsWUFBOUIsRUFBMkM7QUFBQ0MsRUFBQUEsS0FBSyxFQUFDO0FBQVAsQ0FBM0M7QUFBeURELE9BQU8sQ0FBQ0Usa0JBQVIsR0FBMkJGLE9BQU8sQ0FBQ0csbUJBQVIsR0FBNEJILE9BQU8sQ0FBQ0kscUJBQVIsR0FBOEJKLE9BQU8sQ0FBQ0ssOEJBQVIsR0FBdUNMLE9BQU8sQ0FBQ00sY0FBUixHQUF1QixLQUFLLENBQXhK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QyxTQUFTQSxtQkFBVCxDQUE2QmtCLEtBQTdCLEVBQW1DO0FBQUMsU0FBT0EsS0FBSyxDQUFDTixPQUFOLENBQWNpQixPQUFkLENBQXNCLGtDQUF0QixFQUF5RCxFQUF6RCxDQUFQO0FBQXFFLENBQWpJOztBQUFrSWhDLE9BQU8sQ0FBQ0csbUJBQVIsR0FBNEJBLG1CQUE1Qjs7QUFBZ0QsSUFBSUQsa0JBQWtCLEdBQUMsU0FBU0Esa0JBQVQsQ0FBNEJtQixLQUE1QixFQUFrQ0wsUUFBbEMsRUFBMkM7QUFBQyxNQUFHSyxLQUFLLENBQUNOLE9BQU4sQ0FBY2tCLFFBQWQsQ0FBdUIsb0JBQXZCLENBQUgsRUFBZ0Q7QUFBQyxXQUFPLElBQVA7QUFBYTs7QUFBQSxRQUFNLElBQUkzQixjQUFKLENBQW1CZSxLQUFLLENBQUNOLE9BQXpCLEVBQWlDQyxRQUFqQyxDQUFOO0FBQWtELENBQW5MOztBQUFvTGhCLE9BQU8sQ0FBQ0Usa0JBQVIsR0FBMkJBLGtCQUEzQiIsInNvdXJjZXNDb250ZW50IjpbInZhciBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0PXJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6dHJ1ZX0pO2V4cG9ydHMuY3JlYXRlUXVlcnlCeUVycm9yPWV4cG9ydHMucHJlcGFyZUVycm9yTWVzc2FnZT1leHBvcnRzLmxvZ0RlcHJlY2F0aW9uV2FybmluZz1leHBvcnRzLmNyZWF0ZUxpYnJhcnlOb3RTdXBwb3J0ZWRFcnJvcj1leHBvcnRzLkVycm9yV2l0aFN0YWNrPXZvaWQgMDt2YXIgX2NsYXNzQ2FsbENoZWNrMj1faW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrXCIpKTt2YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVyblwiKSk7dmFyIF9nZXRQcm90b3R5cGVPZjI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZlwiKSk7dmFyIF9pbmhlcml0czI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c1wiKSk7dmFyIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyPV9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpKTt2YXIgX3dyYXBOYXRpdmVTdXBlcjI9X2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy93cmFwTmF0aXZlU3VwZXJcIikpO3ZhciBFcnJvcldpdGhTdGFjaz1mdW5jdGlvbihfRXJyb3IpeygwLF9pbmhlcml0czIuZGVmYXVsdCkoRXJyb3JXaXRoU3RhY2ssX0Vycm9yKTtmdW5jdGlvbiBFcnJvcldpdGhTdGFjayhtZXNzYWdlLGNhbGxzaXRlKXt2YXIgX3RoaXM7KDAsX2NsYXNzQ2FsbENoZWNrMi5kZWZhdWx0KSh0aGlzLEVycm9yV2l0aFN0YWNrKTtfdGhpcz0oMCxfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIuZGVmYXVsdCkodGhpcywoMCxfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKEVycm9yV2l0aFN0YWNrKS5jYWxsKHRoaXMsbWVzc2FnZSkpO2lmKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKXtFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSgoMCxfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KSgoMCxfYXNzZXJ0VGhpc0luaXRpYWxpemVkMi5kZWZhdWx0KShfdGhpcykpLGNhbGxzaXRlKTt9cmV0dXJuIF90aGlzO31yZXR1cm4gRXJyb3JXaXRoU3RhY2s7fSgoMCxfd3JhcE5hdGl2ZVN1cGVyMi5kZWZhdWx0KShFcnJvcikpO2V4cG9ydHMuRXJyb3JXaXRoU3RhY2s9RXJyb3JXaXRoU3RhY2s7dmFyIGNyZWF0ZUxpYnJhcnlOb3RTdXBwb3J0ZWRFcnJvcj1mdW5jdGlvbiBjcmVhdGVMaWJyYXJ5Tm90U3VwcG9ydGVkRXJyb3IoZXJyb3Ipe3JldHVybiBuZXcgRXJyb3IoXCJDdXJyZW50bHkgdGhlIG9ubHkgc3VwcG9ydGVkIGxpYnJhcnkgdG8gc2VhcmNoIGJ5IHRleHQgaXMgXFxcInJlYWN0LW5hdGl2ZVxcXCIuXFxuXFxuXCIrZXJyb3IubWVzc2FnZSk7fTtleHBvcnRzLmNyZWF0ZUxpYnJhcnlOb3RTdXBwb3J0ZWRFcnJvcj1jcmVhdGVMaWJyYXJ5Tm90U3VwcG9ydGVkRXJyb3I7dmFyIHdhcm5lZD17Z2V0QnlOYW1lOmZhbHNlLGdldEFsbEJ5TmFtZTpmYWxzZSxxdWVyeUJ5TmFtZTpmYWxzZSxxdWVyeUFsbEJ5TmFtZTpmYWxzZX07dmFyIGxvZ0RlcHJlY2F0aW9uV2FybmluZz1mdW5jdGlvbiBsb2dEZXByZWNhdGlvbldhcm5pbmcoZGVwcmVjYXRlZEZuTmFtZSxhbHRlcm5hdGl2ZUZuTmFtZSl7aWYod2FybmVkW2RlcHJlY2F0ZWRGbk5hbWVdKXtyZXR1cm47fWNvbnNvbGUud2FybihcIkRlcHJlY2F0aW9uIFdhcm5pbmc6XFxuXFxuICBcXFwiXCIrZGVwcmVjYXRlZEZuTmFtZStcIlxcXCIgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIG5leHQgbWFqb3IgcmVsZWFzZS4gUGxlYXNlIHVzZSBcXFwiXCIrYWx0ZXJuYXRpdmVGbk5hbWUrXCJcXFwiIGluc3RlYWQuXFxuXFxuICBEb2NzOiBodHRwczovL2dpdGh1Yi5jb20vY2FsbHN0YWNrL3JlYWN0LW5hdGl2ZS10ZXN0aW5nLWxpYnJhcnkjXCIrYWx0ZXJuYXRpdmVGbk5hbWUudG9Mb3dlckNhc2UoKStcIi10eXBlLXJlYWN0Y29tcG9uZW50dHlwZVxcbiAgICBcIik7d2FybmVkW2RlcHJlY2F0ZWRGbk5hbWVdPXRydWU7fTtleHBvcnRzLmxvZ0RlcHJlY2F0aW9uV2FybmluZz1sb2dEZXByZWNhdGlvbldhcm5pbmc7dmFyIHByZXBhcmVFcnJvck1lc3NhZ2U9ZnVuY3Rpb24gcHJlcGFyZUVycm9yTWVzc2FnZShlcnJvcil7cmV0dXJuIGVycm9yLm1lc3NhZ2UucmVwbGFjZSgvIG1hdGNoaW5nIGN1c3RvbSBwcmVkaWNhdGVbXl0qL2dtLCcnKTt9O2V4cG9ydHMucHJlcGFyZUVycm9yTWVzc2FnZT1wcmVwYXJlRXJyb3JNZXNzYWdlO3ZhciBjcmVhdGVRdWVyeUJ5RXJyb3I9ZnVuY3Rpb24gY3JlYXRlUXVlcnlCeUVycm9yKGVycm9yLGNhbGxzaXRlKXtpZihlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdObyBpbnN0YW5jZXMgZm91bmQnKSl7cmV0dXJuIG51bGw7fXRocm93IG5ldyBFcnJvcldpdGhTdGFjayhlcnJvci5tZXNzYWdlLGNhbGxzaXRlKTt9O2V4cG9ydHMuY3JlYXRlUXVlcnlCeUVycm9yPWNyZWF0ZVF1ZXJ5QnlFcnJvcjsiXX0=