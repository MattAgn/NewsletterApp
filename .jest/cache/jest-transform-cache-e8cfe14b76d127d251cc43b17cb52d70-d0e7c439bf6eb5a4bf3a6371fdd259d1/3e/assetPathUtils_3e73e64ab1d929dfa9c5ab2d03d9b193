140aa3c1ac45040bb6dcc90a32f927ed
'use strict';

var androidScaleSuffix = {
  '0.75': 'ldpi',
  '1': 'mdpi',
  '1.5': 'hdpi',
  '2': 'xhdpi',
  '3': 'xxhdpi',
  '4': 'xxxhdpi'
};

function getAndroidAssetSuffix(scale) {
  if (scale.toString() in androidScaleSuffix) {
    return androidScaleSuffix[scale.toString()];
  }

  throw new Error('no such scale ' + scale.toString());
}

var drawableFileTypes = new Set(['gif', 'jpeg', 'jpg', 'png', 'svg', 'webp', 'xml']);

function getAndroidResourceFolderName(asset, scale) {
  if (!drawableFileTypes.has(asset.type)) {
    return 'raw';
  }

  var suffix = getAndroidAssetSuffix(scale);

  if (!suffix) {
    throw new Error("Don't know which android drawable suffix to use for scale: " + scale + '\nAsset: ' + JSON.stringify(asset, null, '\t') + '\nPossible scales are:' + JSON.stringify(androidScaleSuffix, null, '\t'));
  }

  var androidFolder = 'drawable-' + suffix;
  return androidFolder;
}

function getAndroidResourceIdentifier(asset) {
  var folderPath = getBasePath(asset);
  return (folderPath + '/' + asset.name).toLowerCase().replace(/\//g, '_').replace(/([^a-z0-9_])/g, '').replace(/^assets_/, '');
}

function getBasePath(asset) {
  var basePath = asset.httpServerLocation;

  if (basePath[0] === '/') {
    basePath = basePath.substr(1);
  }

  return basePath;
}

module.exports = {
  getAndroidAssetSuffix: getAndroidAssetSuffix,
  getAndroidResourceFolderName: getAndroidResourceFolderName,
  getAndroidResourceIdentifier: getAndroidResourceIdentifier,
  getBasePath: getBasePath
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0UGF0aFV0aWxzLmpzIl0sIm5hbWVzIjpbImFuZHJvaWRTY2FsZVN1ZmZpeCIsImdldEFuZHJvaWRBc3NldFN1ZmZpeCIsInNjYWxlIiwidG9TdHJpbmciLCJFcnJvciIsImRyYXdhYmxlRmlsZVR5cGVzIiwiU2V0IiwiZ2V0QW5kcm9pZFJlc291cmNlRm9sZGVyTmFtZSIsImFzc2V0IiwiaGFzIiwidHlwZSIsInN1ZmZpeCIsIkpTT04iLCJzdHJpbmdpZnkiLCJhbmRyb2lkRm9sZGVyIiwiZ2V0QW5kcm9pZFJlc291cmNlSWRlbnRpZmllciIsImZvbGRlclBhdGgiLCJnZXRCYXNlUGF0aCIsIm5hbWUiLCJ0b0xvd2VyQ2FzZSIsInJlcGxhY2UiLCJiYXNlUGF0aCIsImh0dHBTZXJ2ZXJMb2NhdGlvbiIsInN1YnN0ciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVVBOztBQUlBLElBQU1BLGtCQUFrQixHQUFHO0FBQ3pCLFVBQVEsTUFEaUI7QUFFekIsT0FBSyxNQUZvQjtBQUd6QixTQUFPLE1BSGtCO0FBSXpCLE9BQUssT0FKb0I7QUFLekIsT0FBSyxRQUxvQjtBQU16QixPQUFLO0FBTm9CLENBQTNCOztBQWFBLFNBQVNDLHFCQUFULENBQStCQyxLQUEvQixFQUFzRDtBQUNwRCxNQUFJQSxLQUFLLENBQUNDLFFBQU4sTUFBb0JILGtCQUF4QixFQUE0QztBQUMxQyxXQUFPQSxrQkFBa0IsQ0FBQ0UsS0FBSyxDQUFDQyxRQUFOLEVBQUQsQ0FBekI7QUFDRDs7QUFFRCxRQUFNLElBQUlDLEtBQUosQ0FBVSxtQkFBbUJGLEtBQUssQ0FBQ0MsUUFBTixFQUE3QixDQUFOO0FBQ0Q7O0FBR0QsSUFBTUUsaUJBQWlCLEdBQUcsSUFBSUMsR0FBSixDQUFRLENBQ2hDLEtBRGdDLEVBRWhDLE1BRmdDLEVBR2hDLEtBSGdDLEVBSWhDLEtBSmdDLEVBS2hDLEtBTGdDLEVBTWhDLE1BTmdDLEVBT2hDLEtBUGdDLENBQVIsQ0FBMUI7O0FBVUEsU0FBU0MsNEJBQVQsQ0FBc0NDLEtBQXRDLEVBQTRETixLQUE1RCxFQUEyRTtBQUN6RSxNQUFJLENBQUNHLGlCQUFpQixDQUFDSSxHQUFsQixDQUFzQkQsS0FBSyxDQUFDRSxJQUE1QixDQUFMLEVBQXdDO0FBQ3RDLFdBQU8sS0FBUDtBQUNEOztBQUNELE1BQUlDLE1BQU0sR0FBR1YscUJBQXFCLENBQUNDLEtBQUQsQ0FBbEM7O0FBQ0EsTUFBSSxDQUFDUyxNQUFMLEVBQWE7QUFDWCxVQUFNLElBQUlQLEtBQUosQ0FDSixnRUFDRUYsS0FERixHQUVFLFdBRkYsR0FHRVUsSUFBSSxDQUFDQyxTQUFMLENBQWVMLEtBQWYsRUFBc0IsSUFBdEIsRUFBNEIsSUFBNUIsQ0FIRixHQUlFLHdCQUpGLEdBS0VJLElBQUksQ0FBQ0MsU0FBTCxDQUFlYixrQkFBZixFQUFtQyxJQUFuQyxFQUF5QyxJQUF6QyxDQU5FLENBQU47QUFRRDs7QUFDRCxNQUFNYyxhQUFhLEdBQUcsY0FBY0gsTUFBcEM7QUFDQSxTQUFPRyxhQUFQO0FBQ0Q7O0FBRUQsU0FBU0MsNEJBQVQsQ0FBc0NQLEtBQXRDLEVBQTREO0FBQzFELE1BQUlRLFVBQVUsR0FBR0MsV0FBVyxDQUFDVCxLQUFELENBQTVCO0FBQ0EsU0FBTyxDQUFDUSxVQUFVLEdBQUcsR0FBYixHQUFtQlIsS0FBSyxDQUFDVSxJQUExQixFQUNKQyxXQURJLEdBRUpDLE9BRkksQ0FFSSxLQUZKLEVBRVcsR0FGWCxFQUdKQSxPQUhJLENBR0ksZUFISixFQUdxQixFQUhyQixFQUlKQSxPQUpJLENBSUksVUFKSixFQUlnQixFQUpoQixDQUFQO0FBS0Q7O0FBRUQsU0FBU0gsV0FBVCxDQUFxQlQsS0FBckIsRUFBMkM7QUFDekMsTUFBSWEsUUFBUSxHQUFHYixLQUFLLENBQUNjLGtCQUFyQjs7QUFDQSxNQUFJRCxRQUFRLENBQUMsQ0FBRCxDQUFSLEtBQWdCLEdBQXBCLEVBQXlCO0FBQ3ZCQSxJQUFBQSxRQUFRLEdBQUdBLFFBQVEsQ0FBQ0UsTUFBVCxDQUFnQixDQUFoQixDQUFYO0FBQ0Q7O0FBQ0QsU0FBT0YsUUFBUDtBQUNEOztBQUVERyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZnhCLEVBQUFBLHFCQUFxQixFQUFFQSxxQkFEUjtBQUVmTSxFQUFBQSw0QkFBNEIsRUFBRUEsNEJBRmY7QUFHZlEsRUFBQUEsNEJBQTRCLEVBQUVBLDRCQUhmO0FBSWZFLEVBQUFBLFdBQVcsRUFBRUE7QUFKRSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdHlwZSB7UGFja2FnZXJBc3NldH0gZnJvbSAnLi9Bc3NldFJlZ2lzdHJ5JztcblxuY29uc3QgYW5kcm9pZFNjYWxlU3VmZml4ID0ge1xuICAnMC43NSc6ICdsZHBpJyxcbiAgJzEnOiAnbWRwaScsXG4gICcxLjUnOiAnaGRwaScsXG4gICcyJzogJ3hoZHBpJyxcbiAgJzMnOiAneHhoZHBpJyxcbiAgJzQnOiAneHh4aGRwaScsXG59O1xuXG4vKipcbiAqIEZJWE1FOiB1c2luZyBudW1iZXIgdG8gcmVwcmVzZW50IGRpc2NyZXRlIHNjYWxlIG51bWJlcnMgaXMgZnJhZ2lsZSBpbiBlc3NlbmNlIGJlY2F1c2Ugb2ZcbiAqIGZsb2F0aW5nIHBvaW50IG51bWJlcnMgaW1wcmVjaXNpb24uXG4gKi9cbmZ1bmN0aW9uIGdldEFuZHJvaWRBc3NldFN1ZmZpeChzY2FsZTogbnVtYmVyKTogc3RyaW5nIHtcbiAgaWYgKHNjYWxlLnRvU3RyaW5nKCkgaW4gYW5kcm9pZFNjYWxlU3VmZml4KSB7XG4gICAgcmV0dXJuIGFuZHJvaWRTY2FsZVN1ZmZpeFtzY2FsZS50b1N0cmluZygpXTtcbiAgfVxuXG4gIHRocm93IG5ldyBFcnJvcignbm8gc3VjaCBzY2FsZSAnICsgc2NhbGUudG9TdHJpbmcoKSk7XG59XG5cbi8vIFNlZSBodHRwczovL2RldmVsb3Blci5hbmRyb2lkLmNvbS9ndWlkZS90b3BpY3MvcmVzb3VyY2VzL2RyYXdhYmxlLXJlc291cmNlLmh0bWxcbmNvbnN0IGRyYXdhYmxlRmlsZVR5cGVzID0gbmV3IFNldChbXG4gICdnaWYnLFxuICAnanBlZycsXG4gICdqcGcnLFxuICAncG5nJyxcbiAgJ3N2ZycsXG4gICd3ZWJwJyxcbiAgJ3htbCcsXG5dKTtcblxuZnVuY3Rpb24gZ2V0QW5kcm9pZFJlc291cmNlRm9sZGVyTmFtZShhc3NldDogUGFja2FnZXJBc3NldCwgc2NhbGU6IG51bWJlcikge1xuICBpZiAoIWRyYXdhYmxlRmlsZVR5cGVzLmhhcyhhc3NldC50eXBlKSkge1xuICAgIHJldHVybiAncmF3JztcbiAgfVxuICB2YXIgc3VmZml4ID0gZ2V0QW5kcm9pZEFzc2V0U3VmZml4KHNjYWxlKTtcbiAgaWYgKCFzdWZmaXgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBcIkRvbid0IGtub3cgd2hpY2ggYW5kcm9pZCBkcmF3YWJsZSBzdWZmaXggdG8gdXNlIGZvciBzY2FsZTogXCIgK1xuICAgICAgICBzY2FsZSArXG4gICAgICAgICdcXG5Bc3NldDogJyArXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KGFzc2V0LCBudWxsLCAnXFx0JykgK1xuICAgICAgICAnXFxuUG9zc2libGUgc2NhbGVzIGFyZTonICtcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkoYW5kcm9pZFNjYWxlU3VmZml4LCBudWxsLCAnXFx0JyksXG4gICAgKTtcbiAgfVxuICBjb25zdCBhbmRyb2lkRm9sZGVyID0gJ2RyYXdhYmxlLScgKyBzdWZmaXg7XG4gIHJldHVybiBhbmRyb2lkRm9sZGVyO1xufVxuXG5mdW5jdGlvbiBnZXRBbmRyb2lkUmVzb3VyY2VJZGVudGlmaWVyKGFzc2V0OiBQYWNrYWdlckFzc2V0KSB7XG4gIHZhciBmb2xkZXJQYXRoID0gZ2V0QmFzZVBhdGgoYXNzZXQpO1xuICByZXR1cm4gKGZvbGRlclBhdGggKyAnLycgKyBhc3NldC5uYW1lKVxuICAgIC50b0xvd2VyQ2FzZSgpXG4gICAgLnJlcGxhY2UoL1xcLy9nLCAnXycpIC8vIEVuY29kZSBmb2xkZXIgc3RydWN0dXJlIGluIGZpbGUgbmFtZVxuICAgIC5yZXBsYWNlKC8oW15hLXowLTlfXSkvZywgJycpIC8vIFJlbW92ZSBpbGxlZ2FsIGNoYXJzXG4gICAgLnJlcGxhY2UoL15hc3NldHNfLywgJycpOyAvLyBSZW1vdmUgXCJhc3NldHNfXCIgcHJlZml4XG59XG5cbmZ1bmN0aW9uIGdldEJhc2VQYXRoKGFzc2V0OiBQYWNrYWdlckFzc2V0KSB7XG4gIHZhciBiYXNlUGF0aCA9IGFzc2V0Lmh0dHBTZXJ2ZXJMb2NhdGlvbjtcbiAgaWYgKGJhc2VQYXRoWzBdID09PSAnLycpIHtcbiAgICBiYXNlUGF0aCA9IGJhc2VQYXRoLnN1YnN0cigxKTtcbiAgfVxuICByZXR1cm4gYmFzZVBhdGg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRBbmRyb2lkQXNzZXRTdWZmaXg6IGdldEFuZHJvaWRBc3NldFN1ZmZpeCxcbiAgZ2V0QW5kcm9pZFJlc291cmNlRm9sZGVyTmFtZTogZ2V0QW5kcm9pZFJlc291cmNlRm9sZGVyTmFtZSxcbiAgZ2V0QW5kcm9pZFJlc291cmNlSWRlbnRpZmllcjogZ2V0QW5kcm9pZFJlc291cmNlSWRlbnRpZmllcixcbiAgZ2V0QmFzZVBhdGg6IGdldEJhc2VQYXRoLFxufTtcbiJdfQ==