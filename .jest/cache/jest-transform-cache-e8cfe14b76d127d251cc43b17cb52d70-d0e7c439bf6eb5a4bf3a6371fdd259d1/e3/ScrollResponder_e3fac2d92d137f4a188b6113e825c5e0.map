{"version":3,"sources":["ScrollResponder.js"],"names":["Dimensions","require","FrameRateLogger","Keyboard","ReactNative","TextInputState","UIManager","invariant","nullthrows","performanceNow","warning","ScrollViewManager","IS_ANIMATING_TOUCH_START_THRESHOLD_MS","ScrollResponderMixin","_subscriptionKeyboardWillShow","_subscriptionKeyboardWillHide","_subscriptionKeyboardDidShow","_subscriptionKeyboardDidHide","scrollResponderMixinGetInitialState","isTouching","lastMomentumScrollBeginTime","lastMomentumScrollEndTime","observedScrollSinceBecomingResponder","becameResponderWhileAnimating","scrollResponderHandleScrollShouldSetResponder","props","disableScrollViewPanResponder","state","scrollResponderHandleStartShouldSetResponder","e","currentlyFocusedTextInput","currentlyFocusedField","keyboardShouldPersistTaps","target","scrollResponderHandleStartShouldSetResponderCapture","scrollResponderIsAnimating","keyboardNeverPersistTaps","isTextInput","scrollResponderHandleResponderReject","scrollResponderHandleTerminationRequest","scrollResponderHandleTouchEnd","nativeEvent","touches","length","onTouchEnd","scrollResponderHandleTouchCancel","onTouchCancel","scrollResponderHandleResponderRelease","onResponderRelease","onScrollResponderKeyboardDismissed","blurTextInput","scrollResponderHandleScroll","onScroll","scrollResponderHandleResponderGrant","onResponderGrant","scrollResponderHandleScrollBeginDrag","beginScroll","onScrollBeginDrag","scrollResponderHandleScrollEndDrag","velocity","x","y","endScroll","onScrollEndDrag","scrollResponderHandleMomentumScrollBegin","onMomentumScrollBegin","scrollResponderHandleMomentumScrollEnd","onMomentumScrollEnd","scrollResponderHandleTouchStart","onTouchStart","scrollResponderHandleTouchMove","onTouchMove","now","timeSinceLastMomentumScrollEnd","isAnimating","scrollResponderGetScrollableNode","getScrollableNode","findNodeHandle","scrollResponderScrollTo","animated","console","warn","dispatchViewManagerCommand","getViewManagerConfig","Commands","scrollTo","scrollResponderScrollToEnd","options","scrollToEnd","scrollResponderScrollWithoutAnimationTo","offsetX","offsetY","scrollResponderZoomTo","rect","zoomToRect","scrollResponderFlashScrollIndicators","flashScrollIndicators","scrollResponderScrollNativeHandleToKeyboard","nodeHandle","additionalOffset","preventNegativeScrollOffset","additionalScrollOffset","measureLayout","getInnerViewNode","scrollResponderTextInputFocusError","scrollResponderInputMeasureAndScrollToKeyboard","left","top","width","height","keyboardScreenY","get","keyboardWillOpenTo","endCoordinates","screenY","scrollOffsetY","Math","max","msg","error","UNSAFE_componentWillMount","addListener","scrollResponderKeyboardWillShow","scrollResponderKeyboardWillHide","scrollResponderKeyboardDidShow","scrollResponderKeyboardDidHide","componentWillUnmount","remove","onKeyboardWillShow","onKeyboardWillHide","onKeyboardDidShow","onKeyboardDidHide","ScrollResponder","Mixin","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst Dimensions = require('../Utilities/Dimensions');\nconst FrameRateLogger = require('../Interaction/FrameRateLogger');\nconst Keyboard = require('./Keyboard/Keyboard');\nconst ReactNative = require('../Renderer/shims/ReactNative');\nconst TextInputState = require('./TextInput/TextInputState');\nconst UIManager = require('../ReactNative/UIManager');\n\nconst invariant = require('invariant');\nconst nullthrows = require('nullthrows');\nconst performanceNow = require('fbjs/lib/performanceNow');\nconst warning = require('fbjs/lib/warning');\n\nconst {ScrollViewManager} = require('../BatchedBridge/NativeModules');\n\nimport type {PressEvent, ScrollEvent} from '../Types/CoreEventTypes';\nimport type {KeyboardEvent} from './Keyboard/Keyboard';\nimport type EmitterSubscription from '../vendor/emitter/EmitterSubscription';\n\n/**\n * Mixin that can be integrated in order to handle scrolling that plays well\n * with `ResponderEventPlugin`. Integrate with your platform specific scroll\n * views, or even your custom built (every-frame animating) scroll views so that\n * all of these systems play well with the `ResponderEventPlugin`.\n *\n * iOS scroll event timing nuances:\n * ===============================\n *\n *\n * Scrolling without bouncing, if you touch down:\n * -------------------------------\n *\n * 1. `onMomentumScrollBegin` (when animation begins after letting up)\n *    ... physical touch starts ...\n * 2. `onTouchStartCapture`   (when you press down to stop the scroll)\n * 3. `onTouchStart`          (same, but bubble phase)\n * 4. `onResponderRelease`    (when lifting up - you could pause forever before * lifting)\n * 5. `onMomentumScrollEnd`\n *\n *\n * Scrolling with bouncing, if you touch down:\n * -------------------------------\n *\n * 1. `onMomentumScrollBegin` (when animation begins after letting up)\n *    ... bounce begins ...\n *    ... some time elapses ...\n *    ... physical touch during bounce ...\n * 2. `onMomentumScrollEnd`   (Makes no sense why this occurs first during bounce)\n * 3. `onTouchStartCapture`   (immediately after `onMomentumScrollEnd`)\n * 4. `onTouchStart`          (same, but bubble phase)\n * 5. `onTouchEnd`            (You could hold the touch start for a long time)\n * 6. `onMomentumScrollBegin` (When releasing the view starts bouncing back)\n *\n * So when we receive an `onTouchStart`, how can we tell if we are touching\n * *during* an animation (which then causes the animation to stop)? The only way\n * to tell is if the `touchStart` occurred immediately after the\n * `onMomentumScrollEnd`.\n *\n * This is abstracted out for you, so you can just call this.scrollResponderIsAnimating() if\n * necessary\n *\n * `ScrollResponder` also includes logic for blurring a currently focused input\n * if one is focused while scrolling. The `ScrollResponder` is a natural place\n * to put this logic since it can support not dismissing the keyboard while\n * scrolling, unless a recognized \"tap\"-like gesture has occurred.\n *\n * The public lifecycle API includes events for keyboard interaction, responder\n * interaction, and scrolling (among others). The keyboard callbacks\n * `onKeyboardWill/Did/*` are *global* events, but are invoked on scroll\n * responder's props so that you can guarantee that the scroll responder's\n * internal state has been updated accordingly (and deterministically) by\n * the time the props callbacks are invoke. Otherwise, you would always wonder\n * if the scroll responder is currently in a state where it recognizes new\n * keyboard positions etc. If coordinating scrolling with keyboard movement,\n * *always* use these hooks instead of listening to your own global keyboard\n * events.\n *\n * Public keyboard lifecycle API: (props callbacks)\n *\n * Standard Keyboard Appearance Sequence:\n *\n *   this.props.onKeyboardWillShow\n *   this.props.onKeyboardDidShow\n *\n * `onScrollResponderKeyboardDismissed` will be invoked if an appropriate\n * tap inside the scroll responder's scrollable region was responsible\n * for the dismissal of the keyboard. There are other reasons why the\n * keyboard could be dismissed.\n *\n *   this.props.onScrollResponderKeyboardDismissed\n *\n * Standard Keyboard Hide Sequence:\n *\n *   this.props.onKeyboardWillHide\n *   this.props.onKeyboardDidHide\n */\n\nconst IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;\n\nexport type State = {|\n  isTouching: boolean,\n  lastMomentumScrollBeginTime: number,\n  lastMomentumScrollEndTime: number,\n  observedScrollSinceBecomingResponder: boolean,\n  becameResponderWhileAnimating: boolean,\n|};\n\nconst ScrollResponderMixin = {\n  _subscriptionKeyboardWillShow: (null: ?EmitterSubscription),\n  _subscriptionKeyboardWillHide: (null: ?EmitterSubscription),\n  _subscriptionKeyboardDidShow: (null: ?EmitterSubscription),\n  _subscriptionKeyboardDidHide: (null: ?EmitterSubscription),\n  scrollResponderMixinGetInitialState: function(): State {\n    return {\n      isTouching: false,\n      lastMomentumScrollBeginTime: 0,\n      lastMomentumScrollEndTime: 0,\n\n      // Reset to false every time becomes responder. This is used to:\n      // - Determine if the scroll view has been scrolled and therefore should\n      // refuse to give up its responder lock.\n      // - Determine if releasing should dismiss the keyboard when we are in\n      // tap-to-dismiss mode (this.props.keyboardShouldPersistTaps !== 'always').\n      observedScrollSinceBecomingResponder: false,\n      becameResponderWhileAnimating: false,\n    };\n  },\n\n  /**\n   * Invoke this from an `onScroll` event.\n   */\n  scrollResponderHandleScrollShouldSetResponder: function(): boolean {\n    // Allow any event touch pass through if the default pan responder is disabled\n    if (this.props.disableScrollViewPanResponder === true) {\n      return false;\n    }\n    return this.state.isTouching;\n  },\n\n  /**\n   * Merely touch starting is not sufficient for a scroll view to become the\n   * responder. Being the \"responder\" means that the very next touch move/end\n   * event will result in an action/movement.\n   *\n   * Invoke this from an `onStartShouldSetResponder` event.\n   *\n   * `onStartShouldSetResponder` is used when the next move/end will trigger\n   * some UI movement/action, but when you want to yield priority to views\n   * nested inside of the view.\n   *\n   * There may be some cases where scroll views actually should return `true`\n   * from `onStartShouldSetResponder`: Any time we are detecting a standard tap\n   * that gives priority to nested views.\n   *\n   * - If a single tap on the scroll view triggers an action such as\n   *   recentering a map style view yet wants to give priority to interaction\n   *   views inside (such as dropped pins or labels), then we would return true\n   *   from this method when there is a single touch.\n   *\n   * - Similar to the previous case, if a two finger \"tap\" should trigger a\n   *   zoom, we would check the `touches` count, and if `>= 2`, we would return\n   *   true.\n   *\n   */\n  scrollResponderHandleStartShouldSetResponder: function(\n    e: PressEvent,\n  ): boolean {\n    // Allow any event touch pass through if the default pan responder is disabled\n    if (this.props.disableScrollViewPanResponder === true) {\n      return false;\n    }\n\n    const currentlyFocusedTextInput = TextInputState.currentlyFocusedField();\n\n    if (\n      this.props.keyboardShouldPersistTaps === 'handled' &&\n      currentlyFocusedTextInput != null &&\n      e.target !== currentlyFocusedTextInput\n    ) {\n      return true;\n    }\n    return false;\n  },\n\n  /**\n   * There are times when the scroll view wants to become the responder\n   * (meaning respond to the next immediate `touchStart/touchEnd`), in a way\n   * that *doesn't* give priority to nested views (hence the capture phase):\n   *\n   * - Currently animating.\n   * - Tapping anywhere that is not a text input, while the keyboard is\n   *   up (which should dismiss the keyboard).\n   *\n   * Invoke this from an `onStartShouldSetResponderCapture` event.\n   */\n  scrollResponderHandleStartShouldSetResponderCapture: function(\n    e: PressEvent,\n  ): boolean {\n    // The scroll view should receive taps instead of its descendants if:\n    // * it is already animating/decelerating\n    if (this.scrollResponderIsAnimating()) {\n      return true;\n    }\n\n    // Allow any event touch pass through if the default pan responder is disabled\n    if (this.props.disableScrollViewPanResponder === true) {\n      return false;\n    }\n\n    // * the keyboard is up, keyboardShouldPersistTaps is 'never' (the default),\n    // and a new touch starts with a non-textinput target (in which case the\n    // first tap should be sent to the scroll view and dismiss the keyboard,\n    // then the second tap goes to the actual interior view)\n    const currentlyFocusedTextInput = TextInputState.currentlyFocusedField();\n    const {keyboardShouldPersistTaps} = this.props;\n    const keyboardNeverPersistTaps =\n      !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';\n    if (\n      keyboardNeverPersistTaps &&\n      currentlyFocusedTextInput != null &&\n      e.target &&\n      !TextInputState.isTextInput(e.target)\n    ) {\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\n   * Invoke this from an `onResponderReject` event.\n   *\n   * Some other element is not yielding its role as responder. Normally, we'd\n   * just disable the `UIScrollView`, but a touch has already began on it, the\n   * `UIScrollView` will not accept being disabled after that. The easiest\n   * solution for now is to accept the limitation of disallowing this\n   * altogether. To improve this, find a way to disable the `UIScrollView` after\n   * a touch has already started.\n   */\n  scrollResponderHandleResponderReject: function() {},\n\n  /**\n   * We will allow the scroll view to give up its lock iff it acquired the lock\n   * during an animation. This is a very useful default that happens to satisfy\n   * many common user experiences.\n   *\n   * - Stop a scroll on the left edge, then turn that into an outer view's\n   *   backswipe.\n   * - Stop a scroll mid-bounce at the top, continue pulling to have the outer\n   *   view dismiss.\n   * - However, without catching the scroll view mid-bounce (while it is\n   *   motionless), if you drag far enough for the scroll view to become\n   *   responder (and therefore drag the scroll view a bit), any backswipe\n   *   navigation of a swipe gesture higher in the view hierarchy, should be\n   *   rejected.\n   */\n  scrollResponderHandleTerminationRequest: function(): boolean {\n    return !this.state.observedScrollSinceBecomingResponder;\n  },\n\n  /**\n   * Invoke this from an `onTouchEnd` event.\n   *\n   * @param {PressEvent} e Event.\n   */\n  scrollResponderHandleTouchEnd: function(e: PressEvent) {\n    const nativeEvent = e.nativeEvent;\n    this.state.isTouching = nativeEvent.touches.length !== 0;\n    this.props.onTouchEnd && this.props.onTouchEnd(e);\n  },\n\n  /**\n   * Invoke this from an `onTouchCancel` event.\n   *\n   * @param {PressEvent} e Event.\n   */\n  scrollResponderHandleTouchCancel: function(e: PressEvent) {\n    this.state.isTouching = false;\n    this.props.onTouchCancel && this.props.onTouchCancel(e);\n  },\n\n  /**\n   * Invoke this from an `onResponderRelease` event.\n   */\n  scrollResponderHandleResponderRelease: function(e: PressEvent) {\n    this.props.onResponderRelease && this.props.onResponderRelease(e);\n\n    // By default scroll views will unfocus a textField\n    // if another touch occurs outside of it\n    const currentlyFocusedTextInput = TextInputState.currentlyFocusedField();\n    if (\n      this.props.keyboardShouldPersistTaps !== true &&\n      this.props.keyboardShouldPersistTaps !== 'always' &&\n      currentlyFocusedTextInput != null &&\n      e.target !== currentlyFocusedTextInput &&\n      !this.state.observedScrollSinceBecomingResponder &&\n      !this.state.becameResponderWhileAnimating\n    ) {\n      this.props.onScrollResponderKeyboardDismissed &&\n        this.props.onScrollResponderKeyboardDismissed(e);\n      TextInputState.blurTextInput(currentlyFocusedTextInput);\n    }\n  },\n\n  scrollResponderHandleScroll: function(e: ScrollEvent) {\n    this.state.observedScrollSinceBecomingResponder = true;\n    this.props.onScroll && this.props.onScroll(e);\n  },\n\n  /**\n   * Invoke this from an `onResponderGrant` event.\n   */\n  scrollResponderHandleResponderGrant: function(e: ScrollEvent) {\n    this.state.observedScrollSinceBecomingResponder = false;\n    this.props.onResponderGrant && this.props.onResponderGrant(e);\n    this.state.becameResponderWhileAnimating = this.scrollResponderIsAnimating();\n  },\n\n  /**\n   * Unfortunately, `onScrollBeginDrag` also fires when *stopping* the scroll\n   * animation, and there's not an easy way to distinguish a drag vs. stopping\n   * momentum.\n   *\n   * Invoke this from an `onScrollBeginDrag` event.\n   */\n  scrollResponderHandleScrollBeginDrag: function(e: ScrollEvent) {\n    FrameRateLogger.beginScroll(); // TODO: track all scrolls after implementing onScrollEndAnimation\n    this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);\n  },\n\n  /**\n   * Invoke this from an `onScrollEndDrag` event.\n   */\n  scrollResponderHandleScrollEndDrag: function(e: ScrollEvent) {\n    const {velocity} = e.nativeEvent;\n    // - If we are animating, then this is a \"drag\" that is stopping the scrollview and momentum end\n    //   will fire.\n    // - If velocity is non-zero, then the interaction will stop when momentum scroll ends or\n    //   another drag starts and ends.\n    // - If we don't get velocity, better to stop the interaction twice than not stop it.\n    if (\n      !this.scrollResponderIsAnimating() &&\n      (!velocity || (velocity.x === 0 && velocity.y === 0))\n    ) {\n      FrameRateLogger.endScroll();\n    }\n    this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);\n  },\n\n  /**\n   * Invoke this from an `onMomentumScrollBegin` event.\n   */\n  scrollResponderHandleMomentumScrollBegin: function(e: ScrollEvent) {\n    this.state.lastMomentumScrollBeginTime = performanceNow();\n    this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);\n  },\n\n  /**\n   * Invoke this from an `onMomentumScrollEnd` event.\n   */\n  scrollResponderHandleMomentumScrollEnd: function(e: ScrollEvent) {\n    FrameRateLogger.endScroll();\n    this.state.lastMomentumScrollEndTime = performanceNow();\n    this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);\n  },\n\n  /**\n   * Invoke this from an `onTouchStart` event.\n   *\n   * Since we know that the `SimpleEventPlugin` occurs later in the plugin\n   * order, after `ResponderEventPlugin`, we can detect that we were *not*\n   * permitted to be the responder (presumably because a contained view became\n   * responder). The `onResponderReject` won't fire in that case - it only\n   * fires when a *current* responder rejects our request.\n   *\n   * @param {PressEvent} e Touch Start event.\n   */\n  scrollResponderHandleTouchStart: function(e: PressEvent) {\n    this.state.isTouching = true;\n    this.props.onTouchStart && this.props.onTouchStart(e);\n  },\n\n  /**\n   * Invoke this from an `onTouchMove` event.\n   *\n   * Since we know that the `SimpleEventPlugin` occurs later in the plugin\n   * order, after `ResponderEventPlugin`, we can detect that we were *not*\n   * permitted to be the responder (presumably because a contained view became\n   * responder). The `onResponderReject` won't fire in that case - it only\n   * fires when a *current* responder rejects our request.\n   *\n   * @param {PressEvent} e Touch Start event.\n   */\n  scrollResponderHandleTouchMove: function(e: PressEvent) {\n    this.props.onTouchMove && this.props.onTouchMove(e);\n  },\n\n  /**\n   * A helper function for this class that lets us quickly determine if the\n   * view is currently animating. This is particularly useful to know when\n   * a touch has just started or ended.\n   */\n  scrollResponderIsAnimating: function(): boolean {\n    const now = performanceNow();\n    const timeSinceLastMomentumScrollEnd =\n      now - this.state.lastMomentumScrollEndTime;\n    const isAnimating =\n      timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS ||\n      this.state.lastMomentumScrollEndTime <\n        this.state.lastMomentumScrollBeginTime;\n    return isAnimating;\n  },\n\n  /**\n   * Returns the node that represents native view that can be scrolled.\n   * Components can pass what node to use by defining a `getScrollableNode`\n   * function otherwise `this` is used.\n   */\n  scrollResponderGetScrollableNode: function(): ?number {\n    return this.getScrollableNode\n      ? this.getScrollableNode()\n      : ReactNative.findNodeHandle(this);\n  },\n\n  /**\n   * A helper function to scroll to a specific point in the ScrollView.\n   * This is currently used to help focus child TextViews, but can also\n   * be used to quickly scroll to any element we want to focus. Syntax:\n   *\n   * `scrollResponderScrollTo(options: {x: number = 0; y: number = 0; animated: boolean = true})`\n   *\n   * Note: The weird argument signature is due to the fact that, for historical reasons,\n   * the function also accepts separate arguments as as alternative to the options object.\n   * This is deprecated due to ambiguity (y before x), and SHOULD NOT BE USED.\n   */\n  scrollResponderScrollTo: function(\n    x?: number | {x?: number, y?: number, animated?: boolean},\n    y?: number,\n    animated?: boolean,\n  ) {\n    if (typeof x === 'number') {\n      console.warn(\n        '`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead.',\n      );\n    } else {\n      ({x, y, animated} = x || {});\n    }\n    UIManager.dispatchViewManagerCommand(\n      nullthrows(this.scrollResponderGetScrollableNode()),\n      UIManager.getViewManagerConfig('RCTScrollView').Commands.scrollTo,\n      [x || 0, y || 0, animated !== false],\n    );\n  },\n\n  /**\n   * Scrolls to the end of the ScrollView, either immediately or with a smooth\n   * animation.\n   *\n   * Example:\n   *\n   * `scrollResponderScrollToEnd({animated: true})`\n   */\n  scrollResponderScrollToEnd: function(options?: {animated?: boolean}) {\n    // Default to true\n    const animated = (options && options.animated) !== false;\n    UIManager.dispatchViewManagerCommand(\n      this.scrollResponderGetScrollableNode(),\n      UIManager.getViewManagerConfig('RCTScrollView').Commands.scrollToEnd,\n      [animated],\n    );\n  },\n\n  /**\n   * Deprecated, do not use.\n   */\n  scrollResponderScrollWithoutAnimationTo: function(\n    offsetX: number,\n    offsetY: number,\n  ) {\n    console.warn(\n      '`scrollResponderScrollWithoutAnimationTo` is deprecated. Use `scrollResponderScrollTo` instead',\n    );\n    this.scrollResponderScrollTo({x: offsetX, y: offsetY, animated: false});\n  },\n\n  /**\n   * A helper function to zoom to a specific rect in the scrollview. The argument has the shape\n   * {x: number; y: number; width: number; height: number; animated: boolean = true}\n   *\n   * @platform ios\n   */\n  scrollResponderZoomTo: function(\n    rect: {|\n      x: number,\n      y: number,\n      width: number,\n      height: number,\n      animated?: boolean,\n    |},\n    animated?: boolean, // deprecated, put this inside the rect argument instead\n  ) {\n    invariant(\n      ScrollViewManager && ScrollViewManager.zoomToRect,\n      'zoomToRect is not implemented',\n    );\n    if ('animated' in rect) {\n      animated = rect.animated;\n      delete rect.animated;\n    } else if (typeof animated !== 'undefined') {\n      console.warn(\n        '`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead',\n      );\n    }\n    ScrollViewManager.zoomToRect(\n      this.scrollResponderGetScrollableNode(),\n      rect,\n      animated !== false,\n    );\n  },\n\n  /**\n   * Displays the scroll indicators momentarily.\n   */\n  scrollResponderFlashScrollIndicators: function() {\n    UIManager.dispatchViewManagerCommand(\n      this.scrollResponderGetScrollableNode(),\n      UIManager.getViewManagerConfig('RCTScrollView').Commands\n        .flashScrollIndicators,\n      [],\n    );\n  },\n\n  /**\n   * This method should be used as the callback to onFocus in a TextInputs'\n   * parent view. Note that any module using this mixin needs to return\n   * the parent view's ref in getScrollViewRef() in order to use this method.\n   * @param {number} nodeHandle The TextInput node handle\n   * @param {number} additionalOffset The scroll view's bottom \"contentInset\".\n   *        Default is 0.\n   * @param {bool} preventNegativeScrolling Whether to allow pulling the content\n   *        down to make it meet the keyboard's top. Default is false.\n   */\n  scrollResponderScrollNativeHandleToKeyboard: function(\n    nodeHandle: number,\n    additionalOffset?: number,\n    preventNegativeScrollOffset?: boolean,\n  ) {\n    this.additionalScrollOffset = additionalOffset || 0;\n    this.preventNegativeScrollOffset = !!preventNegativeScrollOffset;\n    UIManager.measureLayout(\n      nodeHandle,\n      ReactNative.findNodeHandle(this.getInnerViewNode()),\n      this.scrollResponderTextInputFocusError,\n      this.scrollResponderInputMeasureAndScrollToKeyboard,\n    );\n  },\n\n  /**\n   * The calculations performed here assume the scroll view takes up the entire\n   * screen - even if has some content inset. We then measure the offsets of the\n   * keyboard, and compensate both for the scroll view's \"contentInset\".\n   *\n   * @param {number} left Position of input w.r.t. table view.\n   * @param {number} top Position of input w.r.t. table view.\n   * @param {number} width Width of the text input.\n   * @param {number} height Height of the text input.\n   */\n  scrollResponderInputMeasureAndScrollToKeyboard: function(\n    left: number,\n    top: number,\n    width: number,\n    height: number,\n  ) {\n    let keyboardScreenY = Dimensions.get('window').height;\n    if (this.keyboardWillOpenTo) {\n      keyboardScreenY = this.keyboardWillOpenTo.endCoordinates.screenY;\n    }\n    let scrollOffsetY =\n      top - keyboardScreenY + height + this.additionalScrollOffset;\n\n    // By default, this can scroll with negative offset, pulling the content\n    // down so that the target component's bottom meets the keyboard's top.\n    // If requested otherwise, cap the offset at 0 minimum to avoid content\n    // shifting down.\n    if (this.preventNegativeScrollOffset) {\n      scrollOffsetY = Math.max(0, scrollOffsetY);\n    }\n    this.scrollResponderScrollTo({x: 0, y: scrollOffsetY, animated: true});\n\n    this.additionalOffset = 0;\n    this.preventNegativeScrollOffset = false;\n  },\n\n  scrollResponderTextInputFocusError: function(msg: string) {\n    console.error('Error measuring text field: ', msg);\n  },\n\n  /**\n   * `componentWillMount` is the closest thing to a  standard \"constructor\" for\n   * React components.\n   *\n   * The `keyboardWillShow` is called before input focus.\n   */\n  UNSAFE_componentWillMount: function() {\n    const {keyboardShouldPersistTaps} = this.props;\n    warning(\n      typeof keyboardShouldPersistTaps !== 'boolean',\n      `'keyboardShouldPersistTaps={${keyboardShouldPersistTaps}}' is deprecated. ` +\n        `Use 'keyboardShouldPersistTaps=\"${\n          keyboardShouldPersistTaps ? 'always' : 'never'\n        }\"' instead`,\n    );\n\n    this.keyboardWillOpenTo = null;\n    this.additionalScrollOffset = 0;\n    this._subscriptionKeyboardWillShow = Keyboard.addListener(\n      'keyboardWillShow',\n      this.scrollResponderKeyboardWillShow,\n    );\n\n    this._subscriptionKeyboardWillHide = Keyboard.addListener(\n      'keyboardWillHide',\n      this.scrollResponderKeyboardWillHide,\n    );\n    this._subscriptionKeyboardDidShow = Keyboard.addListener(\n      'keyboardDidShow',\n      this.scrollResponderKeyboardDidShow,\n    );\n    this._subscriptionKeyboardDidHide = Keyboard.addListener(\n      'keyboardDidHide',\n      this.scrollResponderKeyboardDidHide,\n    );\n  },\n\n  componentWillUnmount: function() {\n    if (this._subscriptionKeyboardWillShow != null) {\n      this._subscriptionKeyboardWillShow.remove();\n    }\n    if (this._subscriptionKeyboardWillHide != null) {\n      this._subscriptionKeyboardWillHide.remove();\n    }\n    if (this._subscriptionKeyboardDidShow != null) {\n      this._subscriptionKeyboardDidShow.remove();\n    }\n    if (this._subscriptionKeyboardDidHide != null) {\n      this._subscriptionKeyboardDidHide.remove();\n    }\n  },\n\n  /**\n   * Warning, this may be called several times for a single keyboard opening.\n   * It's best to store the information in this method and then take any action\n   * at a later point (either in `keyboardDidShow` or other).\n   *\n   * Here's the order that events occur in:\n   * - focus\n   * - willShow {startCoordinates, endCoordinates} several times\n   * - didShow several times\n   * - blur\n   * - willHide {startCoordinates, endCoordinates} several times\n   * - didHide several times\n   *\n   * The `ScrollResponder` module callbacks for each of these events.\n   * Even though any user could have easily listened to keyboard events\n   * themselves, using these `props` callbacks ensures that ordering of events\n   * is consistent - and not dependent on the order that the keyboard events are\n   * subscribed to. This matters when telling the scroll view to scroll to where\n   * the keyboard is headed - the scroll responder better have been notified of\n   * the keyboard destination before being instructed to scroll to where the\n   * keyboard will be. Stick to the `ScrollResponder` callbacks, and everything\n   * will work.\n   *\n   * WARNING: These callbacks will fire even if a keyboard is displayed in a\n   * different navigation pane. Filter out the events to determine if they are\n   * relevant to you. (For example, only if you receive these callbacks after\n   * you had explicitly focused a node etc).\n   */\n  scrollResponderKeyboardWillShow: function(e: KeyboardEvent) {\n    this.keyboardWillOpenTo = e;\n    this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);\n  },\n\n  scrollResponderKeyboardWillHide: function(e: KeyboardEvent) {\n    this.keyboardWillOpenTo = null;\n    this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);\n  },\n\n  scrollResponderKeyboardDidShow: function(e: KeyboardEvent) {\n    // TODO(7693961): The event for DidShow is not available on iOS yet.\n    // Use the one from WillShow and do not assign.\n    if (e) {\n      this.keyboardWillOpenTo = e;\n    }\n    this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);\n  },\n\n  scrollResponderKeyboardDidHide: function(e: KeyboardEvent) {\n    this.keyboardWillOpenTo = null;\n    this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);\n  },\n};\n\nconst ScrollResponder = {\n  Mixin: ScrollResponderMixin,\n};\n\nmodule.exports = ScrollResponder;\n"]}