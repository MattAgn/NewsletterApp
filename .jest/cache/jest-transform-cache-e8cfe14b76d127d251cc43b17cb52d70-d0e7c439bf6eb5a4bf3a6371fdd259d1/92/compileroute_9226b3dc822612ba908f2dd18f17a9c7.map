{"version":3,"sources":["compile-route.js"],"names":["generateMatcher","require","sanitizeRoute","route","method","toLowerCase","identifier","name","matcher","validateRoute","Error","limitMatcher","repeat","timesLeft","url","options","match","reset","module","exports"],"mappings":";;;;AAAA,IAAMA,eAAe,GAAGC,OAAO,CAAC,oBAAD,CAA/B;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,KAAK,EAAI;AAC9BA,EAAAA,KAAK,GAAG,uBAAc,EAAd,EAAkBA,KAAlB,CAAR;;AAEA,MAAIA,KAAK,CAACC,MAAV,EAAkB;AACjBD,IAAAA,KAAK,CAACC,MAAN,GAAeD,KAAK,CAACC,MAAN,CAAaC,WAAb,EAAf;AACA;;AACDF,EAAAA,KAAK,CAACG,UAAN,GAAmBH,KAAK,CAACI,IAAN,IAAcJ,KAAK,CAACK,OAAvC;AAEA,SAAOL,KAAP;AACA,CATD;;AAWA,IAAMM,aAAa,GAAG,SAAhBA,aAAgB,CAAAN,KAAK,EAAI;AAC9B,MAAI,EAAE,cAAcA,KAAhB,CAAJ,EAA4B;AAC3B,UAAM,IAAIO,KAAJ,CAAU,+CAAV,CAAN;AACA;;AAED,MAAI,CAACP,KAAK,CAACK,OAAX,EAAoB;AACnB,UAAM,IAAIE,KAAJ,CACL,yFADK,CAAN;AAGA;AACD,CAVD;;AAYA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAR,KAAK,EAAI;AAC7B,MAAI,CAACA,KAAK,CAACS,MAAX,EAAmB;AAClB;AACA;;AAED,MAAMJ,OAAO,GAAGL,KAAK,CAACK,OAAtB;AACA,MAAIK,SAAS,GAAGV,KAAK,CAACS,MAAtB;;AACAT,EAAAA,KAAK,CAACK,OAAN,GAAgB,UAACM,GAAD,EAAMC,OAAN,EAAkB;AACjC,QAAMC,KAAK,GAAGH,SAAS,IAAIL,OAAO,CAACM,GAAD,EAAMC,OAAN,CAAlC;;AACA,QAAIC,KAAJ,EAAW;AACVH,MAAAA,SAAS;AACT,aAAO,IAAP;AACA;AACD,GAND;;AAOAV,EAAAA,KAAK,CAACc,KAAN,GAAc;AAAA,WAAOJ,SAAS,GAAGV,KAAK,CAACS,MAAzB;AAAA,GAAd;AACA,CAfD;;AAiBAM,MAAM,CAACC,OAAP,GAAiB,UAAAhB,KAAK,EAAI;AACzBM,EAAAA,aAAa,CAACN,KAAD,CAAb;AACAA,EAAAA,KAAK,GAAGD,aAAa,CAACC,KAAD,CAArB;AACAA,EAAAA,KAAK,CAACK,OAAN,GAAgBR,eAAe,CAACG,KAAD,CAA/B;AACAQ,EAAAA,YAAY,CAACR,KAAD,CAAZ;AACA,SAAOA,KAAP;AACA,CAND;;AAQAe,MAAM,CAACC,OAAP,CAAejB,aAAf,GAA+BA,aAA/B","sourcesContent":["const generateMatcher = require('./generate-matcher');\n\nconst sanitizeRoute = route => {\n\troute = Object.assign({}, route);\n\n\tif (route.method) {\n\t\troute.method = route.method.toLowerCase();\n\t}\n\troute.identifier = route.name || route.matcher;\n\n\treturn route;\n};\n\nconst validateRoute = route => {\n\tif (!('response' in route)) {\n\t\tthrow new Error('fetch-mock: Each route must define a response');\n\t}\n\n\tif (!route.matcher) {\n\t\tthrow new Error(\n\t\t\t'fetch-mock: Each route must specify a string, regex or function to match calls to fetch'\n\t\t);\n\t}\n};\n\nconst limitMatcher = route => {\n\tif (!route.repeat) {\n\t\treturn;\n\t}\n\n\tconst matcher = route.matcher;\n\tlet timesLeft = route.repeat;\n\troute.matcher = (url, options) => {\n\t\tconst match = timesLeft && matcher(url, options);\n\t\tif (match) {\n\t\t\ttimesLeft--;\n\t\t\treturn true;\n\t\t}\n\t};\n\troute.reset = () => (timesLeft = route.repeat);\n};\n\nmodule.exports = route => {\n\tvalidateRoute(route);\n\troute = sanitizeRoute(route);\n\troute.matcher = generateMatcher(route);\n\tlimitMatcher(route);\n\treturn route;\n};\n\nmodule.exports.sanitizeRoute = sanitizeRoute;\n"]}