{"version":3,"sources":["YellowBoxSymbolication.js"],"names":["symbolicateStackTrace","require","cache","Map","YellowBoxSymbolication","delete","stack","getCacheKey","symbolicate","key","promise","get","then","sanitize","set","JSON","stringify","maybeStack","Array","isArray","Error","maybeFrame","column","file","lineNumber","methodName","push","module","exports"],"mappings":"AAUA;;AAEA,IAAMA,qBAAqB,GAAGC,OAAO,CAAC,2CAAD,CAArC;;AAQA,IAAMC,KAAoC,GAAG,IAAIC,GAAJ,EAA7C;AAEA,IAAMC,sBAAsB,GAAG;AAC7BC,EAAAA,MAD6B,mBACtBC,KADsB,EACF;AACzBJ,IAAAA,KAAK,CAACG,MAAN,CAAaE,WAAW,CAACD,KAAD,CAAxB;AACD,GAH4B;AAK7BE,EAAAA,WAL6B,uBAKjBF,KALiB,EAKa;AACxC,QAAMG,GAAG,GAAGF,WAAW,CAACD,KAAD,CAAvB;AAEA,QAAII,OAAO,GAAGR,KAAK,CAACS,GAAN,CAAUF,GAAV,CAAd;;AACA,QAAIC,OAAO,IAAI,IAAf,EAAqB;AACnBA,MAAAA,OAAO,GAAGV,qBAAqB,CAACM,KAAD,CAArB,CAA6BM,IAA7B,CAAkCC,QAAlC,CAAV;AACAX,MAAAA,KAAK,CAACY,GAAN,CAAUL,GAAV,EAAeC,OAAf;AACD;;AAED,WAAOA,OAAP;AACD;AAf4B,CAA/B;;AAkBA,IAAMH,WAAW,GAAG,SAAdA,WAAc,CAACD,KAAD,EAA4B;AAC9C,SAAOS,IAAI,CAACC,SAAL,CAAeV,KAAf,CAAP;AACD,CAFD;;AAOA,IAAMO,QAAQ,GAAG,SAAXA,QAAW,CAACI,UAAD,EAA8B;AAC7C,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,UAAd,CAAL,EAAgC;AAC9B,UAAM,IAAIG,KAAJ,CAAU,gCAAV,CAAN;AACD;;AACD,MAAMd,KAAK,GAAG,EAAd;;AACA,uBAAyBW,UAAzB,gKAAqC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,QAA1BI,WAA0B;;AACnC,QAAI,OAAOA,WAAP,KAAsB,QAAtB,IAAkCA,WAAU,IAAI,IAApD,EAA0D;AACxD,YAAM,IAAID,KAAJ,CAAU,4CAAV,CAAN;AACD;;AACD,QAAI,OAAOC,WAAU,CAACC,MAAlB,KAA6B,QAA7B,IAAyCD,WAAU,CAACC,MAAX,IAAqB,IAAlE,EAAwE;AACtE,YAAM,IAAIF,KAAJ,CAAU,wDAAV,CAAN;AACD;;AACD,QAAI,OAAOC,WAAU,CAACE,IAAlB,KAA2B,QAA/B,EAAyC;AACvC,YAAM,IAAIH,KAAJ,CAAU,6CAAV,CAAN;AACD;;AACD,QAAI,OAAOC,WAAU,CAACG,UAAlB,KAAiC,QAArC,EAA+C;AAC7C,YAAM,IAAIJ,KAAJ,CAAU,mDAAV,CAAN;AACD;;AACD,QAAI,OAAOC,WAAU,CAACI,UAAlB,KAAiC,QAArC,EAA+C;AAC7C,YAAM,IAAIL,KAAJ,CAAU,mDAAV,CAAN;AACD;;AACDd,IAAAA,KAAK,CAACoB,IAAN,CAAW;AACTJ,MAAAA,MAAM,EAAED,WAAU,CAACC,MADV;AAETC,MAAAA,IAAI,EAAEF,WAAU,CAACE,IAFR;AAGTC,MAAAA,UAAU,EAAEH,WAAU,CAACG,UAHd;AAITC,MAAAA,UAAU,EAAEJ,WAAU,CAACI;AAJd,KAAX;AAMD;;AACD,SAAOnB,KAAP;AACD,CA7BD;;AA+BAqB,MAAM,CAACC,OAAP,GAAiBxB,sBAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nconst symbolicateStackTrace = require('../../Core/Devtools/symbolicateStackTrace');\n\nimport type {StackFrame} from '../../Core/Devtools/parseErrorStack';\n\ntype CacheKey = string;\n\nexport type Stack = Array<StackFrame>;\n\nconst cache: Map<CacheKey, Promise<Stack>> = new Map();\n\nconst YellowBoxSymbolication = {\n  delete(stack: Stack): void {\n    cache.delete(getCacheKey(stack));\n  },\n\n  symbolicate(stack: Stack): Promise<Stack> {\n    const key = getCacheKey(stack);\n\n    let promise = cache.get(key);\n    if (promise == null) {\n      promise = symbolicateStackTrace(stack).then(sanitize);\n      cache.set(key, promise);\n    }\n\n    return promise;\n  },\n};\n\nconst getCacheKey = (stack: Stack): CacheKey => {\n  return JSON.stringify(stack);\n};\n\n/**\n * Sanitize because sometimes, `symbolicateStackTrace` gives us invalid values.\n */\nconst sanitize = (maybeStack: mixed): Stack => {\n  if (!Array.isArray(maybeStack)) {\n    throw new Error('Expected stack to be an array.');\n  }\n  const stack = [];\n  for (const maybeFrame of maybeStack) {\n    if (typeof maybeFrame !== 'object' || maybeFrame == null) {\n      throw new Error('Expected each stack frame to be an object.');\n    }\n    if (typeof maybeFrame.column !== 'number' && maybeFrame.column != null) {\n      throw new Error('Expected stack frame `column` to be a nullable number.');\n    }\n    if (typeof maybeFrame.file !== 'string') {\n      throw new Error('Expected stack frame `file` to be a string.');\n    }\n    if (typeof maybeFrame.lineNumber !== 'number') {\n      throw new Error('Expected stack frame `lineNumber` to be a number.');\n    }\n    if (typeof maybeFrame.methodName !== 'string') {\n      throw new Error('Expected stack frame `methodName` to be a string.');\n    }\n    stack.push({\n      column: maybeFrame.column,\n      file: maybeFrame.file,\n      lineNumber: maybeFrame.lineNumber,\n      methodName: maybeFrame.methodName,\n    });\n  }\n  return stack;\n};\n\nmodule.exports = YellowBoxSymbolication;\n"]}