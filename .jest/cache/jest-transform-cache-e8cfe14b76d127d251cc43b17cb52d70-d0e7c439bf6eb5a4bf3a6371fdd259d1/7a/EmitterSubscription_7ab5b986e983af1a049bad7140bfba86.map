{"version":3,"sources":["EmitterSubscription.js"],"names":["EventSubscription","require","EmitterSubscription","emitter","subscriber","listener","context","removeSubscription","module","exports"],"mappings":"AAUA;;;;;;;;;;;;;;AAEA,IAAMA,iBAAiB,GAAGC,OAAO,CAAC,qBAAD,CAAjC;;IAQMC,mB;;;AAeJ,+BACEC,OADF,EAEEC,UAFF,EAGEC,QAHF,EAIEC,OAJF,EAKE;AAAA;;AAAA;AACA,yHAAMF,UAAN;AACA,UAAKD,OAAL,GAAeA,OAAf;AACA,UAAKE,QAAL,GAAgBA,QAAhB;AACA,UAAKC,OAAL,GAAeA,OAAf;AAJA;AAKD;;;;6BAQQ;AACP,WAAKH,OAAL,CAAaI,kBAAb,CAAgC,IAAhC;AACD;;;EAnC+BP,iB;;AAsClCQ,MAAM,CAACC,OAAP,GAAiBP,mBAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst EventSubscription = require('./EventSubscription');\n\nimport type EventEmitter from './EventEmitter';\nimport type EventSubscriptionVendor from './EventSubscriptionVendor';\n\n/**\n * EmitterSubscription represents a subscription with listener and context data.\n */\nclass EmitterSubscription extends EventSubscription {\n  emitter: EventEmitter;\n  listener: Function;\n  context: ?Object;\n\n  /**\n   * @param {EventEmitter} emitter - The event emitter that registered this\n   *   subscription\n   * @param {EventSubscriptionVendor} subscriber - The subscriber that controls\n   *   this subscription\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n  constructor(\n    emitter: EventEmitter,\n    subscriber: EventSubscriptionVendor,\n    listener: Function,\n    context: ?Object,\n  ) {\n    super(subscriber);\n    this.emitter = emitter;\n    this.listener = listener;\n    this.context = context;\n  }\n\n  /**\n   * Removes this subscription from the emitter that registered it.\n   * Note: we're overriding the `remove()` method of EventSubscription here\n   * but deliberately not calling `super.remove()` as the responsibility\n   * for removing the subscription lies with the EventEmitter.\n   */\n  remove() {\n    this.emitter.removeSubscription(this);\n  }\n}\n\nmodule.exports = EmitterSubscription;\n"]}