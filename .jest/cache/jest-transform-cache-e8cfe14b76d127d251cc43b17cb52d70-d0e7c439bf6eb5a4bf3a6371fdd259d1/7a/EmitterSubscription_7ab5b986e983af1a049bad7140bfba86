9b9166843776b622d4963b828f01cec6
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var EventSubscription = require('./EventSubscription');

var EmitterSubscription = function (_EventSubscription) {
  (0, _inherits2.default)(EmitterSubscription, _EventSubscription);

  function EmitterSubscription(emitter, subscriber, listener, context) {
    var _this;

    (0, _classCallCheck2.default)(this, EmitterSubscription);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(EmitterSubscription).call(this, subscriber));
    _this.emitter = emitter;
    _this.listener = listener;
    _this.context = context;
    return _this;
  }

  (0, _createClass2.default)(EmitterSubscription, [{
    key: "remove",
    value: function remove() {
      this.emitter.removeSubscription(this);
    }
  }]);
  return EmitterSubscription;
}(EventSubscription);

module.exports = EmitterSubscription;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkVtaXR0ZXJTdWJzY3JpcHRpb24uanMiXSwibmFtZXMiOlsiRXZlbnRTdWJzY3JpcHRpb24iLCJyZXF1aXJlIiwiRW1pdHRlclN1YnNjcmlwdGlvbiIsImVtaXR0ZXIiLCJzdWJzY3JpYmVyIiwibGlzdGVuZXIiLCJjb250ZXh0IiwicmVtb3ZlU3Vic2NyaXB0aW9uIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBVUE7Ozs7Ozs7Ozs7Ozs7O0FBRUEsSUFBTUEsaUJBQWlCLEdBQUdDLE9BQU8sQ0FBQyxxQkFBRCxDQUFqQzs7SUFRTUMsbUI7OztBQWVKLCtCQUNFQyxPQURGLEVBRUVDLFVBRkYsRUFHRUMsUUFIRixFQUlFQyxPQUpGLEVBS0U7QUFBQTs7QUFBQTtBQUNBLHlIQUFNRixVQUFOO0FBQ0EsVUFBS0QsT0FBTCxHQUFlQSxPQUFmO0FBQ0EsVUFBS0UsUUFBTCxHQUFnQkEsUUFBaEI7QUFDQSxVQUFLQyxPQUFMLEdBQWVBLE9BQWY7QUFKQTtBQUtEOzs7OzZCQVFRO0FBQ1AsV0FBS0gsT0FBTCxDQUFhSSxrQkFBYixDQUFnQyxJQUFoQztBQUNEOzs7RUFuQytCUCxpQjs7QUFzQ2xDUSxNQUFNLENBQUNDLE9BQVAsR0FBaUJQLG1CQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IEV2ZW50U3Vic2NyaXB0aW9uID0gcmVxdWlyZSgnLi9FdmVudFN1YnNjcmlwdGlvbicpO1xuXG5pbXBvcnQgdHlwZSBFdmVudEVtaXR0ZXIgZnJvbSAnLi9FdmVudEVtaXR0ZXInO1xuaW1wb3J0IHR5cGUgRXZlbnRTdWJzY3JpcHRpb25WZW5kb3IgZnJvbSAnLi9FdmVudFN1YnNjcmlwdGlvblZlbmRvcic7XG5cbi8qKlxuICogRW1pdHRlclN1YnNjcmlwdGlvbiByZXByZXNlbnRzIGEgc3Vic2NyaXB0aW9uIHdpdGggbGlzdGVuZXIgYW5kIGNvbnRleHQgZGF0YS5cbiAqL1xuY2xhc3MgRW1pdHRlclN1YnNjcmlwdGlvbiBleHRlbmRzIEV2ZW50U3Vic2NyaXB0aW9uIHtcbiAgZW1pdHRlcjogRXZlbnRFbWl0dGVyO1xuICBsaXN0ZW5lcjogRnVuY3Rpb247XG4gIGNvbnRleHQ6ID9PYmplY3Q7XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RXZlbnRFbWl0dGVyfSBlbWl0dGVyIC0gVGhlIGV2ZW50IGVtaXR0ZXIgdGhhdCByZWdpc3RlcmVkIHRoaXNcbiAgICogICBzdWJzY3JpcHRpb25cbiAgICogQHBhcmFtIHtFdmVudFN1YnNjcmlwdGlvblZlbmRvcn0gc3Vic2NyaWJlciAtIFRoZSBzdWJzY3JpYmVyIHRoYXQgY29udHJvbHNcbiAgICogICB0aGlzIHN1YnNjcmlwdGlvblxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBsaXN0ZW5lciAtIEZ1bmN0aW9uIHRvIGludm9rZSB3aGVuIHRoZSBzcGVjaWZpZWQgZXZlbnQgaXNcbiAgICogICBlbWl0dGVkXG4gICAqIEBwYXJhbSB7Kn0gY29udGV4dCAtIE9wdGlvbmFsIGNvbnRleHQgb2JqZWN0IHRvIHVzZSB3aGVuIGludm9raW5nIHRoZVxuICAgKiAgIGxpc3RlbmVyXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBlbWl0dGVyOiBFdmVudEVtaXR0ZXIsXG4gICAgc3Vic2NyaWJlcjogRXZlbnRTdWJzY3JpcHRpb25WZW5kb3IsXG4gICAgbGlzdGVuZXI6IEZ1bmN0aW9uLFxuICAgIGNvbnRleHQ6ID9PYmplY3QsXG4gICkge1xuICAgIHN1cGVyKHN1YnNjcmliZXIpO1xuICAgIHRoaXMuZW1pdHRlciA9IGVtaXR0ZXI7XG4gICAgdGhpcy5saXN0ZW5lciA9IGxpc3RlbmVyO1xuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyB0aGlzIHN1YnNjcmlwdGlvbiBmcm9tIHRoZSBlbWl0dGVyIHRoYXQgcmVnaXN0ZXJlZCBpdC5cbiAgICogTm90ZTogd2UncmUgb3ZlcnJpZGluZyB0aGUgYHJlbW92ZSgpYCBtZXRob2Qgb2YgRXZlbnRTdWJzY3JpcHRpb24gaGVyZVxuICAgKiBidXQgZGVsaWJlcmF0ZWx5IG5vdCBjYWxsaW5nIGBzdXBlci5yZW1vdmUoKWAgYXMgdGhlIHJlc3BvbnNpYmlsaXR5XG4gICAqIGZvciByZW1vdmluZyB0aGUgc3Vic2NyaXB0aW9uIGxpZXMgd2l0aCB0aGUgRXZlbnRFbWl0dGVyLlxuICAgKi9cbiAgcmVtb3ZlKCkge1xuICAgIHRoaXMuZW1pdHRlci5yZW1vdmVTdWJzY3JpcHRpb24odGhpcyk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBFbWl0dGVyU3Vic2NyaXB0aW9uO1xuIl19