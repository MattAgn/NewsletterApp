{"version":3,"sources":["createPerformanceLogger.js"],"names":["Systrace","require","infoLog","performanceNow","global","nativeQPLTimestamp","nativePerformanceNow","_cookies","PRINT_TO_CONSOLE","createPerformanceLogger","result","_timespans","_extras","_points","addTimespan","key","lengthInMs","description","__DEV__","totalTime","startTimespan","startTime","beginAsyncEvent","stopTimespan","timespan","endTime","endAsyncEvent","clear","clearCompleted","clearExceptTimespans","keys","Object","reduce","previous","indexOf","currentTimestamp","getTimespans","hasTimespan","logTimespans","addTimespans","newTimespans","labels","ii","l","length","label","setExtra","value","currentValue","attemptedValue","getExtras","removeExtra","logExtras","markPoint","timestamp","getPoints","logPoints","logEverything","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst Systrace = require('../Performance/Systrace');\n\nconst infoLog = require('./infoLog');\nconst performanceNow =\n  global.nativeQPLTimestamp ||\n  global.nativePerformanceNow ||\n  require('fbjs/lib/performanceNow');\n\ntype Timespan = {\n  description?: string,\n  totalTime?: number,\n  startTime?: number,\n  endTime?: number,\n};\n\nexport type IPerformanceLogger = {\n  addTimespan(string, number, string | void): void,\n  startTimespan(string, string | void): void,\n  stopTimespan(string): void,\n  clear(): void,\n  clearCompleted(): void,\n  clearExceptTimespans(Array<string>): void,\n  currentTimestamp(): number,\n  getTimespans(): {[key: string]: Timespan},\n  hasTimespan(string): boolean,\n  logTimespans(): void,\n  addTimespans(Array<number>, Array<string>): void,\n  setExtra(string, any): void,\n  getExtras(): {[key: string]: any},\n  removeExtra(string): ?any,\n  logExtras(): void,\n  markPoint(string, number | void): void,\n  getPoints(): {[key: string]: number},\n  logPoints(): void,\n  logEverything(): void,\n};\n\nconst _cookies: {[key: string]: number} = {};\n\nconst PRINT_TO_CONSOLE: false = false; // Type as false to prevent accidentally committing `true`;\n\n/**\n * This function creates peformance loggers that can be used to collect and log\n * various performance data such as timespans, points and extras.\n * The loggers need to have minimal overhead since they're used in production.\n */\nfunction createPerformanceLogger(): IPerformanceLogger {\n  const result: IPerformanceLogger & {\n    _timespans: {[key: string]: Timespan},\n    _extras: {[key: string]: any},\n    _points: {[key: string]: number},\n  } = {\n    _timespans: {},\n    _extras: {},\n    _points: {},\n\n    addTimespan(key: string, lengthInMs: number, description?: string) {\n      if (this._timespans[key]) {\n        if (__DEV__) {\n          infoLog(\n            'PerformanceLogger: Attempting to add a timespan that already exists ',\n            key,\n          );\n        }\n        return;\n      }\n\n      this._timespans[key] = {\n        description: description,\n        totalTime: lengthInMs,\n      };\n    },\n\n    startTimespan(key: string, description?: string) {\n      if (this._timespans[key]) {\n        if (__DEV__) {\n          infoLog(\n            'PerformanceLogger: Attempting to start a timespan that already exists ',\n            key,\n          );\n        }\n        return;\n      }\n\n      this._timespans[key] = {\n        description: description,\n        startTime: performanceNow(),\n      };\n      _cookies[key] = Systrace.beginAsyncEvent(key);\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'start: ' + key);\n      }\n    },\n\n    stopTimespan(key: string) {\n      const timespan = this._timespans[key];\n      if (!timespan || !timespan.startTime) {\n        if (__DEV__) {\n          infoLog(\n            'PerformanceLogger: Attempting to end a timespan that has not started ',\n            key,\n          );\n        }\n        return;\n      }\n      if (timespan.endTime) {\n        if (__DEV__) {\n          infoLog(\n            'PerformanceLogger: Attempting to end a timespan that has already ended ',\n            key,\n          );\n        }\n        return;\n      }\n\n      timespan.endTime = performanceNow();\n      timespan.totalTime = timespan.endTime - (timespan.startTime || 0);\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'end: ' + key);\n      }\n\n      Systrace.endAsyncEvent(key, _cookies[key]);\n      delete _cookies[key];\n    },\n\n    clear() {\n      this._timespans = {};\n      this._extras = {};\n      this._points = {};\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'clear');\n      }\n    },\n\n    clearCompleted() {\n      for (const key in this._timespans) {\n        if (this._timespans[key].totalTime) {\n          delete this._timespans[key];\n        }\n      }\n      this._extras = {};\n      this._points = {};\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'clearCompleted');\n      }\n    },\n\n    clearExceptTimespans(keys: Array<string>) {\n      this._timespans = Object.keys(this._timespans).reduce(function(\n        previous,\n        key,\n      ) {\n        if (keys.indexOf(key) !== -1) {\n          previous[key] = this._timespans[key];\n        }\n        return previous;\n      },\n      {});\n      this._extras = {};\n      this._points = {};\n      if (PRINT_TO_CONSOLE) {\n        infoLog('PerformanceLogger.js', 'clearExceptTimespans', keys);\n      }\n    },\n\n    currentTimestamp() {\n      return performanceNow();\n    },\n\n    getTimespans() {\n      return this._timespans;\n    },\n\n    hasTimespan(key: string) {\n      return !!this._timespans[key];\n    },\n\n    logTimespans() {\n      for (const key in this._timespans) {\n        if (this._timespans[key].totalTime) {\n          infoLog(key + ': ' + this._timespans[key].totalTime + 'ms');\n        }\n      }\n    },\n\n    addTimespans(newTimespans: Array<number>, labels: Array<string>) {\n      for (let ii = 0, l = newTimespans.length; ii < l; ii += 2) {\n        const label = labels[ii / 2];\n        this.addTimespan(label, newTimespans[ii + 1] - newTimespans[ii], label);\n      }\n    },\n\n    setExtra(key: string, value: any) {\n      if (this._extras[key]) {\n        if (__DEV__) {\n          infoLog(\n            'PerformanceLogger: Attempting to set an extra that already exists ',\n            {key, currentValue: this._extras[key], attemptedValue: value},\n          );\n        }\n        return;\n      }\n      this._extras[key] = value;\n    },\n\n    getExtras() {\n      return this._extras;\n    },\n\n    removeExtra(key: string): ?any {\n      const value = this._extras[key];\n      delete this._extras[key];\n      return value;\n    },\n\n    logExtras() {\n      infoLog(this._extras);\n    },\n\n    markPoint(key: string, timestamp?: number) {\n      if (this._points[key]) {\n        if (__DEV__) {\n          infoLog(\n            'PerformanceLogger: Attempting to mark a point that has been already logged ',\n            key,\n          );\n        }\n        return;\n      }\n      this._points[key] = timestamp ?? performanceNow();\n    },\n\n    getPoints() {\n      return this._points;\n    },\n\n    logPoints() {\n      for (const key in this._points) {\n        infoLog(key + ': ' + this._points[key] + 'ms');\n      }\n    },\n\n    logEverything() {\n      this.logTimespans();\n      this.logExtras();\n      this.logPoints();\n    },\n  };\n  return result;\n}\n\nmodule.exports = createPerformanceLogger;\n"]}