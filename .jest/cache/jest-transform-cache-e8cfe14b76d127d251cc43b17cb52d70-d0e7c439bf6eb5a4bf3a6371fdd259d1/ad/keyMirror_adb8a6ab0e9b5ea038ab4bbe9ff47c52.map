{"version":3,"sources":["keyMirror.js"],"names":["invariant","require","keyMirror","obj","ret","key","Object","Array","isArray","process","env","NODE_ENV","hasOwnProperty","module","exports"],"mappings":"AASA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AAqBA,IAAIC,SAAS,GAAG,SAASA,SAAT,CAAmBC,GAAnB,EAAwB;AACtC,MAAIC,GAAG,GAAG,EAAV;AACA,MAAIC,GAAJ;AACA,IAAEF,GAAG,YAAYG,MAAf,IAAyB,CAACC,KAAK,CAACC,OAAN,CAAcL,GAAd,CAA5B,IAAkDM,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCX,SAAS,CAAC,KAAD,EAAQ,6CAAR,CAAjD,GAA0GA,SAAS,CAAC,KAAD,CAArK,GAA+K,KAAK,CAApL;;AAEA,OAAKK,GAAL,IAAYF,GAAZ,EAAiB;AACf,QAAI,CAACA,GAAG,CAACS,cAAJ,CAAmBP,GAAnB,CAAL,EAA8B;AAC5B;AACD;;AAEDD,IAAAA,GAAG,CAACC,GAAD,CAAH,GAAWA,GAAX;AACD;;AAED,SAAOD,GAAP;AACD,CAdD;;AAgBAS,MAAM,CAACC,OAAP,GAAiBZ,SAAjB","sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks static-only\n * \n */\n'use strict';\n\nvar invariant = require(\"./invariant\");\n/**\n * Constructs an enumeration with keys equal to their value.\n *\n * For example:\n *\n *   var COLORS = keyMirror({blue: null, red: null});\n *   var myColor = COLORS.blue;\n *   var isColorValid = !!COLORS[myColor];\n *\n * The last line could not be performed if the values of the generated enum were\n * not equal to their keys.\n *\n *   Input:  {key1: val1, key2: val2}\n *   Output: {key1: key1, key2: key2}\n *\n * @param {object} obj\n * @return {object}\n */\n\n\nvar keyMirror = function keyMirror(obj) {\n  var ret = {};\n  var key;\n  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : void 0;\n\n  for (key in obj) {\n    if (!obj.hasOwnProperty(key)) {\n      continue;\n    }\n\n    ret[key] = key;\n  }\n\n  return ret;\n};\n\nmodule.exports = keyMirror;"]}