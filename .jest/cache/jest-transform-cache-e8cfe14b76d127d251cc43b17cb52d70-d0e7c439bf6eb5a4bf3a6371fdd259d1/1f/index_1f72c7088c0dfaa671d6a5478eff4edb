68d272fd19e1cee4b010f8cbba4a360f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var setUpAndTearDown = require('./set-up-and-tear-down');

var fetchHandler = require('./fetch-handler');

var inspecting = require('./inspecting');

var FetchMock = (0, _extends2.default)({}, fetchHandler, setUpAndTearDown, inspecting);
FetchMock.config = {
  fallbackToNetwork: false,
  includeContentLength: true,
  sendAsJson: true,
  warnOnFallback: true,
  overwriteRoutes: undefined
};

FetchMock.createInstance = function (isLibrary) {
  var instance = Object.create(FetchMock);
  instance._uncompiledRoutes = (this._uncompiledRoutes || []).slice();
  instance.routes = instance._uncompiledRoutes.map(function (config) {
    return instance.compileRoute(config);
  });
  instance.fallbackResponse = this.fallbackResponse || undefined;
  instance.config = (0, _extends2.default)({}, this.config || FetchMock.config);
  instance._calls = [];
  instance._holdingPromises = [];
  instance.bindMethods();

  if (isLibrary) {
    (0, _extends2.default)(instance, {
      MATCHED: true,
      UNMATCHED: false,
      fetchMock: instance
    });
  }

  return instance;
};

FetchMock.bindMethods = function () {
  this.fetchHandler = FetchMock.fetchHandler.bind(this);
  this.reset = this.restore = FetchMock.reset.bind(this);
  this.resetHistory = FetchMock.resetHistory.bind(this);
  this.resetBehavior = FetchMock.resetBehavior.bind(this);
};

FetchMock.sandbox = function () {
  var proxy = function proxy(url, options) {
    return sandbox.fetchHandler(url, options);
  };

  var sandbox = (0, _extends2.default)(proxy, FetchMock, this.createInstance());
  sandbox.bindMethods();
  sandbox.isSandbox = true;
  return sandbox;
};

module.exports = FetchMock;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInNldFVwQW5kVGVhckRvd24iLCJyZXF1aXJlIiwiZmV0Y2hIYW5kbGVyIiwiaW5zcGVjdGluZyIsIkZldGNoTW9jayIsImNvbmZpZyIsImZhbGxiYWNrVG9OZXR3b3JrIiwiaW5jbHVkZUNvbnRlbnRMZW5ndGgiLCJzZW5kQXNKc29uIiwid2Fybk9uRmFsbGJhY2siLCJvdmVyd3JpdGVSb3V0ZXMiLCJ1bmRlZmluZWQiLCJjcmVhdGVJbnN0YW5jZSIsImlzTGlicmFyeSIsImluc3RhbmNlIiwiT2JqZWN0IiwiY3JlYXRlIiwiX3VuY29tcGlsZWRSb3V0ZXMiLCJzbGljZSIsInJvdXRlcyIsIm1hcCIsImNvbXBpbGVSb3V0ZSIsImZhbGxiYWNrUmVzcG9uc2UiLCJfY2FsbHMiLCJfaG9sZGluZ1Byb21pc2VzIiwiYmluZE1ldGhvZHMiLCJNQVRDSEVEIiwiVU5NQVRDSEVEIiwiZmV0Y2hNb2NrIiwiYmluZCIsInJlc2V0IiwicmVzdG9yZSIsInJlc2V0SGlzdG9yeSIsInJlc2V0QmVoYXZpb3IiLCJzYW5kYm94IiwicHJveHkiLCJ1cmwiLCJvcHRpb25zIiwiaXNTYW5kYm94IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQU1BLGdCQUFnQixHQUFHQyxPQUFPLENBQUMsd0JBQUQsQ0FBaEM7O0FBQ0EsSUFBTUMsWUFBWSxHQUFHRCxPQUFPLENBQUMsaUJBQUQsQ0FBNUI7O0FBQ0EsSUFBTUUsVUFBVSxHQUFHRixPQUFPLENBQUMsY0FBRCxDQUExQjs7QUFFQSxJQUFNRyxTQUFTLEdBQUcsdUJBQWMsRUFBZCxFQUFrQkYsWUFBbEIsRUFBZ0NGLGdCQUFoQyxFQUFrREcsVUFBbEQsQ0FBbEI7QUFFQUMsU0FBUyxDQUFDQyxNQUFWLEdBQW1CO0FBQ2xCQyxFQUFBQSxpQkFBaUIsRUFBRSxLQUREO0FBRWxCQyxFQUFBQSxvQkFBb0IsRUFBRSxJQUZKO0FBR2xCQyxFQUFBQSxVQUFVLEVBQUUsSUFITTtBQUlsQkMsRUFBQUEsY0FBYyxFQUFFLElBSkU7QUFLbEJDLEVBQUFBLGVBQWUsRUFBRUM7QUFMQyxDQUFuQjs7QUFRQVAsU0FBUyxDQUFDUSxjQUFWLEdBQTJCLFVBQVNDLFNBQVQsRUFBb0I7QUFDOUMsTUFBTUMsUUFBUSxHQUFHQyxNQUFNLENBQUNDLE1BQVAsQ0FBY1osU0FBZCxDQUFqQjtBQUNBVSxFQUFBQSxRQUFRLENBQUNHLGlCQUFULEdBQTZCLENBQUMsS0FBS0EsaUJBQUwsSUFBMEIsRUFBM0IsRUFBK0JDLEtBQS9CLEVBQTdCO0FBQ0FKLEVBQUFBLFFBQVEsQ0FBQ0ssTUFBVCxHQUFrQkwsUUFBUSxDQUFDRyxpQkFBVCxDQUEyQkcsR0FBM0IsQ0FBK0IsVUFBQWYsTUFBTTtBQUFBLFdBQ3REUyxRQUFRLENBQUNPLFlBQVQsQ0FBc0JoQixNQUF0QixDQURzRDtBQUFBLEdBQXJDLENBQWxCO0FBR0FTLEVBQUFBLFFBQVEsQ0FBQ1EsZ0JBQVQsR0FBNEIsS0FBS0EsZ0JBQUwsSUFBeUJYLFNBQXJEO0FBQ0FHLEVBQUFBLFFBQVEsQ0FBQ1QsTUFBVCxHQUFrQix1QkFBYyxFQUFkLEVBQWtCLEtBQUtBLE1BQUwsSUFBZUQsU0FBUyxDQUFDQyxNQUEzQyxDQUFsQjtBQUNBUyxFQUFBQSxRQUFRLENBQUNTLE1BQVQsR0FBa0IsRUFBbEI7QUFDQVQsRUFBQUEsUUFBUSxDQUFDVSxnQkFBVCxHQUE0QixFQUE1QjtBQUNBVixFQUFBQSxRQUFRLENBQUNXLFdBQVQ7O0FBQ0EsTUFBSVosU0FBSixFQUFlO0FBQ2QsMkJBQWNDLFFBQWQsRUFBd0I7QUFDdkJZLE1BQUFBLE9BQU8sRUFBRSxJQURjO0FBRXZCQyxNQUFBQSxTQUFTLEVBQUUsS0FGWTtBQUd2QkMsTUFBQUEsU0FBUyxFQUFFZDtBQUhZLEtBQXhCO0FBS0E7O0FBQ0QsU0FBT0EsUUFBUDtBQUNBLENBbkJEOztBQXFCQVYsU0FBUyxDQUFDcUIsV0FBVixHQUF3QixZQUFXO0FBQ2xDLE9BQUt2QixZQUFMLEdBQW9CRSxTQUFTLENBQUNGLFlBQVYsQ0FBdUIyQixJQUF2QixDQUE0QixJQUE1QixDQUFwQjtBQUNBLE9BQUtDLEtBQUwsR0FBYSxLQUFLQyxPQUFMLEdBQWUzQixTQUFTLENBQUMwQixLQUFWLENBQWdCRCxJQUFoQixDQUFxQixJQUFyQixDQUE1QjtBQUNBLE9BQUtHLFlBQUwsR0FBb0I1QixTQUFTLENBQUM0QixZQUFWLENBQXVCSCxJQUF2QixDQUE0QixJQUE1QixDQUFwQjtBQUNBLE9BQUtJLGFBQUwsR0FBcUI3QixTQUFTLENBQUM2QixhQUFWLENBQXdCSixJQUF4QixDQUE2QixJQUE3QixDQUFyQjtBQUNBLENBTEQ7O0FBT0F6QixTQUFTLENBQUM4QixPQUFWLEdBQW9CLFlBQVc7QUFJOUIsTUFBTUMsS0FBSyxHQUFHLFNBQVJBLEtBQVEsQ0FBQ0MsR0FBRCxFQUFNQyxPQUFOO0FBQUEsV0FBa0JILE9BQU8sQ0FBQ2hDLFlBQVIsQ0FBcUJrQyxHQUFyQixFQUEwQkMsT0FBMUIsQ0FBbEI7QUFBQSxHQUFkOztBQUVBLE1BQU1ILE9BQU8sR0FBRyx1QkFDZkMsS0FEZSxFQUVmL0IsU0FGZSxFQUdmLEtBQUtRLGNBQUwsRUFIZSxDQUFoQjtBQU1Bc0IsRUFBQUEsT0FBTyxDQUFDVCxXQUFSO0FBQ0FTLEVBQUFBLE9BQU8sQ0FBQ0ksU0FBUixHQUFvQixJQUFwQjtBQUNBLFNBQU9KLE9BQVA7QUFDQSxDQWZEOztBQWlCQUssTUFBTSxDQUFDQyxPQUFQLEdBQWlCcEMsU0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBzZXRVcEFuZFRlYXJEb3duID0gcmVxdWlyZSgnLi9zZXQtdXAtYW5kLXRlYXItZG93bicpO1xuY29uc3QgZmV0Y2hIYW5kbGVyID0gcmVxdWlyZSgnLi9mZXRjaC1oYW5kbGVyJyk7XG5jb25zdCBpbnNwZWN0aW5nID0gcmVxdWlyZSgnLi9pbnNwZWN0aW5nJyk7XG5cbmNvbnN0IEZldGNoTW9jayA9IE9iamVjdC5hc3NpZ24oe30sIGZldGNoSGFuZGxlciwgc2V0VXBBbmRUZWFyRG93biwgaW5zcGVjdGluZyk7XG5cbkZldGNoTW9jay5jb25maWcgPSB7XG5cdGZhbGxiYWNrVG9OZXR3b3JrOiBmYWxzZSxcblx0aW5jbHVkZUNvbnRlbnRMZW5ndGg6IHRydWUsXG5cdHNlbmRBc0pzb246IHRydWUsXG5cdHdhcm5PbkZhbGxiYWNrOiB0cnVlLFxuXHRvdmVyd3JpdGVSb3V0ZXM6IHVuZGVmaW5lZFxufTtcblxuRmV0Y2hNb2NrLmNyZWF0ZUluc3RhbmNlID0gZnVuY3Rpb24oaXNMaWJyYXJ5KSB7XG5cdGNvbnN0IGluc3RhbmNlID0gT2JqZWN0LmNyZWF0ZShGZXRjaE1vY2spO1xuXHRpbnN0YW5jZS5fdW5jb21waWxlZFJvdXRlcyA9ICh0aGlzLl91bmNvbXBpbGVkUm91dGVzIHx8IFtdKS5zbGljZSgpO1xuXHRpbnN0YW5jZS5yb3V0ZXMgPSBpbnN0YW5jZS5fdW5jb21waWxlZFJvdXRlcy5tYXAoY29uZmlnID0+XG5cdFx0aW5zdGFuY2UuY29tcGlsZVJvdXRlKGNvbmZpZylcblx0KTtcblx0aW5zdGFuY2UuZmFsbGJhY2tSZXNwb25zZSA9IHRoaXMuZmFsbGJhY2tSZXNwb25zZSB8fCB1bmRlZmluZWQ7XG5cdGluc3RhbmNlLmNvbmZpZyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuY29uZmlnIHx8IEZldGNoTW9jay5jb25maWcpO1xuXHRpbnN0YW5jZS5fY2FsbHMgPSBbXTtcblx0aW5zdGFuY2UuX2hvbGRpbmdQcm9taXNlcyA9IFtdO1xuXHRpbnN0YW5jZS5iaW5kTWV0aG9kcygpO1xuXHRpZiAoaXNMaWJyYXJ5KSB7XG5cdFx0T2JqZWN0LmFzc2lnbihpbnN0YW5jZSwge1xuXHRcdFx0TUFUQ0hFRDogdHJ1ZSxcblx0XHRcdFVOTUFUQ0hFRDogZmFsc2UsXG5cdFx0XHRmZXRjaE1vY2s6IGluc3RhbmNlXG5cdFx0fSk7XG5cdH1cblx0cmV0dXJuIGluc3RhbmNlO1xufTtcblxuRmV0Y2hNb2NrLmJpbmRNZXRob2RzID0gZnVuY3Rpb24oKSB7XG5cdHRoaXMuZmV0Y2hIYW5kbGVyID0gRmV0Y2hNb2NrLmZldGNoSGFuZGxlci5iaW5kKHRoaXMpO1xuXHR0aGlzLnJlc2V0ID0gdGhpcy5yZXN0b3JlID0gRmV0Y2hNb2NrLnJlc2V0LmJpbmQodGhpcyk7XG5cdHRoaXMucmVzZXRIaXN0b3J5ID0gRmV0Y2hNb2NrLnJlc2V0SGlzdG9yeS5iaW5kKHRoaXMpO1xuXHR0aGlzLnJlc2V0QmVoYXZpb3IgPSBGZXRjaE1vY2sucmVzZXRCZWhhdmlvci5iaW5kKHRoaXMpO1xufTtcblxuRmV0Y2hNb2NrLnNhbmRib3ggPSBmdW5jdGlvbigpIHtcblx0Ly8gdGhpcyBjb25zdHJ1Y3QgYWxsb3dzIHVzIHRvIGNyZWF0ZSBhIGZldGNoLW1vY2sgaW5zdGFuY2Ugd2hpY2ggaXMgYWxzb1xuXHQvLyBhIGNhbGxhYmxlIGZ1bmN0aW9uLCB3aGlsZSBjaXJjdW12ZW50aW5nIGNpcmN1bGFyaXR5IHdoZW4gZGVmaW5pbmcgdGhlXG5cdC8vIG9iamVjdCB0aGF0IHRoaXMgZnVuY3Rpb24gc2hvdWxkIGJlIGJvdW5kIHRvXG5cdGNvbnN0IHByb3h5ID0gKHVybCwgb3B0aW9ucykgPT4gc2FuZGJveC5mZXRjaEhhbmRsZXIodXJsLCBvcHRpb25zKTtcblxuXHRjb25zdCBzYW5kYm94ID0gT2JqZWN0LmFzc2lnbihcblx0XHRwcm94eSwgLy8gRW5zdXJlcyB0aGF0IHRoZSBlbnRpcmUgcmV0dXJuZWQgb2JqZWN0IGlzIGEgY2FsbGFibGUgZnVuY3Rpb25cblx0XHRGZXRjaE1vY2ssIC8vIHByb3RvdHlwZSBtZXRob2RzXG5cdFx0dGhpcy5jcmVhdGVJbnN0YW5jZSgpIC8vIGluc3RhbmNlIGRhdGFcblx0KTtcblxuXHRzYW5kYm94LmJpbmRNZXRob2RzKCk7XG5cdHNhbmRib3guaXNTYW5kYm94ID0gdHJ1ZTtcblx0cmV0dXJuIHNhbmRib3g7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZldGNoTW9jaztcbiJdfQ==