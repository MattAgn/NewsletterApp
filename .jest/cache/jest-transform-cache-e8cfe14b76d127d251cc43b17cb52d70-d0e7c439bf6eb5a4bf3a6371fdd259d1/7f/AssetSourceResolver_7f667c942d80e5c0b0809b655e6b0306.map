{"version":3,"sources":["AssetSourceResolver.js"],"names":["PixelRatio","require","Platform","assetPathUtils","invariant","getScaledAssetPath","asset","scale","AssetSourceResolver","pickScale","scales","get","scaleSuffix","assetDir","getBasePath","name","type","getAssetPathInDrawableFolder","drawbleFolder","getAndroidResourceFolderName","fileName","getAndroidResourceIdentifier","serverUrl","jsbundleUrl","startsWith","isLoadedFromServer","assetServerURL","OS","isLoadedFromFileSystem","drawableFolderInBundle","resourceIdentifierWithoutScale","scaledAssetURLNearBundle","fromSource","hash","path","source","__packager_asset","width","height","uri","deviceScale","i","length","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nexport type ResolvedAssetSource = {|\n  +__packager_asset: boolean,\n  +width: ?number,\n  +height: ?number,\n  +uri: string,\n  +scale: number,\n|};\n\nimport type {PackagerAsset} from './AssetRegistry';\n\nconst PixelRatio = require('../Utilities/PixelRatio');\nconst Platform = require('../Utilities/Platform');\n\nconst assetPathUtils = require('./assetPathUtils');\nconst invariant = require('invariant');\n\n/**\n * Returns a path like 'assets/AwesomeModule/icon@2x.png'\n */\nfunction getScaledAssetPath(asset): string {\n  const scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());\n  const scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';\n  const assetDir = assetPathUtils.getBasePath(asset);\n  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;\n}\n\n/**\n * Returns a path like 'drawable-mdpi/icon.png'\n */\nfunction getAssetPathInDrawableFolder(asset): string {\n  const scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());\n  const drawbleFolder = assetPathUtils.getAndroidResourceFolderName(\n    asset,\n    scale,\n  );\n  const fileName = assetPathUtils.getAndroidResourceIdentifier(asset);\n  return drawbleFolder + '/' + fileName + '.' + asset.type;\n}\n\nclass AssetSourceResolver {\n  serverUrl: ?string;\n  // where the jsbundle is being run from\n  jsbundleUrl: ?string;\n  // the asset to resolve\n  asset: PackagerAsset;\n\n  constructor(serverUrl: ?string, jsbundleUrl: ?string, asset: PackagerAsset) {\n    this.serverUrl = serverUrl;\n    this.jsbundleUrl = jsbundleUrl;\n    this.asset = asset;\n  }\n\n  isLoadedFromServer(): boolean {\n    return !!this.serverUrl;\n  }\n\n  isLoadedFromFileSystem(): boolean {\n    return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));\n  }\n\n  defaultAsset(): ResolvedAssetSource {\n    if (this.isLoadedFromServer()) {\n      return this.assetServerURL();\n    }\n\n    if (Platform.OS === 'android') {\n      return this.isLoadedFromFileSystem()\n        ? this.drawableFolderInBundle()\n        : this.resourceIdentifierWithoutScale();\n    } else {\n      return this.scaledAssetURLNearBundle();\n    }\n  }\n\n  /**\n   * Returns an absolute URL which can be used to fetch the asset\n   * from the devserver\n   */\n  assetServerURL(): ResolvedAssetSource {\n    invariant(!!this.serverUrl, 'need server to load from');\n    return this.fromSource(\n      this.serverUrl +\n        getScaledAssetPath(this.asset) +\n        '?platform=' +\n        Platform.OS +\n        '&hash=' +\n        this.asset.hash,\n    );\n  }\n\n  /**\n   * Resolves to just the scaled asset filename\n   * E.g. 'assets/AwesomeModule/icon@2x.png'\n   */\n  scaledAssetPath(): ResolvedAssetSource {\n    return this.fromSource(getScaledAssetPath(this.asset));\n  }\n\n  /**\n   * Resolves to where the bundle is running from, with a scaled asset filename\n   * E.g. 'file:///sdcard/bundle/assets/AwesomeModule/icon@2x.png'\n   */\n  scaledAssetURLNearBundle(): ResolvedAssetSource {\n    const path = this.jsbundleUrl || 'file://';\n    return this.fromSource(path + getScaledAssetPath(this.asset));\n  }\n\n  /**\n   * The default location of assets bundled with the app, located by\n   * resource identifier\n   * The Android resource system picks the correct scale.\n   * E.g. 'assets_awesomemodule_icon'\n   */\n  resourceIdentifierWithoutScale(): ResolvedAssetSource {\n    invariant(\n      Platform.OS === 'android',\n      'resource identifiers work on Android',\n    );\n    return this.fromSource(\n      assetPathUtils.getAndroidResourceIdentifier(this.asset),\n    );\n  }\n\n  /**\n   * If the jsbundle is running from a sideload location, this resolves assets\n   * relative to its location\n   * E.g. 'file:///sdcard/AwesomeModule/drawable-mdpi/icon.png'\n   */\n  drawableFolderInBundle(): ResolvedAssetSource {\n    const path = this.jsbundleUrl || 'file://';\n    return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));\n  }\n\n  fromSource(source: string): ResolvedAssetSource {\n    return {\n      __packager_asset: true,\n      width: this.asset.width,\n      height: this.asset.height,\n      uri: source,\n      scale: AssetSourceResolver.pickScale(this.asset.scales, PixelRatio.get()),\n    };\n  }\n\n  static pickScale(scales: Array<number>, deviceScale: number): number {\n    // Packager guarantees that `scales` array is sorted\n    for (let i = 0; i < scales.length; i++) {\n      if (scales[i] >= deviceScale) {\n        return scales[i];\n      }\n    }\n\n    // If nothing matches, device scale is larger than any available\n    // scales, so we return the biggest one. Unless the array is empty,\n    // in which case we default to 1\n    return scales[scales.length - 1] || 1;\n  }\n}\n\nmodule.exports = AssetSourceResolver;\n"]}