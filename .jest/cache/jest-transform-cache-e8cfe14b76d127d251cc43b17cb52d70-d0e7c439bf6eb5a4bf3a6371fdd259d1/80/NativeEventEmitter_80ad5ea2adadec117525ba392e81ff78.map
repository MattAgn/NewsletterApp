{"version":3,"sources":["NativeEventEmitter.js"],"names":["EventEmitter","require","Platform","RCTDeviceEventEmitter","invariant","NativeEventEmitter","nativeModule","sharedSubscriber","OS","_nativeModule","eventType","listener","context","addListener","count","listeners","length","removeListeners","subscription","module","exports"],"mappings":"AAUA;;;;;;;;;;;;;;;;AAEA,IAAMA,YAAY,GAAGC,OAAO,CAAC,gCAAD,CAA5B;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,uBAAD,CAAxB;;AACA,IAAME,qBAAqB,GAAGF,OAAO,CAAC,yBAAD,CAArC;;AAEA,IAAMG,SAAS,GAAGH,OAAO,CAAC,WAAD,CAAzB;;IAaMI,kB;;;AAGJ,8BAAYC,YAAZ,EAAyC;AAAA;;AAAA;AACvC,wHAAMH,qBAAqB,CAACI,gBAA5B;;AACA,QAAIL,QAAQ,CAACM,EAAT,KAAgB,KAApB,EAA2B;AACzBJ,MAAAA,SAAS,CAACE,YAAD,EAAe,+BAAf,CAAT;AACA,YAAKG,aAAL,GAAqBH,YAArB;AACD;;AALsC;AAMxC;;;;gCAGCI,S,EACAC,Q,EACAC,O,EACqB;AACrB,UAAI,KAAKH,aAAL,IAAsB,IAA1B,EAAgC;AAC9B,aAAKA,aAAL,CAAmBI,WAAnB,CAA+BH,SAA/B;AACD;;AACD,6HAAyBA,SAAzB,EAAoCC,QAApC,EAA8CC,OAA9C;AACD;;;uCAEkBF,S,EAAmB;AACpCN,MAAAA,SAAS,CAACM,SAAD,EAAY,iCAAZ,CAAT;AACA,UAAMI,KAAK,GAAG,KAAKC,SAAL,CAAeL,SAAf,EAA0BM,MAAxC;;AACA,UAAI,KAAKP,aAAL,IAAsB,IAA1B,EAAgC;AAC9B,aAAKA,aAAL,CAAmBQ,eAAnB,CAAmCH,KAAnC;AACD;;AACD,6HAAyBJ,SAAzB;AACD;;;uCAEkBQ,Y,EAAmC;AACpD,UAAI,KAAKT,aAAL,IAAsB,IAA1B,EAAgC;AAC9B,aAAKA,aAAL,CAAmBQ,eAAnB,CAAmC,CAAnC;AACD;;AACD,6HAAyBC,YAAzB;AACD;;;EApC8BlB,Y;;AAuCjCmB,MAAM,CAACC,OAAP,GAAiBf,kBAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst EventEmitter = require('../vendor/emitter/EventEmitter');\nconst Platform = require('../Utilities/Platform');\nconst RCTDeviceEventEmitter = require('./RCTDeviceEventEmitter');\n\nconst invariant = require('invariant');\n\nimport type EmitterSubscription from '../vendor/emitter/EmitterSubscription';\n\ntype NativeModule = {\n  +addListener: (eventType: string) => void,\n  +removeListeners: (count: number) => void,\n};\n\n/**\n * Abstract base class for implementing event-emitting modules. This implements\n * a subset of the standard EventEmitter node module API.\n */\nclass NativeEventEmitter extends EventEmitter {\n  _nativeModule: ?NativeModule;\n\n  constructor(nativeModule: ?NativeModule) {\n    super(RCTDeviceEventEmitter.sharedSubscriber);\n    if (Platform.OS === 'ios') {\n      invariant(nativeModule, 'Native module cannot be null.');\n      this._nativeModule = nativeModule;\n    }\n  }\n\n  addListener(\n    eventType: string,\n    listener: Function,\n    context: ?Object,\n  ): EmitterSubscription {\n    if (this._nativeModule != null) {\n      this._nativeModule.addListener(eventType);\n    }\n    return super.addListener(eventType, listener, context);\n  }\n\n  removeAllListeners(eventType: string) {\n    invariant(eventType, 'eventType argument is required.');\n    const count = this.listeners(eventType).length;\n    if (this._nativeModule != null) {\n      this._nativeModule.removeListeners(count);\n    }\n    super.removeAllListeners(eventType);\n  }\n\n  removeSubscription(subscription: EmitterSubscription) {\n    if (this._nativeModule != null) {\n      this._nativeModule.removeListeners(1);\n    }\n    super.removeSubscription(subscription);\n  }\n}\n\nmodule.exports = NativeEventEmitter;\n"]}