2ad0aeb6ac79e90f941061f3357d2df6
var openParentheses = "(".charCodeAt(0);
var closeParentheses = ")".charCodeAt(0);
var singleQuote = "'".charCodeAt(0);
var doubleQuote = '"'.charCodeAt(0);
var backslash = "\\".charCodeAt(0);
var slash = "/".charCodeAt(0);
var comma = ",".charCodeAt(0);
var colon = ":".charCodeAt(0);
var star = "*".charCodeAt(0);

module.exports = function (input) {
  var tokens = [];
  var value = input;
  var next, quote, prev, token, escape, escapePos, whitespacePos;
  var pos = 0;
  var code = value.charCodeAt(pos);
  var max = value.length;
  var stack = [{
    nodes: tokens
  }];
  var balanced = 0;
  var parent;
  var name = "";
  var before = "";
  var after = "";

  while (pos < max) {
    if (code <= 32) {
      next = pos;

      do {
        next += 1;
        code = value.charCodeAt(next);
      } while (code <= 32);

      token = value.slice(pos, next);
      prev = tokens[tokens.length - 1];

      if (code === closeParentheses && balanced) {
        after = token;
      } else if (prev && prev.type === "div") {
        prev.after = token;
      } else if (code === comma || code === colon || code === slash && value.charCodeAt(next + 1) !== star) {
        before = token;
      } else {
        tokens.push({
          type: "space",
          sourceIndex: pos,
          value: token
        });
      }

      pos = next;
    } else if (code === singleQuote || code === doubleQuote) {
      next = pos;
      quote = code === singleQuote ? "'" : '"';
      token = {
        type: "string",
        sourceIndex: pos,
        quote: quote
      };

      do {
        escape = false;
        next = value.indexOf(quote, next + 1);

        if (~next) {
          escapePos = next;

          while (value.charCodeAt(escapePos - 1) === backslash) {
            escapePos -= 1;
            escape = !escape;
          }
        } else {
          value += quote;
          next = value.length - 1;
          token.unclosed = true;
        }
      } while (escape);

      token.value = value.slice(pos + 1, next);
      tokens.push(token);
      pos = next + 1;
      code = value.charCodeAt(pos);
    } else if (code === slash && value.charCodeAt(pos + 1) === star) {
      token = {
        type: "comment",
        sourceIndex: pos
      };
      next = value.indexOf("*/", pos);

      if (next === -1) {
        token.unclosed = true;
        next = value.length;
      }

      token.value = value.slice(pos + 2, next);
      tokens.push(token);
      pos = next + 2;
      code = value.charCodeAt(pos);
    } else if (code === slash || code === comma || code === colon) {
      token = value[pos];
      tokens.push({
        type: "div",
        sourceIndex: pos - before.length,
        value: token,
        before: before,
        after: ""
      });
      before = "";
      pos += 1;
      code = value.charCodeAt(pos);
    } else if (openParentheses === code) {
      next = pos;

      do {
        next += 1;
        code = value.charCodeAt(next);
      } while (code <= 32);

      token = {
        type: "function",
        sourceIndex: pos - name.length,
        value: name,
        before: value.slice(pos + 1, next)
      };
      pos = next;

      if (name === "url" && code !== singleQuote && code !== doubleQuote) {
        next -= 1;

        do {
          escape = false;
          next = value.indexOf(")", next + 1);

          if (~next) {
            escapePos = next;

            while (value.charCodeAt(escapePos - 1) === backslash) {
              escapePos -= 1;
              escape = !escape;
            }
          } else {
            value += ")";
            next = value.length - 1;
            token.unclosed = true;
          }
        } while (escape);

        whitespacePos = next;

        do {
          whitespacePos -= 1;
          code = value.charCodeAt(whitespacePos);
        } while (code <= 32);

        if (pos !== whitespacePos + 1) {
          token.nodes = [{
            type: "word",
            sourceIndex: pos,
            value: value.slice(pos, whitespacePos + 1)
          }];
        } else {
          token.nodes = [];
        }

        if (token.unclosed && whitespacePos + 1 !== next) {
          token.after = "";
          token.nodes.push({
            type: "space",
            sourceIndex: whitespacePos + 1,
            value: value.slice(whitespacePos + 1, next)
          });
        } else {
          token.after = value.slice(whitespacePos + 1, next);
        }

        pos = next + 1;
        code = value.charCodeAt(pos);
        tokens.push(token);
      } else {
        balanced += 1;
        token.after = "";
        tokens.push(token);
        stack.push(token);
        tokens = token.nodes = [];
        parent = token;
      }

      name = "";
    } else if (closeParentheses === code && balanced) {
      pos += 1;
      code = value.charCodeAt(pos);
      parent.after = after;
      after = "";
      balanced -= 1;
      stack.pop();
      parent = stack[balanced];
      tokens = parent.nodes;
    } else {
      next = pos;

      do {
        if (code === backslash) {
          next += 1;
        }

        next += 1;
        code = value.charCodeAt(next);
      } while (next < max && !(code <= 32 || code === singleQuote || code === doubleQuote || code === comma || code === colon || code === slash || code === openParentheses || code === closeParentheses && balanced));

      token = value.slice(pos, next);

      if (openParentheses === code) {
        name = token;
      } else {
        tokens.push({
          type: "word",
          sourceIndex: pos,
          value: token
        });
      }

      pos = next;
    }
  }

  for (pos = stack.length - 1; pos; pos -= 1) {
    stack[pos].unclosed = true;
  }

  return stack[0].nodes;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhcnNlLmpzIl0sIm5hbWVzIjpbIm9wZW5QYXJlbnRoZXNlcyIsImNoYXJDb2RlQXQiLCJjbG9zZVBhcmVudGhlc2VzIiwic2luZ2xlUXVvdGUiLCJkb3VibGVRdW90ZSIsImJhY2tzbGFzaCIsInNsYXNoIiwiY29tbWEiLCJjb2xvbiIsInN0YXIiLCJtb2R1bGUiLCJleHBvcnRzIiwiaW5wdXQiLCJ0b2tlbnMiLCJ2YWx1ZSIsIm5leHQiLCJxdW90ZSIsInByZXYiLCJ0b2tlbiIsImVzY2FwZSIsImVzY2FwZVBvcyIsIndoaXRlc3BhY2VQb3MiLCJwb3MiLCJjb2RlIiwibWF4IiwibGVuZ3RoIiwic3RhY2siLCJub2RlcyIsImJhbGFuY2VkIiwicGFyZW50IiwibmFtZSIsImJlZm9yZSIsImFmdGVyIiwic2xpY2UiLCJ0eXBlIiwicHVzaCIsInNvdXJjZUluZGV4IiwiaW5kZXhPZiIsInVuY2xvc2VkIiwicG9wIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxlQUFlLEdBQUcsSUFBSUMsVUFBSixDQUFlLENBQWYsQ0FBdEI7QUFDQSxJQUFJQyxnQkFBZ0IsR0FBRyxJQUFJRCxVQUFKLENBQWUsQ0FBZixDQUF2QjtBQUNBLElBQUlFLFdBQVcsR0FBRyxJQUFJRixVQUFKLENBQWUsQ0FBZixDQUFsQjtBQUNBLElBQUlHLFdBQVcsR0FBRyxJQUFJSCxVQUFKLENBQWUsQ0FBZixDQUFsQjtBQUNBLElBQUlJLFNBQVMsR0FBRyxLQUFLSixVQUFMLENBQWdCLENBQWhCLENBQWhCO0FBQ0EsSUFBSUssS0FBSyxHQUFHLElBQUlMLFVBQUosQ0FBZSxDQUFmLENBQVo7QUFDQSxJQUFJTSxLQUFLLEdBQUcsSUFBSU4sVUFBSixDQUFlLENBQWYsQ0FBWjtBQUNBLElBQUlPLEtBQUssR0FBRyxJQUFJUCxVQUFKLENBQWUsQ0FBZixDQUFaO0FBQ0EsSUFBSVEsSUFBSSxHQUFHLElBQUlSLFVBQUosQ0FBZSxDQUFmLENBQVg7O0FBRUFTLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixVQUFTQyxLQUFULEVBQWdCO0FBQy9CLE1BQUlDLE1BQU0sR0FBRyxFQUFiO0FBQ0EsTUFBSUMsS0FBSyxHQUFHRixLQUFaO0FBRUEsTUFBSUcsSUFBSixFQUFVQyxLQUFWLEVBQWlCQyxJQUFqQixFQUF1QkMsS0FBdkIsRUFBOEJDLE1BQTlCLEVBQXNDQyxTQUF0QyxFQUFpREMsYUFBakQ7QUFDQSxNQUFJQyxHQUFHLEdBQUcsQ0FBVjtBQUNBLE1BQUlDLElBQUksR0FBR1QsS0FBSyxDQUFDYixVQUFOLENBQWlCcUIsR0FBakIsQ0FBWDtBQUNBLE1BQUlFLEdBQUcsR0FBR1YsS0FBSyxDQUFDVyxNQUFoQjtBQUNBLE1BQUlDLEtBQUssR0FBRyxDQUFDO0FBQUVDLElBQUFBLEtBQUssRUFBRWQ7QUFBVCxHQUFELENBQVo7QUFDQSxNQUFJZSxRQUFRLEdBQUcsQ0FBZjtBQUNBLE1BQUlDLE1BQUo7QUFFQSxNQUFJQyxJQUFJLEdBQUcsRUFBWDtBQUNBLE1BQUlDLE1BQU0sR0FBRyxFQUFiO0FBQ0EsTUFBSUMsS0FBSyxHQUFHLEVBQVo7O0FBRUEsU0FBT1YsR0FBRyxHQUFHRSxHQUFiLEVBQWtCO0FBRWhCLFFBQUlELElBQUksSUFBSSxFQUFaLEVBQWdCO0FBQ2RSLE1BQUFBLElBQUksR0FBR08sR0FBUDs7QUFDQSxTQUFHO0FBQ0RQLFFBQUFBLElBQUksSUFBSSxDQUFSO0FBQ0FRLFFBQUFBLElBQUksR0FBR1QsS0FBSyxDQUFDYixVQUFOLENBQWlCYyxJQUFqQixDQUFQO0FBQ0QsT0FIRCxRQUdTUSxJQUFJLElBQUksRUFIakI7O0FBSUFMLE1BQUFBLEtBQUssR0FBR0osS0FBSyxDQUFDbUIsS0FBTixDQUFZWCxHQUFaLEVBQWlCUCxJQUFqQixDQUFSO0FBRUFFLE1BQUFBLElBQUksR0FBR0osTUFBTSxDQUFDQSxNQUFNLENBQUNZLE1BQVAsR0FBZ0IsQ0FBakIsQ0FBYjs7QUFDQSxVQUFJRixJQUFJLEtBQUtyQixnQkFBVCxJQUE2QjBCLFFBQWpDLEVBQTJDO0FBQ3pDSSxRQUFBQSxLQUFLLEdBQUdkLEtBQVI7QUFDRCxPQUZELE1BRU8sSUFBSUQsSUFBSSxJQUFJQSxJQUFJLENBQUNpQixJQUFMLEtBQWMsS0FBMUIsRUFBaUM7QUFDdENqQixRQUFBQSxJQUFJLENBQUNlLEtBQUwsR0FBYWQsS0FBYjtBQUNELE9BRk0sTUFFQSxJQUNMSyxJQUFJLEtBQUtoQixLQUFULElBQ0FnQixJQUFJLEtBQUtmLEtBRFQsSUFFQ2UsSUFBSSxLQUFLakIsS0FBVCxJQUFrQlEsS0FBSyxDQUFDYixVQUFOLENBQWlCYyxJQUFJLEdBQUcsQ0FBeEIsTUFBK0JOLElBSDdDLEVBSUw7QUFDQXNCLFFBQUFBLE1BQU0sR0FBR2IsS0FBVDtBQUNELE9BTk0sTUFNQTtBQUNMTCxRQUFBQSxNQUFNLENBQUNzQixJQUFQLENBQVk7QUFDVkQsVUFBQUEsSUFBSSxFQUFFLE9BREk7QUFFVkUsVUFBQUEsV0FBVyxFQUFFZCxHQUZIO0FBR1ZSLFVBQUFBLEtBQUssRUFBRUk7QUFIRyxTQUFaO0FBS0Q7O0FBRURJLE1BQUFBLEdBQUcsR0FBR1AsSUFBTjtBQUdELEtBOUJELE1BOEJPLElBQUlRLElBQUksS0FBS3BCLFdBQVQsSUFBd0JvQixJQUFJLEtBQUtuQixXQUFyQyxFQUFrRDtBQUN2RFcsTUFBQUEsSUFBSSxHQUFHTyxHQUFQO0FBQ0FOLE1BQUFBLEtBQUssR0FBR08sSUFBSSxLQUFLcEIsV0FBVCxHQUF1QixHQUF2QixHQUE2QixHQUFyQztBQUNBZSxNQUFBQSxLQUFLLEdBQUc7QUFDTmdCLFFBQUFBLElBQUksRUFBRSxRQURBO0FBRU5FLFFBQUFBLFdBQVcsRUFBRWQsR0FGUDtBQUdOTixRQUFBQSxLQUFLLEVBQUVBO0FBSEQsT0FBUjs7QUFLQSxTQUFHO0FBQ0RHLFFBQUFBLE1BQU0sR0FBRyxLQUFUO0FBQ0FKLFFBQUFBLElBQUksR0FBR0QsS0FBSyxDQUFDdUIsT0FBTixDQUFjckIsS0FBZCxFQUFxQkQsSUFBSSxHQUFHLENBQTVCLENBQVA7O0FBQ0EsWUFBSSxDQUFDQSxJQUFMLEVBQVc7QUFDVEssVUFBQUEsU0FBUyxHQUFHTCxJQUFaOztBQUNBLGlCQUFPRCxLQUFLLENBQUNiLFVBQU4sQ0FBaUJtQixTQUFTLEdBQUcsQ0FBN0IsTUFBb0NmLFNBQTNDLEVBQXNEO0FBQ3BEZSxZQUFBQSxTQUFTLElBQUksQ0FBYjtBQUNBRCxZQUFBQSxNQUFNLEdBQUcsQ0FBQ0EsTUFBVjtBQUNEO0FBQ0YsU0FORCxNQU1PO0FBQ0xMLFVBQUFBLEtBQUssSUFBSUUsS0FBVDtBQUNBRCxVQUFBQSxJQUFJLEdBQUdELEtBQUssQ0FBQ1csTUFBTixHQUFlLENBQXRCO0FBQ0FQLFVBQUFBLEtBQUssQ0FBQ29CLFFBQU4sR0FBaUIsSUFBakI7QUFDRDtBQUNGLE9BZEQsUUFjU25CLE1BZFQ7O0FBZUFELE1BQUFBLEtBQUssQ0FBQ0osS0FBTixHQUFjQSxLQUFLLENBQUNtQixLQUFOLENBQVlYLEdBQUcsR0FBRyxDQUFsQixFQUFxQlAsSUFBckIsQ0FBZDtBQUVBRixNQUFBQSxNQUFNLENBQUNzQixJQUFQLENBQVlqQixLQUFaO0FBQ0FJLE1BQUFBLEdBQUcsR0FBR1AsSUFBSSxHQUFHLENBQWI7QUFDQVEsTUFBQUEsSUFBSSxHQUFHVCxLQUFLLENBQUNiLFVBQU4sQ0FBaUJxQixHQUFqQixDQUFQO0FBR0QsS0E5Qk0sTUE4QkEsSUFBSUMsSUFBSSxLQUFLakIsS0FBVCxJQUFrQlEsS0FBSyxDQUFDYixVQUFOLENBQWlCcUIsR0FBRyxHQUFHLENBQXZCLE1BQThCYixJQUFwRCxFQUEwRDtBQUMvRFMsTUFBQUEsS0FBSyxHQUFHO0FBQ05nQixRQUFBQSxJQUFJLEVBQUUsU0FEQTtBQUVORSxRQUFBQSxXQUFXLEVBQUVkO0FBRlAsT0FBUjtBQUtBUCxNQUFBQSxJQUFJLEdBQUdELEtBQUssQ0FBQ3VCLE9BQU4sQ0FBYyxJQUFkLEVBQW9CZixHQUFwQixDQUFQOztBQUNBLFVBQUlQLElBQUksS0FBSyxDQUFDLENBQWQsRUFBaUI7QUFDZkcsUUFBQUEsS0FBSyxDQUFDb0IsUUFBTixHQUFpQixJQUFqQjtBQUNBdkIsUUFBQUEsSUFBSSxHQUFHRCxLQUFLLENBQUNXLE1BQWI7QUFDRDs7QUFFRFAsTUFBQUEsS0FBSyxDQUFDSixLQUFOLEdBQWNBLEtBQUssQ0FBQ21CLEtBQU4sQ0FBWVgsR0FBRyxHQUFHLENBQWxCLEVBQXFCUCxJQUFyQixDQUFkO0FBQ0FGLE1BQUFBLE1BQU0sQ0FBQ3NCLElBQVAsQ0FBWWpCLEtBQVo7QUFFQUksTUFBQUEsR0FBRyxHQUFHUCxJQUFJLEdBQUcsQ0FBYjtBQUNBUSxNQUFBQSxJQUFJLEdBQUdULEtBQUssQ0FBQ2IsVUFBTixDQUFpQnFCLEdBQWpCLENBQVA7QUFHRCxLQW5CTSxNQW1CQSxJQUFJQyxJQUFJLEtBQUtqQixLQUFULElBQWtCaUIsSUFBSSxLQUFLaEIsS0FBM0IsSUFBb0NnQixJQUFJLEtBQUtmLEtBQWpELEVBQXdEO0FBQzdEVSxNQUFBQSxLQUFLLEdBQUdKLEtBQUssQ0FBQ1EsR0FBRCxDQUFiO0FBRUFULE1BQUFBLE1BQU0sQ0FBQ3NCLElBQVAsQ0FBWTtBQUNWRCxRQUFBQSxJQUFJLEVBQUUsS0FESTtBQUVWRSxRQUFBQSxXQUFXLEVBQUVkLEdBQUcsR0FBR1MsTUFBTSxDQUFDTixNQUZoQjtBQUdWWCxRQUFBQSxLQUFLLEVBQUVJLEtBSEc7QUFJVmEsUUFBQUEsTUFBTSxFQUFFQSxNQUpFO0FBS1ZDLFFBQUFBLEtBQUssRUFBRTtBQUxHLE9BQVo7QUFPQUQsTUFBQUEsTUFBTSxHQUFHLEVBQVQ7QUFFQVQsTUFBQUEsR0FBRyxJQUFJLENBQVA7QUFDQUMsTUFBQUEsSUFBSSxHQUFHVCxLQUFLLENBQUNiLFVBQU4sQ0FBaUJxQixHQUFqQixDQUFQO0FBR0QsS0FoQk0sTUFnQkEsSUFBSXRCLGVBQWUsS0FBS3VCLElBQXhCLEVBQThCO0FBRW5DUixNQUFBQSxJQUFJLEdBQUdPLEdBQVA7O0FBQ0EsU0FBRztBQUNEUCxRQUFBQSxJQUFJLElBQUksQ0FBUjtBQUNBUSxRQUFBQSxJQUFJLEdBQUdULEtBQUssQ0FBQ2IsVUFBTixDQUFpQmMsSUFBakIsQ0FBUDtBQUNELE9BSEQsUUFHU1EsSUFBSSxJQUFJLEVBSGpCOztBQUlBTCxNQUFBQSxLQUFLLEdBQUc7QUFDTmdCLFFBQUFBLElBQUksRUFBRSxVQURBO0FBRU5FLFFBQUFBLFdBQVcsRUFBRWQsR0FBRyxHQUFHUSxJQUFJLENBQUNMLE1BRmxCO0FBR05YLFFBQUFBLEtBQUssRUFBRWdCLElBSEQ7QUFJTkMsUUFBQUEsTUFBTSxFQUFFakIsS0FBSyxDQUFDbUIsS0FBTixDQUFZWCxHQUFHLEdBQUcsQ0FBbEIsRUFBcUJQLElBQXJCO0FBSkYsT0FBUjtBQU1BTyxNQUFBQSxHQUFHLEdBQUdQLElBQU47O0FBRUEsVUFBSWUsSUFBSSxLQUFLLEtBQVQsSUFBa0JQLElBQUksS0FBS3BCLFdBQTNCLElBQTBDb0IsSUFBSSxLQUFLbkIsV0FBdkQsRUFBb0U7QUFDbEVXLFFBQUFBLElBQUksSUFBSSxDQUFSOztBQUNBLFdBQUc7QUFDREksVUFBQUEsTUFBTSxHQUFHLEtBQVQ7QUFDQUosVUFBQUEsSUFBSSxHQUFHRCxLQUFLLENBQUN1QixPQUFOLENBQWMsR0FBZCxFQUFtQnRCLElBQUksR0FBRyxDQUExQixDQUFQOztBQUNBLGNBQUksQ0FBQ0EsSUFBTCxFQUFXO0FBQ1RLLFlBQUFBLFNBQVMsR0FBR0wsSUFBWjs7QUFDQSxtQkFBT0QsS0FBSyxDQUFDYixVQUFOLENBQWlCbUIsU0FBUyxHQUFHLENBQTdCLE1BQW9DZixTQUEzQyxFQUFzRDtBQUNwRGUsY0FBQUEsU0FBUyxJQUFJLENBQWI7QUFDQUQsY0FBQUEsTUFBTSxHQUFHLENBQUNBLE1BQVY7QUFDRDtBQUNGLFdBTkQsTUFNTztBQUNMTCxZQUFBQSxLQUFLLElBQUksR0FBVDtBQUNBQyxZQUFBQSxJQUFJLEdBQUdELEtBQUssQ0FBQ1csTUFBTixHQUFlLENBQXRCO0FBQ0FQLFlBQUFBLEtBQUssQ0FBQ29CLFFBQU4sR0FBaUIsSUFBakI7QUFDRDtBQUNGLFNBZEQsUUFjU25CLE1BZFQ7O0FBZ0JBRSxRQUFBQSxhQUFhLEdBQUdOLElBQWhCOztBQUNBLFdBQUc7QUFDRE0sVUFBQUEsYUFBYSxJQUFJLENBQWpCO0FBQ0FFLFVBQUFBLElBQUksR0FBR1QsS0FBSyxDQUFDYixVQUFOLENBQWlCb0IsYUFBakIsQ0FBUDtBQUNELFNBSEQsUUFHU0UsSUFBSSxJQUFJLEVBSGpCOztBQUlBLFlBQUlELEdBQUcsS0FBS0QsYUFBYSxHQUFHLENBQTVCLEVBQStCO0FBQzdCSCxVQUFBQSxLQUFLLENBQUNTLEtBQU4sR0FBYyxDQUNaO0FBQ0VPLFlBQUFBLElBQUksRUFBRSxNQURSO0FBRUVFLFlBQUFBLFdBQVcsRUFBRWQsR0FGZjtBQUdFUixZQUFBQSxLQUFLLEVBQUVBLEtBQUssQ0FBQ21CLEtBQU4sQ0FBWVgsR0FBWixFQUFpQkQsYUFBYSxHQUFHLENBQWpDO0FBSFQsV0FEWSxDQUFkO0FBT0QsU0FSRCxNQVFPO0FBQ0xILFVBQUFBLEtBQUssQ0FBQ1MsS0FBTixHQUFjLEVBQWQ7QUFDRDs7QUFDRCxZQUFJVCxLQUFLLENBQUNvQixRQUFOLElBQWtCakIsYUFBYSxHQUFHLENBQWhCLEtBQXNCTixJQUE1QyxFQUFrRDtBQUNoREcsVUFBQUEsS0FBSyxDQUFDYyxLQUFOLEdBQWMsRUFBZDtBQUNBZCxVQUFBQSxLQUFLLENBQUNTLEtBQU4sQ0FBWVEsSUFBWixDQUFpQjtBQUNmRCxZQUFBQSxJQUFJLEVBQUUsT0FEUztBQUVmRSxZQUFBQSxXQUFXLEVBQUVmLGFBQWEsR0FBRyxDQUZkO0FBR2ZQLFlBQUFBLEtBQUssRUFBRUEsS0FBSyxDQUFDbUIsS0FBTixDQUFZWixhQUFhLEdBQUcsQ0FBNUIsRUFBK0JOLElBQS9CO0FBSFEsV0FBakI7QUFLRCxTQVBELE1BT087QUFDTEcsVUFBQUEsS0FBSyxDQUFDYyxLQUFOLEdBQWNsQixLQUFLLENBQUNtQixLQUFOLENBQVlaLGFBQWEsR0FBRyxDQUE1QixFQUErQk4sSUFBL0IsQ0FBZDtBQUNEOztBQUNETyxRQUFBQSxHQUFHLEdBQUdQLElBQUksR0FBRyxDQUFiO0FBQ0FRLFFBQUFBLElBQUksR0FBR1QsS0FBSyxDQUFDYixVQUFOLENBQWlCcUIsR0FBakIsQ0FBUDtBQUNBVCxRQUFBQSxNQUFNLENBQUNzQixJQUFQLENBQVlqQixLQUFaO0FBQ0QsT0EvQ0QsTUErQ087QUFDTFUsUUFBQUEsUUFBUSxJQUFJLENBQVo7QUFDQVYsUUFBQUEsS0FBSyxDQUFDYyxLQUFOLEdBQWMsRUFBZDtBQUNBbkIsUUFBQUEsTUFBTSxDQUFDc0IsSUFBUCxDQUFZakIsS0FBWjtBQUNBUSxRQUFBQSxLQUFLLENBQUNTLElBQU4sQ0FBV2pCLEtBQVg7QUFDQUwsUUFBQUEsTUFBTSxHQUFHSyxLQUFLLENBQUNTLEtBQU4sR0FBYyxFQUF2QjtBQUNBRSxRQUFBQSxNQUFNLEdBQUdYLEtBQVQ7QUFDRDs7QUFDRFksTUFBQUEsSUFBSSxHQUFHLEVBQVA7QUFHRCxLQXpFTSxNQXlFQSxJQUFJNUIsZ0JBQWdCLEtBQUtxQixJQUFyQixJQUE2QkssUUFBakMsRUFBMkM7QUFDaEROLE1BQUFBLEdBQUcsSUFBSSxDQUFQO0FBQ0FDLE1BQUFBLElBQUksR0FBR1QsS0FBSyxDQUFDYixVQUFOLENBQWlCcUIsR0FBakIsQ0FBUDtBQUVBTyxNQUFBQSxNQUFNLENBQUNHLEtBQVAsR0FBZUEsS0FBZjtBQUNBQSxNQUFBQSxLQUFLLEdBQUcsRUFBUjtBQUNBSixNQUFBQSxRQUFRLElBQUksQ0FBWjtBQUNBRixNQUFBQSxLQUFLLENBQUNhLEdBQU47QUFDQVYsTUFBQUEsTUFBTSxHQUFHSCxLQUFLLENBQUNFLFFBQUQsQ0FBZDtBQUNBZixNQUFBQSxNQUFNLEdBQUdnQixNQUFNLENBQUNGLEtBQWhCO0FBR0QsS0FaTSxNQVlBO0FBQ0xaLE1BQUFBLElBQUksR0FBR08sR0FBUDs7QUFDQSxTQUFHO0FBQ0QsWUFBSUMsSUFBSSxLQUFLbEIsU0FBYixFQUF3QjtBQUN0QlUsVUFBQUEsSUFBSSxJQUFJLENBQVI7QUFDRDs7QUFDREEsUUFBQUEsSUFBSSxJQUFJLENBQVI7QUFDQVEsUUFBQUEsSUFBSSxHQUFHVCxLQUFLLENBQUNiLFVBQU4sQ0FBaUJjLElBQWpCLENBQVA7QUFDRCxPQU5ELFFBT0VBLElBQUksR0FBR1MsR0FBUCxJQUNBLEVBQ0VELElBQUksSUFBSSxFQUFSLElBQ0FBLElBQUksS0FBS3BCLFdBRFQsSUFFQW9CLElBQUksS0FBS25CLFdBRlQsSUFHQW1CLElBQUksS0FBS2hCLEtBSFQsSUFJQWdCLElBQUksS0FBS2YsS0FKVCxJQUtBZSxJQUFJLEtBQUtqQixLQUxULElBTUFpQixJQUFJLEtBQUt2QixlQU5ULElBT0N1QixJQUFJLEtBQUtyQixnQkFBVCxJQUE2QjBCLFFBUmhDLENBUkY7O0FBbUJBVixNQUFBQSxLQUFLLEdBQUdKLEtBQUssQ0FBQ21CLEtBQU4sQ0FBWVgsR0FBWixFQUFpQlAsSUFBakIsQ0FBUjs7QUFFQSxVQUFJZixlQUFlLEtBQUt1QixJQUF4QixFQUE4QjtBQUM1Qk8sUUFBQUEsSUFBSSxHQUFHWixLQUFQO0FBQ0QsT0FGRCxNQUVPO0FBQ0xMLFFBQUFBLE1BQU0sQ0FBQ3NCLElBQVAsQ0FBWTtBQUNWRCxVQUFBQSxJQUFJLEVBQUUsTUFESTtBQUVWRSxVQUFBQSxXQUFXLEVBQUVkLEdBRkg7QUFHVlIsVUFBQUEsS0FBSyxFQUFFSTtBQUhHLFNBQVo7QUFLRDs7QUFFREksTUFBQUEsR0FBRyxHQUFHUCxJQUFOO0FBQ0Q7QUFDRjs7QUFFRCxPQUFLTyxHQUFHLEdBQUdJLEtBQUssQ0FBQ0QsTUFBTixHQUFlLENBQTFCLEVBQTZCSCxHQUE3QixFQUFrQ0EsR0FBRyxJQUFJLENBQXpDLEVBQTRDO0FBQzFDSSxJQUFBQSxLQUFLLENBQUNKLEdBQUQsQ0FBTCxDQUFXZ0IsUUFBWCxHQUFzQixJQUF0QjtBQUNEOztBQUVELFNBQU9aLEtBQUssQ0FBQyxDQUFELENBQUwsQ0FBU0MsS0FBaEI7QUFDRCxDQWhQRCIsInNvdXJjZXNDb250ZW50IjpbInZhciBvcGVuUGFyZW50aGVzZXMgPSBcIihcIi5jaGFyQ29kZUF0KDApO1xudmFyIGNsb3NlUGFyZW50aGVzZXMgPSBcIilcIi5jaGFyQ29kZUF0KDApO1xudmFyIHNpbmdsZVF1b3RlID0gXCInXCIuY2hhckNvZGVBdCgwKTtcbnZhciBkb3VibGVRdW90ZSA9ICdcIicuY2hhckNvZGVBdCgwKTtcbnZhciBiYWNrc2xhc2ggPSBcIlxcXFxcIi5jaGFyQ29kZUF0KDApO1xudmFyIHNsYXNoID0gXCIvXCIuY2hhckNvZGVBdCgwKTtcbnZhciBjb21tYSA9IFwiLFwiLmNoYXJDb2RlQXQoMCk7XG52YXIgY29sb24gPSBcIjpcIi5jaGFyQ29kZUF0KDApO1xudmFyIHN0YXIgPSBcIipcIi5jaGFyQ29kZUF0KDApO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGlucHV0KSB7XG4gIHZhciB0b2tlbnMgPSBbXTtcbiAgdmFyIHZhbHVlID0gaW5wdXQ7XG5cbiAgdmFyIG5leHQsIHF1b3RlLCBwcmV2LCB0b2tlbiwgZXNjYXBlLCBlc2NhcGVQb3MsIHdoaXRlc3BhY2VQb3M7XG4gIHZhciBwb3MgPSAwO1xuICB2YXIgY29kZSA9IHZhbHVlLmNoYXJDb2RlQXQocG9zKTtcbiAgdmFyIG1heCA9IHZhbHVlLmxlbmd0aDtcbiAgdmFyIHN0YWNrID0gW3sgbm9kZXM6IHRva2VucyB9XTtcbiAgdmFyIGJhbGFuY2VkID0gMDtcbiAgdmFyIHBhcmVudDtcblxuICB2YXIgbmFtZSA9IFwiXCI7XG4gIHZhciBiZWZvcmUgPSBcIlwiO1xuICB2YXIgYWZ0ZXIgPSBcIlwiO1xuXG4gIHdoaWxlIChwb3MgPCBtYXgpIHtcbiAgICAvLyBXaGl0ZXNwYWNlc1xuICAgIGlmIChjb2RlIDw9IDMyKSB7XG4gICAgICBuZXh0ID0gcG9zO1xuICAgICAgZG8ge1xuICAgICAgICBuZXh0ICs9IDE7XG4gICAgICAgIGNvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KG5leHQpO1xuICAgICAgfSB3aGlsZSAoY29kZSA8PSAzMik7XG4gICAgICB0b2tlbiA9IHZhbHVlLnNsaWNlKHBvcywgbmV4dCk7XG5cbiAgICAgIHByZXYgPSB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKGNvZGUgPT09IGNsb3NlUGFyZW50aGVzZXMgJiYgYmFsYW5jZWQpIHtcbiAgICAgICAgYWZ0ZXIgPSB0b2tlbjtcbiAgICAgIH0gZWxzZSBpZiAocHJldiAmJiBwcmV2LnR5cGUgPT09IFwiZGl2XCIpIHtcbiAgICAgICAgcHJldi5hZnRlciA9IHRva2VuO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgY29kZSA9PT0gY29tbWEgfHxcbiAgICAgICAgY29kZSA9PT0gY29sb24gfHxcbiAgICAgICAgKGNvZGUgPT09IHNsYXNoICYmIHZhbHVlLmNoYXJDb2RlQXQobmV4dCArIDEpICE9PSBzdGFyKVxuICAgICAgKSB7XG4gICAgICAgIGJlZm9yZSA9IHRva2VuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG9rZW5zLnB1c2goe1xuICAgICAgICAgIHR5cGU6IFwic3BhY2VcIixcbiAgICAgICAgICBzb3VyY2VJbmRleDogcG9zLFxuICAgICAgICAgIHZhbHVlOiB0b2tlblxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcG9zID0gbmV4dDtcblxuICAgICAgLy8gUXVvdGVzXG4gICAgfSBlbHNlIGlmIChjb2RlID09PSBzaW5nbGVRdW90ZSB8fCBjb2RlID09PSBkb3VibGVRdW90ZSkge1xuICAgICAgbmV4dCA9IHBvcztcbiAgICAgIHF1b3RlID0gY29kZSA9PT0gc2luZ2xlUXVvdGUgPyBcIidcIiA6ICdcIic7XG4gICAgICB0b2tlbiA9IHtcbiAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgc291cmNlSW5kZXg6IHBvcyxcbiAgICAgICAgcXVvdGU6IHF1b3RlXG4gICAgICB9O1xuICAgICAgZG8ge1xuICAgICAgICBlc2NhcGUgPSBmYWxzZTtcbiAgICAgICAgbmV4dCA9IHZhbHVlLmluZGV4T2YocXVvdGUsIG5leHQgKyAxKTtcbiAgICAgICAgaWYgKH5uZXh0KSB7XG4gICAgICAgICAgZXNjYXBlUG9zID0gbmV4dDtcbiAgICAgICAgICB3aGlsZSAodmFsdWUuY2hhckNvZGVBdChlc2NhcGVQb3MgLSAxKSA9PT0gYmFja3NsYXNoKSB7XG4gICAgICAgICAgICBlc2NhcGVQb3MgLT0gMTtcbiAgICAgICAgICAgIGVzY2FwZSA9ICFlc2NhcGU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlICs9IHF1b3RlO1xuICAgICAgICAgIG5leHQgPSB2YWx1ZS5sZW5ndGggLSAxO1xuICAgICAgICAgIHRva2VuLnVuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSB3aGlsZSAoZXNjYXBlKTtcbiAgICAgIHRva2VuLnZhbHVlID0gdmFsdWUuc2xpY2UocG9zICsgMSwgbmV4dCk7XG5cbiAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgIHBvcyA9IG5leHQgKyAxO1xuICAgICAgY29kZSA9IHZhbHVlLmNoYXJDb2RlQXQocG9zKTtcblxuICAgICAgLy8gQ29tbWVudHNcbiAgICB9IGVsc2UgaWYgKGNvZGUgPT09IHNsYXNoICYmIHZhbHVlLmNoYXJDb2RlQXQocG9zICsgMSkgPT09IHN0YXIpIHtcbiAgICAgIHRva2VuID0ge1xuICAgICAgICB0eXBlOiBcImNvbW1lbnRcIixcbiAgICAgICAgc291cmNlSW5kZXg6IHBvc1xuICAgICAgfTtcblxuICAgICAgbmV4dCA9IHZhbHVlLmluZGV4T2YoXCIqL1wiLCBwb3MpO1xuICAgICAgaWYgKG5leHQgPT09IC0xKSB7XG4gICAgICAgIHRva2VuLnVuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgbmV4dCA9IHZhbHVlLmxlbmd0aDtcbiAgICAgIH1cblxuICAgICAgdG9rZW4udmFsdWUgPSB2YWx1ZS5zbGljZShwb3MgKyAyLCBuZXh0KTtcbiAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcblxuICAgICAgcG9zID0gbmV4dCArIDI7XG4gICAgICBjb2RlID0gdmFsdWUuY2hhckNvZGVBdChwb3MpO1xuXG4gICAgICAvLyBEaXZpZGVyc1xuICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gc2xhc2ggfHwgY29kZSA9PT0gY29tbWEgfHwgY29kZSA9PT0gY29sb24pIHtcbiAgICAgIHRva2VuID0gdmFsdWVbcG9zXTtcblxuICAgICAgdG9rZW5zLnB1c2goe1xuICAgICAgICB0eXBlOiBcImRpdlwiLFxuICAgICAgICBzb3VyY2VJbmRleDogcG9zIC0gYmVmb3JlLmxlbmd0aCxcbiAgICAgICAgdmFsdWU6IHRva2VuLFxuICAgICAgICBiZWZvcmU6IGJlZm9yZSxcbiAgICAgICAgYWZ0ZXI6IFwiXCJcbiAgICAgIH0pO1xuICAgICAgYmVmb3JlID0gXCJcIjtcblxuICAgICAgcG9zICs9IDE7XG4gICAgICBjb2RlID0gdmFsdWUuY2hhckNvZGVBdChwb3MpO1xuXG4gICAgICAvLyBPcGVuIHBhcmVudGhlc2VzXG4gICAgfSBlbHNlIGlmIChvcGVuUGFyZW50aGVzZXMgPT09IGNvZGUpIHtcbiAgICAgIC8vIFdoaXRlc3BhY2VzIGFmdGVyIG9wZW4gcGFyZW50aGVzZXNcbiAgICAgIG5leHQgPSBwb3M7XG4gICAgICBkbyB7XG4gICAgICAgIG5leHQgKz0gMTtcbiAgICAgICAgY29kZSA9IHZhbHVlLmNoYXJDb2RlQXQobmV4dCk7XG4gICAgICB9IHdoaWxlIChjb2RlIDw9IDMyKTtcbiAgICAgIHRva2VuID0ge1xuICAgICAgICB0eXBlOiBcImZ1bmN0aW9uXCIsXG4gICAgICAgIHNvdXJjZUluZGV4OiBwb3MgLSBuYW1lLmxlbmd0aCxcbiAgICAgICAgdmFsdWU6IG5hbWUsXG4gICAgICAgIGJlZm9yZTogdmFsdWUuc2xpY2UocG9zICsgMSwgbmV4dClcbiAgICAgIH07XG4gICAgICBwb3MgPSBuZXh0O1xuXG4gICAgICBpZiAobmFtZSA9PT0gXCJ1cmxcIiAmJiBjb2RlICE9PSBzaW5nbGVRdW90ZSAmJiBjb2RlICE9PSBkb3VibGVRdW90ZSkge1xuICAgICAgICBuZXh0IC09IDE7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBlc2NhcGUgPSBmYWxzZTtcbiAgICAgICAgICBuZXh0ID0gdmFsdWUuaW5kZXhPZihcIilcIiwgbmV4dCArIDEpO1xuICAgICAgICAgIGlmICh+bmV4dCkge1xuICAgICAgICAgICAgZXNjYXBlUG9zID0gbmV4dDtcbiAgICAgICAgICAgIHdoaWxlICh2YWx1ZS5jaGFyQ29kZUF0KGVzY2FwZVBvcyAtIDEpID09PSBiYWNrc2xhc2gpIHtcbiAgICAgICAgICAgICAgZXNjYXBlUG9zIC09IDE7XG4gICAgICAgICAgICAgIGVzY2FwZSA9ICFlc2NhcGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhbHVlICs9IFwiKVwiO1xuICAgICAgICAgICAgbmV4dCA9IHZhbHVlLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICB0b2tlbi51bmNsb3NlZCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlIChlc2NhcGUpO1xuICAgICAgICAvLyBXaGl0ZXNwYWNlcyBiZWZvcmUgY2xvc2VkXG4gICAgICAgIHdoaXRlc3BhY2VQb3MgPSBuZXh0O1xuICAgICAgICBkbyB7XG4gICAgICAgICAgd2hpdGVzcGFjZVBvcyAtPSAxO1xuICAgICAgICAgIGNvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KHdoaXRlc3BhY2VQb3MpO1xuICAgICAgICB9IHdoaWxlIChjb2RlIDw9IDMyKTtcbiAgICAgICAgaWYgKHBvcyAhPT0gd2hpdGVzcGFjZVBvcyArIDEpIHtcbiAgICAgICAgICB0b2tlbi5ub2RlcyA9IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdHlwZTogXCJ3b3JkXCIsXG4gICAgICAgICAgICAgIHNvdXJjZUluZGV4OiBwb3MsXG4gICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZS5zbGljZShwb3MsIHdoaXRlc3BhY2VQb3MgKyAxKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdG9rZW4ubm9kZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodG9rZW4udW5jbG9zZWQgJiYgd2hpdGVzcGFjZVBvcyArIDEgIT09IG5leHQpIHtcbiAgICAgICAgICB0b2tlbi5hZnRlciA9IFwiXCI7XG4gICAgICAgICAgdG9rZW4ubm9kZXMucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiBcInNwYWNlXCIsXG4gICAgICAgICAgICBzb3VyY2VJbmRleDogd2hpdGVzcGFjZVBvcyArIDEsXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUuc2xpY2Uod2hpdGVzcGFjZVBvcyArIDEsIG5leHQpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdG9rZW4uYWZ0ZXIgPSB2YWx1ZS5zbGljZSh3aGl0ZXNwYWNlUG9zICsgMSwgbmV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgcG9zID0gbmV4dCArIDE7XG4gICAgICAgIGNvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KHBvcyk7XG4gICAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhbGFuY2VkICs9IDE7XG4gICAgICAgIHRva2VuLmFmdGVyID0gXCJcIjtcbiAgICAgICAgdG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICBzdGFjay5wdXNoKHRva2VuKTtcbiAgICAgICAgdG9rZW5zID0gdG9rZW4ubm9kZXMgPSBbXTtcbiAgICAgICAgcGFyZW50ID0gdG9rZW47XG4gICAgICB9XG4gICAgICBuYW1lID0gXCJcIjtcblxuICAgICAgLy8gQ2xvc2UgcGFyZW50aGVzZXNcbiAgICB9IGVsc2UgaWYgKGNsb3NlUGFyZW50aGVzZXMgPT09IGNvZGUgJiYgYmFsYW5jZWQpIHtcbiAgICAgIHBvcyArPSAxO1xuICAgICAgY29kZSA9IHZhbHVlLmNoYXJDb2RlQXQocG9zKTtcblxuICAgICAgcGFyZW50LmFmdGVyID0gYWZ0ZXI7XG4gICAgICBhZnRlciA9IFwiXCI7XG4gICAgICBiYWxhbmNlZCAtPSAxO1xuICAgICAgc3RhY2sucG9wKCk7XG4gICAgICBwYXJlbnQgPSBzdGFja1tiYWxhbmNlZF07XG4gICAgICB0b2tlbnMgPSBwYXJlbnQubm9kZXM7XG5cbiAgICAgIC8vIFdvcmRzXG4gICAgfSBlbHNlIHtcbiAgICAgIG5leHQgPSBwb3M7XG4gICAgICBkbyB7XG4gICAgICAgIGlmIChjb2RlID09PSBiYWNrc2xhc2gpIHtcbiAgICAgICAgICBuZXh0ICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgbmV4dCArPSAxO1xuICAgICAgICBjb2RlID0gdmFsdWUuY2hhckNvZGVBdChuZXh0KTtcbiAgICAgIH0gd2hpbGUgKFxuICAgICAgICBuZXh0IDwgbWF4ICYmXG4gICAgICAgICEoXG4gICAgICAgICAgY29kZSA8PSAzMiB8fFxuICAgICAgICAgIGNvZGUgPT09IHNpbmdsZVF1b3RlIHx8XG4gICAgICAgICAgY29kZSA9PT0gZG91YmxlUXVvdGUgfHxcbiAgICAgICAgICBjb2RlID09PSBjb21tYSB8fFxuICAgICAgICAgIGNvZGUgPT09IGNvbG9uIHx8XG4gICAgICAgICAgY29kZSA9PT0gc2xhc2ggfHxcbiAgICAgICAgICBjb2RlID09PSBvcGVuUGFyZW50aGVzZXMgfHxcbiAgICAgICAgICAoY29kZSA9PT0gY2xvc2VQYXJlbnRoZXNlcyAmJiBiYWxhbmNlZClcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICAgIHRva2VuID0gdmFsdWUuc2xpY2UocG9zLCBuZXh0KTtcblxuICAgICAgaWYgKG9wZW5QYXJlbnRoZXNlcyA9PT0gY29kZSkge1xuICAgICAgICBuYW1lID0gdG9rZW47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0b2tlbnMucHVzaCh7XG4gICAgICAgICAgdHlwZTogXCJ3b3JkXCIsXG4gICAgICAgICAgc291cmNlSW5kZXg6IHBvcyxcbiAgICAgICAgICB2YWx1ZTogdG9rZW5cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHBvcyA9IG5leHQ7XG4gICAgfVxuICB9XG5cbiAgZm9yIChwb3MgPSBzdGFjay5sZW5ndGggLSAxOyBwb3M7IHBvcyAtPSAxKSB7XG4gICAgc3RhY2tbcG9zXS51bmNsb3NlZCA9IHRydWU7XG4gIH1cblxuICByZXR1cm4gc3RhY2tbMF0ubm9kZXM7XG59O1xuIl19