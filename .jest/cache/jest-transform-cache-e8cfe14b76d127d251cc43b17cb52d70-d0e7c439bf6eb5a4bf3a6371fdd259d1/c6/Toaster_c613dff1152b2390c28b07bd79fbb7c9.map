{"version":3,"sources":["Toaster.js"],"names":["messageType","PropTypes","shape","text","oneOfType","string","node","isRequired","styles","object","duration","number","height","noop","Toaster","props","onShow","message","state","messages","onHide","setState","slice","onPress","cloneWithId","Array","isArray","obj","map","id","Math","random","toString","nextProps","concat","length","Component","propTypes","arrayOf","func","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport Toast from './Toast'\n\nconst messageType = PropTypes.shape({\n  text: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).isRequired,\n  styles: PropTypes.object,\n  duration: PropTypes.number,\n  height: PropTypes.number\n})\n\nconst noop = () => 0\n\n// Inspired by https://github.com/dabit3/react-native-toasts\nclass Toaster extends Component {\n  static propTypes = {\n    message: PropTypes.oneOfType([messageType, PropTypes.arrayOf(messageType)]),\n    onShow: PropTypes.func,\n    onHide: PropTypes.func,\n    onPress: PropTypes.func\n  }\n\n  static defaultProps = {\n    onShow: noop,\n    onHide: noop,\n    onPress: noop\n  }\n\n  constructor (props) {\n    super(props)\n\n    let messages = []\n\n    if (props.message) {\n      messages = this.cloneWithId(props.message)\n      messages = Array.isArray(messages) ? messages : [messages]\n    }\n\n    this.state = { messages }\n  }\n\n  cloneWithId (obj) {\n    if (Array.isArray(obj)) {\n      return obj.map(this.cloneWithId)\n    }\n\n    return Object.assign({ id: Math.random().toString(36) }, obj)\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if (!nextProps.message) return\n    const message = this.cloneWithId(nextProps.message)\n    this.setState({ messages: this.state.messages.concat(message) })\n  }\n\n  onShow = () => {\n    const message = this.state.messages[0]\n\n    if (message.onShow) {\n      message.onShow()\n    }\n\n    this.props.onShow(message)\n  }\n\n  onHide = () => {\n    const message = this.state.messages[0]\n\n    this.setState({ messages: this.state.messages.slice(1) }, () => {\n      if (message.onHide) {\n        message.onHide()\n      }\n\n      this.props.onHide(message)\n    })\n  }\n\n  onPress = () => {\n    const message = this.state.messages[0]\n\n    if (message.onPress) {\n      message.onPress()\n    }\n\n    this.props.onPress(message)\n  }\n\n  render () {\n    const { messages } = this.state\n    if (!messages.length) return null\n    return <Toast {...messages[0]} onShow={this.onShow} onHide={this.onHide} onPress={this.onPress} />\n  }\n}\n\nexport default Toaster\n"]}