d3c2513b581bdd3361b0a04d962ec87e
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _Toast = _interopRequireDefault(require("./Toast"));

var messageType = _propTypes.default.shape({
  text: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]).isRequired,
  styles: _propTypes.default.object,
  duration: _propTypes.default.number,
  height: _propTypes.default.number
});

var noop = function noop() {
  return 0;
};

var Toaster = function (_Component) {
  (0, _inherits2.default)(Toaster, _Component);

  function Toaster(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Toaster);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Toaster).call(this, props));

    _this.onShow = function () {
      var message = _this.state.messages[0];

      if (message.onShow) {
        message.onShow();
      }

      _this.props.onShow(message);
    };

    _this.onHide = function () {
      var message = _this.state.messages[0];

      _this.setState({
        messages: _this.state.messages.slice(1)
      }, function () {
        if (message.onHide) {
          message.onHide();
        }

        _this.props.onHide(message);
      });
    };

    _this.onPress = function () {
      var message = _this.state.messages[0];

      if (message.onPress) {
        message.onPress();
      }

      _this.props.onPress(message);
    };

    var messages = [];

    if (props.message) {
      messages = _this.cloneWithId(props.message);
      messages = Array.isArray(messages) ? messages : [messages];
    }

    _this.state = {
      messages: messages
    };
    return _this;
  }

  (0, _createClass2.default)(Toaster, [{
    key: "cloneWithId",
    value: function cloneWithId(obj) {
      if (Array.isArray(obj)) {
        return obj.map(this.cloneWithId);
      }

      return (0, _extends2.default)({
        id: Math.random().toString(36)
      }, obj);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (!nextProps.message) return;
      var message = this.cloneWithId(nextProps.message);
      this.setState({
        messages: this.state.messages.concat(message)
      });
    }
  }, {
    key: "render",
    value: function render() {
      var messages = this.state.messages;
      if (!messages.length) return null;
      return _react.default.createElement(_Toast.default, (0, _extends2.default)({}, messages[0], {
        onShow: this.onShow,
        onHide: this.onHide,
        onPress: this.onPress
      }));
    }
  }]);
  return Toaster;
}(_react.Component);

Toaster.propTypes = {
  message: _propTypes.default.oneOfType([messageType, _propTypes.default.arrayOf(messageType)]),
  onShow: _propTypes.default.func,
  onHide: _propTypes.default.func,
  onPress: _propTypes.default.func
};
Toaster.defaultProps = {
  onShow: noop,
  onHide: noop,
  onPress: noop
};
var _default = Toaster;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRvYXN0ZXIuanMiXSwibmFtZXMiOlsibWVzc2FnZVR5cGUiLCJQcm9wVHlwZXMiLCJzaGFwZSIsInRleHQiLCJvbmVPZlR5cGUiLCJzdHJpbmciLCJub2RlIiwiaXNSZXF1aXJlZCIsInN0eWxlcyIsIm9iamVjdCIsImR1cmF0aW9uIiwibnVtYmVyIiwiaGVpZ2h0Iiwibm9vcCIsIlRvYXN0ZXIiLCJwcm9wcyIsIm9uU2hvdyIsIm1lc3NhZ2UiLCJzdGF0ZSIsIm1lc3NhZ2VzIiwib25IaWRlIiwic2V0U3RhdGUiLCJzbGljZSIsIm9uUHJlc3MiLCJjbG9uZVdpdGhJZCIsIkFycmF5IiwiaXNBcnJheSIsIm9iaiIsIm1hcCIsImlkIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwibmV4dFByb3BzIiwiY29uY2F0IiwibGVuZ3RoIiwiQ29tcG9uZW50IiwicHJvcFR5cGVzIiwiYXJyYXlPZiIsImZ1bmMiLCJkZWZhdWx0UHJvcHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUVBLElBQU1BLFdBQVcsR0FBR0MsbUJBQVVDLEtBQVYsQ0FBZ0I7QUFDbENDLEVBQUFBLElBQUksRUFBRUYsbUJBQVVHLFNBQVYsQ0FBb0IsQ0FBQ0gsbUJBQVVJLE1BQVgsRUFBbUJKLG1CQUFVSyxJQUE3QixDQUFwQixFQUF3REMsVUFENUI7QUFFbENDLEVBQUFBLE1BQU0sRUFBRVAsbUJBQVVRLE1BRmdCO0FBR2xDQyxFQUFBQSxRQUFRLEVBQUVULG1CQUFVVSxNQUhjO0FBSWxDQyxFQUFBQSxNQUFNLEVBQUVYLG1CQUFVVTtBQUpnQixDQUFoQixDQUFwQjs7QUFPQSxJQUFNRSxJQUFJLEdBQUcsU0FBUEEsSUFBTztBQUFBLFNBQU0sQ0FBTjtBQUFBLENBQWI7O0lBR01DLE87OztBQWNKLG1CQUFhQyxLQUFiLEVBQW9CO0FBQUE7O0FBQUE7QUFDbEIsNkdBQU1BLEtBQU47O0FBRGtCLFVBMkJwQkMsTUEzQm9CLEdBMkJY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LEVBQUVoQixtQkFBVUcsU0FBVixDQUFvQixDQUFDSixXQUFELEVBQWNDLG1CQUFVcUMsT0FBVixDQUFrQnRDLFdBQWxCLENBQWQsQ0FBcEIsQ0FEUTtBQUVqQmdCLEVBQUFBLE1BQU0sRUFBRWYsbUJBQVVzQyxJQUZEO0FBR2pCbkIsRUFBQUEsTUFBTSxFQUFFbkIsbUJBQVVzQyxJQUhEO0FBSWpCaEIsRUFBQUEsT0FBTyxFQUFFdEIsbUJBQVVzQztBQUpGLEM7QUFEZnpCLE8sQ0FRRzBCLFksR0FBZTtBQUNwQnhCLEVBQUFBLE1BQU0sRUFBRUgsSUFEWTtBQUVwQk8sRUFBQUEsTUFBTSxFQUFFUCxJQUZZO0FBR3BCVSxFQUFBQSxPQUFPLEVBQUVWO0FBSFcsQztlQXdFVEMsTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcydcbmltcG9ydCBUb2FzdCBmcm9tICcuL1RvYXN0J1xuXG5jb25zdCBtZXNzYWdlVHlwZSA9IFByb3BUeXBlcy5zaGFwZSh7XG4gIHRleHQ6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5ub2RlXSkuaXNSZXF1aXJlZCxcbiAgc3R5bGVzOiBQcm9wVHlwZXMub2JqZWN0LFxuICBkdXJhdGlvbjogUHJvcFR5cGVzLm51bWJlcixcbiAgaGVpZ2h0OiBQcm9wVHlwZXMubnVtYmVyXG59KVxuXG5jb25zdCBub29wID0gKCkgPT4gMFxuXG4vLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vZGFiaXQzL3JlYWN0LW5hdGl2ZS10b2FzdHNcbmNsYXNzIFRvYXN0ZXIgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIG1lc3NhZ2U6IFByb3BUeXBlcy5vbmVPZlR5cGUoW21lc3NhZ2VUeXBlLCBQcm9wVHlwZXMuYXJyYXlPZihtZXNzYWdlVHlwZSldKSxcbiAgICBvblNob3c6IFByb3BUeXBlcy5mdW5jLFxuICAgIG9uSGlkZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25QcmVzczogUHJvcFR5cGVzLmZ1bmNcbiAgfVxuXG4gIHN0YXRpYyBkZWZhdWx0UHJvcHMgPSB7XG4gICAgb25TaG93OiBub29wLFxuICAgIG9uSGlkZTogbm9vcCxcbiAgICBvblByZXNzOiBub29wXG4gIH1cblxuICBjb25zdHJ1Y3RvciAocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcylcblxuICAgIGxldCBtZXNzYWdlcyA9IFtdXG5cbiAgICBpZiAocHJvcHMubWVzc2FnZSkge1xuICAgICAgbWVzc2FnZXMgPSB0aGlzLmNsb25lV2l0aElkKHByb3BzLm1lc3NhZ2UpXG4gICAgICBtZXNzYWdlcyA9IEFycmF5LmlzQXJyYXkobWVzc2FnZXMpID8gbWVzc2FnZXMgOiBbbWVzc2FnZXNdXG4gICAgfVxuXG4gICAgdGhpcy5zdGF0ZSA9IHsgbWVzc2FnZXMgfVxuICB9XG5cbiAgY2xvbmVXaXRoSWQgKG9iaikge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICAgIHJldHVybiBvYmoubWFwKHRoaXMuY2xvbmVXaXRoSWQpXG4gICAgfVxuXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oeyBpZDogTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikgfSwgb2JqKVxuICB9XG5cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyAobmV4dFByb3BzKSB7XG4gICAgaWYgKCFuZXh0UHJvcHMubWVzc2FnZSkgcmV0dXJuXG4gICAgY29uc3QgbWVzc2FnZSA9IHRoaXMuY2xvbmVXaXRoSWQobmV4dFByb3BzLm1lc3NhZ2UpXG4gICAgdGhpcy5zZXRTdGF0ZSh7IG1lc3NhZ2VzOiB0aGlzLnN0YXRlLm1lc3NhZ2VzLmNvbmNhdChtZXNzYWdlKSB9KVxuICB9XG5cbiAgb25TaG93ID0gKCkgPT4ge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSB0aGlzLnN0YXRlLm1lc3NhZ2VzWzBdXG5cbiAgICBpZiAobWVzc2FnZS5vblNob3cpIHtcbiAgICAgIG1lc3NhZ2Uub25TaG93KClcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLm9uU2hvdyhtZXNzYWdlKVxuICB9XG5cbiAgb25IaWRlID0gKCkgPT4ge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSB0aGlzLnN0YXRlLm1lc3NhZ2VzWzBdXG5cbiAgICB0aGlzLnNldFN0YXRlKHsgbWVzc2FnZXM6IHRoaXMuc3RhdGUubWVzc2FnZXMuc2xpY2UoMSkgfSwgKCkgPT4ge1xuICAgICAgaWYgKG1lc3NhZ2Uub25IaWRlKSB7XG4gICAgICAgIG1lc3NhZ2Uub25IaWRlKClcbiAgICAgIH1cblxuICAgICAgdGhpcy5wcm9wcy5vbkhpZGUobWVzc2FnZSlcbiAgICB9KVxuICB9XG5cbiAgb25QcmVzcyA9ICgpID0+IHtcbiAgICBjb25zdCBtZXNzYWdlID0gdGhpcy5zdGF0ZS5tZXNzYWdlc1swXVxuXG4gICAgaWYgKG1lc3NhZ2Uub25QcmVzcykge1xuICAgICAgbWVzc2FnZS5vblByZXNzKClcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLm9uUHJlc3MobWVzc2FnZSlcbiAgfVxuXG4gIHJlbmRlciAoKSB7XG4gICAgY29uc3QgeyBtZXNzYWdlcyB9ID0gdGhpcy5zdGF0ZVxuICAgIGlmICghbWVzc2FnZXMubGVuZ3RoKSByZXR1cm4gbnVsbFxuICAgIHJldHVybiA8VG9hc3Qgey4uLm1lc3NhZ2VzWzBdfSBvblNob3c9e3RoaXMub25TaG93fSBvbkhpZGU9e3RoaXMub25IaWRlfSBvblByZXNzPXt0aGlzLm9uUHJlc3N9IC8+XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVG9hc3RlclxuIl19