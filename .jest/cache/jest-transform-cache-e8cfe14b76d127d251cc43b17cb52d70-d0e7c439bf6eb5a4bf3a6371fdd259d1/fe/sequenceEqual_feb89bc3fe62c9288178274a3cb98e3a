70efd39101c80f8b75c0c3fcf1359a68
"use strict";

var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Subscriber_1 = require("../Subscriber");

function sequenceEqual(compareTo, comparator) {
  return function (source) {
    return source.lift(new SequenceEqualOperator(compareTo, comparator));
  };
}

exports.sequenceEqual = sequenceEqual;

var SequenceEqualOperator = function () {
  function SequenceEqualOperator(compareTo, comparator) {
    this.compareTo = compareTo;
    this.comparator = comparator;
  }

  SequenceEqualOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparator));
  };

  return SequenceEqualOperator;
}();

exports.SequenceEqualOperator = SequenceEqualOperator;

var SequenceEqualSubscriber = function (_super) {
  __extends(SequenceEqualSubscriber, _super);

  function SequenceEqualSubscriber(destination, compareTo, comparator) {
    var _this = _super.call(this, destination) || this;

    _this.compareTo = compareTo;
    _this.comparator = comparator;
    _this._a = [];
    _this._b = [];
    _this._oneComplete = false;

    _this.destination.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, _this)));

    return _this;
  }

  SequenceEqualSubscriber.prototype._next = function (value) {
    if (this._oneComplete && this._b.length === 0) {
      this.emit(false);
    } else {
      this._a.push(value);

      this.checkValues();
    }
  };

  SequenceEqualSubscriber.prototype._complete = function () {
    if (this._oneComplete) {
      this.emit(this._a.length === 0 && this._b.length === 0);
    } else {
      this._oneComplete = true;
    }

    this.unsubscribe();
  };

  SequenceEqualSubscriber.prototype.checkValues = function () {
    var _c = this,
        _a = _c._a,
        _b = _c._b,
        comparator = _c.comparator;

    while (_a.length > 0 && _b.length > 0) {
      var a = _a.shift();

      var b = _b.shift();

      var areEqual = false;

      try {
        areEqual = comparator ? comparator(a, b) : a === b;
      } catch (e) {
        this.destination.error(e);
      }

      if (!areEqual) {
        this.emit(false);
      }
    }
  };

  SequenceEqualSubscriber.prototype.emit = function (value) {
    var destination = this.destination;
    destination.next(value);
    destination.complete();
  };

  SequenceEqualSubscriber.prototype.nextB = function (value) {
    if (this._oneComplete && this._a.length === 0) {
      this.emit(false);
    } else {
      this._b.push(value);

      this.checkValues();
    }
  };

  SequenceEqualSubscriber.prototype.completeB = function () {
    if (this._oneComplete) {
      this.emit(this._a.length === 0 && this._b.length === 0);
    } else {
      this._oneComplete = true;
    }
  };

  return SequenceEqualSubscriber;
}(Subscriber_1.Subscriber);

exports.SequenceEqualSubscriber = SequenceEqualSubscriber;

var SequenceEqualCompareToSubscriber = function (_super) {
  __extends(SequenceEqualCompareToSubscriber, _super);

  function SequenceEqualCompareToSubscriber(destination, parent) {
    var _this = _super.call(this, destination) || this;

    _this.parent = parent;
    return _this;
  }

  SequenceEqualCompareToSubscriber.prototype._next = function (value) {
    this.parent.nextB(value);
  };

  SequenceEqualCompareToSubscriber.prototype._error = function (err) {
    this.parent.error(err);
    this.unsubscribe();
  };

  SequenceEqualCompareToSubscriber.prototype._complete = function () {
    this.parent.completeB();
    this.unsubscribe();
  };

  return SequenceEqualCompareToSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvc2VxdWVuY2VFcXVhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLElBQUEsWUFBQSxHQUFBLE9BQUEsQ0FBQSxlQUFBLENBQUE7O0FBOERBLFNBQWdCLGFBQWhCLENBQWlDLFNBQWpDLEVBQ2lDLFVBRGpDLEVBQ3FFO0FBQ25FLFNBQU8sVUFBQyxNQUFELEVBQXNCO0FBQUssV0FBQSxNQUFNLENBQUMsSUFBUCxDQUFZLElBQUkscUJBQUosQ0FBMEIsU0FBMUIsRUFBWixVQUFZLENBQVosQ0FBQTtBQUE2RCxHQUEvRjtBQUNEOztBQUhELE9BQUEsQ0FBQSxhQUFBLEdBQUEsYUFBQTs7QUFLQSxJQUFBLHFCQUFBLEdBQUEsWUFBQTtBQUNFLFdBQUEscUJBQUEsQ0FBb0IsU0FBcEIsRUFDb0IsVUFEcEIsRUFDdUQ7QUFEbkMsU0FBQSxTQUFBLEdBQUEsU0FBQTtBQUNBLFNBQUEsVUFBQSxHQUFBLFVBQUE7QUFDbkI7O0FBRUQsRUFBQSxxQkFBQSxDQUFBLFNBQUEsQ0FBQSxJQUFBLEdBQUEsVUFBSyxVQUFMLEVBQXNDLE1BQXRDLEVBQWlEO0FBQy9DLFdBQU8sTUFBTSxDQUFDLFNBQVAsQ0FBaUIsSUFBSSx1QkFBSixDQUE0QixVQUE1QixFQUF3QyxLQUFLLFNBQTdDLEVBQXdELEtBQUssVUFBN0QsQ0FBakIsQ0FBUDtBQUNELEdBRkQ7O0FBR0YsU0FBQSxxQkFBQTtBQUFDLENBUkQsRUFBQTs7QUFBYSxPQUFBLENBQUEscUJBQUEsR0FBQSxxQkFBQTs7QUFlYixJQUFBLHVCQUFBLEdBQUEsVUFBQSxNQUFBLEVBQUE7QUFBbUQsRUFBQSxTQUFBLENBQUEsdUJBQUEsRUFBQSxNQUFBLENBQUE7O0FBS2pELFdBQUEsdUJBQUEsQ0FBWSxXQUFaLEVBQ29CLFNBRHBCLEVBRW9CLFVBRnBCLEVBRXVEO0FBRnZELFFBQUEsS0FBQSxHQUdFLE1B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