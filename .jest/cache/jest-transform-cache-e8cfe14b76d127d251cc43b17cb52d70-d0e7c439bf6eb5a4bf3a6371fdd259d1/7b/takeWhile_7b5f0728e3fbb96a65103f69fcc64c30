2484d0d4f5d3c71b48c1a56c84eb73c0
"use strict";

var __extends = this && this.__extends || function () {
  var _extendStatics = function extendStatics(d, b) {
    _extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) {
        if (b.hasOwnProperty(p)) d[p] = b[p];
      }
    };

    return _extendStatics(d, b);
  };

  return function (d, b) {
    _extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Subscriber_1 = require("../Subscriber");

function takeWhile(predicate, inclusive) {
  if (inclusive === void 0) {
    inclusive = false;
  }

  return function (source) {
    return source.lift(new TakeWhileOperator(predicate, inclusive));
  };
}

exports.takeWhile = takeWhile;

var TakeWhileOperator = function () {
  function TakeWhileOperator(predicate, inclusive) {
    this.predicate = predicate;
    this.inclusive = inclusive;
  }

  TakeWhileOperator.prototype.call = function (subscriber, source) {
    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));
  };

  return TakeWhileOperator;
}();

var TakeWhileSubscriber = function (_super) {
  __extends(TakeWhileSubscriber, _super);

  function TakeWhileSubscriber(destination, predicate, inclusive) {
    var _this = _super.call(this, destination) || this;

    _this.predicate = predicate;
    _this.inclusive = inclusive;
    _this.index = 0;
    return _this;
  }

  TakeWhileSubscriber.prototype._next = function (value) {
    var destination = this.destination;
    var result;

    try {
      result = this.predicate(value, this.index++);
    } catch (err) {
      destination.error(err);
      return;
    }

    this.nextOrComplete(value, result);
  };

  TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {
    var destination = this.destination;

    if (Boolean(predicateResult)) {
      destination.next(value);
    } else {
      if (this.inclusive) {
        destination.next(value);
      }

      destination.complete();
    }
  };

  return TakeWhileSubscriber;
}(Subscriber_1.Subscriber);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbnRlcm5hbC9vcGVyYXRvcnMvdGFrZVdoaWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsSUFBQSxZQUFBLEdBQUEsT0FBQSxDQUFBLGVBQUEsQ0FBQTs7QUFtREEsU0FBZ0IsU0FBaEIsQ0FDSSxTQURKLEVBRUksU0FGSixFQUVxQjtBQUFqQixNQUFBLFNBQUEsS0FBQSxLQUFBLENBQUEsRUFBQTtBQUFBLElBQUEsU0FBQSxHQUFBLEtBQUE7QUFBaUI7O0FBQ25CLFNBQU8sVUFBQyxNQUFELEVBQXNCO0FBQ2xCLFdBQUEsTUFBTSxDQUFDLElBQVAsQ0FBWSxJQUFJLGlCQUFKLENBQXNCLFNBQXRCLEVBQWlDLFNBQWpDLENBQVosQ0FBQTtBQUF3RCxHQURuRTtBQUVEOztBQUxELE9BQUEsQ0FBQSxTQUFBLEdBQUEsU0FBQTs7QUFPQSxJQUFBLGlCQUFBLEdBQUEsWUFBQTtBQUNFLFdBQUEsaUJBQUEsQ0FDWSxTQURaLEVBRVksU0FGWixFQUU4QjtBQURsQixTQUFBLFNBQUEsR0FBQSxTQUFBO0FBQ0EsU0FBQSxTQUFBLEdBQUEsU0FBQTtBQUFzQjs7QUFFbEMsRUFBQSxpQkFBQSxDQUFBLFNBQUEsQ0FBQSxJQUFBLEdBQUEsVUFBSyxVQUFMLEVBQWdDLE1BQWhDLEVBQTJDO0FBQ3pDLFdBQU8sTUFBTSxDQUFDLFNBQVAsQ0FDSCxJQUFJLG1CQUFKLENBQXdCLFVBQXhCLEVBQW9DLEtBQUssU0FBekMsRUFBb0QsS0FBSyxTQUF6RCxDQURHLENBQVA7QUFFRCxHQUhEOztBQUlGLFNBQUEsaUJBQUE7QUFBQyxDQVRELEVBQUE7O0FBZ0JBLElBQUEsbUJBQUEsR0FBQSxVQUFBLE1BQUEsRUFBQTtBQUFxQyxFQUFBLFNBQUEsQ0FBQSxtQkFBQSxFQUFBLE1BQUEsQ0FBQTs7QUFHbkMsV0FBQSxtQkFBQSxDQUNJLFdBREosRUFFWSxTQUZaLEVBR1ksU0FIWixFQUc4QjtBQUg5QixRQUFBLEtBQUEsR0FJRSxNQUFBLENBQUEsSUFBQSxDQUFBLElBQUEsRUFBTSxXQUFOLEtBQWtCLElBSnBCOztBQUVZLElBQUEsS0FBQSxDQUFBLFNBQUEsR0FBQSxTQUFBO0FBQ0EsSUFBQSxLQUFBLENBQUEsU0FBQSxHQUFBLFNBQUE7QUFMSixJQUFBLEtBQUEsQ0FBQSxLQUFBLEdBQWdCLENBQWhCOztBQU9QOztBQUVTLEVBQUEsbUJBQUEsQ0FBQSxTQUFBLENBQUEsS0FBQSxHQUFWLFVBQWdCLEtBQWhCLEVBQXdCO0FBQ3RCLFFBQU0sV0FBVyxHQUFHLEtBQUssV0FBekI7QUFDQSxRQUFJLE1BQUo7O0FBQ0EsUUFBSTtBQUNGLE1BQUEsTUFBTSxHQUFHLEtBQUssU0FBTCxDQUFlLEtBQWYsRUFBc0IsS0FBSyxLQUFMLEVBQXRCLENBQVQ7QUFDRCxLQUZELENBRUUsT0FBTyxHQUFQLEVBQVk7QUFDWixNQUFBLFdBQVcsQ0FBQyxLQUFaLENBQWtCLEdBQWxCO0FBQ0E7QUFDRDs7QUFDRCxTQUFLLGNBQUwsQ0FBb0IsS0FBcEIsRUFBMkIsTUFBM0I7QUFDRCxHQVZTOztBQVlGLEVBQUEsbUJBQUEsQ0FBQSxTQUFBLENBQUEsY0FBQSxHQUFSLFVBQXVCLEtBQXZCLEVBQWlDLGVBQWpDLEVBQXlEO0FBQ3ZELFFBQU0sV0FBVyxHQUFHLEtBQUssV0FBekI7O0FBQ0EsUUFBSSxPQUFPLENBQUMsZUFBRCxDQUFYLEVBQThCO0FBQzVCLE1BQUEsV0FBVyxDQUFDLElBQVosQ0FBaUIsS0FBakI7QUFDRCxLQUZELE1BRU87QUFDTCxVQUFJLEtBQUssU0FBVCxFQUFvQjtBQUNsQixRQUFBLFdBQVcsQ0FBQyxJQUFaLENBQWlCLEtBQWpCO0FBQ0Q7O0FBQ0QsTUFBQSxXQUFXLENBQUMsUUFBWjtBQUNEO0FBQ0YsR0FWTzs7QUFXVixTQUFBLG1CQUFBO0FBQUMsQ0FqQ0QsQ0FBcUMsWUFBQSxDQUFBLFVBQXJDLENBQUEifQ==