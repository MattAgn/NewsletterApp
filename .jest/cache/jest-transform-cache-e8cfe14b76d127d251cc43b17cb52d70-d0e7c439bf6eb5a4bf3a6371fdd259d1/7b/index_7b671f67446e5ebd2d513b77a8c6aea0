3b105882192b05362b1d5ebed862f5cb
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var TextInput = function (_Component) {
  (0, _inherits2.default)(TextInput, _Component);

  function TextInput(props) {
    var _this;

    (0, _classCallCheck2.default)(this, TextInput);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(TextInput).call(this, props));

    _this.toggleSecureTextEntryVisibility = function () {
      return _this.setState(function (state) {
        return {
          password: state.password === 'hidden' ? 'visible' : 'hidden'
        };
      });
    };

    _this._setRef = function (c) {
      _this._root = c;
    };

    if (props.secureTextEntry) {
      _this.state = {
        password: 'hidden'
      };
    }

    return _this;
  }

  (0, _createClass2.default)(TextInput, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          style = _this$props.style,
          TextInputComponent = _this$props.TextInputComponent,
          secureTextEntry = _this$props.secureTextEntry,
          containerStyle = _this$props.containerStyle,
          renderSecureTextEntryVisibilityButtonContent = _this$props.renderSecureTextEntryVisibilityButtonContent,
          PasswordVisibilityTouchable = _this$props.PasswordVisibilityTouchable,
          passwordVisibilityButtonStyle = _this$props.passwordVisibilityButtonStyle,
          rest = (0, _objectWithoutProperties2.default)(_this$props, ["style", "TextInputComponent", "secureTextEntry", "containerStyle", "renderSecureTextEntryVisibilityButtonContent", "PasswordVisibilityTouchable", "passwordVisibilityButtonStyle"]);
      var TextInput = TextInputComponent || _reactNative.TextInput;

      if (secureTextEntry) {
        var passwordProps = {
          autoCorrect: false,
          autoCapitalize: 'none',
          secureTextEntry: this.state.password === 'hidden'
        };
        var Touchable = PasswordVisibilityTouchable || _reactNative.TouchableOpacity;
        return _react.default.createElement(_reactNative.View, {
          style: [styles.textInputContainer, containerStyle]
        }, _react.default.createElement(TextInput, (0, _extends2.default)({
          ref: this._setRef,
          style: [styles.textInput, style]
        }, passwordProps, rest)), !!renderSecureTextEntryVisibilityButtonContent && _react.default.createElement(Touchable, {
          style: [styles.secureTextEntryVisibilityButton, passwordVisibilityButtonStyle],
          onPress: this.toggleSecureTextEntryVisibility
        }, renderSecureTextEntryVisibilityButtonContent(this.state.password === 'hidden')));
      }

      if (this.props.keyboardType === 'email-address') {
        rest.autoCorrect = false;
        rest.autoCapitalize = 'none';
      }

      return _react.default.createElement(_reactNative.View, {
        style: [styles.textInputContainer, containerStyle]
      }, _react.default.createElement(TextInput, (0, _extends2.default)({
        ref: this._setRef,
        style: [styles.textInput, style]
      }, rest)));
    }
  }, {
    key: "setNativeProps",
    value: function setNativeProps() {
      var _this$_root;

      return (_this$_root = this._root).setNativeProps.apply(_this$_root, arguments);
    }
  }, {
    key: "isFocused",
    value: function isFocused() {
      var _this$_root2;

      return (_this$_root2 = this._root).isFocused.apply(_this$_root2, arguments);
    }
  }, {
    key: "clear",
    value: function clear() {
      var _this$_root3;

      return (_this$_root3 = this._root).clear.apply(_this$_root3, arguments);
    }
  }, {
    key: "focus",
    value: function focus() {
      var _this$_root4;

      return (_this$_root4 = this._root).focus.apply(_this$_root4, arguments);
    }
  }, {
    key: "blur",
    value: function blur() {
      var _this$_root5;

      return (_this$_root5 = this._root).blur.apply(_this$_root5, arguments);
    }
  }]);
  return TextInput;
}(_react.Component);

exports.default = TextInput;

var styles = _reactNative.StyleSheet.create({
  textInput: {
    flex: 1
  },
  textInputContainer: {
    flexDirection: 'row'
  },
  secureTextEntryVisibilityButton: {
    position: 'absolute',
    top: 0,
    bottom: 0,
    right: 0,
    justifyContent: 'center'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIlRleHRJbnB1dCIsInByb3BzIiwidG9nZ2xlU2VjdXJlVGV4dEVudHJ5VmlzaWJpbGl0eSIsInNldFN0YXRlIiwic3RhdGUiLCJwYXNzd29yZCIsIl9zZXRSZWYiLCJjIiwiX3Jvb3QiLCJzZWN1cmVUZXh0RW50cnkiLCJzdHlsZSIsIlRleHRJbnB1dENvbXBvbmVudCIsImNvbnRhaW5lclN0eWxlIiwicmVuZGVyU2VjdXJlVGV4dEVudHJ5VmlzaWJpbGl0eUJ1dHRvbkNvbnRlbnQiLCJQYXNzd29yZFZpc2liaWxpdHlUb3VjaGFibGUiLCJwYXNzd29yZFZpc2liaWxpdHlCdXR0b25TdHlsZSIsInJlc3QiLCJSTlRleHRJbnB1dCIsInBhc3N3b3JkUHJvcHMiLCJhdXRvQ29ycmVjdCIsImF1dG9DYXBpdGFsaXplIiwiVG91Y2hhYmxlIiwiVG91Y2hhYmxlT3BhY2l0eSIsInN0eWxlcyIsInRleHRJbnB1dENvbnRhaW5lciIsInRleHRJbnB1dCIsInNlY3VyZVRleHRFbnRyeVZpc2liaWxpdHlCdXR0b24iLCJrZXlib2FyZFR5cGUiLCJzZXROYXRpdmVQcm9wcyIsImlzRm9jdXNlZCIsImNsZWFyIiwiZm9jdXMiLCJibHVyIiwiQ29tcG9uZW50IiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsImZsZXgiLCJmbGV4RGlyZWN0aW9uIiwicG9zaXRpb24iLCJ0b3AiLCJib3R0b20iLCJyaWdodCIsImp1c3RpZnlDb250ZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztJQUVxQkEsUzs7O0FBQ25CLHFCQUFZQyxLQUFaLEVBQW1CO0FBQUE7O0FBQUE7QUFDakIsK0dBQU1BLEtBQU47O0FBRGlCLFVBU25CQywrQkFUbUIsR0FTZTtBQUFBLGFBQ2hDLE1BQUtDLFFBQUwsQ0FBYyxVQUFBQyxLQUFLO0FBQUEsZUFBSztBQUN0QkMsVUFBQUEsUUFBUSxFQUFFRCxLQUFLLENBQUNDLFFBQU4sS0FBbUIsUUFBbkIsR0FBOEIsU0FBOUIsR0FBMEM7QUFEOUIsU0FBTDtBQUFBLE9BQW5CLENBRGdDO0FBQUEsS0FUZjs7QUFBQSxVQW1FbkJDLE9BbkVtQixHQW1FVCxVQUFBQyxDQUFDLEVBQUk7QUFDYixZQUFLQyxLQUFMLEdBQWFELENBQWI7QUFDRCxLQXJFa0I7O0FBRWpCLFFBQUlOLEtBQUssQ0FBQ1EsZUFBVixFQUEyQjtBQUN6QixZQUFLTCxLQUFMLEdBQWE7QUFDWEMsUUFBQUEsUUFBUSxFQUFFO0FBREMsT0FBYjtBQUdEOztBQU5nQjtBQU9sQjs7Ozs2QkFPUTtBQUFBLHdCQVVILEtBQUtKLEtBVkY7QUFBQSxVQUVMUyxLQUZLLGVBRUxBLEtBRks7QUFBQSxVQUdMQyxrQkFISyxlQUdMQSxrQkFISztBQUFBLFVBSUxGLGVBSkssZUFJTEEsZUFKSztBQUFBLFVBS0xHLGNBTEssZUFLTEEsY0FMSztBQUFBLFVBTUxDLDRDQU5LLGVBTUxBLDRDQU5LO0FBQUEsVUFPTEMsMkJBUEssZUFPTEEsMkJBUEs7QUFBQSxVQVFMQyw2QkFSSyxlQVFMQSw2QkFSSztBQUFBLFVBU0ZDLElBVEU7QUFZUCxVQUFNaEIsU0FBUyxHQUFHVyxrQkFBa0IsSUFBSU0sc0JBQXhDOztBQUVBLFVBQUlSLGVBQUosRUFBcUI7QUFDbkIsWUFBTVMsYUFBYSxHQUFHO0FBQ3BCQyxVQUFBQSxXQUFXLEVBQUUsS0FETztBQUVwQkMsVUFBQUEsY0FBYyxFQUFFLE1BRkk7QUFHcEJYLFVBQUFBLGVBQWUsRUFBRSxLQUFLTCxLQUFMLENBQVdDLFFBQVgsS0FBd0I7QUFIckIsU0FBdEI7QUFNQSxZQUFNZ0IsU0FBUyxHQUFHUCwyQkFBMkIsSUFBSVEsNkJBQWpEO0FBQ0EsZUFDRSw2QkFBQyxpQkFBRDtBQUFNLFVBQUEsS0FBSyxFQUFFLENBQUNDLE1BQU0sQ0FBQ0Msa0JBQVIsRUFBNEJaLGNBQTVCO0FBQWIsV0FDRSw2QkFBQyxTQUFEO0FBQ0UsVUFBQSxHQUFHLEVBQUUsS0FBS04sT0FEWjtBQUVFLFVBQUEsS0FBSyxFQUFFLENBQUNpQixNQUFNLENBQUNFLFNBQVIsRUFBbUJmLEtBQW5CO0FBRlQsV0FHTVEsYUFITixFQUlNRixJQUpOLEVBREYsRUFPRyxDQUFDLENBQUNILDRDQUFGLElBQ0MsNkJBQUMsU0FBRDtBQUNFLFVBQUEsS0FBSyxFQUFFLENBQUNVLE1BQU0sQ0FBQ0csK0JBQVIsRUFBeUNYLDZCQUF6QyxDQURUO0FBRUUsVUFBQSxPQUFPLEVBQUUsS0FBS2I7QUFGaEIsV0FHR1csNENBQTRDLENBQUMsS0FBS1QsS0FBTCxDQUFXQyxRQUFYLEtBQXdCLFFBQXpCLENBSC9DLENBUkosQ0FERjtBQWlCRDs7QUFFRCxVQUFJLEtBQUtKLEtBQUwsQ0FBVzBCLFlBQVgsS0FBNEIsZUFBaEMsRUFBaUQ7QUFDL0NYLFFBQUFBLElBQUksQ0FBQ0csV0FBTCxHQUFtQixLQUFuQjtBQUNBSCxRQUFBQSxJQUFJLENBQUNJLGNBQUwsR0FBc0IsTUFBdEI7QUFDRDs7QUFFRCxhQUNFLDZCQUFDLGlCQUFEO0FBQU0sUUFBQSxLQUFLLEVBQUUsQ0FBQ0csTUFBTSxDQUFDQyxrQkFBUixFQUE0QlosY0FBNUI7QUFBYixTQUNFLDZCQUFDLFNBQUQ7QUFBVyxRQUFBLEdBQUcsRUFBRSxLQUFLTixPQUFyQjtBQUE4QixRQUFBLEtBQUssRUFBRSxDQUFDaUIsTUFBTSxDQUFDRSxTQUFSLEVBQW1CZixLQUFuQjtBQUFyQyxTQUFvRU0sSUFBcEUsRUFERixDQURGO0FBS0Q7OztxQ0FLdUI7QUFBQTs7QUFDdEIsYUFBTyxvQkFBS1IsS0FBTCxFQUFXb0IsY0FBWCw4QkFBUDtBQUNEOzs7Z0NBQ2tCO0FBQUE7O0FBQ2pCLGFBQU8scUJBQUtwQixLQUFMLEVBQVdxQixTQUFYLCtCQUFQO0FBQ0Q7Ozs0QkFDYztBQUFBOztBQUNiLGFBQU8scUJBQUtyQixLQUFMLEVBQVdzQixLQUFYLCtCQUFQO0FBQ0Q7Ozs0QkFDYztBQUFBOztBQUNiLGFBQU8scUJBQUt0QixLQUFMLEVBQVd1QixLQUFYLCtCQUFQO0FBQ0Q7OzsyQkFDYTtBQUFBOztBQUNaLGFBQU8scUJBQUt2QixLQUFMLEVBQVd3QixJQUFYLCtCQUFQO0FBQ0Q7OztFQXJGb0NDLGdCOzs7O0FBd0Z2QyxJQUFNVixNQUFNLEdBQUdXLHdCQUFXQyxNQUFYLENBQWtCO0FBQy9CVixFQUFBQSxTQUFTLEVBQUU7QUFDVFcsSUFBQUEsSUFBSSxFQUFFO0FBREcsR0FEb0I7QUFJL0JaLEVBQUFBLGtCQUFrQixFQUFFO0FBQ2xCYSxJQUFBQSxhQUFhLEVBQUU7QUFERyxHQUpXO0FBTy9CWCxFQUFBQSwrQkFBK0IsRUFBRTtBQUMvQlksSUFBQUEsUUFBUSxFQUFFLFVBRHFCO0FBRS9CQyxJQUFBQSxHQUFHLEVBQUUsQ0FGMEI7QUFHL0JDLElBQUFBLE1BQU0sRUFBRSxDQUh1QjtBQUkvQkMsSUFBQUEsS0FBSyxFQUFFLENBSndCO0FBSy9CQyxJQUFBQSxjQUFjLEVBQUU7QUFMZTtBQVBGLENBQWxCLENBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgVmlldywgVG91Y2hhYmxlT3BhY2l0eSwgU3R5bGVTaGVldCwgVGV4dElucHV0IGFzIFJOVGV4dElucHV0IH0gZnJvbSAncmVhY3QtbmF0aXZlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGV4dElucHV0IGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgaWYgKHByb3BzLnNlY3VyZVRleHRFbnRyeSkge1xuICAgICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgICAgcGFzc3dvcmQ6ICdoaWRkZW4nLFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICB0b2dnbGVTZWN1cmVUZXh0RW50cnlWaXNpYmlsaXR5ID0gKCkgPT5cbiAgICB0aGlzLnNldFN0YXRlKHN0YXRlID0+ICh7XG4gICAgICBwYXNzd29yZDogc3RhdGUucGFzc3dvcmQgPT09ICdoaWRkZW4nID8gJ3Zpc2libGUnIDogJ2hpZGRlbicsXG4gICAgfSkpO1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBzdHlsZSxcbiAgICAgIFRleHRJbnB1dENvbXBvbmVudCxcbiAgICAgIHNlY3VyZVRleHRFbnRyeSxcbiAgICAgIGNvbnRhaW5lclN0eWxlLFxuICAgICAgcmVuZGVyU2VjdXJlVGV4dEVudHJ5VmlzaWJpbGl0eUJ1dHRvbkNvbnRlbnQsXG4gICAgICBQYXNzd29yZFZpc2liaWxpdHlUb3VjaGFibGUsXG4gICAgICBwYXNzd29yZFZpc2liaWxpdHlCdXR0b25TdHlsZSxcbiAgICAgIC4uLnJlc3RcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IFRleHRJbnB1dCA9IFRleHRJbnB1dENvbXBvbmVudCB8fCBSTlRleHRJbnB1dDtcblxuICAgIGlmIChzZWN1cmVUZXh0RW50cnkpIHtcbiAgICAgIGNvbnN0IHBhc3N3b3JkUHJvcHMgPSB7XG4gICAgICAgIGF1dG9Db3JyZWN0OiBmYWxzZSxcbiAgICAgICAgYXV0b0NhcGl0YWxpemU6ICdub25lJyxcbiAgICAgICAgc2VjdXJlVGV4dEVudHJ5OiB0aGlzLnN0YXRlLnBhc3N3b3JkID09PSAnaGlkZGVuJyxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IFRvdWNoYWJsZSA9IFBhc3N3b3JkVmlzaWJpbGl0eVRvdWNoYWJsZSB8fCBUb3VjaGFibGVPcGFjaXR5O1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPFZpZXcgc3R5bGU9e1tzdHlsZXMudGV4dElucHV0Q29udGFpbmVyLCBjb250YWluZXJTdHlsZV19PlxuICAgICAgICAgIDxUZXh0SW5wdXRcbiAgICAgICAgICAgIHJlZj17dGhpcy5fc2V0UmVmfVxuICAgICAgICAgICAgc3R5bGU9e1tzdHlsZXMudGV4dElucHV0LCBzdHlsZV19XG4gICAgICAgICAgICB7Li4ucGFzc3dvcmRQcm9wc31cbiAgICAgICAgICAgIHsuLi5yZXN0fVxuICAgICAgICAgIC8+XG4gICAgICAgICAgeyEhcmVuZGVyU2VjdXJlVGV4dEVudHJ5VmlzaWJpbGl0eUJ1dHRvbkNvbnRlbnQgJiYgKFxuICAgICAgICAgICAgPFRvdWNoYWJsZVxuICAgICAgICAgICAgICBzdHlsZT17W3N0eWxlcy5zZWN1cmVUZXh0RW50cnlWaXNpYmlsaXR5QnV0dG9uLCBwYXNzd29yZFZpc2liaWxpdHlCdXR0b25TdHlsZV19XG4gICAgICAgICAgICAgIG9uUHJlc3M9e3RoaXMudG9nZ2xlU2VjdXJlVGV4dEVudHJ5VmlzaWJpbGl0eX0+XG4gICAgICAgICAgICAgIHtyZW5kZXJTZWN1cmVUZXh0RW50cnlWaXNpYmlsaXR5QnV0dG9uQ29udGVudCh0aGlzLnN0YXRlLnBhc3N3b3JkID09PSAnaGlkZGVuJyl9XG4gICAgICAgICAgICA8L1RvdWNoYWJsZT5cbiAgICAgICAgICApfVxuICAgICAgICA8L1ZpZXc+XG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLmtleWJvYXJkVHlwZSA9PT0gJ2VtYWlsLWFkZHJlc3MnKSB7XG4gICAgICByZXN0LmF1dG9Db3JyZWN0ID0gZmFsc2U7XG4gICAgICByZXN0LmF1dG9DYXBpdGFsaXplID0gJ25vbmUnO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8VmlldyBzdHlsZT17W3N0eWxlcy50ZXh0SW5wdXRDb250YWluZXIsIGNvbnRhaW5lclN0eWxlXX0+XG4gICAgICAgIDxUZXh0SW5wdXQgcmVmPXt0aGlzLl9zZXRSZWZ9IHN0eWxlPXtbc3R5bGVzLnRleHRJbnB1dCwgc3R5bGVdfSB7Li4ucmVzdH0gLz5cbiAgICAgIDwvVmlldz5cbiAgICApO1xuICB9XG5cbiAgX3NldFJlZiA9IGMgPT4ge1xuICAgIHRoaXMuX3Jvb3QgPSBjO1xuICB9O1xuICBzZXROYXRpdmVQcm9wcyguLi5hcmdzKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jvb3Quc2V0TmF0aXZlUHJvcHMoLi4uYXJncyk7XG4gIH1cbiAgaXNGb2N1c2VkKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5fcm9vdC5pc0ZvY3VzZWQoLi4uYXJncyk7XG4gIH1cbiAgY2xlYXIoLi4uYXJncykge1xuICAgIHJldHVybiB0aGlzLl9yb290LmNsZWFyKC4uLmFyZ3MpO1xuICB9XG4gIGZvY3VzKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5fcm9vdC5mb2N1cyguLi5hcmdzKTtcbiAgfVxuICBibHVyKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5fcm9vdC5ibHVyKC4uLmFyZ3MpO1xuICB9XG59XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgdGV4dElucHV0OiB7XG4gICAgZmxleDogMSxcbiAgfSxcbiAgdGV4dElucHV0Q29udGFpbmVyOiB7XG4gICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gIH0sXG4gIHNlY3VyZVRleHRFbnRyeVZpc2liaWxpdHlCdXR0b246IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB0b3A6IDAsXG4gICAgYm90dG9tOiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgfSxcbn0pO1xuIl19