{"file":"/Users/matthieu/projects/learning/NewsletterApp/src/complex-version/pages/Home/__tests__/Home.test.tsx","mappings":";;;;;AAAA,kDAA0B;AAC1B,4DAAmC;AACnC,gDAA0D;AAC1D,kCAA+B;AAC/B,+EAAyE;AACzE,uDAAoD;AACpD,+DAA2D;AAE3D,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;IAC3B,UAAU,CAAC,GAAG,EAAE;QACd,oBAAS,CAAC,KAAK,EAAE,CAAC;IACpB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;QACxE,QAAQ;QACR,oBAAS,CAAC,IAAI,CAAC,4BAAmB,EAAE,GAAG,CAAC,CAAC;QACzC,MAAM,IAAI,GAAG,wBAAU,CAAC,8BAAC,WAAI,OAAG,CAAC,CAAC;QAClC,qBAAqB;QACrB,MAAM,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,iBAAO,CAAC,gBAAgB,CAAC,CAAC;QACnE,MAAM,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC,iBAAO,CAAC,aAAa,CAAC,CAAC;QAC7D,qBAAqB;QACrB,wCAAS,CAAC,UAAU,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;QACjD,wCAAS,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;QAChC,uCAAuC;QACvC,MAAM,cAAc,GAAG,MAAM,6CAAc,CAAC,GAAG,EAAE,CAC/C,IAAI,CAAC,WAAW,CAAC,iBAAO,CAAC,sBAAsB,CAAC,CACjD,CAAC;QACF,MAAM,CAAC,cAAc,CAAC,CAAC,UAAU,EAAE,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;QAChE,QAAQ;QACR,qBAAqB;QACrB,qBAAqB;QACrB,uCAAuC;IACzC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/matthieu/projects/learning/NewsletterApp/src/complex-version/pages/Home/__tests__/Home.test.tsx"],"sourcesContent":["import React from 'react';\nimport fetchMock from 'fetch-mock';\nimport { NEWSLETTER_ENDPOINT } from '../../../api/config';\nimport { Home } from '../Home';\nimport { fireEvent, waitForElement } from 'react-native-testing-library';\nimport { wording } from '../../../../utils/wording';\nimport { renderPage } from '../../../../utils/test.helper';\n\ndescribe('[Page] Home', () => {\n  beforeEach(() => {\n    fetchMock.reset();\n  });\n\n  it('should display succesful message on successful subscribe', async () => {\n    // SETUP\n    fetchMock.post(NEWSLETTER_ENDPOINT, 200);\n    const page = renderPage(<Home />);\n    // WHAT THE USER SEES\n    const EmailInput = page.getByPlaceholder(wording.emailPlaceholder);\n    const ValidateButton = page.getByText(wording.validateEmail);\n    // WHAT THE USER DOES\n    fireEvent.changeText(EmailInput, 'hello@bam.co');\n    fireEvent.press(ValidateButton);\n    // WHAT FEEDBACK THE USER SHOULD EXPECT\n    const SuccessMessage = await waitForElement(() =>\n      page.queryByText(wording.subscriptionSuccessful)\n    );\n    expect(SuccessMessage).toBeTruthy();\n  });\n\n  it('should display error message on failed subscribe', async () => {\n    // SETUP\n    // WHAT THE USER SEES\n    // WHAT THE USER DOES\n    // WHAT FEEDBACK THE USER SHOULD EXPECT\n  });\n});\n"],"version":3}