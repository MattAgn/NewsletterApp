{"version":3,"sources":["index.js"],"names":["TextInput","props","toggleSecureTextEntryVisibility","setState","state","password","_setRef","c","_root","secureTextEntry","style","TextInputComponent","containerStyle","renderSecureTextEntryVisibilityButtonContent","PasswordVisibilityTouchable","passwordVisibilityButtonStyle","rest","RNTextInput","passwordProps","autoCorrect","autoCapitalize","Touchable","TouchableOpacity","styles","textInputContainer","textInput","secureTextEntryVisibilityButton","keyboardType","setNativeProps","isFocused","clear","focus","blur","Component","StyleSheet","create","flex","flexDirection","position","top","bottom","right","justifyContent"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { View, TouchableOpacity, StyleSheet, TextInput as RNTextInput } from 'react-native';\n\nexport default class TextInput extends Component {\n  constructor(props) {\n    super(props);\n    if (props.secureTextEntry) {\n      this.state = {\n        password: 'hidden',\n      };\n    }\n  }\n\n  toggleSecureTextEntryVisibility = () =>\n    this.setState(state => ({\n      password: state.password === 'hidden' ? 'visible' : 'hidden',\n    }));\n\n  render() {\n    const {\n      style,\n      TextInputComponent,\n      secureTextEntry,\n      containerStyle,\n      renderSecureTextEntryVisibilityButtonContent,\n      PasswordVisibilityTouchable,\n      passwordVisibilityButtonStyle,\n      ...rest\n    } = this.props;\n\n    const TextInput = TextInputComponent || RNTextInput;\n\n    if (secureTextEntry) {\n      const passwordProps = {\n        autoCorrect: false,\n        autoCapitalize: 'none',\n        secureTextEntry: this.state.password === 'hidden',\n      };\n\n      const Touchable = PasswordVisibilityTouchable || TouchableOpacity;\n      return (\n        <View style={[styles.textInputContainer, containerStyle]}>\n          <TextInput\n            ref={this._setRef}\n            style={[styles.textInput, style]}\n            {...passwordProps}\n            {...rest}\n          />\n          {!!renderSecureTextEntryVisibilityButtonContent && (\n            <Touchable\n              style={[styles.secureTextEntryVisibilityButton, passwordVisibilityButtonStyle]}\n              onPress={this.toggleSecureTextEntryVisibility}>\n              {renderSecureTextEntryVisibilityButtonContent(this.state.password === 'hidden')}\n            </Touchable>\n          )}\n        </View>\n      );\n    }\n\n    if (this.props.keyboardType === 'email-address') {\n      rest.autoCorrect = false;\n      rest.autoCapitalize = 'none';\n    }\n\n    return (\n      <View style={[styles.textInputContainer, containerStyle]}>\n        <TextInput ref={this._setRef} style={[styles.textInput, style]} {...rest} />\n      </View>\n    );\n  }\n\n  _setRef = c => {\n    this._root = c;\n  };\n  setNativeProps(...args) {\n    return this._root.setNativeProps(...args);\n  }\n  isFocused(...args) {\n    return this._root.isFocused(...args);\n  }\n  clear(...args) {\n    return this._root.clear(...args);\n  }\n  focus(...args) {\n    return this._root.focus(...args);\n  }\n  blur(...args) {\n    return this._root.blur(...args);\n  }\n}\n\nconst styles = StyleSheet.create({\n  textInput: {\n    flex: 1,\n  },\n  textInputContainer: {\n    flexDirection: 'row',\n  },\n  secureTextEntryVisibilityButton: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    right: 0,\n    justifyContent: 'center',\n  },\n});\n"]}