2568e08401ed35ed8339642ccc7b45c8
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var React = require('react');

var Text = require('../../Text/Text');

var UTFSequence = require('../../UTFSequence');

var stringifySafe = require('../../Utilities/stringifySafe');

var SUBSTITUTION = UTFSequence.BOM + '%s';
var YellowBoxCategory = {
  parse: function parse(args) {
    var categoryParts = [];
    var contentParts = [];
    var substitutionOffsets = [];
    var remaining = (0, _toConsumableArray2.default)(args);

    if (typeof remaining[0] === 'string') {
      var formatString = String(remaining.shift());
      var formatStringParts = formatString.split('%s');
      var substitutionCount = formatStringParts.length - 1;
      var substitutions = remaining.splice(0, substitutionCount);
      var categoryString = '';
      var contentString = '';
      var substitutionIndex = 0;

      for (var _iterator = formatStringParts, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
        var _ref;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref = _i.value;
        }

        var _formatStringPart = _ref;
        categoryString += _formatStringPart;
        contentString += _formatStringPart;

        if (substitutionIndex < substitutionCount) {
          if (substitutionIndex < substitutions.length) {
            var substitution = stringifySafe(substitutions[substitutionIndex]);
            substitutionOffsets.push({
              length: substitution.length,
              offset: contentString.length
            });
            categoryString += SUBSTITUTION;
            contentString += substitution;
          } else {
            substitutionOffsets.push({
              length: 2,
              offset: contentString.length
            });
            categoryString += '%s';
            contentString += '%s';
          }

          substitutionIndex++;
        }
      }

      categoryParts.push(categoryString);
      contentParts.push(contentString);
    }

    var remainingArgs = remaining.map(stringifySafe);
    categoryParts.push.apply(categoryParts, (0, _toConsumableArray2.default)(remainingArgs));
    contentParts.push.apply(contentParts, (0, _toConsumableArray2.default)(remainingArgs));
    return {
      category: categoryParts.join(' '),
      message: {
        content: contentParts.join(' '),
        substitutions: substitutionOffsets
      }
    };
  },
  render: function render(_ref2, substitutionStyle) {
    var content = _ref2.content,
        substitutions = _ref2.substitutions;
    var elements = [];
    var lastOffset = substitutions.reduce(function (prevOffset, substitution, index) {
      var key = String(index);

      if (substitution.offset > prevOffset) {
        var prevPart = content.substr(prevOffset, substitution.offset - prevOffset);
        elements.push(React.createElement(Text, {
          key: key
        }, prevPart));
      }

      var substititionPart = content.substr(substitution.offset, substitution.length);
      elements.push(React.createElement(Text, {
        key: key + '.5',
        style: substitutionStyle
      }, substititionPart));
      return substitution.offset + substitution.length;
    }, 0);

    if (lastOffset < content.length) {
      var lastPart = content.substr(lastOffset);
      elements.push(React.createElement(Text, {
        key: "-1"
      }, lastPart));
    }

    return elements;
  }
};
module.exports = YellowBoxCategory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,