{"version":3,"sources":["YellowBoxCategory.js"],"names":["React","require","Text","UTFSequence","stringifySafe","SUBSTITUTION","BOM","YellowBoxCategory","parse","args","categoryParts","contentParts","substitutionOffsets","remaining","formatString","String","shift","formatStringParts","split","substitutionCount","length","substitutions","splice","categoryString","contentString","substitutionIndex","formatStringPart","substitution","push","offset","remainingArgs","map","category","join","message","content","render","substitutionStyle","elements","lastOffset","reduce","prevOffset","index","key","prevPart","substr","substititionPart","lastPart","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nconst React = require('react');\nconst Text = require('../../Text/Text');\nconst UTFSequence = require('../../UTFSequence');\n\nconst stringifySafe = require('../../Utilities/stringifySafe');\n\nimport type {TextStyleProp} from '../../StyleSheet/StyleSheet';\n\nexport type Category = string;\nexport type Message = $ReadOnly<{|\n  content: string,\n  substitutions: $ReadOnlyArray<\n    $ReadOnly<{|\n      length: number,\n      offset: number,\n    |}>,\n  >,\n|}>;\n\nconst SUBSTITUTION = UTFSequence.BOM + '%s';\n\nconst YellowBoxCategory = {\n  parse(\n    args: $ReadOnlyArray<mixed>,\n  ): $ReadOnly<{|\n    category: Category,\n    message: Message,\n  |}> {\n    const categoryParts = [];\n    const contentParts = [];\n    const substitutionOffsets = [];\n\n    const remaining = [...args];\n\n    if (typeof remaining[0] === 'string') {\n      const formatString = String(remaining.shift());\n      const formatStringParts = formatString.split('%s');\n      const substitutionCount = formatStringParts.length - 1;\n      const substitutions = remaining.splice(0, substitutionCount);\n\n      let categoryString = '';\n      let contentString = '';\n\n      let substitutionIndex = 0;\n      for (const formatStringPart of formatStringParts) {\n        categoryString += formatStringPart;\n        contentString += formatStringPart;\n\n        if (substitutionIndex < substitutionCount) {\n          if (substitutionIndex < substitutions.length) {\n            const substitution = stringifySafe(\n              substitutions[substitutionIndex],\n            );\n            substitutionOffsets.push({\n              length: substitution.length,\n              offset: contentString.length,\n            });\n\n            categoryString += SUBSTITUTION;\n            contentString += substitution;\n          } else {\n            substitutionOffsets.push({\n              length: 2,\n              offset: contentString.length,\n            });\n\n            categoryString += '%s';\n            contentString += '%s';\n          }\n\n          substitutionIndex++;\n        }\n      }\n\n      categoryParts.push(categoryString);\n      contentParts.push(contentString);\n    }\n\n    const remainingArgs = remaining.map(stringifySafe);\n    categoryParts.push(...remainingArgs);\n    contentParts.push(...remainingArgs);\n\n    return {\n      category: categoryParts.join(' '),\n      message: {\n        content: contentParts.join(' '),\n        substitutions: substitutionOffsets,\n      },\n    };\n  },\n\n  render(\n    {content, substitutions}: Message,\n    substitutionStyle: TextStyleProp,\n  ): React.Node {\n    const elements = [];\n\n    const lastOffset = substitutions.reduce(\n      (prevOffset, substitution, index) => {\n        const key = String(index);\n\n        if (substitution.offset > prevOffset) {\n          const prevPart = content.substr(\n            prevOffset,\n            substitution.offset - prevOffset,\n          );\n          elements.push(<Text key={key}>{prevPart}</Text>);\n        }\n\n        const substititionPart = content.substr(\n          substitution.offset,\n          substitution.length,\n        );\n        elements.push(\n          <Text key={key + '.5'} style={substitutionStyle}>\n            {substititionPart}\n          </Text>,\n        );\n\n        return substitution.offset + substitution.length;\n      },\n      0,\n    );\n\n    if (lastOffset < content.length) {\n      const lastPart = content.substr(lastOffset);\n      elements.push(<Text key=\"-1\">{lastPart}</Text>);\n    }\n\n    return elements;\n  },\n};\n\nmodule.exports = YellowBoxCategory;\n"]}