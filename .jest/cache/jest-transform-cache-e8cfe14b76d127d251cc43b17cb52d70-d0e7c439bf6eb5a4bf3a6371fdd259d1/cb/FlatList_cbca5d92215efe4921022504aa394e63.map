{"version":3,"sources":["FlatList.js"],"names":["Platform","require","deepDiffer","React","View","VirtualizedList","StyleSheet","invariant","defaultProps","numColumns","removeClippedSubviews","OS","FlatList","params","_listRef","scrollToEnd","scrollToIndex","scrollToItem","scrollToOffset","recordInteraction","flashScrollIndicators","getScrollResponder","getScrollableNode","props","setNativeProps","_virtualizedListPairs","_captureRef","ref","_getItem","data","index","ret","kk","item","push","_getItemCount","Math","ceil","length","_keyExtractor","items","keyExtractor","Array","isArray","map","it","join","_renderItem","info","renderItem","columnWrapperStyle","compose","styles","row","element","separators","_checkProps","viewabilityConfigCallbackPairs","pair","viewabilityConfig","onViewableItemsChanged","_createOnViewableItemsChanged","prevProps","getItem","getItemCount","horizontal","arr","v","forEach","ii","key","changed","viewableItems","_pushMultiColumnViewable","PureComponent","create","flexDirection","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst Platform = require('../Utilities/Platform');\nconst deepDiffer = require('../Utilities/differ/deepDiffer');\nconst React = require('react');\nconst View = require('../Components/View/View');\nconst VirtualizedList = require('./VirtualizedList');\nconst StyleSheet = require('../StyleSheet/StyleSheet');\n\nconst invariant = require('invariant');\n\nimport type {ViewStyleProp} from '../StyleSheet/StyleSheet';\nimport type {\n  ViewabilityConfig,\n  ViewToken,\n  ViewabilityConfigCallbackPair,\n} from './ViewabilityHelper';\nimport type {Props as VirtualizedListProps} from './VirtualizedList';\n\nexport type SeparatorsObj = {\n  highlight: () => void,\n  unhighlight: () => void,\n  updateProps: (select: 'leading' | 'trailing', newProps: Object) => void,\n};\n\ntype RequiredProps<ItemT> = {\n  /**\n   * Takes an item from `data` and renders it into the list. Example usage:\n   *\n   *     <FlatList\n   *       ItemSeparatorComponent={Platform.OS !== 'android' && ({highlighted}) => (\n   *         <View style={[style.separator, highlighted && {marginLeft: 0}]} />\n   *       )}\n   *       data={[{title: 'Title Text', key: 'item1'}]}\n   *       renderItem={({item, separators}) => (\n   *         <TouchableHighlight\n   *           onPress={() => this._onPress(item)}\n   *           onShowUnderlay={separators.highlight}\n   *           onHideUnderlay={separators.unhighlight}>\n   *           <View style={{backgroundColor: 'white'}}>\n   *             <Text>{item.title}</Text>\n   *           </View>\n   *         </TouchableHighlight>\n   *       )}\n   *     />\n   *\n   * Provides additional metadata like `index` if you need it, as well as a more generic\n   * `separators.updateProps` function which let's you set whatever props you want to change the\n   * rendering of either the leading separator or trailing separator in case the more common\n   * `highlight` and `unhighlight` (which set the `highlighted: boolean` prop) are insufficient for\n   * your use-case.\n   */\n  renderItem: (info: {\n    item: ItemT,\n    index: number,\n    separators: SeparatorsObj,\n  }) => ?React.Node,\n  /**\n   * For simplicity, data is just a plain array. If you want to use something else, like an\n   * immutable list, use the underlying `VirtualizedList` directly.\n   */\n  data: ?$ReadOnlyArray<ItemT>,\n};\ntype OptionalProps<ItemT> = {\n  /**\n   * Rendered in between each item, but not at the top or bottom. By default, `highlighted` and\n   * `leadingItem` props are provided. `renderItem` provides `separators.highlight`/`unhighlight`\n   * which will update the `highlighted` prop, but you can also add custom props with\n   * `separators.updateProps`.\n   */\n  ItemSeparatorComponent?: ?React.ComponentType<any>,\n  /**\n   * Rendered when the list is empty. Can be a React Component Class, a render function, or\n   * a rendered element.\n   */\n  ListEmptyComponent?: ?(React.ComponentType<any> | React.Element<any>),\n  /**\n   * Rendered at the bottom of all the items. Can be a React Component Class, a render function, or\n   * a rendered element.\n   */\n  ListFooterComponent?: ?(React.ComponentType<any> | React.Element<any>),\n  /**\n   * Styling for internal View for ListFooterComponent\n   */\n  ListFooterComponentStyle?: ViewStyleProp,\n  /**\n   * Rendered at the top of all the items. Can be a React Component Class, a render function, or\n   * a rendered element.\n   */\n  ListHeaderComponent?: ?(React.ComponentType<any> | React.Element<any>),\n  /**\n   * Styling for internal View for ListHeaderComponent\n   */\n  ListHeaderComponentStyle?: ViewStyleProp,\n  /**\n   * Optional custom style for multi-item rows generated when numColumns > 1.\n   */\n  columnWrapperStyle?: ViewStyleProp,\n  /**\n   * A marker property for telling the list to re-render (since it implements `PureComponent`). If\n   * any of your `renderItem`, Header, Footer, etc. functions depend on anything outside of the\n   * `data` prop, stick it here and treat it immutably.\n   */\n  extraData?: any,\n  /**\n   * `getItemLayout` is an optional optimizations that let us skip measurement of dynamic content if\n   * you know the height of items a priori. `getItemLayout` is the most efficient, and is easy to\n   * use if you have fixed height items, for example:\n   *\n   *     getItemLayout={(data, index) => (\n   *       {length: ITEM_HEIGHT, offset: ITEM_HEIGHT * index, index}\n   *     )}\n   *\n   * Adding `getItemLayout` can be a great performance boost for lists of several hundred items.\n   * Remember to include separator length (height or width) in your offset calculation if you\n   * specify `ItemSeparatorComponent`.\n   */\n  getItemLayout?: (\n    data: ?Array<ItemT>,\n    index: number,\n  ) => {length: number, offset: number, index: number},\n  /**\n   * If true, renders items next to each other horizontally instead of stacked vertically.\n   */\n  horizontal?: ?boolean,\n  /**\n   * How many items to render in the initial batch. This should be enough to fill the screen but not\n   * much more. Note these items will never be unmounted as part of the windowed rendering in order\n   * to improve perceived performance of scroll-to-top actions.\n   */\n  initialNumToRender: number,\n  /**\n   * Instead of starting at the top with the first item, start at `initialScrollIndex`. This\n   * disables the \"scroll to top\" optimization that keeps the first `initialNumToRender` items\n   * always rendered and immediately renders the items starting at this initial index. Requires\n   * `getItemLayout` to be implemented.\n   */\n  initialScrollIndex?: ?number,\n  /**\n   * Reverses the direction of scroll. Uses scale transforms of -1.\n   */\n  inverted?: ?boolean,\n  /**\n   * Used to extract a unique key for a given item at the specified index. Key is used for caching\n   * and as the react key to track item re-ordering. The default extractor checks `item.key`, then\n   * falls back to using the index, like React does.\n   */\n  keyExtractor: (item: ItemT, index: number) => string,\n  /**\n   * Multiple columns can only be rendered with `horizontal={false}` and will zig-zag like a\n   * `flexWrap` layout. Items should all be the same height - masonry layouts are not supported.\n   */\n  numColumns: number,\n  /**\n   * Called once when the scroll position gets within `onEndReachedThreshold` of the rendered\n   * content.\n   */\n  onEndReached?: ?(info: {distanceFromEnd: number}) => void,\n  /**\n   * How far from the end (in units of visible length of the list) the bottom edge of the\n   * list must be from the end of the content to trigger the `onEndReached` callback.\n   * Thus a value of 0.5 will trigger `onEndReached` when the end of the content is\n   * within half the visible length of the list.\n   */\n  onEndReachedThreshold?: ?number,\n  /**\n   * If provided, a standard RefreshControl will be added for \"Pull to Refresh\" functionality. Make\n   * sure to also set the `refreshing` prop correctly.\n   */\n  onRefresh?: ?() => void,\n  /**\n   * Called when the viewability of rows changes, as defined by the `viewabilityConfig` prop.\n   */\n  onViewableItemsChanged?: ?(info: {\n    viewableItems: Array<ViewToken>,\n    changed: Array<ViewToken>,\n  }) => void,\n  /**\n   * Set this when offset is needed for the loading indicator to show correctly.\n   * @platform android\n   */\n  progressViewOffset?: number,\n  /**\n   * The legacy implementation is no longer supported.\n   */\n  legacyImplementation?: empty,\n  /**\n   * Set this true while waiting for new data from a refresh.\n   */\n  refreshing?: ?boolean,\n  /**\n   * Note: may have bugs (missing content) in some circumstances - use at your own risk.\n   *\n   * This may improve scroll performance for large lists.\n   */\n  removeClippedSubviews?: boolean,\n  /**\n   * See `ViewabilityHelper` for flow type and further documentation.\n   */\n  viewabilityConfig?: ViewabilityConfig,\n  /**\n   * List of ViewabilityConfig/onViewableItemsChanged pairs. A specific onViewableItemsChanged\n   * will be called when its corresponding ViewabilityConfig's conditions are met.\n   */\n  viewabilityConfigCallbackPairs?: Array<ViewabilityConfigCallbackPair>,\n};\nexport type Props<ItemT> = RequiredProps<ItemT> &\n  OptionalProps<ItemT> &\n  VirtualizedListProps;\n\nconst defaultProps = {\n  ...VirtualizedList.defaultProps,\n  numColumns: 1,\n  /**\n   * Enabling this prop on Android greatly improves scrolling performance with no known issues.\n   * The alternative is that scrolling on Android is unusably bad. Enabling it on iOS has a few\n   * known issues.\n   */\n  removeClippedSubviews: Platform.OS === 'android',\n};\nexport type DefaultProps = typeof defaultProps;\n\n/**\n * A performant interface for rendering simple, flat lists, supporting the most handy features:\n *\n *  - Fully cross-platform.\n *  - Optional horizontal mode.\n *  - Configurable viewability callbacks.\n *  - Header support.\n *  - Footer support.\n *  - Separator support.\n *  - Pull to Refresh.\n *  - Scroll loading.\n *  - ScrollToIndex support.\n *\n * If you need section support, use [`<SectionList>`](docs/sectionlist.html).\n *\n * Minimal Example:\n *\n *     <FlatList\n *       data={[{key: 'a'}, {key: 'b'}]}\n *       renderItem={({item}) => <Text>{item.key}</Text>}\n *     />\n *\n * More complex, multi-select example demonstrating `PureComponent` usage for perf optimization and avoiding bugs.\n *\n * - By binding the `onPressItem` handler, the props will remain `===` and `PureComponent` will\n *   prevent wasteful re-renders unless the actual `id`, `selected`, or `title` props change, even\n *   if the components rendered in `MyListItem` did not have such optimizations.\n * - By passing `extraData={this.state}` to `FlatList` we make sure `FlatList` itself will re-render\n *   when the `state.selected` changes. Without setting this prop, `FlatList` would not know it\n *   needs to re-render any items because it is also a `PureComponent` and the prop comparison will\n *   not show any changes.\n * - `keyExtractor` tells the list to use the `id`s for the react keys instead of the default `key` property.\n *\n *\n *     class MyListItem extends React.PureComponent {\n *       _onPress = () => {\n *         this.props.onPressItem(this.props.id);\n *       };\n *\n *       render() {\n *         const textColor = this.props.selected ? \"red\" : \"black\";\n *         return (\n *           <TouchableOpacity onPress={this._onPress}>\n *             <View>\n *               <Text style={{ color: textColor }}>\n *                 {this.props.title}\n *               </Text>\n *             </View>\n *           </TouchableOpacity>\n *         );\n *       }\n *     }\n *\n *     class MultiSelectList extends React.PureComponent {\n *       state = {selected: (new Map(): Map<string, boolean>)};\n *\n *       _keyExtractor = (item, index) => item.id;\n *\n *       _onPressItem = (id: string) => {\n *         // updater functions are preferred for transactional updates\n *         this.setState((state) => {\n *           // copy the map rather than modifying state.\n *           const selected = new Map(state.selected);\n *           selected.set(id, !selected.get(id)); // toggle\n *           return {selected};\n *         });\n *       };\n *\n *       _renderItem = ({item}) => (\n *         <MyListItem\n *           id={item.id}\n *           onPressItem={this._onPressItem}\n *           selected={!!this.state.selected.get(item.id)}\n *           title={item.title}\n *         />\n *       );\n *\n *       render() {\n *         return (\n *           <FlatList\n *             data={this.props.data}\n *             extraData={this.state}\n *             keyExtractor={this._keyExtractor}\n *             renderItem={this._renderItem}\n *           />\n *         );\n *       }\n *     }\n *\n * This is a convenience wrapper around [`<VirtualizedList>`](docs/virtualizedlist.html),\n * and thus inherits its props (as well as those of `ScrollView`) that aren't explicitly listed\n * here, along with the following caveats:\n *\n * - Internal state is not preserved when content scrolls out of the render window. Make sure all\n *   your data is captured in the item data or external stores like Flux, Redux, or Relay.\n * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-\n *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop\n *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on\n *   changes. This includes the `data` prop and parent component state.\n * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously\n *   offscreen. This means it's possible to scroll faster than the fill rate ands momentarily see\n *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,\n *   and we are working on improving it behind the scenes.\n * - By default, the list looks for a `key` prop on each item and uses that for the React key.\n *   Alternatively, you can provide a custom `keyExtractor` prop.\n *\n * Also inherits [ScrollView Props](docs/scrollview.html#props), unless it is nested in another FlatList of same orientation.\n */\nclass FlatList<ItemT> extends React.PureComponent<Props<ItemT>, void> {\n  static defaultProps: DefaultProps = defaultProps;\n  props: Props<ItemT>;\n  /**\n   * Scrolls to the end of the content. May be janky without `getItemLayout` prop.\n   */\n  scrollToEnd(params?: ?{animated?: ?boolean}) {\n    if (this._listRef) {\n      this._listRef.scrollToEnd(params);\n    }\n  }\n\n  /**\n   * Scrolls to the item at the specified index such that it is positioned in the viewable area\n   * such that `viewPosition` 0 places it at the top, 1 at the bottom, and 0.5 centered in the\n   * middle. `viewOffset` is a fixed number of pixels to offset the final target position.\n   *\n   * Note: cannot scroll to locations outside the render window without specifying the\n   * `getItemLayout` prop.\n   */\n  scrollToIndex(params: {\n    animated?: ?boolean,\n    index: number,\n    viewOffset?: number,\n    viewPosition?: number,\n  }) {\n    if (this._listRef) {\n      this._listRef.scrollToIndex(params);\n    }\n  }\n\n  /**\n   * Requires linear scan through data - use `scrollToIndex` instead if possible.\n   *\n   * Note: cannot scroll to locations outside the render window without specifying the\n   * `getItemLayout` prop.\n   */\n  scrollToItem(params: {\n    animated?: ?boolean,\n    item: ItemT,\n    viewPosition?: number,\n  }) {\n    if (this._listRef) {\n      this._listRef.scrollToItem(params);\n    }\n  }\n\n  /**\n   * Scroll to a specific content pixel offset in the list.\n   *\n   * Check out [scrollToOffset](docs/virtualizedlist.html#scrolltooffset) of VirtualizedList\n   */\n  scrollToOffset(params: {animated?: ?boolean, offset: number}) {\n    if (this._listRef) {\n      this._listRef.scrollToOffset(params);\n    }\n  }\n\n  /**\n   * Tells the list an interaction has occurred, which should trigger viewability calculations, e.g.\n   * if `waitForInteractions` is true and the user has not scrolled. This is typically called by\n   * taps on items or by navigation actions.\n   */\n  recordInteraction() {\n    if (this._listRef) {\n      this._listRef.recordInteraction();\n    }\n  }\n\n  /**\n   * Displays the scroll indicators momentarily.\n   *\n   * @platform ios\n   */\n  flashScrollIndicators() {\n    if (this._listRef) {\n      this._listRef.flashScrollIndicators();\n    }\n  }\n\n  /**\n   * Provides a handle to the underlying scroll responder.\n   */\n  getScrollResponder() {\n    if (this._listRef) {\n      return this._listRef.getScrollResponder();\n    }\n  }\n\n  getScrollableNode() {\n    if (this._listRef) {\n      return this._listRef.getScrollableNode();\n    }\n  }\n\n  setNativeProps(props: {[string]: mixed}) {\n    if (this._listRef) {\n      this._listRef.setNativeProps(props);\n    }\n  }\n\n  constructor(props: Props<ItemT>) {\n    super(props);\n    this._checkProps(this.props);\n    if (this.props.viewabilityConfigCallbackPairs) {\n      this._virtualizedListPairs = this.props.viewabilityConfigCallbackPairs.map(\n        pair => ({\n          viewabilityConfig: pair.viewabilityConfig,\n          onViewableItemsChanged: this._createOnViewableItemsChanged(\n            pair.onViewableItemsChanged,\n          ),\n        }),\n      );\n    } else if (this.props.onViewableItemsChanged) {\n      /* $FlowFixMe(>=0.63.0 site=react_native_fb) This comment suppresses an\n       * error found when Flow v0.63 was deployed. To see the error delete this\n       * comment and run Flow. */\n      this._virtualizedListPairs.push({\n        viewabilityConfig: this.props.viewabilityConfig,\n        onViewableItemsChanged: this._createOnViewableItemsChanged(\n          this.props.onViewableItemsChanged,\n        ),\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps: Props<ItemT>) {\n    invariant(\n      prevProps.numColumns === this.props.numColumns,\n      'Changing numColumns on the fly is not supported. Change the key prop on FlatList when ' +\n        'changing the number of columns to force a fresh render of the component.',\n    );\n    invariant(\n      prevProps.onViewableItemsChanged === this.props.onViewableItemsChanged,\n      'Changing onViewableItemsChanged on the fly is not supported',\n    );\n    invariant(\n      !deepDiffer(prevProps.viewabilityConfig, this.props.viewabilityConfig),\n      'Changing viewabilityConfig on the fly is not supported',\n    );\n    invariant(\n      prevProps.viewabilityConfigCallbackPairs ===\n        this.props.viewabilityConfigCallbackPairs,\n      'Changing viewabilityConfigCallbackPairs on the fly is not supported',\n    );\n\n    this._checkProps(this.props);\n  }\n\n  _listRef: ?React.ElementRef<typeof VirtualizedList>;\n  _virtualizedListPairs: Array<ViewabilityConfigCallbackPair> = [];\n\n  _captureRef = ref => {\n    this._listRef = ref;\n  };\n\n  _checkProps(props: Props<ItemT>) {\n    const {\n      getItem,\n      getItemCount,\n      horizontal,\n      numColumns,\n      columnWrapperStyle,\n      onViewableItemsChanged,\n      viewabilityConfigCallbackPairs,\n    } = props;\n    invariant(\n      !getItem && !getItemCount,\n      'FlatList does not support custom data formats.',\n    );\n    if (numColumns > 1) {\n      invariant(!horizontal, 'numColumns does not support horizontal.');\n    } else {\n      invariant(\n        !columnWrapperStyle,\n        'columnWrapperStyle not supported for single column lists',\n      );\n    }\n    invariant(\n      !(onViewableItemsChanged && viewabilityConfigCallbackPairs),\n      'FlatList does not support setting both onViewableItemsChanged and ' +\n        'viewabilityConfigCallbackPairs.',\n    );\n  }\n\n  _getItem = (data: Array<ItemT>, index: number) => {\n    const {numColumns} = this.props;\n    if (numColumns > 1) {\n      const ret = [];\n      for (let kk = 0; kk < numColumns; kk++) {\n        const item = data[index * numColumns + kk];\n        if (item != null) {\n          ret.push(item);\n        }\n      }\n      return ret;\n    } else {\n      return data[index];\n    }\n  };\n\n  _getItemCount = (data: ?Array<ItemT>): number => {\n    return data ? Math.ceil(data.length / this.props.numColumns) : 0;\n  };\n\n  _keyExtractor = (items: ItemT | Array<ItemT>, index: number) => {\n    const {keyExtractor, numColumns} = this.props;\n    if (numColumns > 1) {\n      invariant(\n        Array.isArray(items),\n        'FlatList: Encountered internal consistency error, expected each item to consist of an ' +\n          'array with 1-%s columns; instead, received a single item.',\n        numColumns,\n      );\n      return items\n        .map((it, kk) => keyExtractor(it, index * numColumns + kk))\n        .join(':');\n    } else {\n      /* $FlowFixMe(>=0.63.0 site=react_native_fb) This comment suppresses an\n       * error found when Flow v0.63 was deployed. To see the error delete this\n       * comment and run Flow. */\n      return keyExtractor(items, index);\n    }\n  };\n\n  _pushMultiColumnViewable(arr: Array<ViewToken>, v: ViewToken): void {\n    const {numColumns, keyExtractor} = this.props;\n    v.item.forEach((item, ii) => {\n      invariant(v.index != null, 'Missing index!');\n      const index = v.index * numColumns + ii;\n      arr.push({...v, item, key: keyExtractor(item, index), index});\n    });\n  }\n\n  _createOnViewableItemsChanged(\n    onViewableItemsChanged: ?(info: {\n      viewableItems: Array<ViewToken>,\n      changed: Array<ViewToken>,\n    }) => void,\n  ) {\n    return (info: {\n      viewableItems: Array<ViewToken>,\n      changed: Array<ViewToken>,\n    }) => {\n      const {numColumns} = this.props;\n      if (onViewableItemsChanged) {\n        if (numColumns > 1) {\n          const changed = [];\n          const viewableItems = [];\n          info.viewableItems.forEach(v =>\n            this._pushMultiColumnViewable(viewableItems, v),\n          );\n          info.changed.forEach(v => this._pushMultiColumnViewable(changed, v));\n          onViewableItemsChanged({viewableItems, changed});\n        } else {\n          onViewableItemsChanged(info);\n        }\n      }\n    };\n  }\n\n  _renderItem = (info: Object): ?React.Node => {\n    const {renderItem, numColumns, columnWrapperStyle} = this.props;\n    if (numColumns > 1) {\n      const {item, index} = info;\n      invariant(\n        Array.isArray(item),\n        'Expected array of items with numColumns > 1',\n      );\n      return (\n        <View\n          style={StyleSheet.compose(\n            styles.row,\n            columnWrapperStyle,\n          )}>\n          {item.map((it, kk) => {\n            const element = renderItem({\n              item: it,\n              index: index * numColumns + kk,\n              separators: info.separators,\n            });\n            return element != null ? (\n              <React.Fragment key={kk}>{element}</React.Fragment>\n            ) : null;\n          })}\n        </View>\n      );\n    } else {\n      return renderItem(info);\n    }\n  };\n\n  render() {\n    return (\n      <VirtualizedList\n        {...this.props}\n        renderItem={this._renderItem}\n        getItem={this._getItem}\n        getItemCount={this._getItemCount}\n        keyExtractor={this._keyExtractor}\n        ref={this._captureRef}\n        viewabilityConfigCallbackPairs={this._virtualizedListPairs}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  row: {flexDirection: 'row'},\n});\n\nmodule.exports = FlatList;\n"]}