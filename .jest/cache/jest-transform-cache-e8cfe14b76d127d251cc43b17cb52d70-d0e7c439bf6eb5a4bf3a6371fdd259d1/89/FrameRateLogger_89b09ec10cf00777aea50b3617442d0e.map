{"version":3,"sources":["FrameRateLogger.js"],"names":["NativeModules","require","invariant","FrameRateLogger","setGlobalOptions","options","debug","undefined","optionsClone","reportStackTraces","Object","freeze","seal","setContext","context","beginScroll","endScroll","module","exports"],"mappings":"AAUA;;AAEA,IAAMA,aAAa,GAAGC,OAAO,CAAC,gCAAD,CAA7B;;AAEA,IAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AAkBA,IAAME,eAAe,GAAG;AAKtBC,EAAAA,gBAAgB,EAAE,0BAASC,OAAT,EAGf;AACD,QAAIA,OAAO,CAACC,KAAR,KAAkBC,SAAtB,EAAiC;AAC/BL,MAAAA,SAAS,CACPF,aAAa,CAACG,eADP,EAEP,4DAFO,CAAT;AAID;;AACD,QAAIH,aAAa,CAACG,eAAlB,EAAmC;AAIjC,UAAMK,YAAY,GAAG;AACnBF,QAAAA,KAAK,EAAE,CAAC,CAACD,OAAO,CAACC,KADE;AAEnBG,QAAAA,iBAAiB,EAAE,CAAC,CAACJ,OAAO,CAACI;AAFV,OAArB;AAIAC,MAAAA,MAAM,CAACC,MAAP,CAAcH,YAAd;AACAE,MAAAA,MAAM,CAACE,IAAP,CAAYJ,YAAZ;AACAR,MAAAA,aAAa,CAACG,eAAd,CAA8BC,gBAA9B,CAA+CI,YAA/C;AACD;AACF,GA3BqB;AAiCtBK,EAAAA,UAAU,EAAE,oBAASC,OAAT,EAA0B;AACpCd,IAAAA,aAAa,CAACG,eAAd,IACEH,aAAa,CAACG,eAAd,CAA8BU,UAA9B,CAAyCC,OAAzC,CADF;AAED,GApCqB;AA0CtBC,EAAAA,WA1CsB,yBA0CR;AACZf,IAAAA,aAAa,CAACG,eAAd,IACEH,aAAa,CAACG,eAAd,CAA8BY,WAA9B,EADF;AAED,GA7CqB;AAmDtBC,EAAAA,SAnDsB,uBAmDV;AACVhB,IAAAA,aAAa,CAACG,eAAd,IAAiCH,aAAa,CAACG,eAAd,CAA8Ba,SAA9B,EAAjC;AACD;AArDqB,CAAxB;AAwDAC,MAAM,CAACC,OAAP,GAAiBf,eAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nconst NativeModules = require('../BatchedBridge/NativeModules');\n\nconst invariant = require('invariant');\n\n/**\n * Flow API for native FrameRateLogger module. If the native module is not installed, function calls\n * are just no-ops.\n *\n * Typical behavior is that `setContext` is called when a new screen is loaded (e.g. via a\n * navigation integration), and then `beginScroll` is called by `ScrollResponder` at which point the\n * native module then begins tracking frame drops. When `ScrollResponder` calls `endScroll`, the\n * native module gathers up all it's frame drop data and reports it via an analytics pipeline for\n * analysis.\n *\n * Note that `beginScroll` may be called multiple times by `ScrollResponder` - unclear if that's a\n * bug, but the native module should be robust to that.\n *\n * In the future we may add support for tracking frame drops in other types of interactions beyond\n * scrolling.\n */\nconst FrameRateLogger = {\n  /**\n   * Enable `debug` to see local logs of what's going on. `reportStackTraces` will grab stack traces\n   * during UI thread stalls and upload them if the native module supports it.\n   */\n  setGlobalOptions: function(options: {\n    debug?: boolean,\n    reportStackTraces?: boolean,\n  }) {\n    if (options.debug !== undefined) {\n      invariant(\n        NativeModules.FrameRateLogger,\n        'Trying to debug FrameRateLogger without the native module!',\n      );\n    }\n    if (NativeModules.FrameRateLogger) {\n      // Freeze the object to avoid the prepack warning (PP0017) about leaking\n      // unfrozen objects.\n      // Needs to clone the object first to avoid modifying the argument.\n      const optionsClone = {\n        debug: !!options.debug,\n        reportStackTraces: !!options.reportStackTraces,\n      };\n      Object.freeze(optionsClone);\n      Object.seal(optionsClone);\n      NativeModules.FrameRateLogger.setGlobalOptions(optionsClone);\n    }\n  },\n\n  /**\n   * Must call `setContext` before any events can be properly tracked, which is done automatically\n   * in `AppRegistry`, but navigation is also a common place to hook in.\n   */\n  setContext: function(context: string) {\n    NativeModules.FrameRateLogger &&\n      NativeModules.FrameRateLogger.setContext(context);\n  },\n\n  /**\n   * Called in `ScrollResponder` so any component that uses that module will handle this\n   * automatically.\n   */\n  beginScroll() {\n    NativeModules.FrameRateLogger &&\n      NativeModules.FrameRateLogger.beginScroll();\n  },\n\n  /**\n   * Called in `ScrollResponder` so any component that uses that module will handle this\n   * automatically.\n   */\n  endScroll() {\n    NativeModules.FrameRateLogger && NativeModules.FrameRateLogger.endScroll();\n  },\n};\n\nmodule.exports = FrameRateLogger;\n"]}