c9c953bcb6f158869a0a396bfdc906cb
'use strict';

var invariant = require('invariant');

var MAX_MERGE_DEPTH = 36;

var isTerminal = function isTerminal(o) {
  return typeof o !== 'object' || o instanceof Date || o === null;
};

var mergeHelpers = {
  MAX_MERGE_DEPTH: MAX_MERGE_DEPTH,
  isTerminal: isTerminal,
  normalizeMergeArg: function normalizeMergeArg(arg) {
    return arg === undefined || arg === null ? {} : arg;
  },
  checkMergeArrayArgs: function checkMergeArrayArgs(one, two) {
    invariant(Array.isArray(one) && Array.isArray(two), 'Tried to merge arrays, instead got %s and %s.', one, two);
  },
  checkMergeObjectArgs: function checkMergeObjectArgs(one, two) {
    mergeHelpers.checkMergeObjectArg(one);
    mergeHelpers.checkMergeObjectArg(two);
  },
  checkMergeObjectArg: function checkMergeObjectArg(arg) {
    invariant(!isTerminal(arg) && !Array.isArray(arg), 'Tried to merge an object, instead got %s.', arg);
  },
  checkMergeIntoObjectArg: function checkMergeIntoObjectArg(arg) {
    invariant((!isTerminal(arg) || typeof arg === 'function') && !Array.isArray(arg), 'Tried to merge into an object, instead got %s.', arg);
  },
  checkMergeLevel: function checkMergeLevel(level) {
    invariant(level < MAX_MERGE_DEPTH, 'Maximum deep merge depth exceeded. You may be attempting to merge ' + 'circular structures in an unsupported way.');
  },
  checkArrayStrategy: function checkArrayStrategy(strategy) {
    invariant(strategy === undefined || strategy in mergeHelpers.ArrayStrategies, 'You must provide an array strategy to deep merge functions to ' + 'instruct the deep merge how to resolve merging two arrays.');
  },
  ArrayStrategies: {
    Clobber: 'Clobber',
    Concat: 'Concat',
    IndexByIndex: 'IndexByIndex'
  }
};
module.exports = mergeHelpers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1lcmdlSGVscGVycy5qcyJdLCJuYW1lcyI6WyJpbnZhcmlhbnQiLCJyZXF1aXJlIiwiTUFYX01FUkdFX0RFUFRIIiwiaXNUZXJtaW5hbCIsIm8iLCJEYXRlIiwibWVyZ2VIZWxwZXJzIiwibm9ybWFsaXplTWVyZ2VBcmciLCJhcmciLCJ1bmRlZmluZWQiLCJjaGVja01lcmdlQXJyYXlBcmdzIiwib25lIiwidHdvIiwiQXJyYXkiLCJpc0FycmF5IiwiY2hlY2tNZXJnZU9iamVjdEFyZ3MiLCJjaGVja01lcmdlT2JqZWN0QXJnIiwiY2hlY2tNZXJnZUludG9PYmplY3RBcmciLCJjaGVja01lcmdlTGV2ZWwiLCJsZXZlbCIsImNoZWNrQXJyYXlTdHJhdGVneSIsInN0cmF0ZWd5IiwiQXJyYXlTdHJhdGVnaWVzIiwiQ2xvYmJlciIsIkNvbmNhdCIsIkluZGV4QnlJbmRleCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVlBOztBQUVBLElBQU1BLFNBQVMsR0FBR0MsT0FBTyxDQUFDLFdBQUQsQ0FBekI7O0FBTUEsSUFBTUMsZUFBZSxHQUFHLEVBQXhCOztBQVFBLElBQU1DLFVBQVUsR0FBRyxTQUFiQSxVQUFhLENBQVNDLENBQVQsRUFBWTtBQUM3QixTQUFPLE9BQU9BLENBQVAsS0FBYSxRQUFiLElBQXlCQSxDQUFDLFlBQVlDLElBQXRDLElBQThDRCxDQUFDLEtBQUssSUFBM0Q7QUFDRCxDQUZEOztBQUlBLElBQU1FLFlBQVksR0FBRztBQUNuQkosRUFBQUEsZUFBZSxFQUFFQSxlQURFO0FBR25CQyxFQUFBQSxVQUFVLEVBQUVBLFVBSE87QUFXbkJJLEVBQUFBLGlCQUFpQixFQUFFLDJCQUFTQyxHQUFULEVBQWM7QUFDL0IsV0FBT0EsR0FBRyxLQUFLQyxTQUFSLElBQXFCRCxHQUFHLEtBQUssSUFBN0IsR0FBb0MsRUFBcEMsR0FBeUNBLEdBQWhEO0FBQ0QsR0Fia0I7QUF1Qm5CRSxFQUFBQSxtQkFBbUIsRUFBRSw2QkFBU0MsR0FBVCxFQUFjQyxHQUFkLEVBQW1CO0FBQ3RDWixJQUFBQSxTQUFTLENBQ1BhLEtBQUssQ0FBQ0MsT0FBTixDQUFjSCxHQUFkLEtBQXNCRSxLQUFLLENBQUNDLE9BQU4sQ0FBY0YsR0FBZCxDQURmLEVBRVAsK0NBRk8sRUFHUEQsR0FITyxFQUlQQyxHQUpPLENBQVQ7QUFNRCxHQTlCa0I7QUFvQ25CRyxFQUFBQSxvQkFBb0IsRUFBRSw4QkFBU0osR0FBVCxFQUFjQyxHQUFkLEVBQW1CO0FBQ3ZDTixJQUFBQSxZQUFZLENBQUNVLG1CQUFiLENBQWlDTCxHQUFqQztBQUNBTCxJQUFBQSxZQUFZLENBQUNVLG1CQUFiLENBQWlDSixHQUFqQztBQUNELEdBdkNrQjtBQTRDbkJJLEVBQUFBLG1CQUFtQixFQUFFLDZCQUFTUixHQUFULEVBQWM7QUFDakNSLElBQUFBLFNBQVMsQ0FDUCxDQUFDRyxVQUFVLENBQUNLLEdBQUQsQ0FBWCxJQUFvQixDQUFDSyxLQUFLLENBQUNDLE9BQU4sQ0FBY04sR0FBZCxDQURkLEVBRVAsMkNBRk8sRUFHUEEsR0FITyxDQUFUO0FBS0QsR0FsRGtCO0FBdURuQlMsRUFBQUEsdUJBQXVCLEVBQUUsaUNBQVNULEdBQVQsRUFBYztBQUNyQ1IsSUFBQUEsU0FBUyxDQUNQLENBQUMsQ0FBQ0csVUFBVSxDQUFDSyxHQUFELENBQVgsSUFBb0IsT0FBT0EsR0FBUCxLQUFlLFVBQXBDLEtBQW1ELENBQUNLLEtBQUssQ0FBQ0MsT0FBTixDQUFjTixHQUFkLENBRDdDLEVBRVAsZ0RBRk8sRUFHUEEsR0FITyxDQUFUO0FBS0QsR0E3RGtCO0FBcUVuQlUsRUFBQUEsZUFBZSxFQUFFLHlCQUFTQyxLQUFULEVBQWdCO0FBQy9CbkIsSUFBQUEsU0FBUyxDQUNQbUIsS0FBSyxHQUFHakIsZUFERCxFQUVQLHVFQUNFLDRDQUhLLENBQVQ7QUFLRCxHQTNFa0I7QUFrRm5Ca0IsRUFBQUEsa0JBQWtCLEVBQUUsNEJBQVNDLFFBQVQsRUFBbUI7QUFDckNyQixJQUFBQSxTQUFTLENBQ1BxQixRQUFRLEtBQUtaLFNBQWIsSUFBMEJZLFFBQVEsSUFBSWYsWUFBWSxDQUFDZ0IsZUFENUMsRUFFUCxtRUFDRSw0REFISyxDQUFUO0FBS0QsR0F4RmtCO0FBaUduQkEsRUFBQUEsZUFBZSxFQUFFO0FBQ2ZDLElBQUFBLE9BQU8sRUFBRSxTQURNO0FBRWZDLElBQUFBLE1BQU0sRUFBRSxRQUZPO0FBR2ZDLElBQUFBLFlBQVksRUFBRTtBQUhDO0FBakdFLENBQXJCO0FBd0dBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJyQixZQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICpcbiAqIHJlcXVpcmVzUG9seWZpbGxzOiBBcnJheS5pc0FycmF5XG4gKlxuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbi8qKlxuICogTWF4aW11bSBudW1iZXIgb2YgbGV2ZWxzIHRvIHRyYXZlcnNlLiBXaWxsIGNhdGNoIGNpcmN1bGFyIHN0cnVjdHVyZXMuXG4gKiBAY29uc3RcbiAqL1xuY29uc3QgTUFYX01FUkdFX0RFUFRIID0gMzY7XG5cbi8qKlxuICogV2Ugd29uJ3Qgd29ycnkgYWJvdXQgZWRnZSBjYXNlcyBsaWtlIG5ldyBTdHJpbmcoJ3gnKSBvciBuZXcgQm9vbGVhbih0cnVlKS5cbiAqIEZ1bmN0aW9ucyBhbmQgRGF0ZXMgYXJlIGNvbnNpZGVyZWQgdGVybWluYWxzLCBhbmQgYXJyYXlzIGFyZSBub3QuXG4gKiBAcGFyYW0geyp9IG8gVGhlIGl0ZW0vb2JqZWN0L3ZhbHVlIHRvIHRlc3QuXG4gKiBAcmV0dXJuIHtib29sZWFufSB0cnVlIGlmZiB0aGUgYXJndW1lbnQgaXMgYSB0ZXJtaW5hbC5cbiAqL1xuY29uc3QgaXNUZXJtaW5hbCA9IGZ1bmN0aW9uKG8pIHtcbiAgcmV0dXJuIHR5cGVvZiBvICE9PSAnb2JqZWN0JyB8fCBvIGluc3RhbmNlb2YgRGF0ZSB8fCBvID09PSBudWxsO1xufTtcblxuY29uc3QgbWVyZ2VIZWxwZXJzID0ge1xuICBNQVhfTUVSR0VfREVQVEg6IE1BWF9NRVJHRV9ERVBUSCxcblxuICBpc1Rlcm1pbmFsOiBpc1Rlcm1pbmFsLFxuXG4gIC8qKlxuICAgKiBDb252ZXJ0cyBudWxsL3VuZGVmaW5lZCB2YWx1ZXMgaW50byBlbXB0eSBvYmplY3QuXG4gICAqXG4gICAqIEBwYXJhbSB7P09iamVjdD19IGFyZyBBcmd1bWVudCB0byBiZSBub3JtYWxpemVkIChudWxsYWJsZSBvcHRpb25hbClcbiAgICogQHJldHVybiB7IU9iamVjdH1cbiAgICovXG4gIG5vcm1hbGl6ZU1lcmdlQXJnOiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gYXJnID09PSB1bmRlZmluZWQgfHwgYXJnID09PSBudWxsID8ge30gOiBhcmc7XG4gIH0sXG5cbiAgLyoqXG4gICAqIElmIG1lcmdpbmcgQXJyYXlzLCBhIG1lcmdlIHN0cmF0ZWd5ICptdXN0KiBiZSBzdXBwbGllZC4gSWYgbm90LCBpdCBpc1xuICAgKiBsaWtlbHkgdGhlIGNhbGxlcidzIGZhdWx0LiBJZiB0aGlzIGZ1bmN0aW9uIGlzIGV2ZXIgY2FsbGVkIHdpdGggYW55dGhpbmdcbiAgICogYnV0IGBvbmVgIGFuZCBgdHdvYCBiZWluZyBgQXJyYXlgcywgaXQgaXMgdGhlIGZhdWx0IG9mIHRoZSBtZXJnZSB1dGlsaXRpZXMuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gb25lIEFycmF5IHRvIG1lcmdlIGludG8uXG4gICAqIEBwYXJhbSB7Kn0gdHdvIEFycmF5IHRvIG1lcmdlIGZyb20uXG4gICAqL1xuICBjaGVja01lcmdlQXJyYXlBcmdzOiBmdW5jdGlvbihvbmUsIHR3bykge1xuICAgIGludmFyaWFudChcbiAgICAgIEFycmF5LmlzQXJyYXkob25lKSAmJiBBcnJheS5pc0FycmF5KHR3byksXG4gICAgICAnVHJpZWQgdG8gbWVyZ2UgYXJyYXlzLCBpbnN0ZWFkIGdvdCAlcyBhbmQgJXMuJyxcbiAgICAgIG9uZSxcbiAgICAgIHR3byxcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBAcGFyYW0geyp9IG9uZSBPYmplY3QgdG8gbWVyZ2UgaW50by5cbiAgICogQHBhcmFtIHsqfSB0d28gT2JqZWN0IHRvIG1lcmdlIGZyb20uXG4gICAqL1xuICBjaGVja01lcmdlT2JqZWN0QXJnczogZnVuY3Rpb24ob25lLCB0d28pIHtcbiAgICBtZXJnZUhlbHBlcnMuY2hlY2tNZXJnZU9iamVjdEFyZyhvbmUpO1xuICAgIG1lcmdlSGVscGVycy5jaGVja01lcmdlT2JqZWN0QXJnKHR3byk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Kn0gYXJnXG4gICAqL1xuICBjaGVja01lcmdlT2JqZWN0QXJnOiBmdW5jdGlvbihhcmcpIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICAhaXNUZXJtaW5hbChhcmcpICYmICFBcnJheS5pc0FycmF5KGFyZyksXG4gICAgICAnVHJpZWQgdG8gbWVyZ2UgYW4gb2JqZWN0LCBpbnN0ZWFkIGdvdCAlcy4nLFxuICAgICAgYXJnLFxuICAgICk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7Kn0gYXJnXG4gICAqL1xuICBjaGVja01lcmdlSW50b09iamVjdEFyZzogZnVuY3Rpb24oYXJnKSB7XG4gICAgaW52YXJpYW50KFxuICAgICAgKCFpc1Rlcm1pbmFsKGFyZykgfHwgdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJykgJiYgIUFycmF5LmlzQXJyYXkoYXJnKSxcbiAgICAgICdUcmllZCB0byBtZXJnZSBpbnRvIGFuIG9iamVjdCwgaW5zdGVhZCBnb3QgJXMuJyxcbiAgICAgIGFyZyxcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDaGVja3MgdGhhdCBhIG1lcmdlIHdhcyBub3QgZ2l2ZW4gYSBjaXJjdWxhciBvYmplY3Qgb3IgYW4gb2JqZWN0IHRoYXQgaGFkXG4gICAqIHRvbyBncmVhdCBvZiBkZXB0aC5cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IExldmVsIG9mIHJlY3Vyc2lvbiB0byB2YWxpZGF0ZSBhZ2FpbnN0IG1heGltdW0uXG4gICAqL1xuICBjaGVja01lcmdlTGV2ZWw6IGZ1bmN0aW9uKGxldmVsKSB7XG4gICAgaW52YXJpYW50KFxuICAgICAgbGV2ZWwgPCBNQVhfTUVSR0VfREVQVEgsXG4gICAgICAnTWF4aW11bSBkZWVwIG1lcmdlIGRlcHRoIGV4Y2VlZGVkLiBZb3UgbWF5IGJlIGF0dGVtcHRpbmcgdG8gbWVyZ2UgJyArXG4gICAgICAgICdjaXJjdWxhciBzdHJ1Y3R1cmVzIGluIGFuIHVuc3VwcG9ydGVkIHdheS4nLFxuICAgICk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENoZWNrcyB0aGF0IHRoZSBzdXBwbGllZCBtZXJnZSBzdHJhdGVneSBpcyB2YWxpZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IEFycmF5IG1lcmdlIHN0cmF0ZWd5LlxuICAgKi9cbiAgY2hlY2tBcnJheVN0cmF0ZWd5OiBmdW5jdGlvbihzdHJhdGVneSkge1xuICAgIGludmFyaWFudChcbiAgICAgIHN0cmF0ZWd5ID09PSB1bmRlZmluZWQgfHwgc3RyYXRlZ3kgaW4gbWVyZ2VIZWxwZXJzLkFycmF5U3RyYXRlZ2llcyxcbiAgICAgICdZb3UgbXVzdCBwcm92aWRlIGFuIGFycmF5IHN0cmF0ZWd5IHRvIGRlZXAgbWVyZ2UgZnVuY3Rpb25zIHRvICcgK1xuICAgICAgICAnaW5zdHJ1Y3QgdGhlIGRlZXAgbWVyZ2UgaG93IHRvIHJlc29sdmUgbWVyZ2luZyB0d28gYXJyYXlzLicsXG4gICAgKTtcbiAgfSxcblxuICAvKipcbiAgICogU2V0IG9mIHBvc3NpYmxlIGJlaGF2aW9ycyBvZiBtZXJnZSBhbGdvcml0aG1zIHdoZW4gZW5jb3VudGVyaW5nIHR3byBBcnJheXNcbiAgICogdGhhdCBtdXN0IGJlIG1lcmdlZCB0b2dldGhlci5cbiAgICogLSBgY2xvYmJlcmA6IFRoZSBsZWZ0IGBBcnJheWAgaXMgaWdub3JlZC5cbiAgICogLSBgaW5kZXhCeUluZGV4YDogVGhlIHJlc3VsdCBpcyBhY2hpZXZlZCBieSByZWN1cnNpdmVseSBkZWVwIG1lcmdpbmcgYXRcbiAgICogICBlYWNoIGluZGV4LiAobm90IHlldCBzdXBwb3J0ZWQuKVxuICAgKi9cbiAgQXJyYXlTdHJhdGVnaWVzOiB7XG4gICAgQ2xvYmJlcjogJ0Nsb2JiZXInLFxuICAgIENvbmNhdDogJ0NvbmNhdCcsXG4gICAgSW5kZXhCeUluZGV4OiAnSW5kZXhCeUluZGV4JyxcbiAgfSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gbWVyZ2VIZWxwZXJzO1xuIl19