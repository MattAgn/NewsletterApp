{"version":3,"sources":["mergeHelpers.js"],"names":["invariant","require","MAX_MERGE_DEPTH","isTerminal","o","Date","mergeHelpers","normalizeMergeArg","arg","undefined","checkMergeArrayArgs","one","two","Array","isArray","checkMergeObjectArgs","checkMergeObjectArg","checkMergeIntoObjectArg","checkMergeLevel","level","checkArrayStrategy","strategy","ArrayStrategies","Clobber","Concat","IndexByIndex","module","exports"],"mappings":"AAYA;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AAMA,IAAMC,eAAe,GAAG,EAAxB;;AAQA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAASC,CAAT,EAAY;AAC7B,SAAO,OAAOA,CAAP,KAAa,QAAb,IAAyBA,CAAC,YAAYC,IAAtC,IAA8CD,CAAC,KAAK,IAA3D;AACD,CAFD;;AAIA,IAAME,YAAY,GAAG;AACnBJ,EAAAA,eAAe,EAAEA,eADE;AAGnBC,EAAAA,UAAU,EAAEA,UAHO;AAWnBI,EAAAA,iBAAiB,EAAE,2BAASC,GAAT,EAAc;AAC/B,WAAOA,GAAG,KAAKC,SAAR,IAAqBD,GAAG,KAAK,IAA7B,GAAoC,EAApC,GAAyCA,GAAhD;AACD,GAbkB;AAuBnBE,EAAAA,mBAAmB,EAAE,6BAASC,GAAT,EAAcC,GAAd,EAAmB;AACtCZ,IAAAA,SAAS,CACPa,KAAK,CAACC,OAAN,CAAcH,GAAd,KAAsBE,KAAK,CAACC,OAAN,CAAcF,GAAd,CADf,EAEP,+CAFO,EAGPD,GAHO,EAIPC,GAJO,CAAT;AAMD,GA9BkB;AAoCnBG,EAAAA,oBAAoB,EAAE,8BAASJ,GAAT,EAAcC,GAAd,EAAmB;AACvCN,IAAAA,YAAY,CAACU,mBAAb,CAAiCL,GAAjC;AACAL,IAAAA,YAAY,CAACU,mBAAb,CAAiCJ,GAAjC;AACD,GAvCkB;AA4CnBI,EAAAA,mBAAmB,EAAE,6BAASR,GAAT,EAAc;AACjCR,IAAAA,SAAS,CACP,CAACG,UAAU,CAACK,GAAD,CAAX,IAAoB,CAACK,KAAK,CAACC,OAAN,CAAcN,GAAd,CADd,EAEP,2CAFO,EAGPA,GAHO,CAAT;AAKD,GAlDkB;AAuDnBS,EAAAA,uBAAuB,EAAE,iCAAST,GAAT,EAAc;AACrCR,IAAAA,SAAS,CACP,CAAC,CAACG,UAAU,CAACK,GAAD,CAAX,IAAoB,OAAOA,GAAP,KAAe,UAApC,KAAmD,CAACK,KAAK,CAACC,OAAN,CAAcN,GAAd,CAD7C,EAEP,gDAFO,EAGPA,GAHO,CAAT;AAKD,GA7DkB;AAqEnBU,EAAAA,eAAe,EAAE,yBAASC,KAAT,EAAgB;AAC/BnB,IAAAA,SAAS,CACPmB,KAAK,GAAGjB,eADD,EAEP,uEACE,4CAHK,CAAT;AAKD,GA3EkB;AAkFnBkB,EAAAA,kBAAkB,EAAE,4BAASC,QAAT,EAAmB;AACrCrB,IAAAA,SAAS,CACPqB,QAAQ,KAAKZ,SAAb,IAA0BY,QAAQ,IAAIf,YAAY,CAACgB,eAD5C,EAEP,mEACE,4DAHK,CAAT;AAKD,GAxFkB;AAiGnBA,EAAAA,eAAe,EAAE;AACfC,IAAAA,OAAO,EAAE,SADM;AAEfC,IAAAA,MAAM,EAAE,QAFO;AAGfC,IAAAA,YAAY,EAAE;AAHC;AAjGE,CAArB;AAwGAC,MAAM,CAACC,OAAP,GAAiBrB,YAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * requiresPolyfills: Array.isArray\n *\n * @format\n */\n\n'use strict';\n\nconst invariant = require('invariant');\n\n/**\n * Maximum number of levels to traverse. Will catch circular structures.\n * @const\n */\nconst MAX_MERGE_DEPTH = 36;\n\n/**\n * We won't worry about edge cases like new String('x') or new Boolean(true).\n * Functions and Dates are considered terminals, and arrays are not.\n * @param {*} o The item/object/value to test.\n * @return {boolean} true iff the argument is a terminal.\n */\nconst isTerminal = function(o) {\n  return typeof o !== 'object' || o instanceof Date || o === null;\n};\n\nconst mergeHelpers = {\n  MAX_MERGE_DEPTH: MAX_MERGE_DEPTH,\n\n  isTerminal: isTerminal,\n\n  /**\n   * Converts null/undefined values into empty object.\n   *\n   * @param {?Object=} arg Argument to be normalized (nullable optional)\n   * @return {!Object}\n   */\n  normalizeMergeArg: function(arg) {\n    return arg === undefined || arg === null ? {} : arg;\n  },\n\n  /**\n   * If merging Arrays, a merge strategy *must* be supplied. If not, it is\n   * likely the caller's fault. If this function is ever called with anything\n   * but `one` and `two` being `Array`s, it is the fault of the merge utilities.\n   *\n   * @param {*} one Array to merge into.\n   * @param {*} two Array to merge from.\n   */\n  checkMergeArrayArgs: function(one, two) {\n    invariant(\n      Array.isArray(one) && Array.isArray(two),\n      'Tried to merge arrays, instead got %s and %s.',\n      one,\n      two,\n    );\n  },\n\n  /**\n   * @param {*} one Object to merge into.\n   * @param {*} two Object to merge from.\n   */\n  checkMergeObjectArgs: function(one, two) {\n    mergeHelpers.checkMergeObjectArg(one);\n    mergeHelpers.checkMergeObjectArg(two);\n  },\n\n  /**\n   * @param {*} arg\n   */\n  checkMergeObjectArg: function(arg) {\n    invariant(\n      !isTerminal(arg) && !Array.isArray(arg),\n      'Tried to merge an object, instead got %s.',\n      arg,\n    );\n  },\n\n  /**\n   * @param {*} arg\n   */\n  checkMergeIntoObjectArg: function(arg) {\n    invariant(\n      (!isTerminal(arg) || typeof arg === 'function') && !Array.isArray(arg),\n      'Tried to merge into an object, instead got %s.',\n      arg,\n    );\n  },\n\n  /**\n   * Checks that a merge was not given a circular object or an object that had\n   * too great of depth.\n   *\n   * @param {number} Level of recursion to validate against maximum.\n   */\n  checkMergeLevel: function(level) {\n    invariant(\n      level < MAX_MERGE_DEPTH,\n      'Maximum deep merge depth exceeded. You may be attempting to merge ' +\n        'circular structures in an unsupported way.',\n    );\n  },\n\n  /**\n   * Checks that the supplied merge strategy is valid.\n   *\n   * @param {string} Array merge strategy.\n   */\n  checkArrayStrategy: function(strategy) {\n    invariant(\n      strategy === undefined || strategy in mergeHelpers.ArrayStrategies,\n      'You must provide an array strategy to deep merge functions to ' +\n        'instruct the deep merge how to resolve merging two arrays.',\n    );\n  },\n\n  /**\n   * Set of possible behaviors of merge algorithms when encountering two Arrays\n   * that must be merged together.\n   * - `clobber`: The left `Array` is ignored.\n   * - `indexByIndex`: The result is achieved by recursively deep merging at\n   *   each index. (not yet supported.)\n   */\n  ArrayStrategies: {\n    Clobber: 'Clobber',\n    Concat: 'Concat',\n    IndexByIndex: 'IndexByIndex',\n  },\n};\n\nmodule.exports = mergeHelpers;\n"]}