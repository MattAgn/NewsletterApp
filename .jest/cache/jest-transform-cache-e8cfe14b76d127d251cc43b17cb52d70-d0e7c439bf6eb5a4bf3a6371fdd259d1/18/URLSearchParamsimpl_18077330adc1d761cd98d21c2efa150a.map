{"version":3,"sources":["URLSearchParams-impl.js"],"names":["stableSortBy","require","urlencoded","exports","implementation","constructorArgs","doNotStripQMark","init","_list","_url","slice","Array","isArray","pair","length","TypeError","push","Object","getPrototypeOf","keys","name","value","parseUrlencoded","query","serializeUrlencoded","_updateSteps","i","splice","tuple","output","found","Symbol","iterator"],"mappings":"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","sourcesContent":["\"use strict\";\nconst stableSortBy = require(\"lodash.sortby\");\nconst urlencoded = require(\"./urlencoded\");\n\nexports.implementation = class URLSearchParamsImpl {\n  constructor(constructorArgs, { doNotStripQMark = false }) {\n    let init = constructorArgs[0];\n    this._list = [];\n    this._url = null;\n\n    if (!doNotStripQMark && typeof init === \"string\" && init[0] === \"?\") {\n      init = init.slice(1);\n    }\n\n    if (Array.isArray(init)) {\n      for (const pair of init) {\n        if (pair.length !== 2) {\n          throw new TypeError(\"Failed to construct 'URLSearchParams': parameter 1 sequence's element does not \" +\n                              \"contain exactly two elements.\");\n        }\n        this._list.push([pair[0], pair[1]]);\n      }\n    } else if (typeof init === \"object\" && Object.getPrototypeOf(init) === null) {\n      for (const name of Object.keys(init)) {\n        const value = init[name];\n        this._list.push([name, value]);\n      }\n    } else {\n      this._list = urlencoded.parseUrlencoded(init);\n    }\n  }\n\n  _updateSteps() {\n    if (this._url !== null) {\n      let query = urlencoded.serializeUrlencoded(this._list);\n      if (query === \"\") {\n        query = null;\n      }\n      this._url._url.query = query;\n    }\n  }\n\n  append(name, value) {\n    this._list.push([name, value]);\n    this._updateSteps();\n  }\n\n  delete(name) {\n    let i = 0;\n    while (i < this._list.length) {\n      if (this._list[i][0] === name) {\n        this._list.splice(i, 1);\n      } else {\n        i++;\n      }\n    }\n    this._updateSteps();\n  }\n\n  get(name) {\n    for (const tuple of this._list) {\n      if (tuple[0] === name) {\n        return tuple[1];\n      }\n    }\n    return null;\n  }\n\n  getAll(name) {\n    const output = [];\n    for (const tuple of this._list) {\n      if (tuple[0] === name) {\n        output.push(tuple[1]);\n      }\n    }\n    return output;\n  }\n\n  has(name) {\n    for (const tuple of this._list) {\n      if (tuple[0] === name) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  set(name, value) {\n    let found = false;\n    let i = 0;\n    while (i < this._list.length) {\n      if (this._list[i][0] === name) {\n        if (found) {\n          this._list.splice(i, 1);\n        } else {\n          found = true;\n          this._list[i][1] = value;\n          i++;\n        }\n      } else {\n        i++;\n      }\n    }\n    if (!found) {\n      this._list.push([name, value]);\n    }\n    this._updateSteps();\n  }\n\n  sort() {\n    this._list = stableSortBy(this._list, [0]);\n    this._updateSteps();\n  }\n\n  [Symbol.iterator]() {\n    return this._list[Symbol.iterator]();\n  }\n\n  toString() {\n    return urlencoded.serializeUrlencoded(this._list);\n  }\n};\n"]}