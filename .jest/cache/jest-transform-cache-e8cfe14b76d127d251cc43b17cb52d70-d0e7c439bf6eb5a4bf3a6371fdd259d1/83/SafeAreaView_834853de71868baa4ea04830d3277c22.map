{"version":3,"sources":["SafeAreaView.js"],"names":["Platform","require","React","View","exported","OS","SafeAreaView","props","forwardedRef","emulateUnlessSupported","localProps","SafeAreaViewRef","forwardRef","displayName","RCTSafeAreaViewNativeComponent","module","exports"],"mappings":";;;;;;AAUA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,0BAAD,CAAxB;;AACA,IAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,IAAME,IAAI,GAAGF,OAAO,CAAC,cAAD,CAApB;;AAUA,IAAIG,QAAJ;;AAWA,IAAIJ,QAAQ,CAACK,EAAT,KAAgB,SAApB,EAA+B;AAC7B,MAAMC,YAAY,GAAG,SAAfA,YAAe,CACnBC,KADmB,EAEnBC,YAFmB,EAGhB;AAAA,QACIC,sBADJ,GAC6CF,KAD7C,CACIE,sBADJ;AAAA,QAC+BC,UAD/B,0CAC6CH,KAD7C;AAEH,WAAO,oBAAC,IAAD,6BAAUG,UAAV;AAAsB,MAAA,GAAG,EAAEF;AAA3B,OAAP;AACD,GAND;;AAQA,MAAMG,eAAe,GAAGT,KAAK,CAACU,UAAN,CAAiBN,YAAjB,CAAxB;AACAK,EAAAA,eAAe,CAACE,WAAhB,GAA8B,cAA9B;AACAT,EAAAA,QAAQ,GAAKO,eAAb;AACD,CAZD,MAYO;AACL,MAAMG,8BAA8B,GAAGb,OAAO,CAAC,kCAAD,CAA9C;;AAEA,MAAMK,aAAY,GAAG,SAAfA,aAAe,CACnBC,KADmB,EAEnBC,YAFmB,EAGhB;AACH,WACE,oBAAC,8BAAD;AACE,MAAA,sBAAsB,EAAE;AAD1B,OAEMD,KAFN;AAGE,MAAA,GAAG,EAAEC;AAHP,OADF;AAOD,GAXD;;AAaA,MAAMG,gBAAe,GAAGT,KAAK,CAACU,UAAN,CAAiBN,aAAjB,CAAxB;;AACAK,EAAAA,gBAAe,CAACE,WAAhB,GAA8B,cAA9B;AACAT,EAAAA,QAAQ,GAAKO,gBAAb;AACD;;AAEDI,MAAM,CAACC,OAAP,GAAiBZ,QAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nconst Platform = require('../../Utilities/Platform');\nconst React = require('react');\nconst View = require('../View/View');\n\nimport type {ViewProps} from '../View/ViewPropTypes';\nimport type {NativeComponent} from '../../Renderer/shims/ReactNative';\n\ntype Props = $ReadOnly<{|\n  ...ViewProps,\n  emulateUnlessSupported?: boolean,\n|}>;\n\nlet exported;\n\n/**\n * Renders nested content and automatically applies paddings reflect the portion\n * of the view that is not covered by navigation bars, tab bars, toolbars, and\n * other ancestor views.\n *\n * Moreover, and most importantly, Safe Area's paddings reflect physical\n * limitation of the screen, such as rounded corners or camera notches (aka\n * sensor housing area on iPhone X).\n */\nif (Platform.OS === 'android') {\n  const SafeAreaView = (\n    props: Props,\n    forwardedRef?: ?React.Ref<typeof View>,\n  ) => {\n    const {emulateUnlessSupported, ...localProps} = props;\n    return <View {...localProps} ref={forwardedRef} />;\n  };\n\n  const SafeAreaViewRef = React.forwardRef(SafeAreaView);\n  SafeAreaViewRef.displayName = 'SafeAreaView';\n  exported = ((SafeAreaViewRef: any): Class<React.Component<Props>>);\n} else {\n  const RCTSafeAreaViewNativeComponent = require('./RCTSafeAreaViewNativeComponent');\n\n  const SafeAreaView = (\n    props: Props,\n    forwardedRef?: ?React.Ref<typeof RCTSafeAreaViewNativeComponent>,\n  ) => {\n    return (\n      <RCTSafeAreaViewNativeComponent\n        emulateUnlessSupported={true}\n        {...props}\n        ref={forwardedRef}\n      />\n    );\n  };\n\n  const SafeAreaViewRef = React.forwardRef(SafeAreaView);\n  SafeAreaViewRef.displayName = 'SafeAreaView';\n  exported = ((SafeAreaViewRef: any): Class<NativeComponent<Props>>);\n}\n\nmodule.exports = exported;\n"]}