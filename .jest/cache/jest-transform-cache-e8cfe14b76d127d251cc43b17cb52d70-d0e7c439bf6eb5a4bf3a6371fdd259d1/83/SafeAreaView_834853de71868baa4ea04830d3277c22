89bbbc29c20753cacf5d92c0815e1260
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var Platform = require('../../Utilities/Platform');

var React = require('react');

var View = require('../View/View');

var exported;

if (Platform.OS === 'android') {
  var SafeAreaView = function SafeAreaView(props, forwardedRef) {
    var emulateUnlessSupported = props.emulateUnlessSupported,
        localProps = (0, _objectWithoutProperties2.default)(props, ["emulateUnlessSupported"]);
    return React.createElement(View, (0, _extends2.default)({}, localProps, {
      ref: forwardedRef
    }));
  };

  var SafeAreaViewRef = React.forwardRef(SafeAreaView);
  SafeAreaViewRef.displayName = 'SafeAreaView';
  exported = SafeAreaViewRef;
} else {
  var RCTSafeAreaViewNativeComponent = require('./RCTSafeAreaViewNativeComponent');

  var _SafeAreaView = function _SafeAreaView(props, forwardedRef) {
    return React.createElement(RCTSafeAreaViewNativeComponent, (0, _extends2.default)({
      emulateUnlessSupported: true
    }, props, {
      ref: forwardedRef
    }));
  };

  var _SafeAreaViewRef = React.forwardRef(_SafeAreaView);

  _SafeAreaViewRef.displayName = 'SafeAreaView';
  exported = _SafeAreaViewRef;
}

module.exports = exported;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNhZmVBcmVhVmlldy5qcyJdLCJuYW1lcyI6WyJQbGF0Zm9ybSIsInJlcXVpcmUiLCJSZWFjdCIsIlZpZXciLCJleHBvcnRlZCIsIk9TIiwiU2FmZUFyZWFWaWV3IiwicHJvcHMiLCJmb3J3YXJkZWRSZWYiLCJlbXVsYXRlVW5sZXNzU3VwcG9ydGVkIiwibG9jYWxQcm9wcyIsIlNhZmVBcmVhVmlld1JlZiIsImZvcndhcmRSZWYiLCJkaXNwbGF5TmFtZSIsIlJDVFNhZmVBcmVhVmlld05hdGl2ZUNvbXBvbmVudCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQVVBLElBQU1BLFFBQVEsR0FBR0MsT0FBTyxDQUFDLDBCQUFELENBQXhCOztBQUNBLElBQU1DLEtBQUssR0FBR0QsT0FBTyxDQUFDLE9BQUQsQ0FBckI7O0FBQ0EsSUFBTUUsSUFBSSxHQUFHRixPQUFPLENBQUMsY0FBRCxDQUFwQjs7QUFVQSxJQUFJRyxRQUFKOztBQVdBLElBQUlKLFFBQVEsQ0FBQ0ssRUFBVCxLQUFnQixTQUFwQixFQUErQjtBQUM3QixNQUFNQyxZQUFZLEdBQUcsU0FBZkEsWUFBZSxDQUNuQkMsS0FEbUIsRUFFbkJDLFlBRm1CLEVBR2hCO0FBQUEsUUFDSUMsc0JBREosR0FDNkNGLEtBRDdDLENBQ0lFLHNCQURKO0FBQUEsUUFDK0JDLFVBRC9CLDBDQUM2Q0gsS0FEN0M7QUFFSCxXQUFPLG9CQUFDLElBQUQsNkJBQVVHLFVBQVY7QUFBc0IsTUFBQSxHQUFHLEVBQUVGO0FBQTNCLE9BQVA7QUFDRCxHQU5EOztBQVFBLE1BQU1HLGVBQWUsR0FBR1QsS0FBSyxDQUFDVSxVQUFOLENBQWlCTixZQUFqQixDQUF4QjtBQUNBSyxFQUFBQSxlQUFlLENBQUNFLFdBQWhCLEdBQThCLGNBQTlCO0FBQ0FULEVBQUFBLFFBQVEsR0FBS08sZUFBYjtBQUNELENBWkQsTUFZTztBQUNMLE1BQU1HLDhCQUE4QixHQUFHYixPQUFPLENBQUMsa0NBQUQsQ0FBOUM7O0FBRUEsTUFBTUssYUFBWSxHQUFHLFNBQWZBLGFBQWUsQ0FDbkJDLEtBRG1CLEVBRW5CQyxZQUZtQixFQUdoQjtBQUNILFdBQ0Usb0JBQUMsOEJBQUQ7QUFDRSxNQUFBLHNCQUFzQixFQUFFO0FBRDFCLE9BRU1ELEtBRk47QUFHRSxNQUFBLEdBQUcsRUFBRUM7QUFIUCxPQURGO0FBT0QsR0FYRDs7QUFhQSxNQUFNRyxnQkFBZSxHQUFHVCxLQUFLLENBQUNVLFVBQU4sQ0FBaUJOLGFBQWpCLENBQXhCOztBQUNBSyxFQUFBQSxnQkFBZSxDQUFDRSxXQUFoQixHQUE4QixjQUE5QjtBQUNBVCxFQUFBQSxRQUFRLEdBQUtPLGdCQUFiO0FBQ0Q7O0FBRURJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlosUUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cblxuY29uc3QgUGxhdGZvcm0gPSByZXF1aXJlKCcuLi8uLi9VdGlsaXRpZXMvUGxhdGZvcm0nKTtcbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcbmNvbnN0IFZpZXcgPSByZXF1aXJlKCcuLi9WaWV3L1ZpZXcnKTtcblxuaW1wb3J0IHR5cGUge1ZpZXdQcm9wc30gZnJvbSAnLi4vVmlldy9WaWV3UHJvcFR5cGVzJztcbmltcG9ydCB0eXBlIHtOYXRpdmVDb21wb25lbnR9IGZyb20gJy4uLy4uL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlJztcblxudHlwZSBQcm9wcyA9ICRSZWFkT25seTx7fFxuICAuLi5WaWV3UHJvcHMsXG4gIGVtdWxhdGVVbmxlc3NTdXBwb3J0ZWQ/OiBib29sZWFuLFxufH0+O1xuXG5sZXQgZXhwb3J0ZWQ7XG5cbi8qKlxuICogUmVuZGVycyBuZXN0ZWQgY29udGVudCBhbmQgYXV0b21hdGljYWxseSBhcHBsaWVzIHBhZGRpbmdzIHJlZmxlY3QgdGhlIHBvcnRpb25cbiAqIG9mIHRoZSB2aWV3IHRoYXQgaXMgbm90IGNvdmVyZWQgYnkgbmF2aWdhdGlvbiBiYXJzLCB0YWIgYmFycywgdG9vbGJhcnMsIGFuZFxuICogb3RoZXIgYW5jZXN0b3Igdmlld3MuXG4gKlxuICogTW9yZW92ZXIsIGFuZCBtb3N0IGltcG9ydGFudGx5LCBTYWZlIEFyZWEncyBwYWRkaW5ncyByZWZsZWN0IHBoeXNpY2FsXG4gKiBsaW1pdGF0aW9uIG9mIHRoZSBzY3JlZW4sIHN1Y2ggYXMgcm91bmRlZCBjb3JuZXJzIG9yIGNhbWVyYSBub3RjaGVzIChha2FcbiAqIHNlbnNvciBob3VzaW5nIGFyZWEgb24gaVBob25lIFgpLlxuICovXG5pZiAoUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJykge1xuICBjb25zdCBTYWZlQXJlYVZpZXcgPSAoXG4gICAgcHJvcHM6IFByb3BzLFxuICAgIGZvcndhcmRlZFJlZj86ID9SZWFjdC5SZWY8dHlwZW9mIFZpZXc+LFxuICApID0+IHtcbiAgICBjb25zdCB7ZW11bGF0ZVVubGVzc1N1cHBvcnRlZCwgLi4ubG9jYWxQcm9wc30gPSBwcm9wcztcbiAgICByZXR1cm4gPFZpZXcgey4uLmxvY2FsUHJvcHN9IHJlZj17Zm9yd2FyZGVkUmVmfSAvPjtcbiAgfTtcblxuICBjb25zdCBTYWZlQXJlYVZpZXdSZWYgPSBSZWFjdC5mb3J3YXJkUmVmKFNhZmVBcmVhVmlldyk7XG4gIFNhZmVBcmVhVmlld1JlZi5kaXNwbGF5TmFtZSA9ICdTYWZlQXJlYVZpZXcnO1xuICBleHBvcnRlZCA9ICgoU2FmZUFyZWFWaWV3UmVmOiBhbnkpOiBDbGFzczxSZWFjdC5Db21wb25lbnQ8UHJvcHM+Pik7XG59IGVsc2Uge1xuICBjb25zdCBSQ1RTYWZlQXJlYVZpZXdOYXRpdmVDb21wb25lbnQgPSByZXF1aXJlKCcuL1JDVFNhZmVBcmVhVmlld05hdGl2ZUNvbXBvbmVudCcpO1xuXG4gIGNvbnN0IFNhZmVBcmVhVmlldyA9IChcbiAgICBwcm9wczogUHJvcHMsXG4gICAgZm9yd2FyZGVkUmVmPzogP1JlYWN0LlJlZjx0eXBlb2YgUkNUU2FmZUFyZWFWaWV3TmF0aXZlQ29tcG9uZW50PixcbiAgKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxSQ1RTYWZlQXJlYVZpZXdOYXRpdmVDb21wb25lbnRcbiAgICAgICAgZW11bGF0ZVVubGVzc1N1cHBvcnRlZD17dHJ1ZX1cbiAgICAgICAgey4uLnByb3BzfVxuICAgICAgICByZWY9e2ZvcndhcmRlZFJlZn1cbiAgICAgIC8+XG4gICAgKTtcbiAgfTtcblxuICBjb25zdCBTYWZlQXJlYVZpZXdSZWYgPSBSZWFjdC5mb3J3YXJkUmVmKFNhZmVBcmVhVmlldyk7XG4gIFNhZmVBcmVhVmlld1JlZi5kaXNwbGF5TmFtZSA9ICdTYWZlQXJlYVZpZXcnO1xuICBleHBvcnRlZCA9ICgoU2FmZUFyZWFWaWV3UmVmOiBhbnkpOiBDbGFzczxOYXRpdmVDb21wb25lbnQ8UHJvcHM+Pik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZWQ7XG4iXX0=