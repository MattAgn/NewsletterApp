d7290643aa9ea0fcc1e29cf78831ca15
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getByAPI = exports.getAllByTestId = exports.getAllByProps = exports.getAllByDisplayValue = exports.getAllByPlaceholder = exports.getAllByText = exports.getAllByType = exports.getAllByName = exports.getByTestId = exports.getByProps = exports.getByDisplayValue = exports.getByPlaceholder = exports.getByText = exports.getByType = exports.getByName = void 0;

var React = _interopRequireWildcard(require("react"));

var _prettyFormat = _interopRequireDefault(require("pretty-format"));

var _errors = require("./errors");

var filterNodeByType = function filterNodeByType(node, type) {
  return node.type === type;
};

var filterNodeByName = function filterNodeByName(node, name) {
  return typeof node.type !== 'string' && (node.type.displayName === name || node.type.name === name);
};

var getNodeByText = function getNodeByText(node, text) {
  try {
    var _require = require('react-native'),
        Text = _require.Text,
        TextInput = _require.TextInput;

    var isTextComponent = filterNodeByType(node, Text);

    if (isTextComponent) {
      var textChildren = React.Children.map(node.props.children, function (child) {
        return child ? child.toString() : '';
      });

      if (textChildren) {
        var textToTest = textChildren.join('');
        return typeof text === 'string' ? text === textToTest : text.test(textToTest);
      }
    }

    return false;
  } catch (error) {
    throw (0, _errors.createLibraryNotSupportedError)(error);
  }
};

var getTextInputNodeByPlaceholder = function getTextInputNodeByPlaceholder(node, placeholder) {
  try {
    var _require2 = require('react-native'),
        TextInput = _require2.TextInput;

    return filterNodeByType(node, TextInput) && (typeof placeholder === 'string' ? placeholder === node.props.placeholder : placeholder.test(node.props.placeholder));
  } catch (error) {
    throw (0, _errors.createLibraryNotSupportedError)(error);
  }
};

var getTextInputNodeByDisplayValue = function getTextInputNodeByDisplayValue(node, value) {
  try {
    var _require3 = require('react-native'),
        TextInput = _require3.TextInput;

    return filterNodeByType(node, TextInput) && (typeof value === 'string' ? value === node.props.value : value.test(node.props.value));
  } catch (error) {
    throw (0, _errors.createLibraryNotSupportedError)(error);
  }
};

var getByName = function getByName(instance) {
  return function getByNameFn(name) {
    (0, _errors.logDeprecationWarning)('getByName', 'getByType');

    try {
      return typeof name === 'string' ? instance.find(function (node) {
        return filterNodeByName(node, name);
      }) : instance.findByType(name);
    } catch (error) {
      throw new _errors.ErrorWithStack((0, _errors.prepareErrorMessage)(error), getByNameFn);
    }
  };
};

exports.getByName = getByName;

var getByType = function getByType(instance) {
  return function getByTypeFn(type) {
    try {
      return instance.findByType(type);
    } catch (error) {
      throw new _errors.ErrorWithStack((0, _errors.prepareErrorMessage)(error), getByTypeFn);
    }
  };
};

exports.getByType = getByType;

var getByText = function getByText(instance) {
  return function getByTextFn(text) {
    try {
      return instance.find(function (node) {
        return getNodeByText(node, text);
      });
    } catch (error) {
      throw new _errors.ErrorWithStack((0, _errors.prepareErrorMessage)(error), getByTextFn);
    }
  };
};

exports.getByText = getByText;

var getByPlaceholder = function getByPlaceholder(instance) {
  return function getByPlaceholderFn(placeholder) {
    try {
      return instance.find(function (node) {
        return getTextInputNodeByPlaceholder(node, placeholder);
      });
    } catch (error) {
      throw new _errors.ErrorWithStack((0, _errors.prepareErrorMessage)(error), getByPlaceholderFn);
    }
  };
};

exports.getByPlaceholder = getByPlaceholder;

var getByDisplayValue = function getByDisplayValue(instance) {
  return function getByDisplayValueFn(placeholder) {
    try {
      return instance.find(function (node) {
        return getTextInputNodeByDisplayValue(node, placeholder);
      });
    } catch (error) {
      throw new _errors.ErrorWithStack((0, _errors.prepareErrorMessage)(error), getByDisplayValueFn);
    }
  };
};

exports.getByDisplayValue = getByDisplayValue;

var getByProps = function getByProps(instance) {
  return function getByPropsFn(props) {
    try {
      return instance.findByProps(props);
    } catch (error) {
      throw new _errors.ErrorWithStack((0, _errors.prepareErrorMessage)(error), getByPropsFn);
    }
  };
};

exports.getByProps = getByProps;

var getByTestId = function getByTestId(instance) {
  return function getByTestIdFn(testID) {
    try {
      return instance.findByProps({
        testID: testID
      });
    } catch (error) {
      throw new _errors.ErrorWithStack((0, _errors.prepareErrorMessage)(error), getByTestIdFn);
    }
  };
};

exports.getByTestId = getByTestId;

var getAllByName = function getAllByName(instance) {
  return function getAllByNameFn(name) {
    (0, _errors.logDeprecationWarning)('getAllByName', 'getAllByType');
    var results = typeof name === 'string' ? instance.findAll(function (node) {
      return filterNodeByName(node, name);
    }) : instance.findAllByType(name);

    if (results.length === 0) {
      throw new _errors.ErrorWithStack('No instances found', getAllByNameFn);
    }

    return results;
  };
};

exports.getAllByName = getAllByName;

var getAllByType = function getAllByType(instance) {
  return function getAllByTypeFn(type) {
    var results = instance.findAllByType(type);

    if (results.length === 0) {
      throw new _errors.ErrorWithStack('No instances found', getAllByTypeFn);
    }

    return results;
  };
};

exports.getAllByType = getAllByType;

var getAllByText = function getAllByText(instance) {
  return function getAllByTextFn(text) {
    var results = instance.findAll(function (node) {
      return getNodeByText(node, text);
    });

    if (results.length === 0) {
      throw new _errors.ErrorWithStack("No instances found with text: " + String(text), getAllByTextFn);
    }

    return results;
  };
};

exports.getAllByText = getAllByText;

var getAllByPlaceholder = function getAllByPlaceholder(instance) {
  return function getAllByPlaceholderFn(placeholder) {
    var results = instance.findAll(function (node) {
      return getTextInputNodeByPlaceholder(node, placeholder);
    });

    if (results.length === 0) {
      throw new _errors.ErrorWithStack("No instances found with placeholder: " + String(placeholder), getAllByPlaceholderFn);
    }

    return results;
  };
};

exports.getAllByPlaceholder = getAllByPlaceholder;

var getAllByDisplayValue = function getAllByDisplayValue(instance) {
  return function getAllByDisplayValueFn(value) {
    var results = instance.findAll(function (node) {
      return getTextInputNodeByDisplayValue(node, value);
    });

    if (results.length === 0) {
      throw new _errors.ErrorWithStack("No instances found with display value: " + String(value), getAllByDisplayValueFn);
    }

    return results;
  };
};

exports.getAllByDisplayValue = getAllByDisplayValue;

var getAllByProps = function getAllByProps(instance) {
  return function getAllByPropsFn(props) {
    var results = instance.findAllByProps(props);

    if (results.length === 0) {
      throw new _errors.ErrorWithStack("No instances found with props:\n" + (0, _prettyFormat.default)(props), getAllByPropsFn);
    }

    return results;
  };
};

exports.getAllByProps = getAllByProps;

var getAllByTestId = function getAllByTestId(instance) {
  return function getAllByTestIdFn(testID) {
    var results = instance.findAllByProps({
      testID: testID
    }).filter(function (element) {
      return typeof element.type === 'string';
    });

    if (results.length === 0) {
      throw new _errors.ErrorWithStack("No instances found with testID: " + String(testID), getAllByTestIdFn);
    }

    return results;
  };
};

exports.getAllByTestId = getAllByTestId;

var getByAPI = function getByAPI(instance) {
  return {
    getByTestId: getByTestId(instance),
    getByName: getByName(instance),
    getByType: getByType(instance),
    getByText: getByText(instance),
    getByPlaceholder: getByPlaceholder(instance),
    getByDisplayValue: getByDisplayValue(instance),
    getByProps: getByProps(instance),
    getAllByTestId: getAllByTestId(instance),
    getAllByName: getAllByName(instance),
    getAllByType: getAllByType(instance),
    getAllByText: getAllByText(instance),
    getAllByPlaceholder: getAllByPlaceholder(instance),
    getAllByDisplayValue: getAllByDisplayValue(instance),
    getAllByProps: getAllByProps(instance)
  };
};

exports.getByAPI = getByAPI;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,