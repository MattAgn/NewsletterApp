{"version":3,"sources":["fetch-handler.js"],"names":["responseBuilder","require","requestUtils","FetchMock","AbortError","arguments","name","message","Error","captureStackTrace","constructor","resolve","url","options","request","response","responseIsFetch","then","fetchHandler","normalizeRequest","config","Request","route","executeRouter","done","_holdingPromises","push","Promise","res","rej","signal","abort","aborted","addEventListener","generateResponse","isMock","fallbackToNetwork","getNativeFetch","match","router","warnOnFallback","console","warn","method","isUnmatched","fallbackResponse","throws","Response","prototype","isPrototypeOf","responseConfig","fetchMock","routes","find","matcher","identifier","func","realFetch","isSandbox","fetch","args","_calls","module","exports"],"mappings":"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","sourcesContent":["const responseBuilder = require('./response-builder');\nconst requestUtils = require('./request-utils');\nconst FetchMock = {};\n\n// see https://heycam.github.io/webidl/#aborterror for the standardised interface\n// Note that this differs slightly from node-fetch\nclass AbortError extends Error {\n\tconstructor() {\n\t\tsuper(...arguments);\n\t\tthis.name = 'AbortError';\n\t\tthis.message = 'The operation was aborted.';\n\n\t\t// Do not include this class in the stacktrace\n\t\tError.captureStackTrace(this, this.constructor);\n\t}\n}\n\nconst resolve = async (\n\t{ response, responseIsFetch = false },\n\turl,\n\toptions,\n\trequest\n) => {\n\t// We want to allow things like\n\t// - function returning a Promise for a response\n\t// - delaying (using a timeout Promise) a function's execution to generate\n\t//   a response\n\t// Because of this we can't safely check for function before Promisey-ness,\n\t// or vice versa. So to keep it DRY, and flexible, we keep trying until we\n\t// have something that looks like neither Promise nor function\n\twhile (true) {\n\t\tif (typeof response === 'function') {\n\t\t\t// in the case of falling back to the network we need to make sure we're using\n\t\t\t// the original Request instance, not our normalised url + options\n\t\t\tresponse =\n\t\t\t\trequest && responseIsFetch\n\t\t\t\t\t? response(request)\n\t\t\t\t\t: response(url, options, request);\n\t\t} else if (typeof response.then === 'function') {\n\t\t\tresponse = await response;\n\t\t} else {\n\t\t\treturn response;\n\t\t}\n\t}\n};\n\nFetchMock.fetchHandler = function(url, options, request) {\n\t({ url, options, request } = requestUtils.normalizeRequest(\n\t\turl,\n\t\toptions,\n\t\tthis.config.Request\n\t));\n\n\tconst route = this.executeRouter(url, options, request);\n\n\t// this is used to power the .flush() method\n\tlet done;\n\tthis._holdingPromises.push(new this.config.Promise(res => (done = res)));\n\n\t// wrapped in this promise to make sure we respect custom Promise\n\t// constructors defined by the user\n\treturn new this.config.Promise((res, rej) => {\n\t\tif (options && options.signal) {\n\t\t\tconst abort = () => {\n\t\t\t\trej(new AbortError());\n\t\t\t\tdone();\n\t\t\t};\n\t\t\tif (options.signal.aborted) {\n\t\t\t\tabort();\n\t\t\t}\n\t\t\toptions.signal.addEventListener('abort', abort);\n\t\t}\n\n\t\tthis.generateResponse(route, url, options, request)\n\t\t\t.then(res, rej)\n\t\t\t.then(done, done);\n\t});\n};\n\nFetchMock.fetchHandler.isMock = true;\n\nFetchMock.executeRouter = function(url, options, request) {\n\tif (this.config.fallbackToNetwork === 'always') {\n\t\treturn { response: this.getNativeFetch(), responseIsFetch: true };\n\t}\n\n\tconst match = this.router(url, options, request);\n\n\tif (match) {\n\t\treturn match;\n\t}\n\n\tif (this.config.warnOnFallback) {\n\t\tconsole.warn(`Unmatched ${(options && options.method) || 'GET'} to ${url}`); // eslint-disable-line\n\t}\n\n\tthis.push({ url, options, request, isUnmatched: true });\n\n\tif (this.fallbackResponse) {\n\t\treturn { response: this.fallbackResponse };\n\t}\n\n\tif (!this.config.fallbackToNetwork) {\n\t\tthrow new Error(\n\t\t\t`fetch-mock: No fallback response defined for ${(options &&\n\t\t\t\toptions.method) ||\n\t\t\t\t'GET'} to ${url}`\n\t\t);\n\t}\n\n\treturn { response: this.getNativeFetch(), responseIsFetch: true };\n};\n\nFetchMock.generateResponse = async function(route, url, options, request) {\n\tconst response = await resolve(route, url, options, request);\n\n\t// If the response says to throw an error, throw it\n\t// Type checking is to deal with sinon spies having a throws property :-0\n\tif (response.throws && typeof response !== 'function') {\n\t\tthrow response.throws;\n\t}\n\n\t// If the response is a pre-made Response, respond with it\n\tif (this.config.Response.prototype.isPrototypeOf(response)) {\n\t\treturn response;\n\t}\n\n\t// finally, if we need to convert config into a response, we do it\n\treturn responseBuilder({\n\t\turl,\n\t\tresponseConfig: response,\n\t\tfetchMock: this,\n\t\troute\n\t});\n};\n\nFetchMock.router = function(url, options, request) {\n\tconst route = this.routes.find(route => route.matcher(url, options, request));\n\n\tif (route) {\n\t\tthis.push({\n\t\t\turl,\n\t\t\toptions,\n\t\t\trequest,\n\t\t\tidentifier: route.identifier\n\t\t});\n\t\treturn route;\n\t}\n};\n\nFetchMock.getNativeFetch = function() {\n\tconst func = this.realFetch || (this.isSandbox && this.config.fetch);\n\tif (!func) {\n\t\tthrow new Error(\n\t\t\t'fetch-mock: Falling back to network only available on gloabl fetch-mock, or by setting config.fetch on sandboxed fetch-mock'\n\t\t);\n\t}\n\treturn func;\n};\n\nFetchMock.push = function({ url, options, request, isUnmatched, identifier }) {\n\tconst args = [url, options];\n\targs.request = request;\n\targs.identifier = identifier;\n\targs.isUnmatched = isUnmatched;\n\tthis._calls.push(args);\n};\n\nmodule.exports = FetchMock;\n"]}