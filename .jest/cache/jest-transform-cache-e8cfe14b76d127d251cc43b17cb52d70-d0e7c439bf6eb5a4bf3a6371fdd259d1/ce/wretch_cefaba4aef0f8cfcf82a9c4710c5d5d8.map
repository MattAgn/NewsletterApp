{"version":3,"sources":["../../src/mix.ts","../../src/config.ts","../../src/perfs.ts","../../src/wretcher.ts","../../src/resolver.ts","../../src/middleware.ts","../../src/index.umd.ts"],"names":["mix","one","two","mergeArrays","clone","prop","hasOwnProperty","Array","config","defaults","errorType","polyfills","fetch","FormData","URLSearchParams","performance","PerformanceObserver","AbortController","polyfill","p","_a","_c","_d","_i","res","this","self","global","doThrow","Error","instance","args","onMatch","entries","name","callback","_performance","getEntriesByName","matches","length","reverse","clearMeasures","perfs","callbacks","delete","size","observer","disconnect","clearResourceTimings","_observer","forEach","Map","observe","conf","entryTypes","set","_url","_options","_catchers","_resolvers","_middlewares","_deferredChain","Wretcher","url","options","_e","_f","_g","_h","catchers","resolvers","middlewares","deferredChain","mixin","method","replace","selfFactory","split","qp","appendQueryParams","headerValues","headers","headerValue","Accept","Content-Type","Authorization","errorId","catcher","newMap","controller","signal","doResolve","clear","body","baseWretcher","json","reduce","acc","curr","resolver","contents","jsObject","content","JSON","stringify","formObject","convertFormData","input","queryString","usp","key","val","append","toString","formData","item","encodeQueryValue","value","encodeURIComponent","Object","keys","map","v","join","wretcher","opts","finalOptions","fetchController","timeout","ref","clearTimeout","fetchRequest","throwingPromise","then","response","ok","err","msg","status","catchersWrapper","promise","catch","has","get","bodyParser","funName","cb","_","responseChain","blob","arrayBuffer","text","setTimeout","time","abort","error","badRequest","unauthorized","forbidden","notFound","internalError","onAbort","chain","r","fetchFunction","reduceRight","idx","factory"],"mappings":"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","sourcesContent":["export const mix = function (one: object, two: object, mergeArrays: boolean = false) {\n    if(!one || !two || typeof one !== \"object\" || typeof two !== \"object\")\n        return one\n\n    const clone = { ...one }\n    for(const prop in two) {\n        if(two.hasOwnProperty(prop)) {\n            if(two[prop] instanceof Array && one[prop] instanceof Array) {\n                clone[prop] = mergeArrays ? [ ...one[prop], ...two[prop] ] : two[prop]\n            } else if(typeof two[prop] === \"object\" && typeof one[prop] === \"object\") {\n                clone[prop] = mix(one[prop], two[prop], mergeArrays)\n            } else {\n                clone[prop] = two[prop]\n            }\n        }\n    }\n\n    return clone\n}\n","declare const global\n\nconst config = {\n    // Default options\n    defaults: {},\n    // Error type\n    errorType: null,\n    // Polyfills\n    polyfills: {\n        fetch: null,\n        FormData: null,\n        URLSearchParams: null,\n        performance: null,\n        PerformanceObserver: null,\n        AbortController: null\n    },\n    polyfill(p: string, { doThrow = true, instance = false } = {}, ...args) {\n        const res = this.polyfills[p] ||\n            (typeof self !== \"undefined\" ? self[p] : null) ||\n            (typeof global !== \"undefined\" ? global[p] : null)\n        if(doThrow && !res) throw new Error(p + \" is not defined\")\n        return instance && res ? new res(...args) : res\n    }\n}\n\nexport default config\n","import conf from \"./config\"\n\nconst onMatch = (entries, name, callback, _performance) => {\n    if(!entries.getEntriesByName)\n        return false\n    const matches = entries.getEntriesByName(name)\n    if(matches && matches.length > 0) {\n        callback(matches.reverse()[0])\n        if(_performance.clearMeasures)\n            _performance.clearMeasures(name)\n        perfs.callbacks.delete(name)\n\n        if(perfs.callbacks.size < 1) {\n            perfs.observer.disconnect()\n            if(_performance.clearResourceTimings) {\n                _performance.clearResourceTimings()\n            }\n        }\n        return true\n    }\n    return false\n}\n\nconst lazyObserver = (_performance, _observer) => {\n    if(!perfs.observer && _performance && _observer) {\n        perfs.observer = new _observer(entries => {\n            perfs.callbacks.forEach((callback, name) => {\n                onMatch(entries, name, callback, _performance)\n            })\n        })\n        if(_performance.clearResourceTimings)\n            _performance.clearResourceTimings()\n    }\n    return perfs.observer\n}\n\nconst perfs = {\n    callbacks: new Map(),\n    observer: null,\n    observe: (name, callback) => {\n        if(!name || !callback)\n            return\n\n        const _performance = conf.polyfill(\"performance\", { doThrow: false })\n        const _observer  = conf.polyfill(\"PerformanceObserver\", { doThrow: false })\n\n        if(!lazyObserver(_performance, _observer))\n            return\n\n        if(!onMatch(_performance, name, callback, _performance)) {\n            if(perfs.callbacks.size < 1)\n                perfs.observer.observe({ entryTypes: [\"resource\", \"measure\"] })\n            perfs.callbacks.set(name, callback)\n        }\n\n    }\n}\n\nexport default perfs\n","import { mix } from \"./mix\"\nimport conf from \"./config\"\nimport { resolver, WretcherError, ResponseChain } from \"./resolver\"\nimport { ConfiguredMiddleware } from \"./middleware\"\n\nexport type WretcherOptions = RequestInit & {\n    [key: string]: any\n}\n\nexport type DeferredCallback = (wretcher: Wretcher, url: string, options: WretcherOptions) => Wretcher\n\n/**\n * The Wretcher class used to perform easy fetch requests.\n *\n * Immutability : almost every method of this class return a fresh Wretcher object.\n */\nexport class Wretcher {\n\n    protected constructor(\n        public _url: string,\n        public _options: WretcherOptions,\n        public _catchers: Map<number | string, (error: WretcherError, originalRequest: Wretcher) => void> = new Map(),\n        public _resolvers: Array<(resolver: ResponseChain, originalRequest: Wretcher) => any> = [],\n        public _middlewares: ConfiguredMiddleware[] = [],\n        public _deferredChain: DeferredCallback[] = []) {}\n\n    static factory(url = \"\", options: WretcherOptions = {}) { return new Wretcher(url, options) }\n    private selfFactory({ url = this._url, options = this._options, catchers = this._catchers,\n                resolvers = this._resolvers, middlewares = this._middlewares, deferredChain = this._deferredChain } = {}) {\n        return new Wretcher(url, {...options}, new Map(catchers), [...resolvers], [...middlewares], [...deferredChain])\n    }\n\n    /**\n     * Sets the default fetch options used for every subsequent fetch call.\n     * @param options New default options\n     * @param mixin If true, mixes in instead of replacing the existing options\n     */\n    defaults(options: WretcherOptions, mixin = false) {\n        conf.defaults = mixin ? mix(conf.defaults, options) : options\n        return this\n    }\n\n    /**\n     * Sets the method (text, json ...) used to parse the data contained in the response body in case of an HTTP error.\n     *\n     * Persists for every subsequent requests.\n     *\n     * Default is \"text\".\n     */\n    errorType(method: \"text\" | \"json\") {\n        conf.errorType = method\n        return this\n    }\n\n    /**\n     * Sets the non-global polyfills which will be used for every subsequent calls.\n     *\n     * Needed for libraries like [fetch-ponyfill](https://github.com/qubyte/fetch-ponyfill).\n     *\n     * @param polyfills An object containing the polyfills.\n     */\n    polyfills(polyfills: Partial<typeof conf.polyfills>) {\n        conf.polyfills = { ...conf.polyfills, ...polyfills }\n        return this\n    }\n\n    /**\n     * Returns a new Wretcher object with the argument url appended and the same options.\n     * @param url String url\n     * @param replace Boolean If true, replaces the current url instead of appending\n     */\n    url(url: string, replace = false) {\n        if(replace)\n            return this.selfFactory({ url })\n        const split = this._url.split(\"?\")\n        return this.selfFactory({\n            url: split.length > 1 ?\n                split[0] + url + \"?\" + split[1] :\n                this._url + url\n        })\n    }\n\n    /**\n     * Returns a new Wretcher object with the same url and new options.\n     * @param options New options\n     * @param mixin If true, mixes in instead of replacing the existing options\n     */\n    options(options: WretcherOptions, mixin = true) {\n        return this.selfFactory({ options: mixin ? mix(this._options, options) : options })\n    }\n\n    /**\n     * Converts a javascript object to query parameters,\n     * then appends this query string to the current url.\n     *\n     * If given a string, use the string as the query verbatim.\n     *\n     * ```\n     * let w = wretch(\"http://example.com\") // url is http://example.com\n     *\n     * // Chain query calls\n     * w = w.query({ a: 1, b : 2 }) // url is now http://example.com?a=1&b=2\n     * w = w.query(\"foo-bar-baz-woz\") // url is now http://example.com?a=1&b=2&foo-bar-baz-woz\n     *\n     * // Pass true as the second argument to replace existing query parameters\n     * w = w.query(\"c=3&d=4\", true) // url is now http://example.com?c=3&d=4\n     * ```\n     *\n     * @param qp An object which will be converted, or a string which will be used verbatim.\n     */\n    query(qp: object | string, replace: boolean = false) {\n        return this.selfFactory({ url: appendQueryParams(this._url, qp, replace) })\n    }\n\n    /**\n     * Set request headers.\n     * @param headerValues An object containing header keys and values\n     */\n    headers(headerValues: { [headerName: string]: string }) {\n        return this.selfFactory({ options: mix(this._options, { headers: headerValues || {} }) })\n    }\n\n    /**\n     * Shortcut to set the \"Accept\" header.\n     * @param headerValue Header value\n     */\n    accept(headerValue: string) {\n        return this.headers({ Accept : headerValue })\n    }\n\n    /**\n     * Shortcut to set the \"Content-Type\" header.\n     * @param headerValue Header value\n     */\n    content(headerValue: string) {\n        return this.headers({ \"Content-Type\" : headerValue })\n    }\n\n    /**\n     * Shortcut to set the \"Authorization\" header.\n     * @param headerValue Header value\n     */\n    auth(headerValue: string) {\n        return this.headers({ Authorization: headerValue })\n    }\n\n    /**\n     * Adds a default catcher which will be called on every subsequent request error when the error code matches.\n     * @param errorId Error code or name\n     * @param catcher: The catcher method\n     */\n    catcher(errorId: number | string, catcher: (error: WretcherError, originalRequest: Wretcher) => any) {\n        const newMap = new Map(this._catchers)\n        newMap.set(errorId, catcher)\n        return this.selfFactory({ catchers: newMap })\n    }\n\n    /**\n     * Associates a custom signal with the request.\n     * @param controller : An AbortController\n     */\n    signal(controller: AbortController) {\n        return this.selfFactory({ options: { ...this._options, signal: controller.signal }})\n    }\n\n    /**\n     * Program a resolver to perform response chain tasks automatically.\n     * @param doResolve : Resolver callback\n     */\n    resolve(doResolve: (chain: ResponseChain, originalRequest: Wretcher) => ResponseChain | Promise<any>, clear: boolean = false) {\n        return this.selfFactory({ resolvers: clear ? [ doResolve ] : [ ...this._resolvers, doResolve ]})\n    }\n\n    /**\n     * Defer wretcher methods that will be chained and called just before the request is performed.\n     */\n    defer(callback: DeferredCallback, clear = false) {\n        return this.selfFactory({\n            deferredChain: clear ? [callback] : [ ...this._deferredChain, callback ]\n        })\n    }\n\n    /**\n     * Add middlewares to intercept a request before being sent.\n     */\n    middlewares(middlewares: ConfiguredMiddleware[], clear = false) {\n        return this.selfFactory({\n            middlewares: clear ? middlewares : [ ...this._middlewares, ...middlewares ]\n        })\n    }\n\n    private method(method, options = {}, body = null) {\n        let baseWretcher =\n            !body ? this :\n            typeof body === \"object\" ? this.json(body) :\n            this.body(body)\n        baseWretcher = baseWretcher.options({ ...options, method })\n        const deferredWretcher = baseWretcher._deferredChain.reduce((acc: Wretcher, curr) => curr(acc, acc._url, acc._options), baseWretcher)\n        return resolver(deferredWretcher)\n    }\n\n    /**\n     * Performs a get request.\n     */\n    get(options?) {\n        return this.method(\"GET\", options)\n    }\n    /**\n     * Performs a delete request.\n     */\n    delete(options?) {\n        return this.method(\"DELETE\", options)\n    }\n    /**\n     * Performs a put request.\n     */\n    put(body?, options?) {\n        return this.method(\"PUT\", options, body)\n    }\n    /**\n     * Performs a post request.\n     */\n    post(body?, options?) {\n        return this.method(\"POST\", options, body)\n    }\n    /**\n     * Performs a patch request.\n     */\n    patch(body?, options?) {\n        return this.method(\"PATCH\", options, body)\n    }\n    /**\n     * Performs a head request.\n     */\n    head(options?) {\n        return this.method(\"HEAD\", options)\n    }\n    /**\n     * Performs an options request\n     */\n    opts(options?) {\n        return this.method(\"OPTIONS\", options)\n    }\n    /**\n     * Replay a request.\n     */\n    replay(options?) {\n        return this.method(this._options.method, options)\n    }\n\n    /**\n     * Sets the request body with any content.\n     * @param contents The body contents\n     */\n    body(contents: any) {\n        return this.selfFactory({ options: { ...this._options, body: contents }})\n    }\n    /**\n     * Sets the content type header, stringifies an object and sets the request body.\n     * @param jsObject An object which will be serialized into a JSON\n     */\n    json(jsObject: object) {\n        return this.content(\"application/json\").body(JSON.stringify(jsObject))\n    }\n    /**\n     * Converts the javascript object to a FormData and sets the request body.\n     * @param formObject An object which will be converted to a FormData\n     */\n    formData(formObject: object) {\n        return this.body(convertFormData(formObject))\n    }\n    /**\n     * Converts the input to an url encoded string and sets the content-type header and body.\n     * If the input argument is already a string, skips the conversion part.\n     *\n     * @param input An object to convert into an url encoded string or an already encoded string\n     */\n    formUrl(input: (object | string)) {\n        return this\n            .body(typeof input === \"string\" ? input : convertFormUrl(input))\n            .content(\"application/x-www-form-urlencoded\")\n    }\n}\n\n// Internal helpers\n\nconst appendQueryParams = (url: string, qp: object | string, replace: boolean) => {\n    let queryString\n\n    if(typeof qp === \"string\") {\n        queryString = qp\n    } else {\n        const usp = conf.polyfill(\"URLSearchParams\", { instance: true })\n        for(const key in qp) {\n            if(qp[key] instanceof Array) {\n                for(const val of qp[key])\n                    usp.append(key, val)\n            } else {\n                usp.append(key, qp[key])\n            }\n        }\n        queryString = usp.toString()\n    }\n\n    const split = url.split(\"?\")\n    if(replace || split.length < 2)\n        return split[0] + \"?\" + queryString\n\n    return url + \"&\" + queryString\n}\n\nfunction convertFormData(formObject: object) {\n    const formData = conf.polyfill(\"FormData\", { instance: true })\n    for(const key in formObject) {\n        if(formObject[key] instanceof Array) {\n            for(const item of formObject[key])\n                formData.append(key + \"[]\", item)\n        } else {\n            formData.append(key, formObject[key])\n        }\n    }\n\n    return formData\n}\n\nfunction encodeQueryValue(key: string, value: unknown) {\n    return encodeURIComponent(key) +\n    \"=\" +\n    encodeURIComponent(\n        typeof value === \"object\" ?\n            JSON.stringify(value) :\n        \"\" + value\n    )\n}\nfunction convertFormUrl(formObject: object) {\n    return Object.keys(formObject)\n        .map(key => {\n            const value = formObject[key]\n            if(value instanceof Array) {\n                return value.map(v => encodeQueryValue(key, v)).join(\"&\")\n            }\n            return encodeQueryValue(key, value)\n        })\n        .join(\"&\")\n}\n","import { Wretcher } from \"./wretcher\"\nimport { mix } from \"./mix\"\nimport conf from \"./config\"\nimport perfs from \"./perfs\"\nimport { middlewareHelper } from \"./middleware\"\n\nexport type WretcherError = Error & { status: number, response: WretcherResponse, text?: string, json?: any }\nexport type WretcherErrorCallback = (error: WretcherError, originalRequest: Wretcher) => any\nexport type WretcherResponse = Response & { [key: string]: any }\nexport type ResponseChain = {\n    // Response types\n    res: <Result = WretcherResponse>(cb?: (type: WretcherResponse) => Result) => Promise<Result>,\n    json: <Result = {[key: string]: any}>(cb?: (type: {[key: string]: any}) => Result) => Promise<Result>,\n    blob: <Result = Blob>(cb?: (type: Blob) => Result) => Promise<Result>,\n    formData: <Result = FormData>(cb?: (type: FormData) => Result) => Promise<Result>,\n    arrayBuffer: <Result = ArrayBuffer>(cb?: (type: ArrayBuffer) => Result) => Promise<Result>,\n    text: <Result = string>(cb?: (type: string) => Result) => Promise<Result>,\n    // Extras\n    perfs: (cb?: (timing: any) => void) => ResponseChain,\n    setTimeout: (time: number, controller?: AbortController) => ResponseChain,\n    controller: () => [any, ResponseChain],\n    // Catchers\n    error: (code: (number | string), cb: WretcherErrorCallback) => ResponseChain,\n    badRequest: (cb: WretcherErrorCallback) => ResponseChain,\n    unauthorized: (cb: WretcherErrorCallback) => ResponseChain,\n    forbidden: (cb: WretcherErrorCallback) => ResponseChain,\n    notFound: (cb: WretcherErrorCallback) => ResponseChain,\n    timeout: (cb: WretcherErrorCallback) => ResponseChain,\n    internalError: (cb: WretcherErrorCallback) => ResponseChain,\n    onAbort: (cb: WretcherErrorCallback) => ResponseChain\n}\n\nexport const resolver = (wretcher: Wretcher) => {\n    const {\n        _url: url,\n        _catchers: _catchers,\n        _resolvers: resolvers,\n        _middlewares: middlewares,\n        _options: opts\n    } = wretcher\n    const catchers = new Map(_catchers)\n    const finalOptions = mix(conf.defaults, opts)\n    const fetchController = conf.polyfill(\"AbortController\", { doThrow: false, instance: true })\n    if(!finalOptions[\"signal\"] && fetchController) {\n        finalOptions[\"signal\"] = fetchController.signal\n    }\n    // Request timeout\n    const timeout = {\n        ref: null,\n        clear() {\n            if(timeout.ref) {\n                clearTimeout(timeout.ref)\n                timeout.ref = null\n            }\n        }\n    }\n    // The generated fetch request\n    const fetchRequest = middlewareHelper(middlewares)(conf.polyfill(\"fetch\"))(url, finalOptions)\n    // Throws on an http error\n    const throwingPromise: Promise<void | WretcherResponse> = fetchRequest.then(response => {\n        timeout.clear()\n        if (!response.ok) {\n            return response[conf.errorType || \"text\"]().then(msg => {\n                // Enhances the error object\n                const err = new Error(msg)\n                err[conf.errorType || \"text\"] = msg\n                err[\"status\"] = response.status\n                err[\"response\"] = response\n                throw err\n            })\n        }\n        return response\n    })\n    // Wraps the Promise in order to dispatch the error to a matching catcher\n    const catchersWrapper = <T>(promise: Promise<T>): Promise<void | T> => {\n        return promise.catch(err => {\n            timeout.clear()\n            if(catchers.has(err.status))\n                return catchers.get(err.status)(err, wretcher)\n            else if(catchers.has(err.name))\n                return catchers.get(err.name)(err, wretcher)\n            else\n                throw err\n        })\n    }\n    // Enforces the proper promise type when a body parsing method is called.\n    type BodyParser = <Type>(funName: string | null) => <Result = void>(cb?: (type: Type) => Result) => Promise<Result>\n    const bodyParser: BodyParser = <T>(funName) => <R>(cb) => funName ?\n        // If a callback is provided, then callback with the body result otherwise return the parsed body itself.\n        catchersWrapper(throwingPromise.then(_ => _ && _[funName]()).then(_ => _ && cb && cb(_) || _)) :\n        // No body parsing method - return the response\n        catchersWrapper(throwingPromise.then(_ => _ && cb && cb(_) || _))\n\n    const responseChain: ResponseChain = {\n        /**\n         * Retrieves the raw result as a promise.\n         */\n        res: bodyParser<WretcherResponse>(null),\n        /**\n         * Retrieves the result as a parsed JSON object.\n         */\n        json: bodyParser<any>(\"json\"),\n        /**\n         * Retrieves the result as a Blob object.\n         */\n        blob: bodyParser<Blob>(\"blob\"),\n        /**\n         * Retrieves the result as a FormData object.\n         */\n        formData: bodyParser<FormData>(\"formData\"),\n        /**\n         * Retrieves the result as an ArrayBuffer object.\n         */\n        arrayBuffer: bodyParser<ArrayBuffer>(\"arrayBuffer\"),\n        /**\n         * Retrieves the result as a string.\n         */\n        text: bodyParser<string>(\"text\"),\n        /**\n         * Performs a callback on the API performance timings of the request.\n         *\n         * Warning: Still experimental on browsers and node.js\n         */\n        perfs: cb => {\n            fetchRequest.then(res => perfs.observe(res.url, cb))\n            return responseChain\n        },\n        /**\n         * Aborts the request after a fixed time.\n         *\n         * @param time Time in milliseconds\n         * @param controller A custom controller\n         */\n        setTimeout: (time, controller = fetchController) => {\n            timeout.clear()\n            timeout.ref = setTimeout(() => controller.abort(), time)\n            return responseChain\n        },\n        /**\n         * Returns the automatically generated AbortController alongside the current wretch response as a pair.\n         */\n        controller: () => [ fetchController, responseChain ],\n        /**\n         * Catches an http response with a specific error code or name and performs a callback.\n         */\n        error(errorId, cb) {\n            catchers.set(errorId, cb)\n            return responseChain\n        },\n        /**\n         * Catches a bad request (http code 400) and performs a callback.\n         */\n        badRequest: cb => responseChain.error(400, cb),\n        /**\n         * Catches an unauthorized request (http code 401) and performs a callback.\n         */\n        unauthorized: cb => responseChain.error(401, cb),\n        /**\n         * Catches a forbidden request (http code 403) and performs a callback.\n         */\n        forbidden: cb => responseChain.error(403, cb),\n        /**\n         * Catches a \"not found\" request (http code 404) and performs a callback.\n         */\n        notFound: cb => responseChain.error(404, cb),\n        /**\n         * Catches a timeout (http code 408) and performs a callback.\n         */\n        timeout: cb => responseChain.error(408, cb),\n        /**\n         * Catches an internal server error (http code 500) and performs a callback.\n         */\n        internalError: cb => responseChain.error(500, cb),\n        /**\n         * Catches an AbortError and performs a callback.\n         */\n        onAbort: cb => responseChain.error(\"AbortError\", cb)\n    }\n\n    return resolvers.reduce((chain, r) => r(chain, wretcher), responseChain) as (ResponseChain & Promise<any>)\n}\n","import { WretcherOptions } from \"./wretcher\"\nimport { WretcherResponse } from \"./resolver\"\n\nexport type Middleware = (options?: {[key: string]: any}) => ConfiguredMiddleware\nexport type ConfiguredMiddleware = (next: FetchLike) => FetchLike\nexport type FetchLike = (url: string, opts: WretcherOptions) => Promise<WretcherResponse>\n\nexport const middlewareHelper = (middlewares: ConfiguredMiddleware[]) => (fetchFunction: FetchLike): FetchLike => {\n    return (\n        middlewares.length === 0 ?\n           fetchFunction :\n        middlewares.length === 1 ?\n            middlewares[0](fetchFunction) :\n        middlewares.reduceRight((acc, curr, idx): any =>\n            (idx === middlewares.length - 2) ? curr(acc(fetchFunction)) : curr(acc as any)\n        )\n    ) as FetchLike\n}\n","import { Wretcher } from \"./wretcher\"\n\nconst factory = Wretcher.factory\nfactory[\"default\"] = Wretcher.factory\n\n/**\n * Return a fresh Wretcher instance.\n */\nexport default factory\n"]}