fed0d4c95cdc6435865d4f3001166053
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var EmitterSubscription = require('../vendor/emitter/EmitterSubscription');

var PropTypes = require('prop-types');

var RCTDeviceEventEmitter = require('../EventEmitter/RCTDeviceEventEmitter');

var React = require('react');

var ReactNative = require('../Renderer/shims/ReactNative');

var StyleSheet = require('../StyleSheet/StyleSheet');

var View = require('../Components/View/View');

var AppContainer = function (_React$Component) {
  (0, _inherits2.default)(AppContainer, _React$Component);

  function AppContainer() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, AppContainer);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(AppContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.state = {
      inspector: null,
      mainKey: 1
    };
    _this._subscription = null;
    return _this;
  }

  (0, _createClass2.default)(AppContainer, [{
    key: "getChildContext",
    value: function getChildContext() {
      return {
        rootTag: this.props.rootTag
      };
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      if (__DEV__) {
        if (!global.__RCTProfileIsProfiling) {
          this._subscription = RCTDeviceEventEmitter.addListener('toggleElementInspector', function () {
            var Inspector = require('../Inspector/Inspector');

            var inspector = _this2.state.inspector ? null : React.createElement(Inspector, {
              inspectedViewTag: ReactNative.findNodeHandle(_this2._mainRef),
              onRequestRerenderApp: function onRequestRerenderApp(updateInspectedViewTag) {
                _this2.setState(function (s) {
                  return {
                    mainKey: s.mainKey + 1
                  };
                }, function () {
                  return updateInspectedViewTag(ReactNative.findNodeHandle(_this2._mainRef));
                });
              }
            });

            _this2.setState({
              inspector: inspector
            });
          });
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this._subscription != null) {
        this._subscription.remove();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var yellowBox = null;

      if (__DEV__) {
        if (!global.__RCTProfileIsProfiling) {
          var YellowBox = require('../YellowBox/YellowBox');

          yellowBox = React.createElement(YellowBox, null);
        }
      }

      var innerView = React.createElement(View, {
        collapsable: !this.state.inspector,
        key: this.state.mainKey,
        pointerEvents: "box-none",
        style: styles.appContainer,
        ref: function ref(_ref) {
          _this3._mainRef = _ref;
        }
      }, this.props.children);
      var Wrapper = this.props.WrapperComponent;

      if (Wrapper != null) {
        innerView = React.createElement(Wrapper, null, innerView);
      }

      return React.createElement(View, {
        style: styles.appContainer,
        pointerEvents: "box-none"
      }, innerView, yellowBox, this.state.inspector);
    }
  }]);
  return AppContainer;
}(React.Component);

AppContainer.childContextTypes = {
  rootTag: PropTypes.number
};
var styles = StyleSheet.create({
  appContainer: {
    flex: 1
  }
});

if (__DEV__) {
  if (!global.__RCTProfileIsProfiling) {
    var YellowBox = require('../YellowBox/YellowBox');

    YellowBox.install();
  }
}

module.exports = AppContainer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,