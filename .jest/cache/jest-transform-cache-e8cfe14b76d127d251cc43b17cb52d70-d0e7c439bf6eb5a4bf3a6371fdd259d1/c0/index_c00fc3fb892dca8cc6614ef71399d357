0287e32f13f6a9f377bfe2c005f4b8cb
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var punycode = require("punycode");

var regexes = require("./lib/regexes.js");

var mappingTable = require("./lib/mappingTable.json");

function containsNonASCII(str) {
  return /[^\x00-\x7F]/.test(str);
}

function findStatus(val, _ref) {
  var useSTD3ASCIIRules = _ref.useSTD3ASCIIRules;
  var start = 0;
  var end = mappingTable.length - 1;

  while (start <= end) {
    var mid = Math.floor((start + end) / 2);
    var target = mappingTable[mid];

    if (target[0][0] <= val && target[0][1] >= val) {
      if (target[1].startsWith("disallowed_STD3_")) {
        var newStatus = useSTD3ASCIIRules ? "disallowed" : target[1].slice(16);
        return [newStatus].concat((0, _toConsumableArray2.default)(target.slice(2)));
      }

      return target.slice(1);
    } else if (target[0][0] > val) {
      end = mid - 1;
    } else {
      start = mid + 1;
    }
  }

  return null;
}

function mapChars(domainName, _ref2) {
  var useSTD3ASCIIRules = _ref2.useSTD3ASCIIRules,
      processingOption = _ref2.processingOption;
  var hasError = false;
  var processed = "";

  for (var _iterator = domainName, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
    var _ref3;

    if (_isArray) {
      if (_i >= _iterator.length) break;
      _ref3 = _iterator[_i++];
    } else {
      _i = _iterator.next();
      if (_i.done) break;
      _ref3 = _i.value;
    }

    var _ch = _ref3;

    var _findStatus = findStatus(_ch.codePointAt(0), {
      useSTD3ASCIIRules: useSTD3ASCIIRules
    }),
        _findStatus2 = (0, _slicedToArray2.default)(_findStatus, 2),
        status = _findStatus2[0],
        mapping = _findStatus2[1];

    switch (status) {
      case "disallowed":
        hasError = true;
        processed += _ch;
        break;

      case "ignored":
        break;

      case "mapped":
        processed += mapping;
        break;

      case "deviation":
        if (processingOption === "transitional") {
          processed += mapping;
        } else {
          processed += _ch;
        }

        break;

      case "valid":
        processed += _ch;
        break;
    }
  }

  return {
    string: processed,
    error: hasError
  };
}

function validateLabel(label, _ref4) {
  var checkHyphens = _ref4.checkHyphens,
      checkBidi = _ref4.checkBidi,
      checkJoiners = _ref4.checkJoiners,
      processingOption = _ref4.processingOption,
      useSTD3ASCIIRules = _ref4.useSTD3ASCIIRules;

  if (label.normalize("NFC") !== label) {
    return false;
  }

  var codePoints = Array.from(label);

  if (checkHyphens) {
    if (codePoints[2] === "-" && codePoints[3] === "-" || label.startsWith("-") || label.endsWith("-")) {
      return false;
    }
  }

  if (label.includes(".") || codePoints.length > 0 && regexes.combiningMarks.test(codePoints[0])) {
    return false;
  }

  for (var _i2 = 0, _codePoints = codePoints; _i2 < _codePoints.length; _i2++) {
    var ch = _codePoints[_i2];

    var _findStatus3 = findStatus(ch.codePointAt(0), {
      useSTD3ASCIIRules: useSTD3ASCIIRules
    }),
        _findStatus4 = (0, _slicedToArray2.default)(_findStatus3, 1),
        status = _findStatus4[0];

    if (processingOption === "transitional" && status !== "valid" || processingOption === "nontransitional" && status !== "valid" && status !== "deviation") {
      return false;
    }
  }

  if (checkJoiners) {
    var last = 0;

    for (var _iterator2 = codePoints.entries(), _isArray2 = Array.isArray(_iterator2), _i3 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
      var _ref7;

      if (_isArray2) {
        if (_i3 >= _iterator2.length) break;
        _ref7 = _iterator2[_i3++];
      } else {
        _i3 = _iterator2.next();
        if (_i3.done) break;
        _ref7 = _i3.value;
      }

      var _ref8 = _ref7;

      var _ref6 = (0, _slicedToArray2.default)(_ref8, 2);

      var _i4 = _ref6[0];
      var _ch3 = _ref6[1];

      if (_ch3 === "\u200C" || _ch3 === "\u200D") {
        if (_i4 > 0) {
          if (regexes.combiningClassVirama.test(codePoints[_i4 - 1])) {
            continue;
          }

          if (_ch3 === "\u200C") {
            var next = codePoints.indexOf("\u200C", _i4 + 1);
            var test = next < 0 ? codePoints.slice(last) : codePoints.slice(last, next);

            if (regexes.validZWNJ.test(test.join(""))) {
              last = _i4 + 1;
              continue;
            }
          }
        }

        return false;
      }
    }
  }

  if (checkBidi) {
    var rtl;

    if (regexes.bidiS1LTR.test(codePoints[0])) {
      rtl = false;
    } else if (regexes.bidiS1RTL.test(codePoints[0])) {
      rtl = true;
    } else {
      return false;
    }

    if (rtl) {
      if (!regexes.bidiS2.test(label) || !regexes.bidiS3.test(label) || regexes.bidiS4EN.test(label) && regexes.bidiS4AN.test(label)) {
        return false;
      }
    } else if (!regexes.bidiS5.test(label) || !regexes.bidiS6.test(label)) {
      return false;
    }
  }

  return true;
}

function isBidiDomain(labels) {
  var domain = labels.map(function (label) {
    if (label.startsWith("xn--")) {
      try {
        return punycode.decode(label.substring(4));
      } catch (err) {
        return "";
      }
    }

    return label;
  }).join(".");
  return regexes.bidiDomain.test(domain);
}

function processing(domainName, options) {
  var processingOption = options.processingOption;

  var _mapChars = mapChars(domainName, options),
      string = _mapChars.string,
      error = _mapChars.error;

  string = string.normalize("NFC");
  var labels = string.split(".");
  var isBidi = isBidiDomain(labels);

  for (var _iterator3 = labels.entries(), _isArray3 = Array.isArray(_iterator3), _i5 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
    var _ref11;

    if (_isArray3) {
      if (_i5 >= _iterator3.length) break;
      _ref11 = _iterator3[_i5++];
    } else {
      _i5 = _iterator3.next();
      if (_i5.done) break;
      _ref11 = _i5.value;
    }

    var _ref12 = _ref11;

    var _ref10 = (0, _slicedToArray2.default)(_ref12, 2);

    var _i6 = _ref10[0];
    var _origLabel = _ref10[1];
    var label = _origLabel;
    var curProcessing = processingOption;

    if (label.startsWith("xn--")) {
      try {
        label = punycode.decode(label.substring(4));
        labels[_i6] = label;
      } catch (err) {
        error = true;
        continue;
      }

      curProcessing = "nontransitional";
    }

    if (error) {
      continue;
    }

    var validation = validateLabel(label, (0, _extends2.default)({}, options, {
      processingOption: curProcessing,
      checkBidi: options.checkBidi && isBidi
    }));

    if (!validation) {
      error = true;
    }
  }

  return {
    string: labels.join("."),
    error: error
  };
}

function toASCII(domainName) {
  var _ref13 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref13$checkHyphens = _ref13.checkHyphens,
      checkHyphens = _ref13$checkHyphens === void 0 ? false : _ref13$checkHyphens,
      _ref13$checkBidi = _ref13.checkBidi,
      checkBidi = _ref13$checkBidi === void 0 ? false : _ref13$checkBidi,
      _ref13$checkJoiners = _ref13.checkJoiners,
      checkJoiners = _ref13$checkJoiners === void 0 ? false : _ref13$checkJoiners,
      _ref13$useSTD3ASCIIRu = _ref13.useSTD3ASCIIRules,
      useSTD3ASCIIRules = _ref13$useSTD3ASCIIRu === void 0 ? false : _ref13$useSTD3ASCIIRu,
      _ref13$processingOpti = _ref13.processingOption,
      processingOption = _ref13$processingOpti === void 0 ? "nontransitional" : _ref13$processingOpti,
      _ref13$verifyDNSLengt = _ref13.verifyDNSLength,
      verifyDNSLength = _ref13$verifyDNSLengt === void 0 ? false : _ref13$verifyDNSLengt;

  if (processingOption !== "transitional" && processingOption !== "nontransitional") {
    throw new RangeError("processingOption must be either transitional or nontransitional");
  }

  var result = processing(domainName, {
    processingOption: processingOption,
    checkHyphens: checkHyphens,
    checkBidi: checkBidi,
    checkJoiners: checkJoiners,
    useSTD3ASCIIRules: useSTD3ASCIIRules
  });
  var labels = result.string.split(".");
  labels = labels.map(function (l) {
    if (containsNonASCII(l)) {
      try {
        return "xn--" + punycode.encode(l);
      } catch (e) {
        result.error = true;
      }
    }

    return l;
  });

  if (verifyDNSLength) {
    var total = labels.join(".").length;

    if (total > 253 || total === 0) {
      result.error = true;
    }

    for (var i = 0; i < labels.length; ++i) {
      if (labels[i].length > 63 || labels[i].length === 0) {
        result.error = true;
        break;
      }
    }
  }

  if (result.error) {
    return null;
  }

  return labels.join(".");
}

function toUnicode(domainName) {
  var _ref14 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref14$checkHyphens = _ref14.checkHyphens,
      checkHyphens = _ref14$checkHyphens === void 0 ? false : _ref14$checkHyphens,
      _ref14$checkBidi = _ref14.checkBidi,
      checkBidi = _ref14$checkBidi === void 0 ? false : _ref14$checkBidi,
      _ref14$checkJoiners = _ref14.checkJoiners,
      checkJoiners = _ref14$checkJoiners === void 0 ? false : _ref14$checkJoiners,
      _ref14$useSTD3ASCIIRu = _ref14.useSTD3ASCIIRules,
      useSTD3ASCIIRules = _ref14$useSTD3ASCIIRu === void 0 ? false : _ref14$useSTD3ASCIIRu;

  var result = processing(domainName, {
    processingOption: "nontransitional",
    checkHyphens: checkHyphens,
    checkBidi: checkBidi,
    checkJoiners: checkJoiners,
    useSTD3ASCIIRules: useSTD3ASCIIRules
  });
  return {
    domain: result.string,
    error: result.error
  };
}

module.exports = {
  toASCII: toASCII,
  toUnicode: toUnicode
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,