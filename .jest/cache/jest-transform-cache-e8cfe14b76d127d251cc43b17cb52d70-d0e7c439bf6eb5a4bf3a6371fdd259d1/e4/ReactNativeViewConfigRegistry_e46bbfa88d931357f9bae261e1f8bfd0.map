{"version":3,"sources":["ReactNativeViewConfigRegistry.js"],"names":["invariant","require","customBubblingEventTypes","customDirectEventTypes","eventTypes","exports","viewConfigCallbacks","Map","viewConfigs","processEventTypes","viewConfig","bubblingEventTypes","directEventTypes","__DEV__","topLevelType","register","name","callback","has","set","get","test"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nimport type {\n  ReactNativeBaseComponentViewConfig,\n  ViewConfigGetter,\n} from './ReactNativeTypes';\n\nconst invariant = require('invariant');\n\n// Event configs\nconst customBubblingEventTypes = {};\nconst customDirectEventTypes = {};\nconst eventTypes = {};\n\nexports.customBubblingEventTypes = customBubblingEventTypes;\nexports.customDirectEventTypes = customDirectEventTypes;\nexports.eventTypes = eventTypes;\n\nconst viewConfigCallbacks = new Map();\nconst viewConfigs = new Map();\n\nfunction processEventTypes(\n  viewConfig: ReactNativeBaseComponentViewConfig<>,\n): void {\n  const {bubblingEventTypes, directEventTypes} = viewConfig;\n\n  if (__DEV__) {\n    if (bubblingEventTypes != null && directEventTypes != null) {\n      for (const topLevelType in directEventTypes) {\n        invariant(\n          bubblingEventTypes[topLevelType] == null,\n          'Event cannot be both direct and bubbling: %s',\n          topLevelType,\n        );\n      }\n    }\n  }\n\n  if (bubblingEventTypes != null) {\n    for (const topLevelType in bubblingEventTypes) {\n      if (customBubblingEventTypes[topLevelType] == null) {\n        eventTypes[topLevelType] = customBubblingEventTypes[topLevelType] =\n          bubblingEventTypes[topLevelType];\n      }\n    }\n  }\n\n  if (directEventTypes != null) {\n    for (const topLevelType in directEventTypes) {\n      if (customDirectEventTypes[topLevelType] == null) {\n        eventTypes[topLevelType] = customDirectEventTypes[topLevelType] =\n          directEventTypes[topLevelType];\n      }\n    }\n  }\n}\n\n/**\n * Registers a native view/component by name.\n * A callback is provided to load the view config from UIManager.\n * The callback is deferred until the view is actually rendered.\n * This is done to avoid causing Prepack deopts.\n */\nexports.register = function(name: string, callback: ViewConfigGetter): string {\n  invariant(\n    !viewConfigCallbacks.has(name),\n    'Tried to register two views with the same name %s',\n    name,\n  );\n  viewConfigCallbacks.set(name, callback);\n  return name;\n};\n\n/**\n * Retrieves a config for the specified view.\n * If this is the first time the view has been used,\n * This configuration will be lazy-loaded from UIManager.\n */\nexports.get = function(name: string): ReactNativeBaseComponentViewConfig<> {\n  let viewConfig;\n  if (!viewConfigs.has(name)) {\n    const callback = viewConfigCallbacks.get(name);\n    if (typeof callback !== 'function') {\n      invariant(\n        false,\n        'View config not found for name %s.%s',\n        name,\n        typeof name[0] === 'string' && /[a-z]/.test(name[0])\n          ? ' Make sure to start component names with a capital letter.'\n          : '',\n      );\n    }\n    viewConfigCallbacks.set(name, null);\n    viewConfig = callback();\n    processEventTypes(viewConfig);\n    viewConfigs.set(name, viewConfig);\n  } else {\n    viewConfig = viewConfigs.get(name);\n  }\n  invariant(viewConfig, 'View config not found for name %s', name);\n  return viewConfig;\n};\n"]}