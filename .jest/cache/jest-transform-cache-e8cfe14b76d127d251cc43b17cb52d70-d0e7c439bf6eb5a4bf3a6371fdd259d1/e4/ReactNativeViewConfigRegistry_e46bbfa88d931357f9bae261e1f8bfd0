06ceabcff37e1cd4a271e1a6cc70345c
'use strict';

var invariant = require('invariant');

var customBubblingEventTypes = {};
var customDirectEventTypes = {};
var eventTypes = {};
exports.customBubblingEventTypes = customBubblingEventTypes;
exports.customDirectEventTypes = customDirectEventTypes;
exports.eventTypes = eventTypes;
var viewConfigCallbacks = new Map();
var viewConfigs = new Map();

function processEventTypes(viewConfig) {
  var bubblingEventTypes = viewConfig.bubblingEventTypes,
      directEventTypes = viewConfig.directEventTypes;

  if (__DEV__) {
    if (bubblingEventTypes != null && directEventTypes != null) {
      for (var topLevelType in directEventTypes) {
        invariant(bubblingEventTypes[topLevelType] == null, 'Event cannot be both direct and bubbling: %s', topLevelType);
      }
    }
  }

  if (bubblingEventTypes != null) {
    for (var _topLevelType in bubblingEventTypes) {
      if (customBubblingEventTypes[_topLevelType] == null) {
        eventTypes[_topLevelType] = customBubblingEventTypes[_topLevelType] = bubblingEventTypes[_topLevelType];
      }
    }
  }

  if (directEventTypes != null) {
    for (var _topLevelType2 in directEventTypes) {
      if (customDirectEventTypes[_topLevelType2] == null) {
        eventTypes[_topLevelType2] = customDirectEventTypes[_topLevelType2] = directEventTypes[_topLevelType2];
      }
    }
  }
}

exports.register = function (name, callback) {
  invariant(!viewConfigCallbacks.has(name), 'Tried to register two views with the same name %s', name);
  viewConfigCallbacks.set(name, callback);
  return name;
};

exports.get = function (name) {
  var viewConfig;

  if (!viewConfigs.has(name)) {
    var callback = viewConfigCallbacks.get(name);

    if (typeof callback !== 'function') {
      invariant(false, 'View config not found for name %s.%s', name, typeof name[0] === 'string' && /[a-z]/.test(name[0]) ? ' Make sure to start component names with a capital letter.' : '');
    }

    viewConfigCallbacks.set(name, null);
    viewConfig = callback();
    processEventTypes(viewConfig);
    viewConfigs.set(name, viewConfig);
  } else {
    viewConfig = viewConfigs.get(name);
  }

  invariant(viewConfig, 'View config not found for name %s', name);
  return viewConfig;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlYWN0TmF0aXZlVmlld0NvbmZpZ1JlZ2lzdHJ5LmpzIl0sIm5hbWVzIjpbImludmFyaWFudCIsInJlcXVpcmUiLCJjdXN0b21CdWJibGluZ0V2ZW50VHlwZXMiLCJjdXN0b21EaXJlY3RFdmVudFR5cGVzIiwiZXZlbnRUeXBlcyIsImV4cG9ydHMiLCJ2aWV3Q29uZmlnQ2FsbGJhY2tzIiwiTWFwIiwidmlld0NvbmZpZ3MiLCJwcm9jZXNzRXZlbnRUeXBlcyIsInZpZXdDb25maWciLCJidWJibGluZ0V2ZW50VHlwZXMiLCJkaXJlY3RFdmVudFR5cGVzIiwiX19ERVZfXyIsInRvcExldmVsVHlwZSIsInJlZ2lzdGVyIiwibmFtZSIsImNhbGxiYWNrIiwiaGFzIiwic2V0IiwiZ2V0IiwidGVzdCJdLCJtYXBwaW5ncyI6IkFBVUE7O0FBT0EsSUFBTUEsU0FBUyxHQUFHQyxPQUFPLENBQUMsV0FBRCxDQUF6Qjs7QUFHQSxJQUFNQyx3QkFBd0IsR0FBRyxFQUFqQztBQUNBLElBQU1DLHNCQUFzQixHQUFHLEVBQS9CO0FBQ0EsSUFBTUMsVUFBVSxHQUFHLEVBQW5CO0FBRUFDLE9BQU8sQ0FBQ0gsd0JBQVIsR0FBbUNBLHdCQUFuQztBQUNBRyxPQUFPLENBQUNGLHNCQUFSLEdBQWlDQSxzQkFBakM7QUFDQUUsT0FBTyxDQUFDRCxVQUFSLEdBQXFCQSxVQUFyQjtBQUVBLElBQU1FLG1CQUFtQixHQUFHLElBQUlDLEdBQUosRUFBNUI7QUFDQSxJQUFNQyxXQUFXLEdBQUcsSUFBSUQsR0FBSixFQUFwQjs7QUFFQSxTQUFTRSxpQkFBVCxDQUNFQyxVQURGLEVBRVE7QUFBQSxNQUNDQyxrQkFERCxHQUN5Q0QsVUFEekMsQ0FDQ0Msa0JBREQ7QUFBQSxNQUNxQkMsZ0JBRHJCLEdBQ3lDRixVQUR6QyxDQUNxQkUsZ0JBRHJCOztBQUdOLE1BQUlDLE9BQUosRUFBYTtBQUNYLFFBQUlGLGtCQUFrQixJQUFJLElBQXRCLElBQThCQyxnQkFBZ0IsSUFBSSxJQUF0RCxFQUE0RDtBQUMxRCxXQUFLLElBQU1FLFlBQVgsSUFBMkJGLGdCQUEzQixFQUE2QztBQUMzQ1osUUFBQUEsU0FBUyxDQUNQVyxrQkFBa0IsQ0FBQ0csWUFBRCxDQUFsQixJQUFvQyxJQUQ3QixFQUVQLDhDQUZPLEVBR1BBLFlBSE8sQ0FBVDtBQUtEO0FBQ0Y7QUFDRjs7QUFFRCxNQUFJSCxrQkFBa0IsSUFBSSxJQUExQixFQUFnQztBQUM5QixTQUFLLElBQU1HLGFBQVgsSUFBMkJILGtCQUEzQixFQUErQztBQUM3QyxVQUFJVCx3QkFBd0IsQ0FBQ1ksYUFBRCxDQUF4QixJQUEwQyxJQUE5QyxFQUFvRDtBQUNsRFYsUUFBQUEsVUFBVSxDQUFDVSxhQUFELENBQVYsR0FBMkJaLHdCQUF3QixDQUFDWSxhQUFELENBQXhCLEdBQ3pCSCxrQkFBa0IsQ0FBQ0csYUFBRCxDQURwQjtBQUVEO0FBQ0Y7QUFDRjs7QUFFRCxNQUFJRixnQkFBZ0IsSUFBSSxJQUF4QixFQUE4QjtBQUM1QixTQUFLLElBQU1FLGNBQVgsSUFBMkJGLGdCQUEzQixFQUE2QztBQUMzQyxVQUFJVCxzQkFBc0IsQ0FBQ1csY0FBRCxDQUF0QixJQUF3QyxJQUE1QyxFQUFrRDtBQUNoRFYsUUFBQUEsVUFBVSxDQUFDVSxjQUFELENBQVYsR0FBMkJYLHNCQUFzQixDQUFDVyxjQUFELENBQXRCLEdBQ3pCRixnQkFBZ0IsQ0FBQ0UsY0FBRCxDQURsQjtBQUVEO0FBQ0Y7QUFDRjtBQUNGOztBQVFEVCxPQUFPLENBQUNVLFFBQVIsR0FBbUIsVUFBU0MsSUFBVCxFQUF1QkMsUUFBdkIsRUFBMkQ7QUFDNUVqQixFQUFBQSxTQUFTLENBQ1AsQ0FBQ00sbUJBQW1CLENBQUNZLEdBQXBCLENBQXdCRixJQUF4QixDQURNLEVBRVAsbURBRk8sRUFHUEEsSUFITyxDQUFUO0FBS0FWLEVBQUFBLG1CQUFtQixDQUFDYSxHQUFwQixDQUF3QkgsSUFBeEIsRUFBOEJDLFFBQTlCO0FBQ0EsU0FBT0QsSUFBUDtBQUNELENBUkQ7O0FBZUFYLE9BQU8sQ0FBQ2UsR0FBUixHQUFjLFVBQVNKLElBQVQsRUFBNkQ7QUFDekUsTUFBSU4sVUFBSjs7QUFDQSxNQUFJLENBQUNGLFdBQVcsQ0FBQ1UsR0FBWixDQUFnQkYsSUFBaEIsQ0FBTCxFQUE0QjtBQUMxQixRQUFNQyxRQUFRLEdBQUdYLG1CQUFtQixDQUFDYyxHQUFwQixDQUF3QkosSUFBeEIsQ0FBakI7O0FBQ0EsUUFBSSxPQUFPQyxRQUFQLEtBQW9CLFVBQXhCLEVBQW9DO0FBQ2xDakIsTUFBQUEsU0FBUyxDQUNQLEtBRE8sRUFFUCxzQ0FGTyxFQUdQZ0IsSUFITyxFQUlQLE9BQU9BLElBQUksQ0FBQyxDQUFELENBQVgsS0FBbUIsUUFBbkIsSUFBK0IsUUFBUUssSUFBUixDQUFhTCxJQUFJLENBQUMsQ0FBRCxDQUFqQixDQUEvQixHQUNJLDREQURKLEdBRUksRUFORyxDQUFUO0FBUUQ7O0FBQ0RWLElBQUFBLG1CQUFtQixDQUFDYSxHQUFwQixDQUF3QkgsSUFBeEIsRUFBOEIsSUFBOUI7QUFDQU4sSUFBQUEsVUFBVSxHQUFHTyxRQUFRLEVBQXJCO0FBQ0FSLElBQUFBLGlCQUFpQixDQUFDQyxVQUFELENBQWpCO0FBQ0FGLElBQUFBLFdBQVcsQ0FBQ1csR0FBWixDQUFnQkgsSUFBaEIsRUFBc0JOLFVBQXRCO0FBQ0QsR0FoQkQsTUFnQk87QUFDTEEsSUFBQUEsVUFBVSxHQUFHRixXQUFXLENBQUNZLEdBQVosQ0FBZ0JKLElBQWhCLENBQWI7QUFDRDs7QUFDRGhCLEVBQUFBLFNBQVMsQ0FBQ1UsVUFBRCxFQUFhLG1DQUFiLEVBQWtETSxJQUFsRCxDQUFUO0FBQ0EsU0FBT04sVUFBUDtBQUNELENBdkJEIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCB0eXBlIHtcbiAgUmVhY3ROYXRpdmVCYXNlQ29tcG9uZW50Vmlld0NvbmZpZyxcbiAgVmlld0NvbmZpZ0dldHRlcixcbn0gZnJvbSAnLi9SZWFjdE5hdGl2ZVR5cGVzJztcblxuY29uc3QgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbi8vIEV2ZW50IGNvbmZpZ3NcbmNvbnN0IGN1c3RvbUJ1YmJsaW5nRXZlbnRUeXBlcyA9IHt9O1xuY29uc3QgY3VzdG9tRGlyZWN0RXZlbnRUeXBlcyA9IHt9O1xuY29uc3QgZXZlbnRUeXBlcyA9IHt9O1xuXG5leHBvcnRzLmN1c3RvbUJ1YmJsaW5nRXZlbnRUeXBlcyA9IGN1c3RvbUJ1YmJsaW5nRXZlbnRUeXBlcztcbmV4cG9ydHMuY3VzdG9tRGlyZWN0RXZlbnRUeXBlcyA9IGN1c3RvbURpcmVjdEV2ZW50VHlwZXM7XG5leHBvcnRzLmV2ZW50VHlwZXMgPSBldmVudFR5cGVzO1xuXG5jb25zdCB2aWV3Q29uZmlnQ2FsbGJhY2tzID0gbmV3IE1hcCgpO1xuY29uc3Qgdmlld0NvbmZpZ3MgPSBuZXcgTWFwKCk7XG5cbmZ1bmN0aW9uIHByb2Nlc3NFdmVudFR5cGVzKFxuICB2aWV3Q29uZmlnOiBSZWFjdE5hdGl2ZUJhc2VDb21wb25lbnRWaWV3Q29uZmlnPD4sXG4pOiB2b2lkIHtcbiAgY29uc3Qge2J1YmJsaW5nRXZlbnRUeXBlcywgZGlyZWN0RXZlbnRUeXBlc30gPSB2aWV3Q29uZmlnO1xuXG4gIGlmIChfX0RFVl9fKSB7XG4gICAgaWYgKGJ1YmJsaW5nRXZlbnRUeXBlcyAhPSBudWxsICYmIGRpcmVjdEV2ZW50VHlwZXMgIT0gbnVsbCkge1xuICAgICAgZm9yIChjb25zdCB0b3BMZXZlbFR5cGUgaW4gZGlyZWN0RXZlbnRUeXBlcykge1xuICAgICAgICBpbnZhcmlhbnQoXG4gICAgICAgICAgYnViYmxpbmdFdmVudFR5cGVzW3RvcExldmVsVHlwZV0gPT0gbnVsbCxcbiAgICAgICAgICAnRXZlbnQgY2Fubm90IGJlIGJvdGggZGlyZWN0IGFuZCBidWJibGluZzogJXMnLFxuICAgICAgICAgIHRvcExldmVsVHlwZSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoYnViYmxpbmdFdmVudFR5cGVzICE9IG51bGwpIHtcbiAgICBmb3IgKGNvbnN0IHRvcExldmVsVHlwZSBpbiBidWJibGluZ0V2ZW50VHlwZXMpIHtcbiAgICAgIGlmIChjdXN0b21CdWJibGluZ0V2ZW50VHlwZXNbdG9wTGV2ZWxUeXBlXSA9PSBudWxsKSB7XG4gICAgICAgIGV2ZW50VHlwZXNbdG9wTGV2ZWxUeXBlXSA9IGN1c3RvbUJ1YmJsaW5nRXZlbnRUeXBlc1t0b3BMZXZlbFR5cGVdID1cbiAgICAgICAgICBidWJibGluZ0V2ZW50VHlwZXNbdG9wTGV2ZWxUeXBlXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZGlyZWN0RXZlbnRUeXBlcyAhPSBudWxsKSB7XG4gICAgZm9yIChjb25zdCB0b3BMZXZlbFR5cGUgaW4gZGlyZWN0RXZlbnRUeXBlcykge1xuICAgICAgaWYgKGN1c3RvbURpcmVjdEV2ZW50VHlwZXNbdG9wTGV2ZWxUeXBlXSA9PSBudWxsKSB7XG4gICAgICAgIGV2ZW50VHlwZXNbdG9wTGV2ZWxUeXBlXSA9IGN1c3RvbURpcmVjdEV2ZW50VHlwZXNbdG9wTGV2ZWxUeXBlXSA9XG4gICAgICAgICAgZGlyZWN0RXZlbnRUeXBlc1t0b3BMZXZlbFR5cGVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJlZ2lzdGVycyBhIG5hdGl2ZSB2aWV3L2NvbXBvbmVudCBieSBuYW1lLlxuICogQSBjYWxsYmFjayBpcyBwcm92aWRlZCB0byBsb2FkIHRoZSB2aWV3IGNvbmZpZyBmcm9tIFVJTWFuYWdlci5cbiAqIFRoZSBjYWxsYmFjayBpcyBkZWZlcnJlZCB1bnRpbCB0aGUgdmlldyBpcyBhY3R1YWxseSByZW5kZXJlZC5cbiAqIFRoaXMgaXMgZG9uZSB0byBhdm9pZCBjYXVzaW5nIFByZXBhY2sgZGVvcHRzLlxuICovXG5leHBvcnRzLnJlZ2lzdGVyID0gZnVuY3Rpb24obmFtZTogc3RyaW5nLCBjYWxsYmFjazogVmlld0NvbmZpZ0dldHRlcik6IHN0cmluZyB7XG4gIGludmFyaWFudChcbiAgICAhdmlld0NvbmZpZ0NhbGxiYWNrcy5oYXMobmFtZSksXG4gICAgJ1RyaWVkIHRvIHJlZ2lzdGVyIHR3byB2aWV3cyB3aXRoIHRoZSBzYW1lIG5hbWUgJXMnLFxuICAgIG5hbWUsXG4gICk7XG4gIHZpZXdDb25maWdDYWxsYmFja3Muc2V0KG5hbWUsIGNhbGxiYWNrKTtcbiAgcmV0dXJuIG5hbWU7XG59O1xuXG4vKipcbiAqIFJldHJpZXZlcyBhIGNvbmZpZyBmb3IgdGhlIHNwZWNpZmllZCB2aWV3LlxuICogSWYgdGhpcyBpcyB0aGUgZmlyc3QgdGltZSB0aGUgdmlldyBoYXMgYmVlbiB1c2VkLFxuICogVGhpcyBjb25maWd1cmF0aW9uIHdpbGwgYmUgbGF6eS1sb2FkZWQgZnJvbSBVSU1hbmFnZXIuXG4gKi9cbmV4cG9ydHMuZ2V0ID0gZnVuY3Rpb24obmFtZTogc3RyaW5nKTogUmVhY3ROYXRpdmVCYXNlQ29tcG9uZW50Vmlld0NvbmZpZzw+IHtcbiAgbGV0IHZpZXdDb25maWc7XG4gIGlmICghdmlld0NvbmZpZ3MuaGFzKG5hbWUpKSB7XG4gICAgY29uc3QgY2FsbGJhY2sgPSB2aWV3Q29uZmlnQ2FsbGJhY2tzLmdldChuYW1lKTtcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAnVmlldyBjb25maWcgbm90IGZvdW5kIGZvciBuYW1lICVzLiVzJyxcbiAgICAgICAgbmFtZSxcbiAgICAgICAgdHlwZW9mIG5hbWVbMF0gPT09ICdzdHJpbmcnICYmIC9bYS16XS8udGVzdChuYW1lWzBdKVxuICAgICAgICAgID8gJyBNYWtlIHN1cmUgdG8gc3RhcnQgY29tcG9uZW50IG5hbWVzIHdpdGggYSBjYXBpdGFsIGxldHRlci4nXG4gICAgICAgICAgOiAnJyxcbiAgICAgICk7XG4gICAgfVxuICAgIHZpZXdDb25maWdDYWxsYmFja3Muc2V0KG5hbWUsIG51bGwpO1xuICAgIHZpZXdDb25maWcgPSBjYWxsYmFjaygpO1xuICAgIHByb2Nlc3NFdmVudFR5cGVzKHZpZXdDb25maWcpO1xuICAgIHZpZXdDb25maWdzLnNldChuYW1lLCB2aWV3Q29uZmlnKTtcbiAgfSBlbHNlIHtcbiAgICB2aWV3Q29uZmlnID0gdmlld0NvbmZpZ3MuZ2V0KG5hbWUpO1xuICB9XG4gIGludmFyaWFudCh2aWV3Q29uZmlnLCAnVmlldyBjb25maWcgbm90IGZvdW5kIGZvciBuYW1lICVzJywgbmFtZSk7XG4gIHJldHVybiB2aWV3Q29uZmlnO1xufTtcbiJdfQ==