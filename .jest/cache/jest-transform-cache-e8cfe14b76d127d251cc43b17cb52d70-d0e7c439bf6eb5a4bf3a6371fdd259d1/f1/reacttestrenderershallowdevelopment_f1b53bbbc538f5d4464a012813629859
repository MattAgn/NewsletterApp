8e52c3615ff8f947cbf876617e59a715
/** @license React v16.8.6
 * react-test-renderer-shallow.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
'use strict';

if (process.env.NODE_ENV !== "production") {
  (function () {
    'use strict';

    var _assign = require('object-assign');

    var React = require('react');

    var reactIs = require('react-is');

    var checkPropTypes = require('prop-types/checkPropTypes');

    var validateFormat = function validateFormat() {};

    {
      validateFormat = function validateFormat(format) {
        if (format === undefined) {
          throw new Error('invariant requires an error message argument');
        }
      };
    }

    function invariant(condition, format, a, b, c, d, e, f) {
      validateFormat(format);

      if (!condition) {
        var error = void 0;

        if (format === undefined) {
          error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(format.replace(/%s/g, function () {
            return args[argIndex++];
          }));
          error.name = 'Invariant Violation';
        }

        error.framesToPop = 1;
        throw error;
      }
    }

    var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

    var describeComponentFrame = function describeComponentFrame(name, source, ownerName) {
      var sourceInfo = '';

      if (source) {
        var path = source.fileName;
        var fileName = path.replace(BEFORE_SLASH_RE, '');
        {
          if (/^index\./.test(fileName)) {
            var match = path.match(BEFORE_SLASH_RE);

            if (match) {
              var pathBeforeSlash = match[1];

              if (pathBeforeSlash) {
                var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
                fileName = folderName + '/' + fileName;
              }
            }
          }
        }
        sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
      } else if (ownerName) {
        sourceInfo = ' (created by ' + ownerName + ')';
      }

      return '\n    in ' + (name || 'Unknown') + sourceInfo;
    };

    var warningWithoutStack = function warningWithoutStack() {};

    {
      warningWithoutStack = function warningWithoutStack(condition, format) {
        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        if (format === undefined) {
          throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
        }

        if (args.length > 8) {
          throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
        }

        if (condition) {
          return;
        }

        if (typeof console !== 'undefined') {
          var argsWithFormat = args.map(function (item) {
            return '' + item;
          });
          argsWithFormat.unshift('Warning: ' + format);
          Function.prototype.apply.call(console.error, console, argsWithFormat);
        }

        try {
          var argIndex = 0;
          var message = 'Warning: ' + format.replace(/%s/g, function () {
            return args[argIndex++];
          });
          throw new Error(message);
        } catch (x) {}
      };
    }
    var warningWithoutStack$1 = warningWithoutStack;
    var hasSymbol = typeof Symbol === 'function' && (typeof Symbol === "function" ? Symbol.for : "@@for");
    var REACT_PORTAL_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")('react.context') : 0xeace;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")('react.suspense') : 0xead1;
    var REACT_MEMO_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? (typeof Symbol === "function" ? Symbol.for : "@@for")('react.lazy') : 0xead4;
    var Resolved = 1;

    function refineResolvedLazyComponent(lazyComponent) {
      return lazyComponent._status === Resolved ? lazyComponent._result : null;
    }

    function getWrappedName(outerType, innerType, wrapperName) {
      var functionName = innerType.displayName || innerType.name || '';
      return outerType.displayName || (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName);
    }

    function getComponentName(type) {
      if (type == null) {
        return null;
      }

      {
        if (typeof type.tag === 'number') {
          warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
        }
      }

      if (typeof type === 'function') {
        return type.displayName || type.name || null;
      }

      if (typeof type === 'string') {
        return type;
      }

      switch (type) {
        case REACT_CONCURRENT_MODE_TYPE:
          return 'ConcurrentMode';

        case REACT_FRAGMENT_TYPE:
          return 'Fragment';

        case REACT_PORTAL_TYPE:
          return 'Portal';

        case REACT_PROFILER_TYPE:
          return 'Profiler';

        case REACT_STRICT_MODE_TYPE:
          return 'StrictMode';

        case REACT_SUSPENSE_TYPE:
          return 'Suspense';
      }

      if (typeof type === 'object') {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            return 'Context.Consumer';

          case REACT_PROVIDER_TYPE:
            return 'Context.Provider';

          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, 'ForwardRef');

          case REACT_MEMO_TYPE:
            return getComponentName(type.type);

          case REACT_LAZY_TYPE:
            {
              var thenable = type;
              var resolvedThenable = refineResolvedLazyComponent(thenable);

              if (resolvedThenable) {
                return getComponentName(resolvedThenable);
              }
            }
        }
      }

      return null;
    }

    function is(x, y) {
      return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
    }

    var hasOwnProperty = Object.prototype.hasOwnProperty;

    function shallowEqual(objA, objB) {
      if (is(objA, objB)) {
        return true;
      }

      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
        return false;
      }

      var keysA = Object.keys(objA);
      var keysB = Object.keys(objB);

      if (keysA.length !== keysB.length) {
        return false;
      }

      for (var i = 0; i < keysA.length; i++) {
        if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
          return false;
        }
      }

      return true;
    }

    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

    if (!ReactSharedInternals.hasOwnProperty('ReactCurrentDispatcher')) {
      ReactSharedInternals.ReactCurrentDispatcher = {
        current: null
      };
    }

    var warning = warningWithoutStack$1;
    {
      warning = function warning(condition, format) {
        if (condition) {
          return;
        }

        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();

        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        warningWithoutStack$1.apply(undefined, [false, format + '%s'].concat(args, [stack]));
      };
    }
    var warning$1 = warning;

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var RE_RENDER_LIMIT = 25;
    var emptyObject = {};
    {
      Object.freeze(emptyObject);
    }
    var currentHookNameInDev = void 0;

    function areHookInputsEqual(nextDeps, prevDeps) {
      if (prevDeps === null) {
        warning$1(false, '%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
        return false;
      }

      if (nextDeps.length !== prevDeps.length) {
        warning$1(false, 'The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, '[' + nextDeps.join(', ') + ']', '[' + prevDeps.join(', ') + ']');
      }

      for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
        if (is(nextDeps[i], prevDeps[i])) {
          continue;
        }

        return false;
      }

      return true;
    }

    var Updater = function () {
      function Updater(renderer) {
        _classCallCheck(this, Updater);

        this._renderer = renderer;
        this._callbacks = [];
      }

      Updater.prototype._enqueueCallback = function _enqueueCallback(callback, publicInstance) {
        if (typeof callback === 'function' && publicInstance) {
          this._callbacks.push({
            callback: callback,
            publicInstance: publicInstance
          });
        }
      };

      Updater.prototype._invokeCallbacks = function _invokeCallbacks() {
        var callbacks = this._callbacks;
        this._callbacks = [];
        callbacks.forEach(function (_ref) {
          var callback = _ref.callback,
              publicInstance = _ref.publicInstance;
          callback.call(publicInstance);
        });
      };

      Updater.prototype.isMounted = function isMounted(publicInstance) {
        return !!this._renderer._element;
      };

      Updater.prototype.enqueueForceUpdate = function enqueueForceUpdate(publicInstance, callback, callerName) {
        this._enqueueCallback(callback, publicInstance);

        this._renderer._forcedUpdate = true;

        this._renderer.render(this._renderer._element, this._renderer._context);
      };

      Updater.prototype.enqueueReplaceState = function enqueueReplaceState(publicInstance, completeState, callback, callerName) {
        this._enqueueCallback(callback, publicInstance);

        this._renderer._newState = completeState;

        this._renderer.render(this._renderer._element, this._renderer._context);
      };

      Updater.prototype.enqueueSetState = function enqueueSetState(publicInstance, partialState, callback, callerName) {
        this._enqueueCallback(callback, publicInstance);

        var currentState = this._renderer._newState || publicInstance.state;

        if (typeof partialState === 'function') {
          partialState = partialState.call(publicInstance, currentState, publicInstance.props);
        }

        if (partialState === null || partialState === undefined) {
          return;
        }

        this._renderer._newState = _assign({}, currentState, partialState);

        this._renderer.render(this._renderer._element, this._renderer._context);
      };

      return Updater;
    }();

    function createHook() {
      return {
        memoizedState: null,
        queue: null,
        next: null
      };
    }

    function basicStateReducer(state, action) {
      return typeof action === 'function' ? action(state) : action;
    }

    var ReactShallowRenderer = function () {
      function ReactShallowRenderer() {
        _classCallCheck(this, ReactShallowRenderer);

        this._reset();
      }

      ReactShallowRenderer.prototype._reset = function _reset() {
        this._context = null;
        this._element = null;
        this._instance = null;
        this._newState = null;
        this._rendered = null;
        this._rendering = false;
        this._forcedUpdate = false;
        this._updater = new Updater(this);
        this._dispatcher = this._createDispatcher();
        this._workInProgressHook = null;
        this._firstWorkInProgressHook = null;
        this._isReRender = false;
        this._didScheduleRenderPhaseUpdate = false;
        this._renderPhaseUpdates = null;
        this._numberOfReRenders = 0;
      };

      ReactShallowRenderer.prototype._validateCurrentlyRenderingComponent = function _validateCurrentlyRenderingComponent() {
        !(this._rendering && !this._instance) ? invariant(false, 'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.') : void 0;
      };

      ReactShallowRenderer.prototype._createDispatcher = function _createDispatcher() {
        var _this = this;

        var useReducer = function useReducer(reducer, initialArg, init) {
          _this._validateCurrentlyRenderingComponent();

          _this._createWorkInProgressHook();

          var workInProgressHook = _this._workInProgressHook;

          if (_this._isReRender) {
            var _queue = workInProgressHook.queue;
            var _dispatch = _queue.dispatch;

            if (_this._numberOfReRenders > 0) {
              if (_this._renderPhaseUpdates !== null) {
                var firstRenderPhaseUpdate = _this._renderPhaseUpdates.get(_queue);

                if (firstRenderPhaseUpdate !== undefined) {
                  _this._renderPhaseUpdates.delete(_queue);

                  var _newState = workInProgressHook.memoizedState;
                  var _update = firstRenderPhaseUpdate;

                  do {
                    var _action = _update.action;
                    _newState = reducer(_newState, _action);
                    _update = _update.next;
                  } while (_update !== null);

                  workInProgressHook.memoizedState = _newState;
                  return [_newState, _dispatch];
                }
              }

              return [workInProgressHook.memoizedState, _dispatch];
            }

            var newState = workInProgressHook.memoizedState;
            var update = _queue.first;

            if (update !== null) {
              do {
                var _action2 = update.action;
                newState = reducer(newState, _action2);
                update = update.next;
              } while (update !== null);

              _queue.first = null;
              workInProgressHook.memoizedState = newState;
            }

            return [newState, _dispatch];
          } else {
            var initialState = void 0;

            if (reducer === basicStateReducer) {
              initialState = typeof initialArg === 'function' ? initialArg() : initialArg;
            } else {
              initialState = init !== undefined ? init(initialArg) : initialArg;
            }

            workInProgressHook.memoizedState = initialState;

            var _queue2 = workInProgressHook.queue = {
              first: null,
              dispatch: null
            };

            var _dispatch2 = _queue2.dispatch = _this._dispatchAction.bind(_this, _queue2);

            return [workInProgressHook.memoizedState, _dispatch2];
          }
        };

        var useState = function useState(initialState) {
          return useReducer(basicStateReducer, initialState);
        };

        var useMemo = function useMemo(nextCreate, deps) {
          _this._validateCurrentlyRenderingComponent();

          _this._createWorkInProgressHook();

          var nextDeps = deps !== undefined ? deps : null;

          if (_this._workInProgressHook !== null && _this._workInProgressHook.memoizedState !== null) {
            var prevState = _this._workInProgressHook.memoizedState;
            var prevDeps = prevState[1];

            if (nextDeps !== null) {
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }

          var nextValue = nextCreate();
          _this._workInProgressHook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        };

        var useRef = function useRef(initialValue) {
          _this._validateCurrentlyRenderingComponent();

          _this._createWorkInProgressHook();

          var previousRef = _this._workInProgressHook.memoizedState;

          if (previousRef === null) {
            var ref = {
              current: initialValue
            };
            {
              Object.seal(ref);
            }
            _this._workInProgressHook.memoizedState = ref;
            return ref;
          } else {
            return previousRef;
          }
        };

        var readContext = function readContext(context, observedBits) {
          return context._currentValue;
        };

        var noOp = function noOp() {
          _this._validateCurrentlyRenderingComponent();
        };

        var identity = function identity(fn) {
          return fn;
        };

        return {
          readContext: readContext,
          useCallback: identity,
          useContext: function useContext(context) {
            _this._validateCurrentlyRenderingComponent();

            return readContext(context);
          },
          useDebugValue: noOp,
          useEffect: noOp,
          useImperativeHandle: noOp,
          useLayoutEffect: noOp,
          useMemo: useMemo,
          useReducer: useReducer,
          useRef: useRef,
          useState: useState
        };
      };

      ReactShallowRenderer.prototype._dispatchAction = function _dispatchAction(queue, action) {
        !(this._numberOfReRenders < RE_RENDER_LIMIT) ? invariant(false, 'Too many re-renders. React limits the number of renders to prevent an infinite loop.') : void 0;

        if (this._rendering) {
          this._didScheduleRenderPhaseUpdate = true;
          var update = {
            action: action,
            next: null
          };
          var renderPhaseUpdates = this._renderPhaseUpdates;

          if (renderPhaseUpdates === null) {
            this._renderPhaseUpdates = renderPhaseUpdates = new Map();
          }

          var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);

          if (firstRenderPhaseUpdate === undefined) {
            renderPhaseUpdates.set(queue, update);
          } else {
            var lastRenderPhaseUpdate = firstRenderPhaseUpdate;

            while (lastRenderPhaseUpdate.next !== null) {
              lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            }

            lastRenderPhaseUpdate.next = update;
          }
        } else {
          var _update2 = {
            action: action,
            next: null
          };
          var last = queue.first;

          if (last === null) {
            queue.first = _update2;
          } else {
            while (last.next !== null) {
              last = last.next;
            }

            last.next = _update2;
          }

          this.render(this._element, this._context);
        }
      };

      ReactShallowRenderer.prototype._createWorkInProgressHook = function _createWorkInProgressHook() {
        if (this._workInProgressHook === null) {
          if (this._firstWorkInProgressHook === null) {
            this._isReRender = false;
            this._firstWorkInProgressHook = this._workInProgressHook = createHook();
          } else {
            this._isReRender = true;
            this._workInProgressHook = this._firstWorkInProgressHook;
          }
        } else {
          if (this._workInProgressHook.next === null) {
            this._isReRender = false;
            this._workInProgressHook = this._workInProgressHook.next = createHook();
          } else {
            this._isReRender = true;
            this._workInProgressHook = this._workInProgressHook.next;
          }
        }

        return this._workInProgressHook;
      };

      ReactShallowRenderer.prototype._finishHooks = function _finishHooks(element, context) {
        if (this._didScheduleRenderPhaseUpdate) {
          this._didScheduleRenderPhaseUpdate = false;
          this._numberOfReRenders += 1;
          this._workInProgressHook = null;
          this._rendering = false;
          this.render(element, context);
        } else {
          this._workInProgressHook = null;
          this._renderPhaseUpdates = null;
          this._numberOfReRenders = 0;
        }
      };

      ReactShallowRenderer.prototype.getMountedInstance = function getMountedInstance() {
        return this._instance;
      };

      ReactShallowRenderer.prototype.getRenderOutput = function getRenderOutput() {
        return this._rendered;
      };

      ReactShallowRenderer.prototype.render = function render(element) {
        var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : emptyObject;
        !React.isValidElement(element) ? invariant(false, 'ReactShallowRenderer render(): Invalid component element.%s', typeof element === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' : '') : void 0;
        element = element;
        !(typeof element.type !== 'string') ? invariant(false, 'ReactShallowRenderer render(): Shallow rendering works only with custom components, not primitives (%s). Instead of calling `.render(el)` and inspecting the rendered output, look at `el.props` directly instead.', element.type) : void 0;
        !(reactIs.isForwardRef(element) || typeof element.type === 'function' || reactIs.isMemo(element.type)) ? invariant(false, 'ReactShallowRenderer render(): Shallow rendering works only with custom components, but the provided element type was `%s`.', Array.isArray(element.type) ? 'array' : element.type === null ? 'null' : typeof element.type) : void 0;

        if (this._rendering) {
          return;
        }

        if (this._element != null && this._element.type !== element.type) {
          this._reset();
        }

        var elementType = reactIs.isMemo(element.type) ? element.type.type : element.type;
        var previousElement = this._element;
        this._rendering = true;
        this._element = element;
        this._context = getMaskedContext(elementType.contextTypes, context);

        if (reactIs.isMemo(element.type) && elementType.propTypes) {
          currentlyValidatingElement = element;
          checkPropTypes(elementType.propTypes, element.props, 'prop', getComponentName(elementType), getStackAddendum);
        }

        if (this._instance) {
          this._updateClassComponent(elementType, element, this._context);
        } else {
          if (shouldConstruct(elementType)) {
            this._instance = new elementType(element.props, this._context, this._updater);

            if (typeof elementType.getDerivedStateFromProps === 'function') {
              var partialState = elementType.getDerivedStateFromProps.call(null, element.props, this._instance.state);

              if (partialState != null) {
                this._instance.state = _assign({}, this._instance.state, partialState);
              }
            }

            if (elementType.contextTypes) {
              currentlyValidatingElement = element;
              checkPropTypes(elementType.contextTypes, this._context, 'context', getName(elementType, this._instance), getStackAddendum);
              currentlyValidatingElement = null;
            }

            this._mountClassComponent(elementType, element, this._context);
          } else {
            var shouldRender = true;

            if (reactIs.isMemo(element.type) && previousElement !== null) {
              var compare = element.type.compare || shallowEqual;

              if (compare(previousElement.props, element.props)) {
                shouldRender = false;
              }
            }

            if (shouldRender) {
              var prevDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = this._dispatcher;

              try {
                if (elementType.$$typeof === reactIs.ForwardRef) {
                  !(typeof elementType.render === 'function') ? invariant(false, 'forwardRef requires a render function but was given %s.', typeof elementType.render) : void 0;
                  this._rendered = elementType.render.call(undefined, element.props, element.ref);
                } else {
                  this._rendered = elementType(element.props, this._context);
                }
              } finally {
                ReactCurrentDispatcher.current = prevDispatcher;
              }

              this._finishHooks(element, context);
            }
          }
        }

        this._rendering = false;

        this._updater._invokeCallbacks();

        return this.getRenderOutput();
      };

      ReactShallowRenderer.prototype.unmount = function unmount() {
        if (this._instance) {
          if (typeof this._instance.componentWillUnmount === 'function') {
            this._instance.componentWillUnmount();
          }
        }

        this._reset();
      };

      ReactShallowRenderer.prototype._mountClassComponent = function _mountClassComponent(elementType, element, context) {
        this._instance.context = context;
        this._instance.props = element.props;
        this._instance.state = this._instance.state || null;
        this._instance.updater = this._updater;

        if (typeof this._instance.UNSAFE_componentWillMount === 'function' || typeof this._instance.componentWillMount === 'function') {
          var beforeState = this._newState;

          if (typeof elementType.getDerivedStateFromProps !== 'function' && typeof this._instance.getSnapshotBeforeUpdate !== 'function') {
            if (typeof this._instance.componentWillMount === 'function') {
              this._instance.componentWillMount();
            }

            if (typeof this._instance.UNSAFE_componentWillMount === 'function') {
              this._instance.UNSAFE_componentWillMount();
            }
          }

          if (beforeState !== this._newState) {
            this._instance.state = this._newState || emptyObject;
          }
        }

        this._rendered = this._instance.render();
      };

      ReactShallowRenderer.prototype._updateClassComponent = function _updateClassComponent(elementType, element, context) {
        var props = element.props;
        var oldState = this._instance.state || emptyObject;
        var oldProps = this._instance.props;

        if (oldProps !== props) {
          if (typeof elementType.getDerivedStateFromProps !== 'function' && typeof this._instance.getSnapshotBeforeUpdate !== 'function') {
            if (typeof this._instance.componentWillReceiveProps === 'function') {
              this._instance.componentWillReceiveProps(props, context);
            }

            if (typeof this._instance.UNSAFE_componentWillReceiveProps === 'function') {
              this._instance.UNSAFE_componentWillReceiveProps(props, context);
            }
          }
        }

        var state = this._newState || oldState;

        if (typeof elementType.getDerivedStateFromProps === 'function') {
          var partialState = elementType.getDerivedStateFromProps.call(null, props, state);

          if (partialState != null) {
            state = _assign({}, state, partialState);
          }
        }

        var shouldUpdate = true;

        if (this._forcedUpdate) {
          shouldUpdate = true;
          this._forcedUpdate = false;
        } else if (typeof this._instance.shouldComponentUpdate === 'function') {
          shouldUpdate = !!this._instance.shouldComponentUpdate(props, state, context);
        } else if (elementType.prototype && elementType.prototype.isPureReactComponent) {
          shouldUpdate = !shallowEqual(oldProps, props) || !shallowEqual(oldState, state);
        }

        if (shouldUpdate) {
          if (typeof elementType.getDerivedStateFromProps !== 'function' && typeof this._instance.getSnapshotBeforeUpdate !== 'function') {
            if (typeof this._instance.componentWillUpdate === 'function') {
              this._instance.componentWillUpdate(props, state, context);
            }

            if (typeof this._instance.UNSAFE_componentWillUpdate === 'function') {
              this._instance.UNSAFE_componentWillUpdate(props, state, context);
            }
          }
        }

        this._instance.context = context;
        this._instance.props = props;
        this._instance.state = state;
        this._newState = null;

        if (shouldUpdate) {
          this._rendered = this._instance.render();
        }
      };

      return ReactShallowRenderer;
    }();

    ReactShallowRenderer.createRenderer = function () {
      return new ReactShallowRenderer();
    };

    var currentlyValidatingElement = null;

    function getDisplayName(element) {
      if (element == null) {
        return '#empty';
      } else if (typeof element === 'string' || typeof element === 'number') {
        return '#text';
      } else if (typeof element.type === 'string') {
        return element.type;
      } else {
        var elementType = reactIs.isMemo(element.type) ? element.type.type : element.type;
        return elementType.displayName || elementType.name || 'Unknown';
      }
    }

    function getStackAddendum() {
      var stack = '';

      if (currentlyValidatingElement) {
        var name = getDisplayName(currentlyValidatingElement);
        var owner = currentlyValidatingElement._owner;
        stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
      }

      return stack;
    }

    function getName(type, instance) {
      var constructor = instance && instance.constructor;
      return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
    }

    function shouldConstruct(Component) {
      return !!(Component.prototype && Component.prototype.isReactComponent);
    }

    function getMaskedContext(contextTypes, unmaskedContext) {
      if (!contextTypes || !unmaskedContext) {
        return emptyObject;
      }

      var context = {};

      for (var key in contextTypes) {
        context[key] = unmaskedContext[key];
      }

      return context;
    }

    var ReactShallowRenderer$2 = Object.freeze({
      default: ReactShallowRenderer
    });
    var ReactShallowRenderer$3 = ReactShallowRenderer$2 && ReactShallowRenderer || ReactShallowRenderer$2;
    var shallow = ReactShallowRenderer$3.default || ReactShallowRenderer$3;
    module.exports = shallow;
  })();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,