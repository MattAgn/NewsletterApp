3228f3a0ab803ea545ae35869404d027
'use strict';

var isArray = Array.isArray;
var keyList = Object.keys;
var hasProp = Object.prototype.hasOwnProperty;
var hasElementType = typeof Element !== 'undefined';

function equal(a, b) {
  if (a === b) return true;

  if (a && b && typeof a == 'object' && typeof b == 'object') {
    var arrA = isArray(a),
        arrB = isArray(b),
        i,
        length,
        key;

    if (arrA && arrB) {
      length = a.length;
      if (length != b.length) return false;

      for (i = length; i-- !== 0;) {
        if (!equal(a[i], b[i])) return false;
      }

      return true;
    }

    if (arrA != arrB) return false;
    var dateA = a instanceof Date,
        dateB = b instanceof Date;
    if (dateA != dateB) return false;
    if (dateA && dateB) return a.getTime() == b.getTime();
    var regexpA = a instanceof RegExp,
        regexpB = b instanceof RegExp;
    if (regexpA != regexpB) return false;
    if (regexpA && regexpB) return a.toString() == b.toString();
    var keys = keyList(a);
    length = keys.length;
    if (length !== keyList(b).length) return false;

    for (i = length; i-- !== 0;) {
      if (!hasProp.call(b, keys[i])) return false;
    }

    if (hasElementType && a instanceof Element && b instanceof Element) return a === b;

    for (i = length; i-- !== 0;) {
      key = keys[i];

      if (key === '_owner' && a.$$typeof) {
        continue;
      } else {
        if (!equal(a[key], b[key])) return false;
      }
    }

    return true;
  }

  return a !== a && b !== b;
}

module.exports = function exportedEqual(a, b) {
  try {
    return equal(a, b);
  } catch (error) {
    if (error.message && error.message.match(/stack|recursion/i) || error.number === -2146828260) {
      console.warn('Warning: react-fast-compare does not handle circular references.', error.name, error.message);
      return false;
    }

    throw error;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImlzQXJyYXkiLCJBcnJheSIsImtleUxpc3QiLCJPYmplY3QiLCJrZXlzIiwiaGFzUHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiaGFzRWxlbWVudFR5cGUiLCJFbGVtZW50IiwiZXF1YWwiLCJhIiwiYiIsImFyckEiLCJhcnJCIiwiaSIsImxlbmd0aCIsImtleSIsImRhdGVBIiwiRGF0ZSIsImRhdGVCIiwiZ2V0VGltZSIsInJlZ2V4cEEiLCJSZWdFeHAiLCJyZWdleHBCIiwidG9TdHJpbmciLCJjYWxsIiwiJCR0eXBlb2YiLCJtb2R1bGUiLCJleHBvcnRzIiwiZXhwb3J0ZWRFcXVhbCIsImVycm9yIiwibWVzc2FnZSIsIm1hdGNoIiwibnVtYmVyIiwiY29uc29sZSIsIndhcm4iLCJuYW1lIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxPQUFPLEdBQUdDLEtBQUssQ0FBQ0QsT0FBcEI7QUFDQSxJQUFJRSxPQUFPLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBckI7QUFDQSxJQUFJQyxPQUFPLEdBQUdGLE1BQU0sQ0FBQ0csU0FBUCxDQUFpQkMsY0FBL0I7QUFDQSxJQUFJQyxjQUFjLEdBQUcsT0FBT0MsT0FBUCxLQUFtQixXQUF4Qzs7QUFFQSxTQUFTQyxLQUFULENBQWVDLENBQWYsRUFBa0JDLENBQWxCLEVBQXFCO0FBRW5CLE1BQUlELENBQUMsS0FBS0MsQ0FBVixFQUFhLE9BQU8sSUFBUDs7QUFFYixNQUFJRCxDQUFDLElBQUlDLENBQUwsSUFBVSxPQUFPRCxDQUFQLElBQVksUUFBdEIsSUFBa0MsT0FBT0MsQ0FBUCxJQUFZLFFBQWxELEVBQTREO0FBQzFELFFBQUlDLElBQUksR0FBR2IsT0FBTyxDQUFDVyxDQUFELENBQWxCO0FBQUEsUUFDSUcsSUFBSSxHQUFHZCxPQUFPLENBQUNZLENBQUQsQ0FEbEI7QUFBQSxRQUVJRyxDQUZKO0FBQUEsUUFHSUMsTUFISjtBQUFBLFFBSUlDLEdBSko7O0FB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LEVBQWtHO0FBTWhHQyxNQUFBQSxPQUFPLENBQUNDLElBQVIsQ0FBYSxrRUFBYixFQUFpRkwsS0FBSyxDQUFDTSxJQUF2RixFQUE2Rk4sS0FBSyxDQUFDQyxPQUFuRztBQUNBLGFBQU8sS0FBUDtBQUNEOztBQUVELFVBQU1ELEtBQU47QUFDRDtBQUNGLENBaEJEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG52YXIga2V5TGlzdCA9IE9iamVjdC5rZXlzO1xudmFyIGhhc1Byb3AgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIGhhc0VsZW1lbnRUeXBlID0gdHlwZW9mIEVsZW1lbnQgIT09ICd1bmRlZmluZWQnO1xuXG5mdW5jdGlvbiBlcXVhbChhLCBiKSB7XG4gIC8vIGZhc3QtZGVlcC1lcXVhbCBpbmRleC5qcyAyLjAuMVxuICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG5cbiAgaWYgKGEgJiYgYiAmJiB0eXBlb2YgYSA9PSAnb2JqZWN0JyAmJiB0eXBlb2YgYiA9PSAnb2JqZWN0Jykge1xuICAgIHZhciBhcnJBID0gaXNBcnJheShhKVxuICAgICAgLCBhcnJCID0gaXNBcnJheShiKVxuICAgICAgLCBpXG4gICAgICAsIGxlbmd0aFxuICAgICAgLCBrZXk7XG5cbiAgICBpZiAoYXJyQSAmJiBhcnJCKSB7XG4gICAgICBsZW5ndGggPSBhLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggIT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOylcbiAgICAgICAgaWYgKCFlcXVhbChhW2ldLCBiW2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGFyckEgIT0gYXJyQikgcmV0dXJuIGZhbHNlO1xuXG4gICAgdmFyIGRhdGVBID0gYSBpbnN0YW5jZW9mIERhdGVcbiAgICAgICwgZGF0ZUIgPSBiIGluc3RhbmNlb2YgRGF0ZTtcbiAgICBpZiAoZGF0ZUEgIT0gZGF0ZUIpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoZGF0ZUEgJiYgZGF0ZUIpIHJldHVybiBhLmdldFRpbWUoKSA9PSBiLmdldFRpbWUoKTtcblxuICAgIHZhciByZWdleHBBID0gYSBpbnN0YW5jZW9mIFJlZ0V4cFxuICAgICAgLCByZWdleHBCID0gYiBpbnN0YW5jZW9mIFJlZ0V4cDtcbiAgICBpZiAocmVnZXhwQSAhPSByZWdleHBCKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHJlZ2V4cEEgJiYgcmVnZXhwQikgcmV0dXJuIGEudG9TdHJpbmcoKSA9PSBiLnRvU3RyaW5nKCk7XG5cbiAgICB2YXIga2V5cyA9IGtleUxpc3QoYSk7XG4gICAgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG5cbiAgICBpZiAobGVuZ3RoICE9PSBrZXlMaXN0KGIpLmxlbmd0aClcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOylcbiAgICAgIGlmICghaGFzUHJvcC5jYWxsKGIsIGtleXNbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gZW5kIGZhc3QtZGVlcC1lcXVhbFxuXG4gICAgLy8gc3RhcnQgcmVhY3QtZmFzdC1jb21wYXJlXG4gICAgLy8gY3VzdG9tIGhhbmRsaW5nIGZvciBET00gZWxlbWVudHNcbiAgICBpZiAoaGFzRWxlbWVudFR5cGUgJiYgYSBpbnN0YW5jZW9mIEVsZW1lbnQgJiYgYiBpbnN0YW5jZW9mIEVsZW1lbnQpXG4gICAgICByZXR1cm4gYSA9PT0gYjtcblxuICAgIC8vIGN1c3RvbSBoYW5kbGluZyBmb3IgUmVhY3RcbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspIHtcbiAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICBpZiAoa2V5ID09PSAnX293bmVyJyAmJiBhLiQkdHlwZW9mKSB7XG4gICAgICAgIC8vIFJlYWN0LXNwZWNpZmljOiBhdm9pZCB0cmF2ZXJzaW5nIFJlYWN0IGVsZW1lbnRzJyBfb3duZXIuXG4gICAgICAgIC8vICBfb3duZXIgY29udGFpbnMgY2lyY3VsYXIgcmVmZXJlbmNlc1xuICAgICAgICAvLyBhbmQgaXMgbm90IG5lZWRlZCB3aGVuIGNvbXBhcmluZyB0aGUgYWN0dWFsIGVsZW1lbnRzIChhbmQgbm90IHRoZWlyIG93bmVycylcbiAgICAgICAgLy8gLiQkdHlwZW9mIGFuZCAuX3N0b3JlIG9uIGp1c3QgcmVhc29uYWJsZSBtYXJrZXJzIG9mIGEgcmVhY3QgZWxlbWVudFxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGFsbCBvdGhlciBwcm9wZXJ0aWVzIHNob3VsZCBiZSB0cmF2ZXJzZWQgYXMgdXN1YWxcbiAgICAgICAgaWYgKCFlcXVhbChhW2tleV0sIGJba2V5XSkpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gZW5kIHJlYWN0LWZhc3QtY29tcGFyZVxuXG4gICAgLy8gZmFzdC1kZWVwLWVxdWFsIGluZGV4LmpzIDIuMC4xXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gYSAhPT0gYSAmJiBiICE9PSBiO1xufVxuLy8gZW5kIGZhc3QtZGVlcC1lcXVhbFxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGV4cG9ydGVkRXF1YWwoYSwgYikge1xuICB0cnkge1xuICAgIHJldHVybiBlcXVhbChhLCBiKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBpZiAoKGVycm9yLm1lc3NhZ2UgJiYgZXJyb3IubWVzc2FnZS5tYXRjaCgvc3RhY2t8cmVjdXJzaW9uL2kpKSB8fCAoZXJyb3IubnVtYmVyID09PSAtMjE0NjgyODI2MCkpIHtcbiAgICAgIC8vIHdhcm4gb24gY2lyY3VsYXIgcmVmZXJlbmNlcywgZG9uJ3QgY3Jhc2hcbiAgICAgIC8vIGJyb3dzZXJzIGdpdmUgdGhpcyBkaWZmZXJlbnQgZXJyb3JzIG5hbWUgYW5kIG1lc3NhZ2VzOlxuICAgICAgLy8gY2hyb21lL3NhZmFyaTogXCJSYW5nZUVycm9yXCIsIFwiTWF4aW11bSBjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIlxuICAgICAgLy8gZmlyZWZveDogXCJJbnRlcm5hbEVycm9yXCIsIHRvbyBtdWNoIHJlY3Vyc2lvblwiXG4gICAgICAvLyBlZGdlOiBcIkVycm9yXCIsIFwiT3V0IG9mIHN0YWNrIHNwYWNlXCJcbiAgICAgIGNvbnNvbGUud2FybignV2FybmluZzogcmVhY3QtZmFzdC1jb21wYXJlIGRvZXMgbm90IGhhbmRsZSBjaXJjdWxhciByZWZlcmVuY2VzLicsIGVycm9yLm5hbWUsIGVycm9yLm1lc3NhZ2UpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBzb21lIG90aGVyIGVycm9yLiB3ZSBzaG91bGQgZGVmaW5pdGVseSBrbm93IGFib3V0IHRoZXNlXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG4iXX0=