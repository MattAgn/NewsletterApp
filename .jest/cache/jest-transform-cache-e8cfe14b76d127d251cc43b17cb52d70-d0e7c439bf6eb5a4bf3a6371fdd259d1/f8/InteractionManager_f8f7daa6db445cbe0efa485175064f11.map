{"version":3,"sources":["InteractionManager.js"],"names":["BatchedBridge","require","EventEmitter","TaskQueue","infoLog","invariant","keyMirror","_emitter","DEBUG_DELAY","DEBUG","InteractionManager","Events","interactionStart","interactionComplete","runAfterInteractions","task","tasks","promise","Promise","resolve","_scheduleUpdate","push","run","name","_taskQueue","enqueueTasks","then","bind","done","console","warn","cancel","cancelTasks","createInteractionHandle","handle","_inc","_addInteractionSet","add","clearInteractionHandle","delete","_deleteInteractionSet","addListener","setDeadline","deadline","_deadline","_interactionSet","Set","onMoreTasks","_nextUpdateHandle","setTimeout","_processUpdate","setImmediate","interactionCount","size","forEach","nextInteractionCount","emit","hasTasksToProcess","processNext","getEventLoopRunningTime","clear","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst BatchedBridge = require('../BatchedBridge/BatchedBridge');\nconst EventEmitter = require('../vendor/emitter/EventEmitter');\nconst TaskQueue = require('./TaskQueue');\n\nconst infoLog = require('../Utilities/infoLog');\nconst invariant = require('invariant');\nconst keyMirror = require('fbjs/lib/keyMirror');\n\ntype Handle = number;\nimport type {Task} from './TaskQueue';\n\nconst _emitter = new EventEmitter();\n\nconst DEBUG_DELAY: 0 = 0;\nconst DEBUG: false = false;\n\n/**\n * InteractionManager allows long-running work to be scheduled after any\n * interactions/animations have completed. In particular, this allows JavaScript\n * animations to run smoothly.\n *\n * Applications can schedule tasks to run after interactions with the following:\n *\n * ```\n * InteractionManager.runAfterInteractions(() => {\n *   // ...long-running synchronous task...\n * });\n * ```\n *\n * Compare this to other scheduling alternatives:\n *\n * - requestAnimationFrame(): for code that animates a view over time.\n * - setImmediate/setTimeout(): run code later, note this may delay animations.\n * - runAfterInteractions(): run code later, without delaying active animations.\n *\n * The touch handling system considers one or more active touches to be an\n * 'interaction' and will delay `runAfterInteractions()` callbacks until all\n * touches have ended or been cancelled.\n *\n * InteractionManager also allows applications to register animations by\n * creating an interaction 'handle' on animation start, and clearing it upon\n * completion:\n *\n * ```\n * var handle = InteractionManager.createInteractionHandle();\n * // run animation... (`runAfterInteractions` tasks are queued)\n * // later, on animation completion:\n * InteractionManager.clearInteractionHandle(handle);\n * // queued tasks run if all handles were cleared\n * ```\n *\n * `runAfterInteractions` takes either a plain callback function, or a\n * `PromiseTask` object with a `gen` method that returns a `Promise`.  If a\n * `PromiseTask` is supplied, then it is fully resolved (including asynchronous\n * dependencies that also schedule more tasks via `runAfterInteractions`) before\n * starting on the next task that might have been queued up synchronously\n * earlier.\n *\n * By default, queued tasks are executed together in a loop in one\n * `setImmediate` batch. If `setDeadline` is called with a positive number, then\n * tasks will only be executed until the deadline (in terms of js event loop run\n * time) approaches, at which point execution will yield via setTimeout,\n * allowing events such as touches to start interactions and block queued tasks\n * from executing, making apps more responsive.\n */\nconst InteractionManager = {\n  Events: keyMirror({\n    interactionStart: true,\n    interactionComplete: true,\n  }),\n\n  /**\n   * Schedule a function to run after all interactions have completed. Returns a cancellable\n   * \"promise\".\n   */\n  runAfterInteractions(\n    task: ?Task,\n  ): {then: Function, done: Function, cancel: Function} {\n    const tasks = [];\n    const promise = new Promise(resolve => {\n      _scheduleUpdate();\n      if (task) {\n        tasks.push(task);\n      }\n      tasks.push({\n        run: resolve,\n        name: 'resolve ' + ((task && task.name) || '?'),\n      });\n      _taskQueue.enqueueTasks(tasks);\n    });\n    return {\n      then: promise.then.bind(promise),\n      done: (...args) => {\n        if (promise.done) {\n          return promise.done(...args);\n        } else {\n          console.warn(\n            'Tried to call done when not supported by current Promise implementation.',\n          );\n        }\n      },\n      cancel: function() {\n        _taskQueue.cancelTasks(tasks);\n      },\n    };\n  },\n\n  /**\n   * Notify manager that an interaction has started.\n   */\n  createInteractionHandle(): Handle {\n    DEBUG && infoLog('InteractionManager: create interaction handle');\n    _scheduleUpdate();\n    const handle = ++_inc;\n    _addInteractionSet.add(handle);\n    return handle;\n  },\n\n  /**\n   * Notify manager that an interaction has completed.\n   */\n  clearInteractionHandle(handle: Handle) {\n    DEBUG && infoLog('InteractionManager: clear interaction handle');\n    invariant(!!handle, 'InteractionManager: Must provide a handle to clear.');\n    _scheduleUpdate();\n    _addInteractionSet.delete(handle);\n    _deleteInteractionSet.add(handle);\n  },\n\n  addListener: _emitter.addListener.bind(_emitter),\n\n  /**\n   * A positive number will use setTimeout to schedule any tasks after the\n   * eventLoopRunningTime hits the deadline value, otherwise all tasks will be\n   * executed in one setImmediate batch (default).\n   */\n  setDeadline(deadline: number) {\n    _deadline = deadline;\n  },\n};\n\nconst _interactionSet = new Set();\nconst _addInteractionSet = new Set();\nconst _deleteInteractionSet = new Set();\nconst _taskQueue = new TaskQueue({onMoreTasks: _scheduleUpdate});\nlet _nextUpdateHandle = 0;\nlet _inc = 0;\nlet _deadline = -1;\n\ndeclare function setImmediate(callback: any, ...args: Array<any>): number;\n\n/**\n * Schedule an asynchronous update to the interaction state.\n */\nfunction _scheduleUpdate() {\n  if (!_nextUpdateHandle) {\n    if (_deadline > 0) {\n      /* $FlowFixMe(>=0.63.0 site=react_native_fb) This comment suppresses an\n       * error found when Flow v0.63 was deployed. To see the error delete this\n       * comment and run Flow. */\n      _nextUpdateHandle = setTimeout(_processUpdate, 0 + DEBUG_DELAY);\n    } else {\n      _nextUpdateHandle = setImmediate(_processUpdate);\n    }\n  }\n}\n\n/**\n * Notify listeners, process queue, etc\n */\nfunction _processUpdate() {\n  _nextUpdateHandle = 0;\n\n  const interactionCount = _interactionSet.size;\n  _addInteractionSet.forEach(handle => _interactionSet.add(handle));\n  _deleteInteractionSet.forEach(handle => _interactionSet.delete(handle));\n  const nextInteractionCount = _interactionSet.size;\n\n  if (interactionCount !== 0 && nextInteractionCount === 0) {\n    // transition from 1+ --> 0 interactions\n    _emitter.emit(InteractionManager.Events.interactionComplete);\n  } else if (interactionCount === 0 && nextInteractionCount !== 0) {\n    // transition from 0 --> 1+ interactions\n    _emitter.emit(InteractionManager.Events.interactionStart);\n  }\n\n  // process the queue regardless of a transition\n  if (nextInteractionCount === 0) {\n    while (_taskQueue.hasTasksToProcess()) {\n      _taskQueue.processNext();\n      if (\n        _deadline > 0 &&\n        BatchedBridge.getEventLoopRunningTime() >= _deadline\n      ) {\n        // Hit deadline before processing all tasks, so process more later.\n        _scheduleUpdate();\n        break;\n      }\n    }\n  }\n  _addInteractionSet.clear();\n  _deleteInteractionSet.clear();\n}\n\nmodule.exports = InteractionManager;\n"]}