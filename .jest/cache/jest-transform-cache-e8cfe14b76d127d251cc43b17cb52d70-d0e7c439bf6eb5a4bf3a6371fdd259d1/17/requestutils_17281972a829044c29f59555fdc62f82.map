{"version":3,"sources":["request-utils.js"],"names":["URL","require","absoluteUrlRX","RegExp","headersToArray","headers","raw","Object","entries","Symbol","iterator","zipObject","reduce","obj","key","val","normalizeUrl","url","test","u","href","pathname","search","module","exports","normalizeRequest","options","Request","prototype","isPrototypeOf","method","request","length","TypeError","getPath","getQuery","substr","normalize","toLowerCase","keys","k","equal","actualHeader","expectedHeader","Array","isArray","every","i"],"mappings":"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","sourcesContent":["const URL = require('whatwg-url');\n// https://stackoverflow.com/a/19709846/308237\nconst absoluteUrlRX = new RegExp('^(?:[a-z]+:)?//', 'i');\n\nconst headersToArray = headers => {\n\t// node-fetch 1 Headers\n\tif (typeof headers.raw === 'function') {\n\t\treturn Object.entries(headers.raw());\n\t} else if (headers[Symbol.iterator]) {\n\t\treturn [...headers];\n\t} else {\n\t\treturn Object.entries(headers);\n\t}\n};\n\nconst zipObject = entries =>\n\tentries.reduce((obj, [key, val]) => Object.assign(obj, { [key]: val }), {});\n\nconst normalizeUrl = url => {\n\tif (\n\t\ttypeof url === 'function' ||\n\t\turl instanceof RegExp ||\n\t\t/^(begin|end|glob|express|path)\\:/.test(url)\n\t) {\n\t\treturn url;\n\t}\n\tif (absoluteUrlRX.test(url)) {\n\t\tconst u = new URL.URL(url);\n\t\treturn u.href;\n\t} else {\n\t\tconst u = new URL.URL(url, 'http://dummy');\n\t\treturn u.pathname + u.search;\n\t}\n};\n\nmodule.exports = {\n\tnormalizeRequest: (url, options, Request) => {\n\t\tif (Request.prototype.isPrototypeOf(url)) {\n\t\t\tconst obj = {\n\t\t\t\turl: normalizeUrl(url.url),\n\t\t\t\toptions: Object.assign(\n\t\t\t\t\t{\n\t\t\t\t\t\tmethod: url.method\n\t\t\t\t\t},\n\t\t\t\t\toptions\n\t\t\t\t),\n\t\t\t\trequest: url\n\t\t\t};\n\n\t\t\tconst headers = headersToArray(url.headers);\n\n\t\t\tif (headers.length) {\n\t\t\t\tobj.options.headers = zipObject(headers);\n\t\t\t}\n\t\t\treturn obj;\n\t\t} else if (\n\t\t\ttypeof url === 'string' ||\n\t\t\t// horrible URL object duck-typing\n\t\t\t(typeof url === 'object' && 'href' in url)\n\t\t) {\n\t\t\treturn {\n\t\t\t\turl: normalizeUrl(url),\n\t\t\t\toptions: options\n\t\t\t};\n\t\t} else if (typeof url === 'object') {\n\t\t\tthrow new TypeError(\n\t\t\t\t'fetch-mock: Unrecognised Request object. Read the Config and Installation sections of the docs'\n\t\t\t);\n\t\t} else {\n\t\t\tthrow new TypeError('fetch-mock: Invalid arguments passed to fetch');\n\t\t}\n\t},\n\tnormalizeUrl,\n\tgetPath: url => {\n\t\tconst u = absoluteUrlRX.test(url)\n\t\t\t? new URL.URL(url)\n\t\t\t: new URL.URL(url, 'http://dummy');\n\t\treturn u.pathname;\n\t},\n\n\tgetQuery: url => {\n\t\tconst u = absoluteUrlRX.test(url)\n\t\t\t? new URL.URL(url)\n\t\t\t: new URL.URL(url, 'http://dummy');\n\t\treturn u.search ? u.search.substr(1) : '';\n\t},\n\theaders: {\n\t\tnormalize: headers => zipObject(headersToArray(headers)),\n\t\ttoLowerCase: headers =>\n\t\t\tObject.keys(headers).reduce((obj, k) => {\n\t\t\t\tobj[k.toLowerCase()] = headers[k];\n\t\t\t\treturn obj;\n\t\t\t}, {}),\n\t\tequal: (actualHeader, expectedHeader) => {\n\t\t\tactualHeader = Array.isArray(actualHeader)\n\t\t\t\t? actualHeader\n\t\t\t\t: [actualHeader];\n\t\t\texpectedHeader = Array.isArray(expectedHeader)\n\t\t\t\t? expectedHeader\n\t\t\t\t: [expectedHeader];\n\n\t\t\tif (actualHeader.length !== expectedHeader.length) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn actualHeader.every((val, i) => val === expectedHeader[i]);\n\t\t}\n\t}\n};\n"]}