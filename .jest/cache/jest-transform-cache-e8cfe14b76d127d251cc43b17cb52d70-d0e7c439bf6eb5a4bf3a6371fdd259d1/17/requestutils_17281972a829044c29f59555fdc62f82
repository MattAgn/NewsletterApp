eebff790a56f5e53235b374bf9c63967
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends3 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var URL = require('whatwg-url');

var absoluteUrlRX = new RegExp('^(?:[a-z]+:)?//', 'i');

var headersToArray = function headersToArray(headers) {
  if (typeof headers.raw === 'function') {
    return Object.entries(headers.raw());
  } else if (headers[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]) {
    return (0, _toConsumableArray2.default)(headers);
  } else {
    return Object.entries(headers);
  }
};

var zipObject = function zipObject(entries) {
  return entries.reduce(function (obj, _ref) {
    var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
        key = _ref2[0],
        val = _ref2[1];

    return (0, _extends3.default)(obj, (0, _defineProperty2.default)({}, key, val));
  }, {});
};

var normalizeUrl = function normalizeUrl(url) {
  if (typeof url === 'function' || url instanceof RegExp || /^(begin|end|glob|express|path)\:/.test(url)) {
    return url;
  }

  if (absoluteUrlRX.test(url)) {
    var u = new URL.URL(url);
    return u.href;
  } else {
    var _u = new URL.URL(url, 'http://dummy');

    return _u.pathname + _u.search;
  }
};

module.exports = {
  normalizeRequest: function normalizeRequest(url, options, Request) {
    if (Request.prototype.isPrototypeOf(url)) {
      var obj = {
        url: normalizeUrl(url.url),
        options: (0, _extends3.default)({
          method: url.method
        }, options),
        request: url
      };
      var headers = headersToArray(url.headers);

      if (headers.length) {
        obj.options.headers = zipObject(headers);
      }

      return obj;
    } else if (typeof url === 'string' || typeof url === 'object' && 'href' in url) {
      return {
        url: normalizeUrl(url),
        options: options
      };
    } else if (typeof url === 'object') {
      throw new TypeError('fetch-mock: Unrecognised Request object. Read the Config and Installation sections of the docs');
    } else {
      throw new TypeError('fetch-mock: Invalid arguments passed to fetch');
    }
  },
  normalizeUrl: normalizeUrl,
  getPath: function getPath(url) {
    var u = absoluteUrlRX.test(url) ? new URL.URL(url) : new URL.URL(url, 'http://dummy');
    return u.pathname;
  },
  getQuery: function getQuery(url) {
    var u = absoluteUrlRX.test(url) ? new URL.URL(url) : new URL.URL(url, 'http://dummy');
    return u.search ? u.search.substr(1) : '';
  },
  headers: {
    normalize: function normalize(headers) {
      return zipObject(headersToArray(headers));
    },
    toLowerCase: function toLowerCase(headers) {
      return Object.keys(headers).reduce(function (obj, k) {
        obj[k.toLowerCase()] = headers[k];
        return obj;
      }, {});
    },
    equal: function equal(actualHeader, expectedHeader) {
      actualHeader = Array.isArray(actualHeader) ? actualHeader : [actualHeader];
      expectedHeader = Array.isArray(expectedHeader) ? expectedHeader : [expectedHeader];

      if (actualHeader.length !== expectedHeader.length) {
        return false;
      }

      return actualHeader.every(function (val, i) {
        return val === expectedHeader[i];
      });
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,