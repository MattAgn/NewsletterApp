e868aac8dc64bf3e637a356fa43c2651
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var Animated = require('../../Animated/src/Animated');

var Easing = require('../../Animated/src/Easing');

var React = require('react');

var StyleSheet = require('../../StyleSheet/StyleSheet');

var Text = require('../../Text/Text');

var YellowBoxImageSource = require('./YellowBoxImageSource');

var YellowBoxPressable = require('./YellowBoxPressable');

var YellowBoxStyle = require('./YellowBoxStyle');

var YellowBoxInspectorSourceMapStatus = function (_React$Component) {
  (0, _inherits2.default)(YellowBoxInspectorSourceMapStatus, _React$Component);

  function YellowBoxInspectorSourceMapStatus() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, YellowBoxInspectorSourceMapStatus);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(YellowBoxInspectorSourceMapStatus)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.state = {
      animation: null,
      rotate: null
    };
    return _this;
  }

  (0, _createClass2.default)(YellowBoxInspectorSourceMapStatus, [{
    key: "render",
    value: function render() {
      var image;

      switch (this.props.status) {
        case 'COMPLETE':
          image = YellowBoxImageSource.check;
          break;

        case 'FAILED':
          image = YellowBoxImageSource.alertTriangle;
          break;

        case 'PENDING':
          image = YellowBoxImageSource.loader;
          break;
      }

      return image == null ? null : React.createElement(YellowBoxPressable, {
        backgroundColor: {
          default: YellowBoxStyle.getTextColor(0.8),
          pressed: YellowBoxStyle.getTextColor(0.6)
        },
        hitSlop: {
          bottom: 8,
          left: 8,
          right: 8,
          top: 8
        },
        onPress: this.props.onPress,
        style: StyleSheet.compose(styles.root, this.props.status === 'PENDING' ? styles.pending : null)
      }, React.createElement(Animated.Image, {
        source: {
          height: 16,
          uri: image,
          width: 16
        },
        style: StyleSheet.compose(styles.image, this.state.rotate == null ? null : {
          transform: [{
            rotate: this.state.rotate
          }]
        })
      }), React.createElement(Text, {
        style: styles.text
      }, "Source Map"));
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this._updateAnimation();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this._updateAnimation();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.state.animation != null) {
        this.state.animation.stop();
      }
    }
  }, {
    key: "_updateAnimation",
    value: function _updateAnimation() {
      if (this.props.status === 'PENDING') {
        if (this.state.animation == null) {
          var animated = new Animated.Value(0);
          var animation = Animated.loop(Animated.timing(animated, {
            duration: 2000,
            easing: Easing.linear,
            toValue: 1,
            useNativeDriver: true
          }));
          this.setState({
            animation: animation,
            rotate: animated.interpolate({
              inputRange: [0, 1],
              outputRange: ['0deg', '360deg']
            })
          }, function () {
            animation.start();
          });
        }
      } else {
        if (this.state.animation != null) {
          this.state.animation.stop();
          this.setState({
            animation: null,
            rotate: null
          });
        }
      }
    }
  }]);
  return YellowBoxInspectorSourceMapStatus;
}(React.Component);

var styles = StyleSheet.create({
  root: {
    alignItems: 'center',
    borderRadius: 12,
    flexDirection: 'row',
    height: 24,
    paddingHorizontal: 8
  },
  pending: {
    backgroundColor: YellowBoxStyle.getTextColor(0.6)
  },
  image: {
    marginEnd: 4,
    tintColor: YellowBoxStyle.getBackgroundColor(1)
  },
  text: {
    color: YellowBoxStyle.getBackgroundColor(1),
    fontSize: 12,
    includeFontPadding: false,
    lineHeight: 16
  }
});
module.exports = YellowBoxInspectorSourceMapStatus;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,