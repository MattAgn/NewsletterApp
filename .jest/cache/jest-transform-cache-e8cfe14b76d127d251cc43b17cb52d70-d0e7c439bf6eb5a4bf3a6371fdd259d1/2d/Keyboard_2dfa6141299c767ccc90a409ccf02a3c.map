{"version":3,"sources":["Keyboard.js"],"names":["LayoutAnimation","require","invariant","NativeEventEmitter","KeyboardObserver","dismissKeyboard","KeyboardEventEmitter","Keyboard","addListener","eventName","callback","removeListener","removeAllListeners","dismiss","scheduleLayoutAnimation","event","duration","easing","configureNext","update","type","Types","module","exports"],"mappings":"AAUA;;AAEA,IAAMA,eAAe,GAAGC,OAAO,CAAC,uCAAD,CAA/B;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAME,kBAAkB,GAAGF,OAAO,CAAC,uCAAD,CAAlC;;AACA,IAAMG,gBAAgB,GAAGH,OAAO,CAAC,mCAAD,CAAP,CACtBG,gBADH;;AAEA,IAAMC,eAAe,GAAGJ,OAAO,CAAC,iCAAD,CAA/B;;AACA,IAAMK,oBAAoB,GAAG,IAAIH,kBAAJ,CAAuBC,gBAAvB,CAA7B;AAgFA,IAAIG,QAAQ,GAAG;AAwBbC,EAAAA,WAxBa,uBAwBDC,SAxBC,EAwB6BC,QAxB7B,EAwB8D;AACzER,IAAAA,SAAS,CAAC,KAAD,EAAQ,qCAAR,CAAT;AACD,GA1BY;AAkCbS,EAAAA,cAlCa,0BAmCXF,SAnCW,EAoCXC,QApCW,EAqCX;AACAR,IAAAA,SAAS,CAAC,KAAD,EAAQ,qCAAR,CAAT;AACD,GAvCY;AA8CbU,EAAAA,kBA9Ca,8BA8CMH,SA9CN,EA8CoC;AAC/CP,IAAAA,SAAS,CAAC,KAAD,EAAQ,qCAAR,CAAT;AACD,GAhDY;AAqDbW,EAAAA,OArDa,qBAqDH;AACRX,IAAAA,SAAS,CAAC,KAAD,EAAQ,qCAAR,CAAT;AACD,GAvDY;AA6DbY,EAAAA,uBA7Da,mCA6DWC,KA7DX,EA6DiC;AAC5Cb,IAAAA,SAAS,CAAC,KAAD,EAAQ,qCAAR,CAAT;AACD;AA/DY,CAAf;AAmEAK,QAAQ,GAAGD,oBAAX;AACAC,QAAQ,CAACM,OAAT,GAAmBR,eAAnB;;AACAE,QAAQ,CAACO,uBAAT,GAAmC,UAASC,KAAT,EAA+B;AAAA,MACzDC,QADyD,GACrCD,KADqC,CACzDC,QADyD;AAAA,MAC/CC,MAD+C,GACrCF,KADqC,CAC/CE,MAD+C;;AAEhE,MAAID,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,KAAK,CAArC,EAAwC;AACtChB,IAAAA,eAAe,CAACkB,aAAhB,CAA8B;AAC5BF,MAAAA,QAAQ,EAAEA,QADkB;AAE5BG,MAAAA,MAAM,EAAE;AACNH,QAAAA,QAAQ,EAAEA,QADJ;AAENI,QAAAA,IAAI,EAAGH,MAAM,IAAI,IAAV,IAAkBjB,eAAe,CAACqB,KAAhB,CAAsBJ,MAAtB,CAAnB,IAAqD;AAFrD;AAFoB,KAA9B;AAOD;AACF,CAXD;;AAaAK,MAAM,CAACC,OAAP,GAAiBhB,QAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nconst LayoutAnimation = require('../../LayoutAnimation/LayoutAnimation');\nconst invariant = require('invariant');\nconst NativeEventEmitter = require('../../EventEmitter/NativeEventEmitter');\nconst KeyboardObserver = require('../../BatchedBridge/NativeModules')\n  .KeyboardObserver;\nconst dismissKeyboard = require('../../Utilities/dismissKeyboard');\nconst KeyboardEventEmitter = new NativeEventEmitter(KeyboardObserver);\n\nexport type KeyboardEventName =\n  | 'keyboardWillShow'\n  | 'keyboardDidShow'\n  | 'keyboardWillHide'\n  | 'keyboardDidHide'\n  | 'keyboardWillChangeFrame'\n  | 'keyboardDidChangeFrame';\n\nexport type KeyboardEventEasing =\n  | 'easeIn'\n  | 'easeInEaseOut'\n  | 'easeOut'\n  | 'linear'\n  | 'keyboard';\n\ntype ScreenRect = $ReadOnly<{|\n  screenX: number,\n  screenY: number,\n  width: number,\n  height: number,\n|}>;\n\nexport type KeyboardEvent = $ReadOnly<{|\n  duration: number,\n  easing: KeyboardEventEasing,\n  endCoordinates: ScreenRect,\n  startCoordinates: ScreenRect,\n  isEventFromThisApp: boolean,\n|}>;\n\ntype KeyboardEventListener = (e: KeyboardEvent) => void;\n\n// The following object exists for documentation purposes\n// Actual work happens in\n// https://github.com/facebook/react-native/blob/master/Libraries/EventEmitter/NativeEventEmitter.js\n\n/**\n * `Keyboard` module to control keyboard events.\n *\n * ### Usage\n *\n * The Keyboard module allows you to listen for native events and react to them, as\n * well as make changes to the keyboard, like dismissing it.\n *\n *```\n * import React, { Component } from 'react';\n * import { Keyboard, TextInput } from 'react-native';\n *\n * class Example extends Component {\n *   componentWillMount () {\n *     this.keyboardDidShowListener = Keyboard.addListener('keyboardDidShow', this._keyboardDidShow);\n *     this.keyboardDidHideListener = Keyboard.addListener('keyboardDidHide', this._keyboardDidHide);\n *   }\n *\n *   componentWillUnmount () {\n *     this.keyboardDidShowListener.remove();\n *     this.keyboardDidHideListener.remove();\n *   }\n *\n *   _keyboardDidShow () {\n *     alert('Keyboard Shown');\n *   }\n *\n *   _keyboardDidHide () {\n *     alert('Keyboard Hidden');\n *   }\n *\n *   render() {\n *     return (\n *       <TextInput\n *         onSubmitEditing={Keyboard.dismiss}\n *       />\n *     );\n *   }\n * }\n *```\n */\n\nlet Keyboard = {\n  /**\n   * The `addListener` function connects a JavaScript function to an identified native\n   * keyboard notification event.\n   *\n   * This function then returns the reference to the listener.\n   *\n   * @param {string} eventName The `nativeEvent` is the string that identifies the event you're listening for.  This\n   *can be any of the following:\n   *\n   * - `keyboardWillShow`\n   * - `keyboardDidShow`\n   * - `keyboardWillHide`\n   * - `keyboardDidHide`\n   * - `keyboardWillChangeFrame`\n   * - `keyboardDidChangeFrame`\n   *\n   * Note that if you set `android:windowSoftInputMode` to `adjustResize`  or `adjustNothing`,\n   * only `keyboardDidShow` and `keyboardDidHide` events will be available on Android.\n   * `keyboardWillShow` as well as `keyboardWillHide` are generally not available on Android\n   * since there is no native corresponding event.\n   *\n   * @param {function} callback function to be called when the event fires.\n   */\n  addListener(eventName: KeyboardEventName, callback: KeyboardEventListener) {\n    invariant(false, 'Dummy method used for documentation');\n  },\n\n  /**\n   * Removes a specific listener.\n   *\n   * @param {string} eventName The `nativeEvent` is the string that identifies the event you're listening for.\n   * @param {function} callback function to be called when the event fires.\n   */\n  removeListener(\n    eventName: KeyboardEventName,\n    callback: KeyboardEventListener,\n  ) {\n    invariant(false, 'Dummy method used for documentation');\n  },\n\n  /**\n   * Removes all listeners for a specific event type.\n   *\n   * @param {string} eventType The native event string listeners are watching which will be removed.\n   */\n  removeAllListeners(eventName: KeyboardEventName) {\n    invariant(false, 'Dummy method used for documentation');\n  },\n\n  /**\n   * Dismisses the active keyboard and removes focus.\n   */\n  dismiss() {\n    invariant(false, 'Dummy method used for documentation');\n  },\n\n  /**\n   * Useful for syncing TextInput (or other keyboard accessory view) size of\n   * position changes with keyboard movements.\n   */\n  scheduleLayoutAnimation(event: KeyboardEvent) {\n    invariant(false, 'Dummy method used for documentation');\n  },\n};\n\n// Throw away the dummy object and reassign it to original module\nKeyboard = KeyboardEventEmitter;\nKeyboard.dismiss = dismissKeyboard;\nKeyboard.scheduleLayoutAnimation = function(event: KeyboardEvent) {\n  const {duration, easing} = event;\n  if (duration != null && duration !== 0) {\n    LayoutAnimation.configureNext({\n      duration: duration,\n      update: {\n        duration: duration,\n        type: (easing != null && LayoutAnimation.Types[easing]) || 'keyboard',\n      },\n    });\n  }\n};\n\nmodule.exports = Keyboard;\n"]}