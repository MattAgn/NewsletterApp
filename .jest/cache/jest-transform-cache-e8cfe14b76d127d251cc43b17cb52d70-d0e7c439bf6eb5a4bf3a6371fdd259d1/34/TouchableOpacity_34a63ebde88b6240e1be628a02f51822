6755ecafcc6b158e1c2c672fe2927cd8
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var Animated = require('../../Animated/src/Animated');

var Easing = require('../../Animated/src/Easing');

var NativeMethodsMixin = require('../../Renderer/shims/NativeMethodsMixin');

var Platform = require('../../Utilities/Platform');

var React = require('react');

var PropTypes = require('prop-types');

var Touchable = require('./Touchable');

var TouchableWithoutFeedback = require('./TouchableWithoutFeedback');

var createReactClass = require('create-react-class');

var ensurePositiveDelayProps = require('./ensurePositiveDelayProps');

var flattenStyle = require('../../StyleSheet/flattenStyle');

var PRESS_RETENTION_OFFSET = {
  top: 20,
  left: 20,
  right: 20,
  bottom: 30
};
var TouchableOpacity = createReactClass({
  displayName: 'TouchableOpacity',
  mixins: [Touchable.Mixin.withoutDefaultFocusAndBlur, NativeMethodsMixin],
  propTypes: _objectSpread({}, TouchableWithoutFeedback.propTypes, {
    activeOpacity: PropTypes.number,
    hasTVPreferredFocus: PropTypes.bool,
    nextFocusDown: PropTypes.number,
    nextFocusForward: PropTypes.number,
    nextFocusLeft: PropTypes.number,
    nextFocusRight: PropTypes.number,
    nextFocusUp: PropTypes.number,
    tvParallaxProperties: PropTypes.object
  }),
  getDefaultProps: function getDefaultProps() {
    return {
      activeOpacity: 0.2
    };
  },
  getInitialState: function getInitialState() {
    return _objectSpread({}, this.touchableGetInitialState(), {
      anim: new Animated.Value(this._getChildStyleOpacityWithDefault())
    });
  },
  componentDidMount: function componentDidMount() {
    ensurePositiveDelayProps(this.props);
  },
  UNSAFE_componentWillReceiveProps: function UNSAFE_componentWillReceiveProps(nextProps) {
    ensurePositiveDelayProps(nextProps);
  },
  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
    if (this.props.disabled !== prevProps.disabled) {
      this._opacityInactive(250);
    }
  },
  setOpacityTo: function setOpacityTo(value, duration) {
    Animated.timing(this.state.anim, {
      toValue: value,
      duration: duration,
      easing: Easing.inOut(Easing.quad),
      useNativeDriver: true
    }).start();
  },
  touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
    if (e.dispatchConfig.registrationName === 'onResponderGrant') {
      this._opacityActive(0);
    } else {
      this._opacityActive(150);
    }

    this.props.onPressIn && this.props.onPressIn(e);
  },
  touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
    this._opacityInactive(250);

    this.props.onPressOut && this.props.onPressOut(e);
  },
  touchableHandleFocus: function touchableHandleFocus(e) {
    if (Platform.isTV) {
      this._opacityActive(150);
    }

    this.props.onFocus && this.props.onFocus(e);
  },
  touchableHandleBlur: function touchableHandleBlur(e) {
    if (Platform.isTV) {
      this._opacityInactive(250);
    }

    this.props.onBlur && this.props.onBlur(e);
  },
  touchableHandlePress: function touchableHandlePress(e) {
    this.props.onPress && this.props.onPress(e);
  },
  touchableHandleLongPress: function touchableHandleLongPress(e) {
    this.props.onLongPress && this.props.onLongPress(e);
  },
  touchableGetPressRectOffset: function touchableGetPressRectOffset() {
    return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
  },
  touchableGetHitSlop: function touchableGetHitSlop() {
    return this.props.hitSlop;
  },
  touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
    return this.props.delayPressIn || 0;
  },
  touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
    return this.props.delayLongPress === 0 ? 0 : this.props.delayLongPress || 500;
  },
  touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
    return this.props.delayPressOut;
  },
  _opacityActive: function _opacityActive(duration) {
    this.setOpacityTo(this.props.activeOpacity, duration);
  },
  _opacityInactive: function _opacityInactive(duration) {
    this.setOpacityTo(this._getChildStyleOpacityWithDefault(), duration);
  },
  _getChildStyleOpacityWithDefault: function _getChildStyleOpacityWithDefault() {
    var childStyle = flattenStyle(this.props.style) || {};
    return childStyle.opacity == null ? 1 : childStyle.opacity;
  },
  render: function render() {
    return React.createElement(Animated.View, {
      accessible: this.props.accessible !== false,
      accessibilityLabel: this.props.accessibilityLabel,
      accessibilityHint: this.props.accessibilityHint,
      accessibilityRole: this.props.accessibilityRole,
      accessibilityStates: this.props.accessibilityStates,
      style: [this.props.style, {
        opacity: this.state.anim
      }],
      nativeID: this.props.nativeID,
      testID: this.props.testID,
      onLayout: this.props.onLayout,
      isTVSelectable: true,
      nextFocusDown: this.props.nextFocusDown,
      nextFocusForward: this.props.nextFocusForward,
      nextFocusLeft: this.props.nextFocusLeft,
      nextFocusRight: this.props.nextFocusRight,
      nextFocusUp: this.props.nextFocusUp,
      hasTVPreferredFocus: this.props.hasTVPreferredFocus,
      tvParallaxProperties: this.props.tvParallaxProperties,
      hitSlop: this.props.hitSlop,
      clickable: this.props.clickable !== false && this.props.onPress !== undefined,
      onClick: this.touchableHandlePress,
      onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
      onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
      onResponderGrant: this.touchableHandleResponderGrant,
      onResponderMove: this.touchableHandleResponderMove,
      onResponderRelease: this.touchableHandleResponderRelease,
      onResponderTerminate: this.touchableHandleResponderTerminate
    }, this.props.children, Touchable.renderDebugView({
      color: 'cyan',
      hitSlop: this.props.hitSlop
    }));
  }
});
module.exports = TouchableOpacity;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRvdWNoYWJsZU9wYWNpdHkuanMiXSwibmFtZXMiOlsiQW5pbWF0ZWQiLCJyZXF1aXJlIiwiRWFzaW5nIiwiTmF0aXZlTWV0aG9kc01peGluIiwiUGxhdGZvcm0iLCJSZWFjdCIsIlByb3BUeXBlcyIsIlRvdWNoYWJsZSIsIlRvdWNoYWJsZVdpdGhvdXRGZWVkYmFjayIsImNyZWF0ZVJlYWN0Q2xhc3MiLCJlbnN1cmVQb3NpdGl2ZURlbGF5UHJvcHMiLCJmbGF0dGVuU3R5bGUiLCJQUkVTU19SRVRFTlRJT05fT0ZGU0VUIiwidG9wIiwibGVmdCIsInJpZ2h0IiwiYm90dG9tIiwiVG91Y2hhYmxlT3BhY2l0eSIsImRpc3BsYXlOYW1lIiwibWl4aW5zIiwiTWl4aW4iLCJ3aXRob3V0RGVmYXVsdEZvY3VzQW5kQmx1ciIsInByb3BUeXBlcyIsImFjdGl2ZU9wYWNpdHkiLCJudW1iZXIiLCJoYXNUVlByZWZlcnJlZEZvY3VzIiwiYm9vbCIsIm5leHRGb2N1c0Rvd24iLCJuZXh0Rm9jdXNGb3J3YXJkIiwibmV4dEZvY3VzTGVmdCIsIm5leHRGb2N1c1JpZ2h0IiwibmV4dEZvY3VzVXAiLCJ0dlBhcmFsbGF4UHJvcGVydGllcyIsIm9iamVjdCIsImdldERlZmF1bHRQcm9wcyIsImdldEluaXRpYWxTdGF0ZSIsInRvdWNoYWJsZUdldEluaXRpYWxTdGF0ZSIsImFuaW0iLCJWYWx1ZSIsIl9nZXRDaGlsZFN0eWxlT3BhY2l0eVdpdGhEZWZhdWx0IiwiY29tcG9uZW50RGlkTW91bnQiLCJwcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibmV4dFByb3BzIiwiY29tcG9uZW50RGlkVXBkYXRlIiwicHJldlByb3BzIiwicHJldlN0YXRlIiwiZGlzYWJsZWQiLCJfb3BhY2l0eUluYWN0aXZlIiwic2V0T3BhY2l0eVRvIiwidmFsdWUiLCJkdXJhdGlvbiIsInRpbWluZyIsInN0YXRlIiwidG9WYWx1ZSIsImVhc2luZyIsImluT3V0IiwicXVhZCIsInVzZU5hdGl2ZURyaXZlciIsInN0YXJ0IiwidG91Y2hhYmxlSGFuZGxlQWN0aXZlUHJlc3NJbiIsImUiLCJkaXNwYXRjaENvbmZpZyIsInJlZ2lzdHJhdGlvbk5hbWUiLCJfb3BhY2l0eUFjdGl2ZSIsIm9uUHJlc3NJbiIsInRvdWNoYWJsZUhhbmRsZUFjdGl2ZVByZXNzT3V0Iiwib25QcmVzc091dCIsInRvdWNoYWJsZUhhbmRsZUZvY3VzIiwiaXNUViIsIm9uRm9jdXMiLCJ0b3VjaGFibGVIYW5kbGVCbHVyIiwib25CbHVyIiwidG91Y2hhYmxlSGFuZGxlUHJlc3MiLCJvblByZXNzIiwidG91Y2hhYmxlSGFuZGxlTG9uZ1ByZXNzIiwib25Mb25nUHJlc3MiLCJ0b3VjaGFibGVHZXRQcmVzc1JlY3RPZmZzZXQiLCJwcmVzc1JldGVudGlvbk9mZnNldCIsInRvdWNoYWJsZUdldEhpdFNsb3AiLCJoaXRTbG9wIiwidG91Y2hhYmxlR2V0SGlnaGxpZ2h0RGVsYXlNUyIsImRlbGF5UHJlc3NJbiIsInRvdWNoYWJsZUdldExvbmdQcmVzc0RlbGF5TVMiLCJkZWxheUxvbmdQcmVzcyIsInRvdWNoYWJsZUdldFByZXNzT3V0RGVsYXlNUyIsImRlbGF5UHJlc3NPdXQiLCJjaGlsZFN0eWxlIiwic3R5bGUiLCJvcGFjaXR5IiwicmVuZGVyIiwiYWNjZXNzaWJsZSIsImFjY2Vzc2liaWxpdHlMYWJlbCIsImFjY2Vzc2liaWxpdHlIaW50IiwiYWNjZXNzaWJpbGl0eVJvbGUiLCJhY2Nlc3NpYmlsaXR5U3RhdGVzIiwibmF0aXZlSUQiLCJ0ZXN0SUQiLCJvbkxheW91dCIsImNsaWNrYWJsZSIsInVuZGVmaW5lZCIsInRvdWNoYWJsZUhhbmRsZVN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyIiwidG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0IiwidG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyR3JhbnQiLCJ0b3VjaGFibGVIYW5kbGVSZXNwb25kZXJNb3ZlIiwidG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyUmVsZWFzZSIsInRvdWNoYWJsZUhhbmRsZVJlc3BvbmRlclRlcm1pbmF0ZSIsImNoaWxkcmVuIiwicmVuZGVyRGVidWdWaWV3IiwiY29sb3IiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFVQTs7Ozs7Ozs7OztBQUVBLElBQU1BLFFBQVEsR0FBR0MsT0FBTyxDQUFDLDZCQUFELENBQXhCOztBQUNBLElBQU1DLE1BQU0sR0FBR0QsT0FBTyxDQUFDLDJCQUFELENBQXRCOztBQUNBLElBQU1FLGtCQUFrQixHQUFHRixPQUFPLENBQUMseUNBQUQsQ0FBbEM7O0FBQ0EsSUFBTUcsUUFBUSxHQUFHSCxPQUFPLENBQUMsMEJBQUQsQ0FBeEI7O0FBQ0EsSUFBTUksS0FBSyxHQUFHSixPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxJQUFNSyxTQUFTLEdBQUdMLE9BQU8sQ0FBQyxZQUFELENBQXpCOztBQUNBLElBQU1NLFNBQVMsR0FBR04sT0FBTyxDQUFDLGFBQUQsQ0FBekI7O0FBQ0EsSUFBTU8sd0JBQXdCLEdBQUdQLE9BQU8sQ0FBQyw0QkFBRCxDQUF4Qzs7QUFFQSxJQUFNUSxnQkFBZ0IsR0FBR1IsT0FBTyxDQUFDLG9CQUFELENBQWhDOztBQUNBLElBQU1TLHdCQUF3QixHQUFHVCxPQUFPLENBQUMsNEJBQUQsQ0FBeEM7O0FBQ0EsSUFBTVUsWUFBWSxHQUFHVixPQUFPLENBQUMsK0JBQUQsQ0FBNUI7O0FBT0EsSUFBTVcsc0JBQXNCLEdBQUc7QUFBQ0MsRUFBQUEsR0FBRyxFQUFFLEVBQU47QUFBVUMsRUFBQUEsSUFBSSxFQUFFLEVBQWhCO0FBQW9CQyxFQUFBQSxLQUFLLEVBQUUsRUFBM0I7QUFBK0JDLEVBQUFBLE1BQU0sRUFBRTtBQUF2QyxDQUEvQjtBQTJHQSxJQUFNQyxnQkFBZ0IsR0FBS1IsZ0JBQWdCLENBQUM7QUFDMUNTLEVBQUFBLFdBQVcsRUFBRSxrQkFENkI7QUFFMUNDLEVBQUFBLE1BQU0sRUFBRSxDQUFDWixTQUFTLENBQUNhLEtBQVYsQ0FBZ0JDLDBCQUFq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S0MsMENBekJUO0FBMkJFLE1BQUEsZ0JBQWdCLEVBQUUsS0FBS0MsNkJBM0J6QjtBQTRCRSxNQUFBLGVBQWUsRUFBRSxLQUFLQyw0QkE1QnhCO0FBNkJFLE1BQUEsa0JBQWtCLEVBQUUsS0FBS0MsK0JBN0IzQjtBQThCRSxNQUFBLG9CQUFvQixFQUFFLEtBQUtDO0FBOUI3QixPQStCRyxLQUFLakUsS0FBTCxDQUFXa0UsUUEvQmQsRUFnQ0dwRyxTQUFTLENBQUNxRyxlQUFWLENBQTBCO0FBQ3pCQyxNQUFBQSxLQUFLLEVBQUUsTUFEa0I7QUFFekI3QixNQUFBQSxPQUFPLEVBQUUsS0FBS3ZDLEtBQUwsQ0FBV3VDO0FBRkssS0FBMUIsQ0FoQ0gsQ0FERjtBQXVDRDtBQWhOeUMsQ0FBRCxDQUEzQztBQW1OQThCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjlGLGdCQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IEFuaW1hdGVkID0gcmVxdWlyZSgnLi4vLi4vQW5pbWF0ZWQvc3JjL0FuaW1hdGVkJyk7XG5jb25zdCBFYXNpbmcgPSByZXF1aXJlKCcuLi8uLi9BbmltYXRlZC9zcmMvRWFzaW5nJyk7XG5jb25zdCBOYXRpdmVNZXRob2RzTWl4aW4gPSByZXF1aXJlKCcuLi8uLi9SZW5kZXJlci9zaGltcy9OYXRpdmVNZXRob2RzTWl4aW4nKTtcbmNvbnN0IFBsYXRmb3JtID0gcmVxdWlyZSgnLi4vLi4vVXRpbGl0aWVzL1BsYXRmb3JtJyk7XG5jb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5jb25zdCBQcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5jb25zdCBUb3VjaGFibGUgPSByZXF1aXJlKCcuL1RvdWNoYWJsZScpO1xuY29uc3QgVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrID0gcmVxdWlyZSgnLi9Ub3VjaGFibGVXaXRob3V0RmVlZGJhY2snKTtcblxuY29uc3QgY3JlYXRlUmVhY3RDbGFzcyA9IHJlcXVpcmUoJ2NyZWF0ZS1yZWFjdC1jbGFzcycpO1xuY29uc3QgZW5zdXJlUG9zaXRpdmVEZWxheVByb3BzID0gcmVxdWlyZSgnLi9lbnN1cmVQb3NpdGl2ZURlbGF5UHJvcHMnKTtcbmNvbnN0IGZsYXR0ZW5TdHlsZSA9IHJlcXVpcmUoJy4uLy4uL1N0eWxlU2hlZXQvZmxhdHRlblN0eWxlJyk7XG5cbmltcG9ydCB0eXBlIHtQcm9wcyBhcyBUb3VjaGFibGVXaXRob3V0RmVlZGJhY2tQcm9wc30gZnJvbSAnLi9Ub3VjaGFibGVXaXRob3V0RmVlZGJhY2snO1xuaW1wb3J0IHR5cGUge1ZpZXdTdHlsZVByb3B9IGZyb20gJy4uLy4uL1N0eWxlU2hlZXQvU3R5bGVTaGVldCc7XG5pbXBvcnQgdHlwZSB7VFZQYXJhbGxheFByb3BlcnRpZXNUeXBlfSBmcm9tICcuLi9BcHBsZVRWL1RWVmlld1Byb3BUeXBlcyc7XG5pbXBvcnQgdHlwZSB7UHJlc3NFdmVudH0gZnJvbSAnLi4vLi4vVHlwZXMvQ29yZUV2ZW50VHlwZXMnO1xuXG5jb25zdCBQUkVTU19SRVRFTlRJT05fT0ZGU0VUID0ge3RvcDogMjAsIGxlZnQ6IDIwLCByaWdodDogMjAsIGJvdHRvbTogMzB9O1xuXG50eXBlIFRWUHJvcHMgPSAkUmVhZE9ubHk8e3xcbiAgaGFzVFZQcmVmZXJyZWRGb2N1cz86ID9ib29sZWFuLFxuICBuZXh0Rm9jdXNEb3duPzogP251bWJlcixcbiAgbmV4dEZvY3VzRm9yd2FyZD86ID9udW1iZXIsXG4gIG5leHRGb2N1c0xlZnQ/OiA/bnVtYmVyLFxuICBuZXh0Rm9jdXNSaWdodD86ID9udW1iZXIsXG4gIG5leHRGb2N1c1VwPzogP251bWJlcixcbiAgdHZQYXJhbGxheFByb3BlcnRpZXM/OiA/VFZQYXJhbGxheFByb3BlcnRpZXNUeXBlLFxufH0+O1xuXG50eXBlIFByb3BzID0gJFJlYWRPbmx5PHt8XG4gIC4uLlRvdWNoYWJsZVdpdGhvdXRGZWVkYmFja1Byb3BzLFxuICAuLi5UVlByb3BzLFxuICBhY3RpdmVPcGFjaXR5PzogP251bWJlcixcbiAgc3R5bGU/OiA/Vmlld1N0eWxlUHJvcCxcbnx9PjtcblxuLyoqXG4gKiBBIHdyYXBwZXIgZm9yIG1ha2luZyB2aWV3cyByZXNwb25kIHByb3Blcmx5IHRvIHRvdWNoZXMuXG4gKiBPbiBwcmVzcyBkb3duLCB0aGUgb3BhY2l0eSBvZiB0aGUgd3JhcHBlZCB2aWV3IGlzIGRlY3JlYXNlZCwgZGltbWluZyBpdC5cbiAqXG4gKiBPcGFjaXR5IGlzIGNvbnRyb2xsZWQgYnkgd3JhcHBpbmcgdGhlIGNoaWxkcmVuIGluIGFuIEFuaW1hdGVkLlZpZXcsIHdoaWNoIGlzXG4gKiBhZGRlZCB0byB0aGUgdmlldyBoaWVhcmNoeS4gIEJlIGF3YXJlIHRoYXQgdGhpcyBjYW4gYWZmZWN0IGxheW91dC5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYFxuICogcmVuZGVyQnV0dG9uOiBmdW5jdGlvbigpIHtcbiAqICAgcmV0dXJuIChcbiAqICAgICA8VG91Y2hhYmxlT3BhY2l0eSBvblByZXNzPXt0aGlzLl9vblByZXNzQnV0dG9ufT5cbiAqICAgICAgIDxJbWFnZVxuICogICAgICAgICBzdHlsZT17c3R5bGVzLmJ1dHRvbn1cbiAqICAgICAgICAgc291cmNlPXtyZXF1aXJlKCcuL215QnV0dG9uLnBuZycpfVxuICogICAgICAgLz5cbiAqICAgICA8L1RvdWNoYWJsZU9wYWNpdHk+XG4gKiAgICk7XG4gKiB9LFxuICogYGBgXG4gKiAjIyMgRXhhbXBsZVxuICpcbiAqIGBgYFJlYWN0TmF0aXZlV2ViUGxheWVyXG4gKiBpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXG4gKiBpbXBvcnQge1xuICogICBBcHBSZWdpc3RyeSxcbiAqICAgU3R5bGVTaGVldCxcbiAqICAgVG91Y2hhYmxlT3BhY2l0eSxcbiAqICAgVGV4dCxcbiAqICAgVmlldyxcbiAqIH0gZnJvbSAncmVhY3QtbmF0aXZlJ1xuICpcbiAqIGNsYXNzIEFwcCBleHRlbmRzIENvbXBvbmVudCB7XG4gKiAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gKiAgICAgc3VwZXIocHJvcHMpXG4gKiAgICAgdGhpcy5zdGF0ZSA9IHsgY291bnQ6IDAgfVxuICogICB9XG4gKlxuICogICBvblByZXNzID0gKCkgPT4ge1xuICogICAgIHRoaXMuc2V0U3RhdGUoe1xuICogICAgICAgY291bnQ6IHRoaXMuc3RhdGUuY291bnQrMVxuICogICAgIH0pXG4gKiAgIH1cbiAqXG4gKiAgcmVuZGVyKCkge1xuICogICAgcmV0dXJuIChcbiAqICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9PlxuICogICAgICAgIDxUb3VjaGFibGVPcGFjaXR5XG4gKiAgICAgICAgICBzdHlsZT17c3R5bGVzLmJ1dHRvbn1cbiAqICAgICAgICAgIG9uUHJlc3M9e3RoaXMub25QcmVzc31cbiAqICAgICAgICA+XG4gKiAgICAgICAgICA8VGV4dD4gVG91Y2ggSGVyZSA8L1RleHQ+XG4gKiAgICAgICAgPC9Ub3VjaGFibGVPcGFjaXR5PlxuICogICAgICAgIDxWaWV3IHN0eWxlPXtbc3R5bGVzLmNvdW50Q29udGFpbmVyXX0+XG4gKiAgICAgICAgICA8VGV4dCBzdHlsZT17W3N0eWxlcy5jb3VudFRleHRdfT5cbiAqICAgICAgICAgICAgIHsgdGhpcy5zdGF0ZS5jb3VudCAhPT0gMCA/IHRoaXMuc3RhdGUuY291bnQ6IG51bGx9XG4gKiAgICAgICAgICAgPC9UZXh0PlxuICogICAgICAgICA8L1ZpZXc+XG4gKiAgICAgICA8L1ZpZXc+XG4gKiAgICAgKVxuICogICB9XG4gKiB9XG4gKlxuICogY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICogICBjb250YWluZXI6IHtcbiAqICAgICBmbGV4OiAxLFxuICogICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAqICAgICBwYWRkaW5nSG9yaXpvbnRhbDogMTBcbiAqICAgfSxcbiAqICAgYnV0dG9uOiB7XG4gKiAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gKiAgICAgYmFja2dyb3VuZENvbG9yOiAnI0RERERERCcsXG4gKiAgICAgcGFkZGluZzogMTBcbiAqICAgfSxcbiAqICAgY291bnRDb250YWluZXI6IHtcbiAqICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAqICAgICBwYWRkaW5nOiAxMFxuICogICB9LFxuICogICBjb3VudFRleHQ6IHtcbiAqICAgICBjb2xvcjogJyNGRjAwRkYnXG4gKiAgIH1cbiAqIH0pXG4gKlxuICogQXBwUmVnaXN0cnkucmVnaXN0ZXJDb21wb25lbnQoJ0FwcCcsICgpID0+IEFwcClcbiAqIGBgYFxuICpcbiAqL1xuY29uc3QgVG91Y2hhYmxlT3BhY2l0eSA9ICgoY3JlYXRlUmVhY3RDbGFzcyh7XG4gIGRpc3BsYXlOYW1lOiAnVG91Y2hhYmxlT3BhY2l0eScsXG4gIG1peGluczogW1RvdWNoYWJsZS5NaXhpbi53aXRob3V0RGVmYXVsdEZvY3VzQW5kQmx1ciwgTmF0aXZlTWV0aG9kc01peGluXSxcblxuICBwcm9wVHlwZXM6IHtcbiAgICAvKiAkRmxvd0ZpeE1lKD49MC44OS4wIHNpdGU9cmVhY3RfbmF0aXZlX2ZiKSBUaGlzIGNvbW1lbnQgc3VwcHJlc3NlcyBhblxuICAgICAqIGVycm9yIGZvdW5kIHdoZW4gRmxvdyB2MC44OSB3YXMgZGVwbG95ZWQuIFRvIHNlZSB0aGUgZXJyb3IsIGRlbGV0ZSB0aGlzXG4gICAgICogY29tbWVudCBhbmQgcnVuIEZsb3cuICovXG4gICAgLi4uVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrLnByb3BUeXBlcyxcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHdoYXQgdGhlIG9wYWNpdHkgb2YgdGhlIHdyYXBwZWQgdmlldyBzaG91bGQgYmUgd2hlbiB0b3VjaCBpc1xuICAgICAqIGFjdGl2ZS4gRGVmYXVsdHMgdG8gMC4yLlxuICAgICAqL1xuICAgIGFjdGl2ZU9wYWNpdHk6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgLyoqXG4gICAgICogVFYgcHJlZmVycmVkIGZvY3VzIChzZWUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIFZpZXcgY29tcG9uZW50KS5cbiAgICAgKi9cbiAgICBoYXNUVlByZWZlcnJlZEZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgICAvKipcbiAgICAgKiBUViBuZXh0IGZvY3VzIGRvd24gKHNlZSBkb2N1bWVudGF0aW9uIGZvciB0aGUgVmlldyBjb21wb25lbnQpLlxuICAgICAqXG4gICAgICogQHBsYXRmb3JtIGFuZHJvaWRcbiAgICAgKi9cbiAgICBuZXh0Rm9jdXNEb3duOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIC8qKlxuICAgICAqIFRWIG5leHQgZm9jdXMgZm9yd2FyZCAoc2VlIGRvY3VtZW50YXRpb24gZm9yIHRoZSBWaWV3IGNvbXBvbmVudCkuXG4gICAgICpcbiAgICAgKiBAcGxhdGZvcm0gYW5kcm9pZFxuICAgICAqL1xuICAgIG5leHRGb2N1c0ZvcndhcmQ6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgLyoqXG4gICAgICogVFYgbmV4dCBmb2N1cyBsZWZ0IChzZWUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIFZpZXcgY29tcG9uZW50KS5cbiAgICAgKlxuICAgICAqIEBwbGF0Zm9ybSBhbmRyb2lkXG4gICAgICovXG4gICAgbmV4dEZvY3VzTGVmdDogUHJvcFR5cGVzLm51bWJlcixcbiAgICAvKipcbiAgICAgKiBUViBuZXh0IGZvY3VzIHJpZ2h0IChzZWUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIFZpZXcgY29tcG9uZW50KS5cbiAgICAgKlxuICAgICAqIEBwbGF0Zm9ybSBhbmRyb2lkXG4gICAgICovXG4gICAgbmV4dEZvY3VzUmlnaHQ6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgLyoqXG4gICAgICogVFYgbmV4dCBmb2N1cyB1cCAoc2VlIGRvY3VtZW50YXRpb24gZm9yIHRoZSBWaWV3IGNvbXBvbmVudCkuXG4gICAgICpcbiAgICAgKiBAcGxhdGZvcm0gYW5kcm9pZFxuICAgICAqL1xuICAgIG5leHRGb2N1c1VwOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIC8qKlxuICAgICAqIEFwcGxlIFRWIHBhcmFsbGF4IGVmZmVjdHNcbiAgICAgKi9cbiAgICB0dlBhcmFsbGF4UHJvcGVydGllczogUHJvcFR5cGVzLm9iamVjdCxcbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBhY3RpdmVPcGFjaXR5OiAwLjIsXG4gICAgfTtcbiAgfSxcblxuICBnZXRJbml0aWFsU3RhdGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICAuLi50aGlzLnRvdWNoYWJsZUdldEluaXRpYWxTdGF0ZSgpLFxuICAgICAgYW5pbTogbmV3IEFuaW1hdGVkLlZhbHVlKHRoaXMuX2dldENoaWxkU3R5bGVPcGFjaXR5V2l0aERlZmF1bHQoKSksXG4gICAgfTtcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24oKSB7XG4gICAgZW5zdXJlUG9zaXRpdmVEZWxheVByb3BzKHRoaXMucHJvcHMpO1xuICB9LFxuXG4gIFVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzOiBmdW5jdGlvbihuZXh0UHJvcHMpIHtcbiAgICBlbnN1cmVQb3NpdGl2ZURlbGF5UHJvcHMobmV4dFByb3BzKTtcbiAgfSxcblxuICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuZGlzYWJsZWQgIT09IHByZXZQcm9wcy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5fb3BhY2l0eUluYWN0aXZlKDI1MCk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBBbmltYXRlIHRoZSB0b3VjaGFibGUgdG8gYSBuZXcgb3BhY2l0eS5cbiAgICovXG4gIHNldE9wYWNpdHlUbzogZnVuY3Rpb24odmFsdWU6IG51bWJlciwgZHVyYXRpb246IG51bWJlcikge1xuICAgIEFuaW1hdGVkLnRpbWluZyh0aGlzLnN0YXRlLmFuaW0sIHtcbiAgICAgIHRvVmFsdWU6IHZhbHVlLFxuICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgICAgZWFzaW5nOiBFYXNpbmcuaW5PdXQoRWFzaW5nLnF1YWQpLFxuICAgICAgdXNlTmF0aXZlRHJpdmVyOiB0cnVlLFxuICAgIH0pLnN0YXJ0KCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIGBUb3VjaGFibGUuTWl4aW5gIHNlbGYgY2FsbGJhY2tzLiBUaGUgbWl4aW4gd2lsbCBpbnZva2UgdGhlc2UgaWYgdGhleSBhcmVcbiAgICogZGVmaW5lZCBvbiB5b3VyIGNvbXBvbmVudC5cbiAgICovXG4gIHRvdWNoYWJsZUhhbmRsZUFjdGl2ZVByZXNzSW46IGZ1bmN0aW9uKGU6IFByZXNzRXZlbnQpIHtcbiAgICBpZiAoZS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lID09PSAnb25SZXNwb25kZXJHcmFudCcpIHtcbiAgICAgIHRoaXMuX29wYWNpdHlBY3RpdmUoMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX29wYWNpdHlBY3RpdmUoMTUwKTtcbiAgICB9XG4gICAgdGhpcy5wcm9wcy5vblByZXNzSW4gJiYgdGhpcy5wcm9wcy5vblByZXNzSW4oZSk7XG4gIH0sXG5cbiAgdG91Y2hhYmxlSGFuZGxlQWN0aXZlUHJlc3NPdXQ6IGZ1bmN0aW9uKGU6IFByZXNzRXZlbnQpIHtcbiAgICB0aGlzLl9vcGFjaXR5SW5hY3RpdmUoMjUwKTtcbiAgICB0aGlzLnByb3BzLm9uUHJlc3NPdXQgJiYgdGhpcy5wcm9wcy5vblByZXNzT3V0KGUpO1xuICB9LFxuXG4gIHRvdWNoYWJsZUhhbmRsZUZvY3VzOiBmdW5jdGlvbihlOiBFdmVudCkge1xuICAgIGlmIChQbGF0Zm9ybS5pc1RWKSB7XG4gICAgICB0aGlzLl9vcGFjaXR5QWN0aXZlKDE1MCk7XG4gICAgfVxuICAgIHRoaXMucHJvcHMub25Gb2N1cyAmJiB0aGlzLnByb3BzLm9uRm9jdXMoZSk7XG4gIH0sXG5cbiAgdG91Y2hhYmxlSGFuZGxlQmx1cjogZnVuY3Rpb24oZTogRXZlbnQpIHtcbiAgICBpZiAoUGxhdGZvcm0uaXNUVikge1xuICAgICAgdGhpcy5fb3BhY2l0eUluYWN0aXZlKDI1MCk7XG4gICAgfVxuICAgIHRoaXMucHJvcHMub25CbHVyICYmIHRoaXMucHJvcHMub25CbHVyKGUpO1xuICB9LFxuXG4gIHRvdWNoYWJsZUhhbmRsZVByZXNzOiBmdW5jdGlvbihlOiBQcmVzc0V2ZW50KSB7XG4gICAgdGhpcy5wcm9wcy5vblByZXNzICYmIHRoaXMucHJvcHMub25QcmVzcyhlKTtcbiAgfSxcblxuICB0b3VjaGFibGVIYW5kbGVMb25nUHJlc3M6IGZ1bmN0aW9uKGU6IFByZXNzRXZlbnQpIHtcbiAgICB0aGlzLnByb3BzLm9uTG9uZ1ByZXNzICYmIHRoaXMucHJvcHMub25Mb25nUHJlc3MoZSk7XG4gIH0sXG5cbiAgdG91Y2hhYmxlR2V0UHJlc3NSZWN0T2Zmc2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5wcmVzc1JldGVudGlvbk9mZnNldCB8fCBQUkVTU19SRVRFTlRJT05fT0ZGU0VUO1xuICB9LFxuXG4gIHRvdWNoYWJsZUdldEhpdFNsb3A6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLmhpdFNsb3A7XG4gIH0sXG5cbiAgdG91Y2hhYmxlR2V0SGlnaGxpZ2h0RGVsYXlNUzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuZGVsYXlQcmVzc0luIHx8IDA7XG4gIH0sXG5cbiAgdG91Y2hhYmxlR2V0TG9uZ1ByZXNzRGVsYXlNUzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcHMuZGVsYXlMb25nUHJlc3MgPT09IDBcbiAgICAgID8gMFxuICAgICAgOiB0aGlzLnByb3BzLmRlbGF5TG9uZ1ByZXNzIHx8IDUwMDtcbiAgfSxcblxuICB0b3VjaGFibGVHZXRQcmVzc091dERlbGF5TVM6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLmRlbGF5UHJlc3NPdXQ7XG4gIH0sXG5cbiAgX29wYWNpdHlBY3RpdmU6IGZ1bmN0aW9uKGR1cmF0aW9uOiBudW1iZXIpIHtcbiAgICB0aGlzLnNldE9wYWNpdHlUbyh0aGlzLnByb3BzLmFjdGl2ZU9wYWNpdHksIGR1cmF0aW9uKTtcbiAgfSxcblxuICBfb3BhY2l0eUluYWN0aXZlOiBmdW5jdGlvbihkdXJhdGlvbjogbnVtYmVyKSB7XG4gICAgdGhpcy5zZXRPcGFjaXR5VG8odGhpcy5fZ2V0Q2hpbGRTdHlsZU9wYWNpdHlXaXRoRGVmYXVsdCgpLCBkdXJhdGlvbik7XG4gIH0sXG5cbiAgX2dldENoaWxkU3R5bGVPcGFjaXR5V2l0aERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IGNoaWxkU3R5bGUgPSBmbGF0dGVuU3R5bGUodGhpcy5wcm9wcy5zdHlsZSkgfHwge307XG4gICAgcmV0dXJuIGNoaWxkU3R5bGUub3BhY2l0eSA9PSBudWxsID8gMSA6IGNoaWxkU3R5bGUub3BhY2l0eTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8QW5pbWF0ZWQuVmlld1xuICAgICAgICBhY2Nlc3NpYmxlPXt0aGlzLnByb3BzLmFjY2Vzc2libGUgIT09IGZhbHNlfVxuICAgICAgICBhY2Nlc3NpYmlsaXR5TGFiZWw9e3RoaXMucHJvcHMuYWNjZXNzaWJpbGl0eUxhYmVsfVxuICAgICAgICBhY2Nlc3NpYmlsaXR5SGludD17dGhpcy5wcm9wcy5hY2Nlc3NpYmlsaXR5SGludH1cbiAgICAgICAgYWNjZXNzaWJpbGl0eVJvbGU9e3RoaXMucHJvcHMuYWNjZXNzaWJpbGl0eVJvbGV9XG4gICAgICAgIGFjY2Vzc2liaWxpdHlTdGF0ZXM9e3RoaXMucHJvcHMuYWNjZXNzaWJpbGl0eVN0YXRlc31cbiAgICAgICAgc3R5bGU9e1t0aGlzLnByb3BzLnN0eWxlLCB7b3BhY2l0eTogdGhpcy5zdGF0ZS5hbmltfV19XG4gICAgICAgIG5hdGl2ZUlEPXt0aGlzLnByb3BzLm5hdGl2ZUlEfVxuICAgICAgICB0ZXN0SUQ9e3RoaXMucHJvcHMudGVzdElEfVxuICAgICAgICBvbkxheW91dD17dGhpcy5wcm9wcy5vbkxheW91dH1cbiAgICAgICAgaXNUVlNlbGVjdGFibGU9e3RydWV9XG4gICAgICAgIG5leHRGb2N1c0Rvd249e3RoaXMucHJvcHMubmV4dEZvY3VzRG93bn1cbiAgICAgICAgbmV4dEZvY3VzRm9yd2FyZD17dGhpcy5wcm9wcy5uZXh0Rm9jdXNGb3J3YXJkfVxuICAgICAgICBuZXh0Rm9jdXNMZWZ0PXt0aGlzLnByb3BzLm5leHRGb2N1c0xlZnR9XG4gICAgICAgIG5leHRGb2N1c1JpZ2h0PXt0aGlzLnByb3BzLm5leHRGb2N1c1JpZ2h0fVxuICAgICAgICBuZXh0Rm9jdXNVcD17dGhpcy5wcm9wcy5uZXh0Rm9jdXNVcH1cbiAgICAgICAgaGFzVFZQcmVmZXJyZWRGb2N1cz17dGhpcy5wcm9wcy5oYXNUVlByZWZlcnJlZEZvY3VzfVxuICAgICAgICB0dlBhcmFsbGF4UHJvcGVydGllcz17dGhpcy5wcm9wcy50dlBhcmFsbGF4UHJvcGVydGllc31cbiAgICAgICAgaGl0U2xvcD17dGhpcy5wcm9wcy5oaXRTbG9wfVxuICAgICAgICBjbGlja2FibGU9e1xuICAgICAgICAgIHRoaXMucHJvcHMuY2xpY2thYmxlICE9PSBmYWxzZSAmJiB0aGlzLnByb3BzLm9uUHJlc3MgIT09IHVuZGVmaW5lZFxuICAgICAgICB9XG4gICAgICAgIG9uQ2xpY2s9e3RoaXMudG91Y2hhYmxlSGFuZGxlUHJlc3N9XG4gICAgICAgIG9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXI9e3RoaXMudG91Y2hhYmxlSGFuZGxlU3RhcnRTaG91bGRTZXRSZXNwb25kZXJ9XG4gICAgICAgIG9uUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0PXtcbiAgICAgICAgICB0aGlzLnRvdWNoYWJsZUhhbmRsZVJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdFxuICAgICAgICB9XG4gICAgICAgIG9uUmVzcG9uZGVyR3JhbnQ9e3RoaXMudG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyR3JhbnR9XG4gICAgICAgIG9uUmVzcG9uZGVyTW92ZT17dGhpcy50b3VjaGFibGVIYW5kbGVSZXNwb25kZXJNb3ZlfVxuICAgICAgICBvblJlc3BvbmRlclJlbGVhc2U9e3RoaXMudG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyUmVsZWFzZX1cbiAgICAgICAgb25SZXNwb25kZXJUZXJtaW5hdGU9e3RoaXMudG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyVGVybWluYXRlfT5cbiAgICAgICAge3RoaXMucHJvcHMuY2hpbGRyZW59XG4gICAgICAgIHtUb3VjaGFibGUucmVuZGVyRGVidWdWaWV3KHtcbiAgICAgICAgICBjb2xvcjogJ2N5YW4nLFxuICAgICAgICAgIGhpdFNsb3A6IHRoaXMucHJvcHMuaGl0U2xvcCxcbiAgICAgICAgfSl9XG4gICAgICA8L0FuaW1hdGVkLlZpZXc+XG4gICAgKTtcbiAgfSxcbn0pOiBhbnkpOiBSZWFjdC5Db21wb25lbnRUeXBlPFByb3BzPik7XG5cbm1vZHVsZS5leHBvcnRzID0gVG91Y2hhYmxlT3BhY2l0eTtcbiJdfQ==