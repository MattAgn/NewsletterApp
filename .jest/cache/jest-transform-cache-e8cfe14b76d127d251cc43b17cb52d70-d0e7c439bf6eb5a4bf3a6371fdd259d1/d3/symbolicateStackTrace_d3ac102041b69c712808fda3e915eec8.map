{"version":3,"sources":["symbolicateStackTrace.js"],"names":["getDevServer","require","SourceCode","fetch","isSourcedFromDisk","sourcePath","test","symbolicateStackTrace","stack","global","devServer","bundleLoadedFromServer","Error","stackCopy","scriptURL","foundInternalSource","map","frame","file","url","method","body","JSON","stringify","response","json","module","exports"],"mappings":"AAUA;;;;;;;;;;;;AAEA,IAAMA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA5B;;eAEqBA,OAAO,CAAC,mCAAD,C;IAArBC,U,YAAAA,U;;AAGP,IAAIC,KAAJ;;AAIA,SAASC,iBAAT,CAA2BC,UAA3B,EAAwD;AACtD,SAAO,CAAC,QAAQC,IAAR,CAAaD,UAAb,CAAD,IAA6B,QAAQC,IAAR,CAAaD,UAAb,CAApC;AACD;;AAED,SAAeE,qBAAf,CACEC,KADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAcE,cAAI,CAACL,KAAL,EAAY;AACVA,YAAAA,KAAK,GAAGM,MAAM,CAACN,KAAP,IAAgBF,OAAO,CAAC,qBAAD,CAAP,CAA+BE,KAAvD;AACD;;AAEKO,UAAAA,SAlBR,GAkBoBV,YAAY,EAlBhC;;AAAA,cAmBOU,SAAS,CAACC,sBAnBjB;AAAA;AAAA;AAAA;;AAAA,gBAoBU,IAAIC,KAAJ,CAAU,yCAAV,CApBV;;AAAA;AAuBMC,UAAAA,SAvBN,GAuBkBL,KAvBlB;;AAyBE,cAAIN,UAAU,CAACY,SAAf,EAA0B;AACpBC,YAAAA,mBADoB,GACW,KADX;AAExBF,YAAAA,SAAS,GAAGL,KAAK,CAACQ,GAAN,CAAU,UAACC,KAAD,EAAuB;AAK3C,kBAAI,CAACF,mBAAD,IAAwBX,iBAAiB,CAACa,KAAK,CAACC,IAAP,CAA7C,EAA2D;AAEzD,yCAAWD,KAAX;AAAkBC,kBAAAA,IAAI,EAAEhB,UAAU,CAACY;AAAnC;AACD;;AAEDC,cAAAA,mBAAmB,GAAG,IAAtB;AACA,qBAAOE,KAAP;AACD,aAZW,CAAZ;AAaD;;AAxCH;AAAA,4CA0CyBd,KAAK,CAACO,SAAS,CAACS,GAAV,GAAgB,aAAjB,EAAgC;AAC1DC,YAAAA,MAAM,EAAE,MADkD;AAE1DC,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACf,cAAAA,KAAK,EAAEK;AAAR,aAAf;AAFoD,WAAhC,CA1C9B;;AAAA;AA0CQW,UAAAA,QA1CR;AAAA;AAAA,4CA8CqBA,QAAQ,CAACC,IAAT,EA9CrB;;AAAA;AA8CQA,UAAAA,IA9CR;AAAA,2CA+CSA,IAAI,CAACjB,KA/Cd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkDAkB,MAAM,CAACC,OAAP,GAAiBpB,qBAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst getDevServer = require('./getDevServer');\n\nconst {SourceCode} = require('../../BatchedBridge/NativeModules');\n\n// Avoid requiring fetch on load of this module; see symbolicateStackTrace\nlet fetch;\n\nimport type {StackFrame} from './parseErrorStack';\n\nfunction isSourcedFromDisk(sourcePath: string): boolean {\n  return !/^http/.test(sourcePath) && /[\\\\/]/.test(sourcePath);\n}\n\nasync function symbolicateStackTrace(\n  stack: Array<StackFrame>,\n): Promise<Array<StackFrame>> {\n  // RN currently lazy loads whatwg-fetch using a custom fetch module, which,\n  // when called for the first time, requires and re-exports 'whatwg-fetch'.\n  // However, when a dependency of the project tries to require whatwg-fetch\n  // either directly or indirectly, whatwg-fetch is required before\n  // RN can lazy load whatwg-fetch. As whatwg-fetch checks\n  // for a fetch polyfill before loading, it will in turn try to load\n  // RN's fetch module, which immediately tries to import whatwg-fetch AGAIN.\n  // This causes a circular require which results in RN's fetch module\n  // exporting fetch as 'undefined'.\n  // The fix below postpones trying to load fetch until the first call to symbolicateStackTrace.\n  // At that time, we will have either global.fetch (whatwg-fetch) or RN's fetch.\n  if (!fetch) {\n    fetch = global.fetch || require('../../Network/fetch').fetch;\n  }\n\n  const devServer = getDevServer();\n  if (!devServer.bundleLoadedFromServer) {\n    throw new Error('Bundle was not loaded from the packager');\n  }\n\n  let stackCopy = stack;\n\n  if (SourceCode.scriptURL) {\n    let foundInternalSource: boolean = false;\n    stackCopy = stack.map((frame: StackFrame) => {\n      // If the sources exist on disk rather than appearing to come from the packager,\n      // replace the location with the packager URL until we reach an internal source\n      // which does not have a path (no slashes), indicating a switch from within\n      // the application to a surrounding debugging environment.\n      if (!foundInternalSource && isSourcedFromDisk(frame.file)) {\n        // Copy frame into new object and replace 'file' property\n        return {...frame, file: SourceCode.scriptURL};\n      }\n\n      foundInternalSource = true;\n      return frame;\n    });\n  }\n\n  const response = await fetch(devServer.url + 'symbolicate', {\n    method: 'POST',\n    body: JSON.stringify({stack: stackCopy}),\n  });\n  const json = await response.json();\n  return json.stack;\n}\n\nmodule.exports = symbolicateStackTrace;\n"]}