{"version":3,"sources":["TouchHistoryMath.js"],"names":["TouchHistoryMath","centroidDimension","touchHistory","touchesChangedAfter","isXAxis","ofCurrent","touchBank","total","count","oneTouchData","numberActiveTouches","indexOfSingleActiveTouch","touchActive","currentTimeStamp","currentPageX","currentPageY","previousPageX","previousPageY","i","length","touchTrack","undefined","toAdd","noCentroid","currentCentroidXOfTouchesChangedAfter","currentCentroidYOfTouchesChangedAfter","previousCentroidXOfTouchesChangedAfter","previousCentroidYOfTouchesChangedAfter","currentCentroidX","currentCentroidY","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nconst TouchHistoryMath = {\n  /**\n   * This code is optimized and not intended to look beautiful. This allows\n   * computing of touch centroids that have moved after `touchesChangedAfter`\n   * timeStamp. You can compute the current centroid involving all touches\n   * moves after `touchesChangedAfter`, or you can compute the previous\n   * centroid of all touches that were moved after `touchesChangedAfter`.\n   *\n   * @param {TouchHistoryMath} touchHistory Standard Responder touch track\n   * data.\n   * @param {number} touchesChangedAfter timeStamp after which moved touches\n   * are considered \"actively moving\" - not just \"active\".\n   * @param {boolean} isXAxis Consider `x` dimension vs. `y` dimension.\n   * @param {boolean} ofCurrent Compute current centroid for actively moving\n   * touches vs. previous centroid of now actively moving touches.\n   * @return {number} value of centroid in specified dimension.\n   */\n  centroidDimension: function(\n    touchHistory,\n    touchesChangedAfter,\n    isXAxis,\n    ofCurrent,\n  ) {\n    const touchBank = touchHistory.touchBank;\n    let total = 0;\n    let count = 0;\n\n    const oneTouchData =\n      touchHistory.numberActiveTouches === 1\n        ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch]\n        : null;\n\n    if (oneTouchData !== null) {\n      if (\n        oneTouchData.touchActive &&\n        oneTouchData.currentTimeStamp > touchesChangedAfter\n      ) {\n        total +=\n          ofCurrent && isXAxis\n            ? oneTouchData.currentPageX\n            : ofCurrent && !isXAxis\n            ? oneTouchData.currentPageY\n            : !ofCurrent && isXAxis\n            ? oneTouchData.previousPageX\n            : oneTouchData.previousPageY;\n        count = 1;\n      }\n    } else {\n      for (let i = 0; i < touchBank.length; i++) {\n        const touchTrack = touchBank[i];\n        if (\n          touchTrack !== null &&\n          touchTrack !== undefined &&\n          touchTrack.touchActive &&\n          touchTrack.currentTimeStamp >= touchesChangedAfter\n        ) {\n          let toAdd; // Yuck, program temporarily in invalid state.\n          if (ofCurrent && isXAxis) {\n            toAdd = touchTrack.currentPageX;\n          } else if (ofCurrent && !isXAxis) {\n            toAdd = touchTrack.currentPageY;\n          } else if (!ofCurrent && isXAxis) {\n            toAdd = touchTrack.previousPageX;\n          } else {\n            toAdd = touchTrack.previousPageY;\n          }\n          total += toAdd;\n          count++;\n        }\n      }\n    }\n    return count > 0 ? total / count : TouchHistoryMath.noCentroid;\n  },\n\n  currentCentroidXOfTouchesChangedAfter: function(\n    touchHistory,\n    touchesChangedAfter,\n  ) {\n    return TouchHistoryMath.centroidDimension(\n      touchHistory,\n      touchesChangedAfter,\n      true, // isXAxis\n      true, // ofCurrent\n    );\n  },\n\n  currentCentroidYOfTouchesChangedAfter: function(\n    touchHistory,\n    touchesChangedAfter,\n  ) {\n    return TouchHistoryMath.centroidDimension(\n      touchHistory,\n      touchesChangedAfter,\n      false, // isXAxis\n      true, // ofCurrent\n    );\n  },\n\n  previousCentroidXOfTouchesChangedAfter: function(\n    touchHistory,\n    touchesChangedAfter,\n  ) {\n    return TouchHistoryMath.centroidDimension(\n      touchHistory,\n      touchesChangedAfter,\n      true, // isXAxis\n      false, // ofCurrent\n    );\n  },\n\n  previousCentroidYOfTouchesChangedAfter: function(\n    touchHistory,\n    touchesChangedAfter,\n  ) {\n    return TouchHistoryMath.centroidDimension(\n      touchHistory,\n      touchesChangedAfter,\n      false, // isXAxis\n      false, // ofCurrent\n    );\n  },\n\n  currentCentroidX: function(touchHistory) {\n    return TouchHistoryMath.centroidDimension(\n      touchHistory,\n      0, // touchesChangedAfter\n      true, // isXAxis\n      true, // ofCurrent\n    );\n  },\n\n  currentCentroidY: function(touchHistory) {\n    return TouchHistoryMath.centroidDimension(\n      touchHistory,\n      0, // touchesChangedAfter\n      false, // isXAxis\n      true, // ofCurrent\n    );\n  },\n\n  noCentroid: -1,\n};\n\nmodule.exports = TouchHistoryMath;\n"]}