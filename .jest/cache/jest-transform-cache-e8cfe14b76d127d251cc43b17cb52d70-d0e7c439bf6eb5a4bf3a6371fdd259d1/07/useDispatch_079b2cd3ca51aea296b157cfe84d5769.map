{"version":3,"sources":["useDispatch.js"],"names":["exports","__esModule","createDispatchHook","useDispatch","_Context","require","_useStore","context","ReactReduxContext","useStore","createStoreHook","store","dispatch"],"mappings":"AAAA;;AAEAA,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAACE,kBAAR,GAA6BA,kBAA7B;AACAF,OAAO,CAACG,WAAR,GAAsB,KAAK,CAA3B;;AAEA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,uBAAD,CAAtB;;AAEA,IAAIC,SAAS,GAAGD,OAAO,CAAC,YAAD,CAAvB;;AAQA,SAASH,kBAAT,CAA4BK,OAA5B,EAAqC;AACnC,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AACtBA,IAAAA,OAAO,GAAGH,QAAQ,CAACI,iBAAnB;AACD;;AAED,MAAIC,QAAQ,GAAGF,OAAO,KAAKH,QAAQ,CAACI,iBAArB,GAAyCF,SAAS,CAACG,QAAnD,GAA8D,CAAC,GAAGH,SAAS,CAACI,eAAd,EAA+BH,OAA/B,CAA7E;AACA,SAAO,SAASJ,WAAT,GAAuB;AAC5B,QAAIQ,KAAK,GAAGF,QAAQ,EAApB;AACA,WAAOE,KAAK,CAACC,QAAb;AACD,GAHD;AAID;;AAwBD,IAAIT,WAAW,GAAGD,kBAAkB,EAApC;AACAF,OAAO,CAACG,WAAR,GAAsBA,WAAtB","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.createDispatchHook = createDispatchHook;\nexports.useDispatch = void 0;\n\nvar _Context = require(\"../components/Context\");\n\nvar _useStore = require(\"./useStore\");\n\n/**\n * Hook factory, which creates a `useDispatch` hook bound to a given context.\n *\n * @param {Function} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useDispatch` hook bound to the specified context.\n */\nfunction createDispatchHook(context) {\n  if (context === void 0) {\n    context = _Context.ReactReduxContext;\n  }\n\n  var useStore = context === _Context.ReactReduxContext ? _useStore.useStore : (0, _useStore.createStoreHook)(context);\n  return function useDispatch() {\n    var store = useStore();\n    return store.dispatch;\n  };\n}\n/**\n * A hook to access the redux `dispatch` function.\n *\n * @returns {any|function} redux store's `dispatch` function\n *\n * @example\n *\n * import React, { useCallback } from 'react'\n * import { useDispatch } from 'react-redux'\n *\n * export const CounterComponent = ({ value }) => {\n *   const dispatch = useDispatch()\n *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])\n *   return (\n *     <div>\n *       <span>{value}</span>\n *       <button onClick={increaseCounter}>Increase counter</button>\n *     </div>\n *   )\n * }\n */\n\n\nvar useDispatch = createDispatchHook();\nexports.useDispatch = useDispatch;"]}