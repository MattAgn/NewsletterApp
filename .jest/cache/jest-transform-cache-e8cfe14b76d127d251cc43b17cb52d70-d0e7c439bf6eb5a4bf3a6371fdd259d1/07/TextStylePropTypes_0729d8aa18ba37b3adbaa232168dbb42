fd7c80f7d414ca68ee00ef2bd8e170b9
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var DeprecatedColorPropType = require('../DeprecatedPropTypes/DeprecatedColorPropType');

var ReactPropTypes = require('prop-types');

var DeprecatedViewStylePropTypes = require('../DeprecatedPropTypes/DeprecatedViewStylePropTypes');

var TextStylePropTypes = _objectSpread({}, DeprecatedViewStylePropTypes, {
  color: DeprecatedColorPropType,
  fontFamily: ReactPropTypes.string,
  fontSize: ReactPropTypes.number,
  fontStyle: ReactPropTypes.oneOf(['normal', 'italic']),
  fontWeight: ReactPropTypes.oneOf(['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900']),
  fontVariant: ReactPropTypes.arrayOf(ReactPropTypes.oneOf(['small-caps', 'oldstyle-nums', 'lining-nums', 'tabular-nums', 'proportional-nums'])),
  textShadowOffset: ReactPropTypes.shape({
    width: ReactPropTypes.number,
    height: ReactPropTypes.number
  }),
  textShadowRadius: ReactPropTypes.number,
  textShadowColor: DeprecatedColorPropType,
  letterSpacing: ReactPropTypes.number,
  lineHeight: ReactPropTypes.number,
  textAlign: ReactPropTypes.oneOf(['auto', 'left', 'right', 'center', 'justify']),
  textAlignVertical: ReactPropTypes.oneOf(['auto', 'top', 'bottom', 'center']),
  includeFontPadding: ReactPropTypes.bool,
  textDecorationLine: ReactPropTypes.oneOf(['none', 'underline', 'line-through', 'underline line-through']),
  textDecorationStyle: ReactPropTypes.oneOf(['solid', 'double', 'dotted', 'dashed']),
  textDecorationColor: DeprecatedColorPropType,
  textTransform: ReactPropTypes.oneOf(['none', 'capitalize', 'uppercase', 'lowercase']),
  writingDirection: ReactPropTypes.oneOf(['auto', 'ltr', 'rtl'])
});

module.exports = TextStylePropTypes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRleHRTdHlsZVByb3BUeXBlcy5qcyJdLCJuYW1lcyI6WyJEZXByZWNhdGVkQ29sb3JQcm9wVHlwZSIsInJlcXVpcmUiLCJSZWFjdFByb3BUeXBlcyIsIkRlcHJlY2F0ZWRWaWV3U3R5bGVQcm9wVHlwZXMiLCJUZXh0U3R5bGVQcm9wVHlwZXMiLCJjb2xvciIsImZvbnRGYW1pbHkiLCJzdHJpbmciLCJmb250U2l6ZSIsIm51bWJlciIsImZvbnRTdHlsZSIsIm9uZU9mIiwiZm9udFdlaWdodCIsImZvbnRWYXJpYW50IiwiYXJyYXlPZiIsInRleHRTaGFkb3dPZmZzZXQiLCJzaGFwZSIsIndpZHRoIiwiaGVpZ2h0IiwidGV4dFNoYWRvd1JhZGl1cyIsInRleHRTaGFkb3dDb2xvciIsImxldHRlclNwYWNpbmciLCJsaW5lSGVpZ2h0IiwidGV4dEFsaWduIiwidGV4dEFsaWduVmVydGljYWwiLCJpbmNsdWRlRm9udFBhZGRpbmciLCJib29sIiwidGV4dERlY29yYXRpb25MaW5lIiwidGV4dERlY29yYXRpb25TdHlsZSIsInRleHREZWNvcmF0aW9uQ29sb3IiLCJ0ZXh0VHJhbnNmb3JtIiwid3JpdGluZ0RpcmVjdGlvbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVVBOzs7Ozs7Ozs7O0FBRUEsSUFBTUEsdUJBQXVCLEdBQUdDLE9BQU8sQ0FBQyxnREFBRCxDQUF2Qzs7QUFDQSxJQUFNQyxjQUFjLEdBQUdELE9BQU8sQ0FBQyxZQUFELENBQTlCOztBQUNBLElBQU1FLDRCQUE0QixHQUFHRixPQUFPLENBQUMscURBQUQsQ0FBNUM7O0FBRUEsSUFBTUcsa0JBQWtCLHFCQUNuQkQsNEJBRG1CO0FBR3RCRSxFQUFBQSxLQUFLLEVBQUVMLHVCQUhlO0FBSXRCTSxFQUFBQSxVQUFVLEVBQUVKLGNBQWMsQ0FBQ0ssTUFKTDtBQUt0QkMsRUFBQUEsUUFBUSxFQUFFTixjQUFjLENBQUNPLE1BTEg7QUFNdEJDLEVBQUFBLFNBQVMsRUFBRVIsY0FBYyxDQUFDUyxLQUFmLENBQXFCLENBQUMsUUFBRCxFQUFXLFFBQVgsQ0FBckIsQ0FOVztBQVl0QkMsRUFBQUEsVUFBVSxFQUFFVixjQUFjLENBQUNTLEtBQWYsQ0FBcUIsQ0FDL0IsUUFEK0IsRUFFL0IsTUFGK0IsRUFHL0IsS0FIK0IsRUFJL0IsS0FKK0IsRUFLL0IsS0FMK0IsRUFNL0IsS0FOK0IsRUFPL0IsS0FQK0IsRUFRL0IsS0FSK0IsRUFTL0IsS0FUK0IsRUFVL0IsS0FWK0IsRUFXL0IsS0FYK0IsQ0FBckIsQ0FaVTtBQTRCdEJFLEVBQUFBLFdBQVcsRUFBRVgsY0FBYyxDQUFDWSxPQUFmLENBQ1haLGNBQWMsQ0FBQ1MsS0FBZixDQUFxQixDQUNuQixZQURtQixFQUVuQixlQUZtQixFQUduQixhQUhtQixFQUluQixjQUptQixFQUtuQixtQkFMbUIsQ0FBckIsQ0FEVyxDQTVCUztBQXFDdEJJLEVBQUFBLGdCQUFnQixFQUFFYixjQUFjLENBQUNjLEtBQWYsQ0FBcUI7QUFDckNDLElBQUFBLEtBQUssRUFBRWYsY0FBYyxDQUFDTyxNQURlO0FBRXJDUyxJQUFBQSxNQUFNLEVBQUVoQixjQUFjLENBQUNPO0FBRmMsR0FBckIsQ0FyQ0k7QUF5Q3RCVSxFQUFBQSxnQkFBZ0IsRUFBRWpCLGNBQWMsQ0FBQ08sTUF6Q1g7QUEwQ3RCVyxFQUFBQSxlQUFlLEVBQUVwQix1QkExQ0s7QUE4Q3RCcUIsRUFBQUEsYUFBYSxFQUFFbkIsY0FBYyxDQUFDTyxNQTlDUjtBQStDdEJhLEVBQUFBLFVBQVUsRUFBRXBCLGNBQWMsQ0FBQ08sTUEvQ0w7QUFvRHRCYyxFQUFBQSxTQUFTLEVBQUVyQixjQUFjLENBQUNTLEtBQWYsQ0FBcUIsQ0FDOUIsTUFEOEIsRUFFOUIsTUFGOEIsRUFHOUIsT0FIOEIsRUFJOUIsUUFKOEIsRUFLOUIsU0FMOEIsQ0FBckIsQ0FwRFc7QUE4RHRCYSxFQUFBQSxpQkFBaUIsRUFBRXRCLGNBQWMsQ0FBQ1MsS0FBZixDQUFxQixDQUN0QyxNQURzQyxFQUV0QyxLQUZzQyxFQUd0QyxRQUhzQyxFQUl0QyxRQUpzQyxDQUFyQixDQTlERztBQTBFdEJjLEVBQUFBLGtCQUFrQixFQUFFdkIsY0FBYyxDQUFDd0IsSUExRWI7QUEyRXRCQyxFQUFBQSxrQkFBa0IsRUFBRXpCLGNBQWMsQ0FBQ1MsS0FBZixDQUFxQixDQUN2QyxNQUR1QyxFQUV2QyxXQUZ1QyxFQUd2QyxjQUh1QyxFQUl2Qyx3QkFKdUMsQ0FBckIsQ0EzRUU7QUFvRnRCaUIsRUFBQUEsbUJBQW1CLEVBQUUxQixjQUFjLENBQUNTLEtBQWYsQ0FBcUIsQ0FDeEMsT0FEd0MsRUFFeEMsUUFGd0MsRUFHeEMsUUFId0MsRUFJeEMsUUFKd0MsQ0FBckIsQ0FwRkM7QUE2RnRCa0IsRUFBQUEsbUJBQW1CLEVBQUU3Qix1QkE3RkM7QUE4RnRCOEIsRUFBQUEsYUFBYSxFQUFFNUIsY0FBYyxDQUFDUyxLQUFmLENBQXFCLENBQ2xDLE1BRGtDLEVBRWxDLFlBRmtDLEVBR2xDLFdBSGtDLEVBSWxDLFdBSmtDLENBQXJCLENBOUZPO0FBdUd0Qm9CLEVBQUFBLGdCQUFnQixFQUFFN0IsY0FBYyxDQUFDUyxLQUFmLENBQXFCLENBQUMsTUFBRCxFQUFxQixLQUFyQixFQUE0QixLQUE1QixDQUFyQjtBQXZHSSxFQUF4Qjs7QUEwR0FxQixNQUFNLENBQUNDLE9BQVAsR0FBaUI3QixrQkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBEZXByZWNhdGVkQ29sb3JQcm9wVHlwZSA9IHJlcXVpcmUoJy4uL0RlcHJlY2F0ZWRQcm9wVHlwZXMvRGVwcmVjYXRlZENvbG9yUHJvcFR5cGUnKTtcbmNvbnN0IFJlYWN0UHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuY29uc3QgRGVwcmVjYXRlZFZpZXdTdHlsZVByb3BUeXBlcyA9IHJlcXVpcmUoJy4uL0RlcHJlY2F0ZWRQcm9wVHlwZXMvRGVwcmVjYXRlZFZpZXdTdHlsZVByb3BUeXBlcycpO1xuXG5jb25zdCBUZXh0U3R5bGVQcm9wVHlwZXMgPSB7XG4gIC4uLkRlcHJlY2F0ZWRWaWV3U3R5bGVQcm9wVHlwZXMsXG5cbiAgY29sb3I6IERlcHJlY2F0ZWRDb2xvclByb3BUeXBlLFxuICBmb250RmFtaWx5OiBSZWFjdFByb3BUeXBlcy5zdHJpbmcsXG4gIGZvbnRTaXplOiBSZWFjdFByb3BUeXBlcy5udW1iZXIsXG4gIGZvbnRTdHlsZTogUmVhY3RQcm9wVHlwZXMub25lT2YoWydub3JtYWwnLCAnaXRhbGljJ10pLFxuICAvKipcbiAgICogU3BlY2lmaWVzIGZvbnQgd2VpZ2h0LiBUaGUgdmFsdWVzICdub3JtYWwnIGFuZCAnYm9sZCcgYXJlIHN1cHBvcnRlZCBmb3JcbiAgICogbW9zdCBmb250cy4gTm90IGFsbCBmb250cyBoYXZlIGEgdmFyaWFudCBmb3IgZWFjaCBvZiB0aGUgbnVtZXJpYyB2YWx1ZXMsXG4gICAqIGluIHRoYXQgY2FzZSB0aGUgY2xvc2VzdCBvbmUgaXMgY2hvc2VuLlxuICAgKi9cbiAgZm9udFdlaWdodDogUmVhY3RQcm9wVHlwZXMub25lT2YoW1xuICAgICdub3JtYWwnIC8qZGVmYXVsdCovLFxuICAgICdib2xkJyxcbiAgICAnMTAwJyxcbiAgICAnMjAwJyxcbiAgICAnMzAwJyxcbiAgICAnNDAwJyxcbiAgICAnNTAwJyxcbiAgICAnNjAwJyxcbiAgICAnNzAwJyxcbiAgICAnODAwJyxcbiAgICAnOTAwJyxcbiAgXSksXG4gIC8qKlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBmb250VmFyaWFudDogUmVhY3RQcm9wVHlwZXMuYXJyYXlPZihcbiAgICBSZWFjdFByb3BUeXBlcy5vbmVPZihbXG4gICAgICAnc21hbGwtY2FwcycsXG4gICAgICAnb2xkc3R5bGUtbnVtcycsXG4gICAgICAnbGluaW5nLW51bXMnLFxuICAgICAgJ3RhYnVsYXItbnVtcycsXG4gICAgICAncHJvcG9ydGlvbmFsLW51bXMnLFxuICAgIF0pLFxuICApLFxuICB0ZXh0U2hhZG93T2Zmc2V0OiBSZWFjdFByb3BUeXBlcy5zaGFwZSh7XG4gICAgd2lkdGg6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgICBoZWlnaHQ6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgfSksXG4gIHRleHRTaGFkb3dSYWRpdXM6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgdGV4dFNoYWRvd0NvbG9yOiBEZXByZWNhdGVkQ29sb3JQcm9wVHlwZSxcbiAgLyoqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIGxldHRlclNwYWNpbmc6IFJlYWN0UHJvcFR5cGVzLm51bWJlcixcbiAgbGluZUhlaWdodDogUmVhY3RQcm9wVHlwZXMubnVtYmVyLFxuICAvKipcbiAgICogU3BlY2lmaWVzIHRleHQgYWxpZ25tZW50LiBUaGUgdmFsdWUgJ2p1c3RpZnknIGlzIG9ubHkgc3VwcG9ydGVkIG9uIGlPUyBhbmRcbiAgICogZmFsbGJhY2tzIHRvIGBsZWZ0YCBvbiBBbmRyb2lkLlxuICAgKi9cbiAgdGV4dEFsaWduOiBSZWFjdFByb3BUeXBlcy5vbmVPZihbXG4gICAgJ2F1dG8nIC8qZGVmYXVsdCovLFxuICAgICdsZWZ0JyxcbiAgICAncmlnaHQnLFxuICAgICdjZW50ZXInLFxuICAgICdqdXN0aWZ5JyxcbiAgXSksXG4gIC8qKlxuICAgKiBAcGxhdGZvcm0gYW5kcm9pZFxuICAgKi9cbiAgdGV4dEFsaWduVmVydGljYWw6IFJlYWN0UHJvcFR5cGVzLm9uZU9mKFtcbiAgICAnYXV0bycgLypkZWZhdWx0Ki8sXG4gICAgJ3RvcCcsXG4gICAgJ2JvdHRvbScsXG4gICAgJ2NlbnRlcicsXG4gIF0pLFxuICAvKipcbiAgICogU2V0IHRvIGBmYWxzZWAgdG8gcmVtb3ZlIGV4dHJhIGZvbnQgcGFkZGluZyBpbnRlbmRlZCB0byBtYWtlIHNwYWNlIGZvciBjZXJ0YWluIGFzY2VuZGVycyAvIGRlc2NlbmRlcnMuXG4gICAqIFdpdGggc29tZSBmb250cywgdGhpcyBwYWRkaW5nIGNhbiBtYWtlIHRleHQgbG9vayBzbGlnaHRseSBtaXNhbGlnbmVkIHdoZW4gY2VudGVyZWQgdmVydGljYWxseS5cbiAgICogRm9yIGJlc3QgcmVzdWx0cyBhbHNvIHNldCBgdGV4dEFsaWduVmVydGljYWxgIHRvIGBjZW50ZXJgLiBEZWZhdWx0IGlzIHRydWUuXG4gICAqIEBwbGF0Zm9ybSBhbmRyb2lkXG4gICAqL1xuICBpbmNsdWRlRm9udFBhZGRpbmc6IFJlYWN0UHJvcFR5cGVzLmJvb2wsXG4gIHRleHREZWNvcmF0aW9uTGluZTogUmVhY3RQcm9wVHlwZXMub25lT2YoW1xuICAgICdub25lJyAvKmRlZmF1bHQqLyxcbiAgICAndW5kZXJsaW5lJyxcbiAgICAnbGluZS10aHJvdWdoJyxcbiAgICAndW5kZXJsaW5lIGxpbmUtdGhyb3VnaCcsXG4gIF0pLFxuICAvKipcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgdGV4dERlY29yYXRpb25TdHlsZTogUmVhY3RQcm9wVHlwZXMub25lT2YoW1xuICAgICdzb2xpZCcgLypkZWZhdWx0Ki8sXG4gICAgJ2RvdWJsZScsXG4gICAgJ2RvdHRlZCcsXG4gICAgJ2Rhc2hlZCcsXG4gIF0pLFxuICAvKipcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKi9cbiAgdGV4dERlY29yYXRpb25Db2xvcjogRGVwcmVjYXRlZENvbG9yUHJvcFR5cGUsXG4gIHRleHRUcmFuc2Zvcm06IFJlYWN0UHJvcFR5cGVzLm9uZU9mKFtcbiAgICAnbm9uZScgLypkZWZhdWx0Ki8sXG4gICAgJ2NhcGl0YWxpemUnLFxuICAgICd1cHBlcmNhc2UnLFxuICAgICdsb3dlcmNhc2UnLFxuICBdKSxcbiAgLyoqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIHdyaXRpbmdEaXJlY3Rpb246IFJlYWN0UHJvcFR5cGVzLm9uZU9mKFsnYXV0bycgLypkZWZhdWx0Ki8sICdsdHInLCAncnRsJ10pLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBUZXh0U3R5bGVQcm9wVHlwZXM7XG4iXX0=