e8b65d48b16fef56672aea4ef3f702f8
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var ReactNativeStyleAttributes = require('./ReactNativeStyleAttributes');

var ReactNativeViewAttributes = {};
ReactNativeViewAttributes.UIView = {
  pointerEvents: true,
  accessible: true,
  accessibilityActions: true,
  accessibilityLabel: true,
  accessibilityLiveRegion: true,
  accessibilityRole: true,
  accessibilityStates: true,
  accessibilityHint: true,
  importantForAccessibility: true,
  nativeID: true,
  testID: true,
  renderToHardwareTextureAndroid: true,
  shouldRasterizeIOS: true,
  onLayout: true,
  onAccessibilityAction: true,
  onAccessibilityTap: true,
  onMagicTap: true,
  onAccessibilityEscape: true,
  collapsable: true,
  needsOffscreenAlphaCompositing: true,
  style: ReactNativeStyleAttributes
};
ReactNativeViewAttributes.RCTView = _objectSpread({}, ReactNativeViewAttributes.UIView, {
  removeClippedSubviews: true
});
module.exports = ReactNativeViewAttributes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlYWN0TmF0aXZlVmlld0F0dHJpYnV0ZXMuanMiXSwibmFtZXMiOlsiUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMiLCJyZXF1aXJlIiwiUmVhY3ROYXRpdmVWaWV3QXR0cmlidXRlcyIsIlVJVmlldyIsInBvaW50ZXJFdmVudHMiLCJhY2Nlc3NpYmxlIiwiYWNjZXNzaWJpbGl0eUFjdGlvbnMiLCJhY2Nlc3NpYmlsaXR5TGFiZWwiLCJhY2Nlc3NpYmlsaXR5TGl2ZVJlZ2lvbiIsImFjY2Vzc2liaWxpdHlSb2xlIiwiYWNjZXNzaWJpbGl0eVN0YXRlcyIsImFjY2Vzc2liaWxpdHlIaW50IiwiaW1wb3J0YW50Rm9yQWNjZXNzaWJpbGl0eSIsIm5hdGl2ZUlEIiwidGVzdElEIiwicmVuZGVyVG9IYXJkd2FyZVRleHR1cmVBbmRyb2lkIiwic2hvdWxkUmFzdGVyaXplSU9TIiwib25MYXlvdXQiLCJvbkFjY2Vzc2liaWxpdHlBY3Rpb24iLCJvbkFjY2Vzc2liaWxpdHlUYXAiLCJvbk1hZ2ljVGFwIiwib25BY2Nlc3NpYmlsaXR5RXNjYXBlIiwiY29sbGFwc2FibGUiLCJuZWVkc09mZnNjcmVlbkFscGhhQ29tcG9zaXRpbmciLCJzdHlsZSIsIlJDVFZpZXciLCJyZW1vdmVDbGlwcGVkU3Vidmlld3MiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFVQTs7Ozs7Ozs7OztBQUVBLElBQU1BLDBCQUEwQixHQUFHQyxPQUFPLENBQUMsOEJBQUQsQ0FBMUM7O0FBRUEsSUFBTUMseUJBQXlCLEdBQUcsRUFBbEM7QUFFQUEseUJBQXlCLENBQUNDLE1BQTFCLEdBQW1DO0FBQ2pDQyxFQUFBQSxhQUFhLEVBQUUsSUFEa0I7QUFFakNDLEVBQUFBLFVBQVUsRUFBRSxJQUZxQjtBQUdqQ0MsRUFBQUEsb0JBQW9CLEVBQUUsSUFIVztBQUlqQ0MsRUFBQUEsa0JBQWtCLEVBQUUsSUFKYTtBQUtqQ0MsRUFBQUEsdUJBQXVCLEVBQUUsSUFMUTtBQU1qQ0MsRUFBQUEsaUJBQWlCLEVBQUUsSUFOYztBQU9qQ0MsRUFBQUEsbUJBQW1CLEVBQUUsSUFQWTtBQVFqQ0MsRUFBQUEsaUJBQWlCLEVBQUUsSUFSYztBQVNqQ0MsRUFBQUEseUJBQXlCLEVBQUUsSUFUTTtBQVVqQ0MsRUFBQUEsUUFBUSxFQUFFLElBVnVCO0FBV2pDQyxFQUFBQSxNQUFNLEVBQUUsSUFYeUI7QUFZakNDLEVBQUFBLDhCQUE4QixFQUFFLElBWkM7QUFhakNDLEVBQUFBLGtCQUFrQixFQUFFLElBYmE7QUFjakNDLEVBQUFBLFFBQVEsRUFBRSxJQWR1QjtBQWVqQ0MsRUFBQUEscUJBQXFCLEVBQUUsSUFmVTtBQWdCakNDLEVBQUFBLGtCQUFrQixFQUFFLElBaEJhO0FBaUJqQ0MsRUFBQUEsVUFBVSxFQUFFLElBakJxQjtBQWtCakNDLEVBQUFBLHFCQUFxQixFQUFFLElBbEJVO0FBbUJqQ0MsRUFBQUEsV0FBVyxFQUFFLElBbkJvQjtBQW9CakNDLEVBQUFBLDhCQUE4QixFQUFFLElBcEJDO0FBcUJqQ0MsRUFBQUEsS0FBSyxFQUFFeEI7QUFyQjBCLENBQW5DO0FBd0JBRSx5QkFBeUIsQ0FBQ3VCLE9BQTFCLHFCQUNLdkIseUJBQXlCLENBQUNDLE1BRC9CO0FBUUV1QixFQUFBQSxxQkFBcUIsRUFBRTtBQVJ6QjtBQVdBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIxQix5QkFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMgPSByZXF1aXJlKCcuL1JlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzJyk7XG5cbmNvbnN0IFJlYWN0TmF0aXZlVmlld0F0dHJpYnV0ZXMgPSB7fTtcblxuUmVhY3ROYXRpdmVWaWV3QXR0cmlidXRlcy5VSVZpZXcgPSB7XG4gIHBvaW50ZXJFdmVudHM6IHRydWUsXG4gIGFjY2Vzc2libGU6IHRydWUsXG4gIGFjY2Vzc2liaWxpdHlBY3Rpb25zOiB0cnVlLFxuICBhY2Nlc3NpYmlsaXR5TGFiZWw6IHRydWUsXG4gIGFjY2Vzc2liaWxpdHlMaXZlUmVnaW9uOiB0cnVlLFxuICBhY2Nlc3NpYmlsaXR5Um9sZTogdHJ1ZSxcbiAgYWNjZXNzaWJpbGl0eVN0YXRlczogdHJ1ZSxcbiAgYWNjZXNzaWJpbGl0eUhpbnQ6IHRydWUsXG4gIGltcG9ydGFudEZvckFjY2Vzc2liaWxpdHk6IHRydWUsXG4gIG5hdGl2ZUlEOiB0cnVlLFxuICB0ZXN0SUQ6IHRydWUsXG4gIHJlbmRlclRvSGFyZHdhcmVUZXh0dXJlQW5kcm9pZDogdHJ1ZSxcbiAgc2hvdWxkUmFzdGVyaXplSU9TOiB0cnVlLFxuICBvbkxheW91dDogdHJ1ZSxcbiAgb25BY2Nlc3NpYmlsaXR5QWN0aW9uOiB0cnVlLFxuICBvbkFjY2Vzc2liaWxpdHlUYXA6IHRydWUsXG4gIG9uTWFnaWNUYXA6IHRydWUsXG4gIG9uQWNjZXNzaWJpbGl0eUVzY2FwZTogdHJ1ZSxcbiAgY29sbGFwc2FibGU6IHRydWUsXG4gIG5lZWRzT2Zmc2NyZWVuQWxwaGFDb21wb3NpdGluZzogdHJ1ZSxcbiAgc3R5bGU6IFJlYWN0TmF0aXZlU3R5bGVBdHRyaWJ1dGVzLFxufTtcblxuUmVhY3ROYXRpdmVWaWV3QXR0cmlidXRlcy5SQ1RWaWV3ID0ge1xuICAuLi5SZWFjdE5hdGl2ZVZpZXdBdHRyaWJ1dGVzLlVJVmlldyxcblxuICAvLyBUaGlzIGlzIGEgc3BlY2lhbCBwZXJmb3JtYW5jZSBwcm9wZXJ0eSBleHBvc2VkIGJ5IFJDVFZpZXcgYW5kIHVzZWZ1bCBmb3JcbiAgLy8gc2Nyb2xsaW5nIGNvbnRlbnQgd2hlbiB0aGVyZSBhcmUgbWFueSBzdWJ2aWV3cywgbW9zdCBvZiB3aGljaCBhcmUgb2Zmc2NyZWVuLlxuICAvLyBGb3IgdGhpcyBwcm9wZXJ0eSB0byBiZSBlZmZlY3RpdmUsIGl0IG11c3QgYmUgYXBwbGllZCB0byBhIHZpZXcgdGhhdCBjb250YWluc1xuICAvLyBtYW55IHN1YnZpZXdzIHRoYXQgZXh0ZW5kIG91dHNpZGUgaXRzIGJvdW5kLiBUaGUgc3Vidmlld3MgbXVzdCBhbHNvIGhhdmVcbiAgLy8gb3ZlcmZsb3c6IGhpZGRlbiwgYXMgc2hvdWxkIHRoZSBjb250YWluaW5nIHZpZXcgKG9yIG9uZSBvZiBpdHMgc3VwZXJ2aWV3cykuXG4gIHJlbW92ZUNsaXBwZWRTdWJ2aWV3czogdHJ1ZSxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3ROYXRpdmVWaWV3QXR0cmlidXRlcztcbiJdfQ==