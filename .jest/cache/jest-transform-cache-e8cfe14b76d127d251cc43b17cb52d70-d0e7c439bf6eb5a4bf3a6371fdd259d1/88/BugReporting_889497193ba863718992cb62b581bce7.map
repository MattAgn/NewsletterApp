{"version":3,"sources":["BugReporting.js"],"names":["RCTDeviceEventEmitter","require","infoLog","defaultExtras","BugReporting","addFileSource","_subscription","addListener","collectExtraData","_redboxSubscription","key","callback","_addSource","_extraSources","_fileSources","source","_maybeInit","has","console","warn","set","remove","delete","extraData","fileData","BugReportingNativeModule","setExtraData","RedBoxNativeModule","RedBox","extras","files","Map","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst RCTDeviceEventEmitter = require('../EventEmitter/RCTDeviceEventEmitter');\nconst infoLog = require('../Utilities/infoLog');\n\nimport type EmitterSubscription from '../vendor/emitter/EmitterSubscription';\n\ntype ExtraData = {[key: string]: string};\ntype SourceCallback = () => string;\ntype DebugData = {extras: ExtraData, files: ExtraData};\n\nfunction defaultExtras() {\n  BugReporting.addFileSource('react_hierarchy.txt', () =>\n    require('./dumpReactTree')(),\n  );\n}\n\n/**\n * A simple class for collecting bug report data. Components can add sources that will be queried when a bug report\n * is created via `collectExtraData`. For example, a list component might add a source that provides the list of rows\n * that are currently visible on screen. Components should also remember to call `remove()` on the object that is\n * returned by `addSource` when they are unmounted.\n */\nclass BugReporting {\n  static _extraSources: Map<string, SourceCallback> = new Map();\n  static _fileSources: Map<string, SourceCallback> = new Map();\n  static _subscription: ?EmitterSubscription = null;\n  static _redboxSubscription: ?EmitterSubscription = null;\n\n  static _maybeInit() {\n    if (!BugReporting._subscription) {\n      BugReporting._subscription = RCTDeviceEventEmitter.addListener(\n        'collectBugExtraData',\n        BugReporting.collectExtraData,\n        null,\n      );\n      defaultExtras();\n    }\n\n    if (!BugReporting._redboxSubscription) {\n      BugReporting._redboxSubscription = RCTDeviceEventEmitter.addListener(\n        'collectRedBoxExtraData',\n        BugReporting.collectExtraData,\n        null,\n      );\n    }\n  }\n\n  /**\n   * Maps a string key to a simple callback that should return a string payload to be attached\n   * to a bug report. Source callbacks are called when `collectExtraData` is called.\n   *\n   * Returns an object to remove the source when the component unmounts.\n   *\n   * Conflicts trample with a warning.\n   */\n  static addSource(\n    key: string,\n    callback: SourceCallback,\n  ): {remove: () => void} {\n    return this._addSource(key, callback, BugReporting._extraSources);\n  }\n\n  /**\n   * Maps a string key to a simple callback that should return a string payload to be attached\n   * to a bug report. Source callbacks are called when `collectExtraData` is called.\n   *\n   * Returns an object to remove the source when the component unmounts.\n   *\n   * Conflicts trample with a warning.\n   */\n  static addFileSource(\n    key: string,\n    callback: SourceCallback,\n  ): {remove: () => void} {\n    return this._addSource(key, callback, BugReporting._fileSources);\n  }\n\n  static _addSource(\n    key: string,\n    callback: SourceCallback,\n    source: Map<string, SourceCallback>,\n  ): {remove: () => void} {\n    BugReporting._maybeInit();\n    if (source.has(key)) {\n      console.warn(\n        `BugReporting.add* called multiple times for same key '${key}'`,\n      );\n    }\n    source.set(key, callback);\n    return {\n      remove: () => {\n        source.delete(key);\n      },\n    };\n  }\n\n  /**\n   * This can be called from a native bug reporting flow, or from JS code.\n   *\n   * If available, this will call `NativeModules.BugReporting.setExtraData(extraData)`\n   * after collecting `extraData`.\n   */\n  static collectExtraData(): DebugData {\n    const extraData: ExtraData = {};\n    for (const [key, callback] of BugReporting._extraSources) {\n      extraData[key] = callback();\n    }\n    const fileData: ExtraData = {};\n    for (const [key, callback] of BugReporting._fileSources) {\n      fileData[key] = callback();\n    }\n    infoLog('BugReporting extraData:', extraData);\n    const BugReportingNativeModule = require('../BatchedBridge/NativeModules')\n      .BugReporting;\n    BugReportingNativeModule &&\n      BugReportingNativeModule.setExtraData &&\n      BugReportingNativeModule.setExtraData(extraData, fileData);\n\n    const RedBoxNativeModule = require('../BatchedBridge/NativeModules').RedBox;\n    RedBoxNativeModule &&\n      RedBoxNativeModule.setExtraData &&\n      RedBoxNativeModule.setExtraData(extraData, 'From BugReporting.js');\n\n    return {extras: extraData, files: fileData};\n  }\n}\n\nmodule.exports = BugReporting;\n"]}