037ab38c9aedecba27495e70625e613b
'use strict';

var Platform = require('../../Utilities/Platform');

var UIManager = require('../../ReactNative/UIManager');

var currentlyFocusedID = null;
var inputs = new Set();

function currentlyFocusedField() {
  return currentlyFocusedID;
}

function focusTextInput(textFieldID) {
  if (currentlyFocusedID !== textFieldID && textFieldID !== null) {
    currentlyFocusedID = textFieldID;

    if (Platform.OS === 'ios') {
      UIManager.focus(textFieldID);
    } else if (Platform.OS === 'android') {
      UIManager.dispatchViewManagerCommand(textFieldID, UIManager.getViewManagerConfig('AndroidTextInput').Commands.focusTextInput, null);
    }
  }
}

function blurTextInput(textFieldID) {
  if (currentlyFocusedID === textFieldID && textFieldID !== null) {
    currentlyFocusedID = null;

    if (Platform.OS === 'ios') {
      UIManager.blur(textFieldID);
    } else if (Platform.OS === 'android') {
      UIManager.dispatchViewManagerCommand(textFieldID, UIManager.getViewManagerConfig('AndroidTextInput').Commands.blurTextInput, null);
    }
  }
}

function registerInput(textFieldID) {
  inputs.add(textFieldID);
}

function unregisterInput(textFieldID) {
  inputs.delete(textFieldID);
}

function isTextInput(textFieldID) {
  return inputs.has(textFieldID);
}

module.exports = {
  currentlyFocusedField: currentlyFocusedField,
  focusTextInput: focusTextInput,
  blurTextInput: blurTextInput,
  registerInput: registerInput,
  unregisterInput: unregisterInput,
  isTextInput: isTextInput
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRleHRJbnB1dFN0YXRlLmpzIl0sIm5hbWVzIjpbIlBsYXRmb3JtIiwicmVxdWlyZSIsIlVJTWFuYWdlciIsImN1cnJlbnRseUZvY3VzZWRJRCIsImlucHV0cyIsIlNldCIsImN1cnJlbnRseUZvY3VzZWRGaWVsZCIsImZvY3VzVGV4dElucHV0IiwidGV4dEZpZWxkSUQiLCJPUyIsImZvY3VzIiwiZGlzcGF0Y2hWaWV3TWFuYWdlckNvbW1hbmQiLCJnZXRWaWV3TWFuYWdlckNvbmZpZyIsIkNvbW1hbmRzIiwiYmx1clRleHRJbnB1dCIsImJsdXIiLCJyZWdpc3RlcklucHV0IiwiYWRkIiwidW5yZWdpc3RlcklucHV0IiwiZGVsZXRlIiwiaXNUZXh0SW5wdXQiLCJoYXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFlQTs7QUFFQSxJQUFNQSxRQUFRLEdBQUdDLE9BQU8sQ0FBQywwQkFBRCxDQUF4Qjs7QUFDQSxJQUFNQyxTQUFTLEdBQUdELE9BQU8sQ0FBQyw2QkFBRCxDQUF6Qjs7QUFFQSxJQUFJRSxrQkFBMkIsR0FBRyxJQUFsQztBQUNBLElBQU1DLE1BQU0sR0FBRyxJQUFJQyxHQUFKLEVBQWY7O0FBTUEsU0FBU0MscUJBQVQsR0FBMEM7QUFDeEMsU0FBT0gsa0JBQVA7QUFDRDs7QUFPRCxTQUFTSSxjQUFULENBQXdCQyxXQUF4QixFQUE4QztBQUM1QyxNQUFJTCxrQkFBa0IsS0FBS0ssV0FBdkIsSUFBc0NBLFdBQVcsS0FBSyxJQUExRCxFQUFnRTtBQUM5REwsSUFBQUEsa0JBQWtCLEdBQUdLLFdBQXJCOztBQUNBLFFBQUlSLFFBQVEsQ0FBQ1MsRUFBVCxLQUFnQixLQUFwQixFQUEyQjtBQUN6QlAsTUFBQUEsU0FBUyxDQUFDUSxLQUFWLENBQWdCRixXQUFoQjtBQUNELEtBRkQsTUFFTyxJQUFJUixRQUFRLENBQUNTLEVBQVQsS0FBZ0IsU0FBcEIsRUFBK0I7QUFDcENQLE1BQUFBLFNBQVMsQ0FBQ1MsMEJBQVYsQ0FDRUgsV0FERixFQUVFTixTQUFTLENBQUNVLG9CQUFWLENBQStCLGtCQUEvQixFQUFtREMsUUFBbkQsQ0FDR04sY0FITCxFQUlFLElBSkY7QUFNRDtBQUNGO0FBQ0Y7O0FBT0QsU0FBU08sYUFBVCxDQUF1Qk4sV0FBdkIsRUFBNkM7QUFDM0MsTUFBSUwsa0JBQWtCLEtBQUtLLFdBQXZCLElBQXNDQSxXQUFXLEtBQUssSUFBMUQsRUFBZ0U7QUFDOURMLElBQUFBLGtCQUFrQixHQUFHLElBQXJCOztBQUNBLFFBQUlILFFBQVEsQ0FBQ1MsRUFBVCxLQUFnQixLQUFwQixFQUEyQjtBQUN6QlAsTUFBQUEsU0FBUyxDQUFDYSxJQUFWLENBQWVQLFdBQWY7QUFDRCxLQUZELE1BRU8sSUFBSVIsUUFBUSxDQUFDUyxFQUFULEtBQWdCLFNBQXBCLEVBQStCO0FBQ3BDUCxNQUFBQSxTQUFTLENBQUNTLDBCQUFWLENBQ0VILFdBREYsRUFFRU4sU0FBUyxDQUFDVSxvQkFBVixDQUErQixrQkFBL0IsRUFBbURDLFFBQW5ELENBQ0dDLGFBSEwsRUFJRSxJQUpGO0FBTUQ7QUFDRjtBQUNGOztBQUVELFNBQVNFLGFBQVQsQ0FBdUJSLFdBQXZCLEVBQTRDO0FBQzFDSixFQUFBQSxNQUFNLENBQUNhLEdBQVAsQ0FBV1QsV0FBWDtBQUNEOztBQUVELFNBQVNVLGVBQVQsQ0FBeUJWLFdBQXpCLEVBQThDO0FBQzVDSixFQUFBQSxNQUFNLENBQUNlLE1BQVAsQ0FBY1gsV0FBZDtBQUNEOztBQUVELFNBQVNZLFdBQVQsQ0FBcUJaLFdBQXJCLEVBQTBDO0FBQ3hDLFNBQU9KLE1BQU0sQ0FBQ2lCLEdBQVAsQ0FBV2IsV0FBWCxDQUFQO0FBQ0Q7O0FBRURjLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNmakIsRUFBQUEscUJBQXFCLEVBQXJCQSxxQkFEZTtBQUVmQyxFQUFBQSxjQUFjLEVBQWRBLGNBRmU7QUFHZk8sRUFBQUEsYUFBYSxFQUFiQSxhQUhlO0FBSWZFLEVBQUFBLGFBQWEsRUFBYkEsYUFKZTtBQUtmRSxFQUFBQSxlQUFlLEVBQWZBLGVBTGU7QUFNZkUsRUFBQUEsV0FBVyxFQUFYQTtBQU5lLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKlxuICogVGhpcyBjbGFzcyBpcyByZXNwb25zaWJsZSBmb3IgY29vcmRpbmF0aW5nIHRoZSBcImZvY3VzZWRcIlxuICogc3RhdGUgZm9yIFRleHRJbnB1dHMuIEFsbCBjYWxscyByZWxhdGluZyB0byB0aGUga2V5Ym9hcmRcbiAqIHNob3VsZCBiZSBmdW5uZWxlZCB0aHJvdWdoIGhlcmVcbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IFBsYXRmb3JtID0gcmVxdWlyZSgnLi4vLi4vVXRpbGl0aWVzL1BsYXRmb3JtJyk7XG5jb25zdCBVSU1hbmFnZXIgPSByZXF1aXJlKCcuLi8uLi9SZWFjdE5hdGl2ZS9VSU1hbmFnZXInKTtcblxubGV0IGN1cnJlbnRseUZvY3VzZWRJRDogP251bWJlciA9IG51bGw7XG5jb25zdCBpbnB1dHMgPSBuZXcgU2V0KCk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgSUQgb2YgdGhlIGN1cnJlbnRseSBmb2N1c2VkIHRleHQgZmllbGQsIGlmIG9uZSBleGlzdHNcbiAqIElmIG5vIHRleHQgZmllbGQgaXMgZm9jdXNlZCBpdCByZXR1cm5zIG51bGxcbiAqL1xuZnVuY3Rpb24gY3VycmVudGx5Rm9jdXNlZEZpZWxkKCk6ID9udW1iZXIge1xuICByZXR1cm4gY3VycmVudGx5Rm9jdXNlZElEO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBUZXh0SW5wdXRJRCBpZCBvZiB0aGUgdGV4dCBmaWVsZCB0byBmb2N1c1xuICogRm9jdXNlcyB0aGUgc3BlY2lmaWVkIHRleHQgZmllbGRcbiAqIG5vb3AgaWYgdGhlIHRleHQgZmllbGQgd2FzIGFscmVhZHkgZm9jdXNlZFxuICovXG5mdW5jdGlvbiBmb2N1c1RleHRJbnB1dCh0ZXh0RmllbGRJRDogP251bWJlcikge1xuICBpZiAoY3VycmVudGx5Rm9jdXNlZElEICE9PSB0ZXh0RmllbGRJRCAmJiB0ZXh0RmllbGRJRCAhPT0gbnVsbCkge1xuICAgIGN1cnJlbnRseUZvY3VzZWRJRCA9IHRleHRGaWVsZElEO1xuICAgIGlmIChQbGF0Zm9ybS5PUyA9PT0gJ2lvcycpIHtcbiAgICAgIFVJTWFuYWdlci5mb2N1cyh0ZXh0RmllbGRJRCk7XG4gICAgfSBlbHNlIGlmIChQbGF0Zm9ybS5PUyA9PT0gJ2FuZHJvaWQnKSB7XG4gICAgICBVSU1hbmFnZXIuZGlzcGF0Y2hWaWV3TWFuYWdlckNvbW1hbmQoXG4gICAgICAgIHRleHRGaWVsZElELFxuICAgICAgICBVSU1hbmFnZXIuZ2V0Vmlld01hbmFnZXJDb25maWcoJ0FuZHJvaWRUZXh0SW5wdXQnKS5Db21tYW5kc1xuICAgICAgICAgIC5mb2N1c1RleHRJbnB1dCxcbiAgICAgICAgbnVsbCxcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHRleHRGaWVsZElEIGlkIG9mIHRoZSB0ZXh0IGZpZWxkIHRvIHVuZm9jdXNcbiAqIFVuZm9jdXNlcyB0aGUgc3BlY2lmaWVkIHRleHQgZmllbGRcbiAqIG5vb3AgaWYgaXQgd2Fzbid0IGZvY3VzZWRcbiAqL1xuZnVuY3Rpb24gYmx1clRleHRJbnB1dCh0ZXh0RmllbGRJRDogP251bWJlcikge1xuICBpZiAoY3VycmVudGx5Rm9jdXNlZElEID09PSB0ZXh0RmllbGRJRCAmJiB0ZXh0RmllbGRJRCAhPT0gbnVsbCkge1xuICAgIGN1cnJlbnRseUZvY3VzZWRJRCA9IG51bGw7XG4gICAgaWYgKFBsYXRmb3JtLk9TID09PSAnaW9zJykge1xuICAgICAgVUlNYW5hZ2VyLmJsdXIodGV4dEZpZWxkSUQpO1xuICAgIH0gZWxzZSBpZiAoUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJykge1xuICAgICAgVUlNYW5hZ2VyLmRpc3BhdGNoVmlld01hbmFnZXJDb21tYW5kKFxuICAgICAgICB0ZXh0RmllbGRJRCxcbiAgICAgICAgVUlNYW5hZ2VyLmdldFZpZXdNYW5hZ2VyQ29uZmlnKCdBbmRyb2lkVGV4dElucHV0JykuQ29tbWFuZHNcbiAgICAgICAgICAuYmx1clRleHRJbnB1dCxcbiAgICAgICAgbnVsbCxcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVySW5wdXQodGV4dEZpZWxkSUQ6IG51bWJlcikge1xuICBpbnB1dHMuYWRkKHRleHRGaWVsZElEKTtcbn1cblxuZnVuY3Rpb24gdW5yZWdpc3RlcklucHV0KHRleHRGaWVsZElEOiBudW1iZXIpIHtcbiAgaW5wdXRzLmRlbGV0ZSh0ZXh0RmllbGRJRCk7XG59XG5cbmZ1bmN0aW9uIGlzVGV4dElucHV0KHRleHRGaWVsZElEOiBudW1iZXIpIHtcbiAgcmV0dXJuIGlucHV0cy5oYXModGV4dEZpZWxkSUQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgY3VycmVudGx5Rm9jdXNlZEZpZWxkLFxuICBmb2N1c1RleHRJbnB1dCxcbiAgYmx1clRleHRJbnB1dCxcbiAgcmVnaXN0ZXJJbnB1dCxcbiAgdW5yZWdpc3RlcklucHV0LFxuICBpc1RleHRJbnB1dCxcbn07XG4iXX0=