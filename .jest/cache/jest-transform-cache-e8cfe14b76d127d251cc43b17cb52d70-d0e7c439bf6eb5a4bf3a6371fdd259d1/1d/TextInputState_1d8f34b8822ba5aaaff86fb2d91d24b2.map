{"version":3,"sources":["TextInputState.js"],"names":["Platform","require","UIManager","currentlyFocusedID","inputs","Set","currentlyFocusedField","focusTextInput","textFieldID","OS","focus","dispatchViewManagerCommand","getViewManagerConfig","Commands","blurTextInput","blur","registerInput","add","unregisterInput","delete","isTextInput","has","module","exports"],"mappings":"AAeA;;AAEA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,0BAAD,CAAxB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,6BAAD,CAAzB;;AAEA,IAAIE,kBAA2B,GAAG,IAAlC;AACA,IAAMC,MAAM,GAAG,IAAIC,GAAJ,EAAf;;AAMA,SAASC,qBAAT,GAA0C;AACxC,SAAOH,kBAAP;AACD;;AAOD,SAASI,cAAT,CAAwBC,WAAxB,EAA8C;AAC5C,MAAIL,kBAAkB,KAAKK,WAAvB,IAAsCA,WAAW,KAAK,IAA1D,EAAgE;AAC9DL,IAAAA,kBAAkB,GAAGK,WAArB;;AACA,QAAIR,QAAQ,CAACS,EAAT,KAAgB,KAApB,EAA2B;AACzBP,MAAAA,SAAS,CAACQ,KAAV,CAAgBF,WAAhB;AACD,KAFD,MAEO,IAAIR,QAAQ,CAACS,EAAT,KAAgB,SAApB,EAA+B;AACpCP,MAAAA,SAAS,CAACS,0BAAV,CACEH,WADF,EAEEN,SAAS,CAACU,oBAAV,CAA+B,kBAA/B,EAAmDC,QAAnD,CACGN,cAHL,EAIE,IAJF;AAMD;AACF;AACF;;AAOD,SAASO,aAAT,CAAuBN,WAAvB,EAA6C;AAC3C,MAAIL,kBAAkB,KAAKK,WAAvB,IAAsCA,WAAW,KAAK,IAA1D,EAAgE;AAC9DL,IAAAA,kBAAkB,GAAG,IAArB;;AACA,QAAIH,QAAQ,CAACS,EAAT,KAAgB,KAApB,EAA2B;AACzBP,MAAAA,SAAS,CAACa,IAAV,CAAeP,WAAf;AACD,KAFD,MAEO,IAAIR,QAAQ,CAACS,EAAT,KAAgB,SAApB,EAA+B;AACpCP,MAAAA,SAAS,CAACS,0BAAV,CACEH,WADF,EAEEN,SAAS,CAACU,oBAAV,CAA+B,kBAA/B,EAAmDC,QAAnD,CACGC,aAHL,EAIE,IAJF;AAMD;AACF;AACF;;AAED,SAASE,aAAT,CAAuBR,WAAvB,EAA4C;AAC1CJ,EAAAA,MAAM,CAACa,GAAP,CAAWT,WAAX;AACD;;AAED,SAASU,eAAT,CAAyBV,WAAzB,EAA8C;AAC5CJ,EAAAA,MAAM,CAACe,MAAP,CAAcX,WAAd;AACD;;AAED,SAASY,WAAT,CAAqBZ,WAArB,EAA0C;AACxC,SAAOJ,MAAM,CAACiB,GAAP,CAAWb,WAAX,CAAP;AACD;;AAEDc,MAAM,CAACC,OAAP,GAAiB;AACfjB,EAAAA,qBAAqB,EAArBA,qBADe;AAEfC,EAAAA,cAAc,EAAdA,cAFe;AAGfO,EAAAA,aAAa,EAAbA,aAHe;AAIfE,EAAAA,aAAa,EAAbA,aAJe;AAKfE,EAAAA,eAAe,EAAfA,eALe;AAMfE,EAAAA,WAAW,EAAXA;AANe,CAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * This class is responsible for coordinating the \"focused\"\n * state for TextInputs. All calls relating to the keyboard\n * should be funneled through here\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nconst Platform = require('../../Utilities/Platform');\nconst UIManager = require('../../ReactNative/UIManager');\n\nlet currentlyFocusedID: ?number = null;\nconst inputs = new Set();\n\n/**\n * Returns the ID of the currently focused text field, if one exists\n * If no text field is focused it returns null\n */\nfunction currentlyFocusedField(): ?number {\n  return currentlyFocusedID;\n}\n\n/**\n * @param {number} TextInputID id of the text field to focus\n * Focuses the specified text field\n * noop if the text field was already focused\n */\nfunction focusTextInput(textFieldID: ?number) {\n  if (currentlyFocusedID !== textFieldID && textFieldID !== null) {\n    currentlyFocusedID = textFieldID;\n    if (Platform.OS === 'ios') {\n      UIManager.focus(textFieldID);\n    } else if (Platform.OS === 'android') {\n      UIManager.dispatchViewManagerCommand(\n        textFieldID,\n        UIManager.getViewManagerConfig('AndroidTextInput').Commands\n          .focusTextInput,\n        null,\n      );\n    }\n  }\n}\n\n/**\n * @param {number} textFieldID id of the text field to unfocus\n * Unfocuses the specified text field\n * noop if it wasn't focused\n */\nfunction blurTextInput(textFieldID: ?number) {\n  if (currentlyFocusedID === textFieldID && textFieldID !== null) {\n    currentlyFocusedID = null;\n    if (Platform.OS === 'ios') {\n      UIManager.blur(textFieldID);\n    } else if (Platform.OS === 'android') {\n      UIManager.dispatchViewManagerCommand(\n        textFieldID,\n        UIManager.getViewManagerConfig('AndroidTextInput').Commands\n          .blurTextInput,\n        null,\n      );\n    }\n  }\n}\n\nfunction registerInput(textFieldID: number) {\n  inputs.add(textFieldID);\n}\n\nfunction unregisterInput(textFieldID: number) {\n  inputs.delete(textFieldID);\n}\n\nfunction isTextInput(textFieldID: number) {\n  return inputs.has(textFieldID);\n}\n\nmodule.exports = {\n  currentlyFocusedField,\n  focusTextInput,\n  blurTextInput,\n  registerInput,\n  unregisterInput,\n  isTextInput,\n};\n"]}