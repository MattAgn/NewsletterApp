{"version":3,"sources":["AnimatedStyle.js"],"names":["AnimatedNode","require","AnimatedTransform","AnimatedWithChildren","NativeAnimatedHelper","flattenStyle","AnimatedStyle","style","transform","_style","updatedStyle","key","value","__isNative","__getValue","Array","isArray","_walkStyleAndGetValues","__getAnimatedValue","_walkStyleAndGetAnimatedValues","__addChild","__removeChild","__makeNative","styleConfig","styleKey","__getNativeTag","validateStyles","type","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst AnimatedNode = require('./AnimatedNode');\nconst AnimatedTransform = require('./AnimatedTransform');\nconst AnimatedWithChildren = require('./AnimatedWithChildren');\nconst NativeAnimatedHelper = require('../NativeAnimatedHelper');\n\nconst flattenStyle = require('../../../StyleSheet/flattenStyle');\n\nclass AnimatedStyle extends AnimatedWithChildren {\n  _style: Object;\n\n  constructor(style: any) {\n    super();\n    style = flattenStyle(style) || {};\n    if (style.transform) {\n      style = {\n        ...style,\n        transform: new AnimatedTransform(style.transform),\n      };\n    }\n    this._style = style;\n  }\n\n  // Recursively get values for nested styles (like iOS's shadowOffset)\n  _walkStyleAndGetValues(style) {\n    const updatedStyle = {};\n    for (const key in style) {\n      const value = style[key];\n      if (value instanceof AnimatedNode) {\n        if (!value.__isNative) {\n          // We cannot use value of natively driven nodes this way as the value we have access from\n          // JS may not be up to date.\n          updatedStyle[key] = value.__getValue();\n        }\n      } else if (value && !Array.isArray(value) && typeof value === 'object') {\n        // Support animating nested values (for example: shadowOffset.height)\n        updatedStyle[key] = this._walkStyleAndGetValues(value);\n      } else {\n        updatedStyle[key] = value;\n      }\n    }\n    return updatedStyle;\n  }\n\n  __getValue(): Object {\n    return this._walkStyleAndGetValues(this._style);\n  }\n\n  // Recursively get animated values for nested styles (like iOS's shadowOffset)\n  _walkStyleAndGetAnimatedValues(style) {\n    const updatedStyle = {};\n    for (const key in style) {\n      const value = style[key];\n      if (value instanceof AnimatedNode) {\n        updatedStyle[key] = value.__getAnimatedValue();\n      } else if (value && !Array.isArray(value) && typeof value === 'object') {\n        // Support animating nested values (for example: shadowOffset.height)\n        updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);\n      }\n    }\n    return updatedStyle;\n  }\n\n  __getAnimatedValue(): Object {\n    return this._walkStyleAndGetAnimatedValues(this._style);\n  }\n\n  __attach(): void {\n    for (const key in this._style) {\n      const value = this._style[key];\n      if (value instanceof AnimatedNode) {\n        value.__addChild(this);\n      }\n    }\n  }\n\n  __detach(): void {\n    for (const key in this._style) {\n      const value = this._style[key];\n      if (value instanceof AnimatedNode) {\n        value.__removeChild(this);\n      }\n    }\n    super.__detach();\n  }\n\n  __makeNative() {\n    for (const key in this._style) {\n      const value = this._style[key];\n      if (value instanceof AnimatedNode) {\n        value.__makeNative();\n      }\n    }\n    super.__makeNative();\n  }\n\n  __getNativeConfig(): Object {\n    const styleConfig = {};\n    for (const styleKey in this._style) {\n      if (this._style[styleKey] instanceof AnimatedNode) {\n        styleConfig[styleKey] = this._style[styleKey].__getNativeTag();\n      }\n      // Non-animated styles are set using `setNativeProps`, no need\n      // to pass those as a part of the node config\n    }\n    NativeAnimatedHelper.validateStyles(styleConfig);\n    return {\n      type: 'style',\n      style: styleConfig,\n    };\n  }\n}\n\nmodule.exports = AnimatedStyle;\n"]}