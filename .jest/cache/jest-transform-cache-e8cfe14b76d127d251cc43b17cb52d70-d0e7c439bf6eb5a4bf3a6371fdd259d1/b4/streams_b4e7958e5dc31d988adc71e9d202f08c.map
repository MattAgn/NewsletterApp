{"version":3,"sources":["streams.js"],"names":["Buffer","require","Transform","module","exports","iconv","encodeStream","encoding","options","IconvLiteEncoderStream","getEncoder","decodeStream","IconvLiteDecoderStream","getDecoder","supportsStreams","_collect","prototype","collect","conv","decodeStrings","call","Object","create","constructor","value","_transform","chunk","done","Error","res","write","length","push","e","_flush","end","cb","chunks","on","concat","isBuffer"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar Buffer = require(\"buffer\").Buffer,\n    Transform = require(\"stream\").Transform;\n\n\n// == Exports ==================================================================\nmodule.exports = function(iconv) {\n    \n    // Additional Public API.\n    iconv.encodeStream = function encodeStream(encoding, options) {\n        return new IconvLiteEncoderStream(iconv.getEncoder(encoding, options), options);\n    }\n\n    iconv.decodeStream = function decodeStream(encoding, options) {\n        return new IconvLiteDecoderStream(iconv.getDecoder(encoding, options), options);\n    }\n\n    iconv.supportsStreams = true;\n\n\n    // Not published yet.\n    iconv.IconvLiteEncoderStream = IconvLiteEncoderStream;\n    iconv.IconvLiteDecoderStream = IconvLiteDecoderStream;\n    iconv._collect = IconvLiteDecoderStream.prototype.collect;\n};\n\n\n// == Encoder stream =======================================================\nfunction IconvLiteEncoderStream(conv, options) {\n    this.conv = conv;\n    options = options || {};\n    options.decodeStrings = false; // We accept only strings, so we don't need to decode them.\n    Transform.call(this, options);\n}\n\nIconvLiteEncoderStream.prototype = Object.create(Transform.prototype, {\n    constructor: { value: IconvLiteEncoderStream }\n});\n\nIconvLiteEncoderStream.prototype._transform = function(chunk, encoding, done) {\n    if (typeof chunk != 'string')\n        return done(new Error(\"Iconv encoding stream needs strings as its input.\"));\n    try {\n        var res = this.conv.write(chunk);\n        if (res && res.length) this.push(res);\n        done();\n    }\n    catch (e) {\n        done(e);\n    }\n}\n\nIconvLiteEncoderStream.prototype._flush = function(done) {\n    try {\n        var res = this.conv.end();\n        if (res && res.length) this.push(res);\n        done();\n    }\n    catch (e) {\n        done(e);\n    }\n}\n\nIconvLiteEncoderStream.prototype.collect = function(cb) {\n    var chunks = [];\n    this.on('error', cb);\n    this.on('data', function(chunk) { chunks.push(chunk); });\n    this.on('end', function() {\n        cb(null, Buffer.concat(chunks));\n    });\n    return this;\n}\n\n\n// == Decoder stream =======================================================\nfunction IconvLiteDecoderStream(conv, options) {\n    this.conv = conv;\n    options = options || {};\n    options.encoding = this.encoding = 'utf8'; // We output strings.\n    Transform.call(this, options);\n}\n\nIconvLiteDecoderStream.prototype = Object.create(Transform.prototype, {\n    constructor: { value: IconvLiteDecoderStream }\n});\n\nIconvLiteDecoderStream.prototype._transform = function(chunk, encoding, done) {\n    if (!Buffer.isBuffer(chunk))\n        return done(new Error(\"Iconv decoding stream needs buffers as its input.\"));\n    try {\n        var res = this.conv.write(chunk);\n        if (res && res.length) this.push(res, this.encoding);\n        done();\n    }\n    catch (e) {\n        done(e);\n    }\n}\n\nIconvLiteDecoderStream.prototype._flush = function(done) {\n    try {\n        var res = this.conv.end();\n        if (res && res.length) this.push(res, this.encoding);                \n        done();\n    }\n    catch (e) {\n        done(e);\n    }\n}\n\nIconvLiteDecoderStream.prototype.collect = function(cb) {\n    var res = '';\n    this.on('error', cb);\n    this.on('data', function(chunk) { res += chunk; });\n    this.on('end', function() {\n        cb(null, res);\n    });\n    return this;\n}\n\n"]}