{"version":3,"sources":["ViewabilityHelper.js"],"names":["invariant","require","ViewabilityHelper","config","viewAreaCoveragePercentThreshold","_hasInteracted","_timers","Set","_viewableIndices","_viewableItems","Map","_config","forEach","clearTimeout","itemCount","scrollOffset","viewportHeight","getFrameMetrics","renderRange","itemVisiblePercentThreshold","viewAreaMode","viewablePercentThreshold","viewableIndices","firstVisible","first","last","console","warn","JSON","stringify","idx","metrics","top","offset","bottom","length","_isViewable","push","createViewToken","onViewableItemsChanged","waitForInteraction","computeViewableItems","every","v","ii","minimumViewTime","handle","setTimeout","delete","_onUpdateSync","add","viewableIndicesToCheck","filter","includes","prevItems","nextItems","map","viewable","key","changed","has","isViewable","viewableItems","Array","from","values","viewabilityConfig","itemLength","_isEntirelyVisible","pixels","_getPixelsVisible","percent","visibleHeight","Math","min","max","module","exports"],"mappings":"AASA;;;;;;;;;;;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;IA2DMC,iB;AAUJ,+BAEE;AAAA,QADAC,MACA,uEAD4B;AAACC,MAAAA,gCAAgC,EAAE;AAAnC,KAC5B;AAAA;AAAA,SAVFC,cAUE,GAVwB,KAUxB;AAAA,SANFC,OAME,GANqB,IAAIC,GAAJ,EAMrB;AAAA,SALFC,gBAKE,GALgC,EAKhC;AAAA,SAJFC,cAIE,GAJuC,IAAIC,GAAJ,EAIvC;AACA,SAAKC,OAAL,GAAeR,MAAf;AACD;;;;8BAKS;AACR,WAAKG,OAAL,CAAaM,OAAb,CAAqBC,YAArB;AACD;;;yCAMCC,S,EACAC,Y,EACAC,c,EACAC,e,EACAC,W,EACe;AAAA,0BAIX,KAAKP,OAJM;AAAA,UAEbQ,2BAFa,iBAEbA,2BAFa;AAAA,UAGbf,gCAHa,iBAGbA,gCAHa;AAKf,UAAMgB,YAAY,GAAGhB,gCAAgC,IAAI,IAAzD;AACA,UAAMiB,wBAAwB,GAAGD,YAAY,GACzChB,gCADyC,GAEzCe,2BAFJ;AAGAnB,MAAAA,SAAS,CACPqB,wBAAwB,IAAI,IAA5B,IACGF,2BAA2B,IAAI,IAAhC,MACGf,gCAAgC,IAAI,IADvC,CAFK,EAIP,yFAJO,CAAT;AAMA,UAAMkB,eAAe,GAAG,EAAxB;;AACA,UAAIR,SAAS,KAAK,CAAlB,EAAqB;AACnB,eAAOQ,eAAP;AACD;;AACD,UAAIC,YAAY,GAAG,CAAC,CAApB;;AAnBe,iBAoBOL,WAAW,IAAI;AAACM,QAAAA,KAAK,EAAE,CAAR;AAAWC,QAAAA,IAAI,EAAEX,SAAS,GAAG;AAA7B,OApBtB;AAAA,UAoBRU,KApBQ,QAoBRA,KApBQ;AAAA,UAoBDC,IApBC,QAoBDA,IApBC;;AAqBf,UAAIA,IAAI,IAAIX,SAAZ,EAAuB;AACrBY,QAAAA,OAAO,CAACC,IAAR,CACE,gDACEC,IAAI,CAACC,SAAL,CAAe;AAACX,UAAAA,WAAW,EAAXA,WAAD;AAAcJ,UAAAA,SAAS,EAATA;AAAd,SAAf,CAFJ;AAIA,eAAO,EAAP;AACD;;AACD,WAAK,IAAIgB,GAAG,GAAGN,KAAf,EAAsBM,GAAG,IAAIL,IAA7B,EAAmCK,GAAG,EAAtC,EAA0C;AACxC,YAAMC,OAAO,GAAGd,eAAe,CAACa,GAAD,CAA/B;;AACA,YAAI,CAACC,OAAL,EAAc;AACZ;AACD;;AACD,YAAMC,GAAG,GAAGD,OAAO,CAACE,MAAR,GAAiBlB,YAA7B;AACA,YAAMmB,MAAM,GAAGF,GAAG,GAAGD,OAAO,CAACI,MAA7B;;AACA,YAAIH,GAAG,GAAGhB,cAAN,IAAwBkB,MAAM,GAAG,CAArC,EAAwC;AACtCX,UAAAA,YAAY,GAAGO,GAAf;;AACA,cACEM,WAAW,CACThB,YADS,EAETC,wBAFS,EAGTW,GAHS,EAITE,MAJS,EAKTlB,cALS,EAMTe,OAAO,CAACI,MANC,CADb,EASE;AACAb,YAAAA,eAAe,CAACe,IAAhB,CAAqBP,GAArB;AACD;AACF,SAdD,MAcO,IAAIP,YAAY,IAAI,CAApB,EAAuB;AAC5B;AACD;AACF;;AACD,aAAOD,eAAP;AACD;;;6BAOCR,S,EACAC,Y,EACAC,c,EACAC,e,EACAqB,e,EACAC,sB,EAIArB,W,EACM;AAAA;;AACN,UACG,KAAKP,OAAL,CAAa6B,kBAAb,IAAmC,CAAC,KAAKnC,cAA1C,IACAS,SAAS,KAAK,CADd,IAEA,CAACG,eAAe,CAAC,CAAD,CAHlB,EAIE;AACA;AACD;;AACD,UAAIK,eAAe,GAAG,EAAtB;;AACA,UAAIR,SAAJ,EAAe;AACbQ,QAAAA,eAAe,GAAG,KAAKmB,oBAAL,CAChB3B,SADgB,EAEhBC,YAFgB,EAGhBC,cAHgB,EAIhBC,eAJgB,EAKhBC,WALgB,CAAlB;AAOD;;AACD,UACE,KAAKV,gBAAL,CAAsB2B,MAAtB,KAAiCb,eAAe,CAACa,MAAjD,IACA,KAAK3B,gBAAL,CAAsBkC,KAAtB,CAA4B,UAACC,CAAD,EAAIC,EAAJ;AAAA,eAAWD,CAAC,KAAKrB,eAAe,CAACsB,EAAD,CAAhC;AAAA,OAA5B,CAFF,EAGE;AAGA;AACD;;AACD,WAAKpC,gBAAL,GAAwBc,eAAxB;;AACA,UAAI,KAAKX,OAAL,CAAakC,eAAjB,EAAkC;AAChC,YAAMC,MAAM,GAAGC,UAAU,CAAC,YAAM;AAC9B,UAAA,KAAI,CAACzC,OAAL,CAAa0C,MAAb,CAAoBF,MAApB;;AACA,UAAA,KAAI,CAACG,aAAL,CACE3B,eADF,EAEEiB,sBAFF,EAGED,eAHF;AAKD,SAPwB,EAOtB,KAAK3B,OAAL,CAAakC,eAPS,CAAzB;;AAQA,aAAKvC,OAAL,CAAa4C,GAAb,CAAiBJ,MAAjB;AACD,OAVD,MAUO;AACL,aAAKG,aAAL,CACE3B,eADF,EAEEiB,sBAFF,EAGED,eAHF;AAKD;AACF;;;2CAKsB;AACrB,WAAK9B,gBAAL,GAAwB,EAAxB;AACD;;;wCAKmB;AAClB,WAAKH,cAAL,GAAsB,IAAtB;AACD;;;kCAGC8C,sB,EACAZ,sB,EACAD,e,EACA;AAAA;;AAEAa,MAAAA,sBAAsB,GAAGA,sBAAsB,CAACC,MAAvB,CAA8B,UAAAR,EAAE;AAAA,eACvD,MAAI,CAACpC,gBAAL,CAAsB6C,QAAtB,CAA+BT,EAA/B,CADuD;AAAA,OAAhC,CAAzB;AAGA,UAAMU,SAAS,GAAG,KAAK7C,cAAvB;AACA,UAAM8C,SAAS,GAAG,IAAI7C,GAAJ,CAChByC,sBAAsB,CAACK,GAAvB,CAA2B,UAAAZ,EAAE,EAAI;AAC/B,YAAMa,QAAQ,GAAGnB,eAAe,CAACM,EAAD,EAAK,IAAL,CAAhC;AACA,eAAO,CAACa,QAAQ,CAACC,GAAV,EAAeD,QAAf,CAAP;AACD,OAHD,CADgB,CAAlB;AAOA,UAAME,OAAO,GAAG,EAAhB;;AACA,2BAA8BJ,SAA9B,gKAAyC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA,YAA7BG,KAA6B;AAAA,YAAxBD,UAAwB;;AACvC,YAAI,CAACH,SAAS,CAACM,GAAV,CAAcF,KAAd,CAAL,EAAyB;AACvBC,UAAAA,OAAO,CAACtB,IAAR,CAAaoB,UAAb;AACD;AACF;;AACD,4BAA8BH,SAA9B,uKAAyC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAAA,YAA7BI,KAA6B;AAAA,YAAxBD,UAAwB;;AACvC,YAAI,CAACF,SAAS,CAACK,GAAV,CAAcF,KAAd,CAAL,EAAyB;AACvBC,UAAAA,OAAO,CAACtB,IAAR,mBAAiBoB,UAAjB;AAA2BI,YAAAA,UAAU,EAAE;AAAvC;AACD;AACF;;AACD,UAAIF,OAAO,CAACxB,MAAR,GAAiB,CAArB,EAAwB;AACtB,aAAK1B,cAAL,GAAsB8C,SAAtB;AACAhB,QAAAA,sBAAsB,CAAC;AACrBuB,UAAAA,aAAa,EAAEC,KAAK,CAACC,IAAN,CAAWT,SAAS,CAACU,MAAV,EAAX,CADM;AAErBN,UAAAA,OAAO,EAAPA,OAFqB;AAGrBO,UAAAA,iBAAiB,EAAE,KAAKvD;AAHH,SAAD,CAAtB;AAKD;AACF;;;;;AAGH,SAASyB,WAAT,CACEhB,YADF,EAEEC,wBAFF,EAGEW,GAHF,EAIEE,MAJF,EAKElB,cALF,EAMEmD,UANF,EAOW;AACT,MAAIC,kBAAkB,CAACpC,GAAD,EAAME,MAAN,EAAclB,cAAd,CAAtB,EAAqD;AACnD,WAAO,IAAP;AACD,GAFD,MAEO;AACL,QAAMqD,MAAM,GAAGC,iBAAiB,CAACtC,GAAD,EAAME,MAAN,EAAclB,cAAd,CAAhC;;AACA,QAAMuD,OAAO,GACX,OAAOnD,YAAY,GAAGiD,MAAM,GAAGrD,cAAZ,GAA6BqD,MAAM,GAAGF,UAAzD,CADF;AAEA,WAAOI,OAAO,IAAIlD,wBAAlB;AACD;AACF;;AAED,SAASiD,iBAAT,CACEtC,GADF,EAEEE,MAFF,EAGElB,cAHF,EAIU;AACR,MAAMwD,aAAa,GAAGC,IAAI,CAACC,GAAL,CAASxC,MAAT,EAAiBlB,cAAjB,IAAmCyD,IAAI,CAACE,GAAL,CAAS3C,GAAT,EAAc,CAAd,CAAzD;AACA,SAAOyC,IAAI,CAACE,GAAL,CAAS,CAAT,EAAYH,aAAZ,CAAP;AACD;;AAED,SAASJ,kBAAT,CACEpC,GADF,EAEEE,MAFF,EAGElB,cAHF,EAIW;AACT,SAAOgB,GAAG,IAAI,CAAP,IAAYE,MAAM,IAAIlB,cAAtB,IAAwCkB,MAAM,GAAGF,GAAxD;AACD;;AAED4C,MAAM,CAACC,OAAP,GAAiB3E,iBAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n'use strict';\n\nconst invariant = require('invariant');\n\nexport type ViewToken = {\n  item: any,\n  key: string,\n  index: ?number,\n  isViewable: boolean,\n  section?: any,\n};\n\nexport type ViewabilityConfigCallbackPair = {\n  viewabilityConfig: ViewabilityConfig,\n  onViewableItemsChanged: (info: {\n    viewableItems: Array<ViewToken>,\n    changed: Array<ViewToken>,\n  }) => void,\n};\n\nexport type ViewabilityConfig = {|\n  /**\n   * Minimum amount of time (in milliseconds) that an item must be physically viewable before the\n   * viewability callback will be fired. A high number means that scrolling through content without\n   * stopping will not mark the content as viewable.\n   */\n  minimumViewTime?: number,\n\n  /**\n   * Percent of viewport that must be covered for a partially occluded item to count as\n   * \"viewable\", 0-100. Fully visible items are always considered viewable. A value of 0 means\n   * that a single pixel in the viewport makes the item viewable, and a value of 100 means that\n   * an item must be either entirely visible or cover the entire viewport to count as viewable.\n   */\n  viewAreaCoveragePercentThreshold?: number,\n\n  /**\n   * Similar to `viewAreaPercentThreshold`, but considers the percent of the item that is visible,\n   * rather than the fraction of the viewable area it covers.\n   */\n  itemVisiblePercentThreshold?: number,\n\n  /**\n   * Nothing is considered viewable until the user scrolls or `recordInteraction` is called after\n   * render.\n   */\n  waitForInteraction?: boolean,\n|};\n\n/**\n * A Utility class for calculating viewable items based on current metrics like scroll position and\n * layout.\n *\n * An item is said to be in a \"viewable\" state when any of the following\n * is true for longer than `minimumViewTime` milliseconds (after an interaction if `waitForInteraction`\n * is true):\n *\n * - Occupying >= `viewAreaCoveragePercentThreshold` of the view area XOR fraction of the item\n *   visible in the view area >= `itemVisiblePercentThreshold`.\n * - Entirely visible on screen\n */\nclass ViewabilityHelper {\n  _config: ViewabilityConfig;\n  _hasInteracted: boolean = false;\n  /* $FlowFixMe(>=0.63.0 site=react_native_fb) This comment suppresses an error\n   * found when Flow v0.63 was deployed. To see the error delete this comment\n   * and run Flow. */\n  _timers: Set<number> = new Set();\n  _viewableIndices: Array<number> = [];\n  _viewableItems: Map<string, ViewToken> = new Map();\n\n  constructor(\n    config: ViewabilityConfig = {viewAreaCoveragePercentThreshold: 0},\n  ) {\n    this._config = config;\n  }\n\n  /**\n   * Cleanup, e.g. on unmount. Clears any pending timers.\n   */\n  dispose() {\n    this._timers.forEach(clearTimeout);\n  }\n\n  /**\n   * Determines which items are viewable based on the current metrics and config.\n   */\n  computeViewableItems(\n    itemCount: number,\n    scrollOffset: number,\n    viewportHeight: number,\n    getFrameMetrics: (index: number) => ?{length: number, offset: number},\n    renderRange?: {first: number, last: number}, // Optional optimization to reduce the scan size\n  ): Array<number> {\n    const {\n      itemVisiblePercentThreshold,\n      viewAreaCoveragePercentThreshold,\n    } = this._config;\n    const viewAreaMode = viewAreaCoveragePercentThreshold != null;\n    const viewablePercentThreshold = viewAreaMode\n      ? viewAreaCoveragePercentThreshold\n      : itemVisiblePercentThreshold;\n    invariant(\n      viewablePercentThreshold != null &&\n        (itemVisiblePercentThreshold != null) !==\n          (viewAreaCoveragePercentThreshold != null),\n      'Must set exactly one of itemVisiblePercentThreshold or viewAreaCoveragePercentThreshold',\n    );\n    const viewableIndices = [];\n    if (itemCount === 0) {\n      return viewableIndices;\n    }\n    let firstVisible = -1;\n    const {first, last} = renderRange || {first: 0, last: itemCount - 1};\n    if (last >= itemCount) {\n      console.warn(\n        'Invalid render range computing viewability ' +\n          JSON.stringify({renderRange, itemCount}),\n      );\n      return [];\n    }\n    for (let idx = first; idx <= last; idx++) {\n      const metrics = getFrameMetrics(idx);\n      if (!metrics) {\n        continue;\n      }\n      const top = metrics.offset - scrollOffset;\n      const bottom = top + metrics.length;\n      if (top < viewportHeight && bottom > 0) {\n        firstVisible = idx;\n        if (\n          _isViewable(\n            viewAreaMode,\n            viewablePercentThreshold,\n            top,\n            bottom,\n            viewportHeight,\n            metrics.length,\n          )\n        ) {\n          viewableIndices.push(idx);\n        }\n      } else if (firstVisible >= 0) {\n        break;\n      }\n    }\n    return viewableIndices;\n  }\n\n  /**\n   * Figures out which items are viewable and how that has changed from before and calls\n   * `onViewableItemsChanged` as appropriate.\n   */\n  onUpdate(\n    itemCount: number,\n    scrollOffset: number,\n    viewportHeight: number,\n    getFrameMetrics: (index: number) => ?{length: number, offset: number},\n    createViewToken: (index: number, isViewable: boolean) => ViewToken,\n    onViewableItemsChanged: ({\n      viewableItems: Array<ViewToken>,\n      changed: Array<ViewToken>,\n    }) => void,\n    renderRange?: {first: number, last: number}, // Optional optimization to reduce the scan size\n  ): void {\n    if (\n      (this._config.waitForInteraction && !this._hasInteracted) ||\n      itemCount === 0 ||\n      !getFrameMetrics(0)\n    ) {\n      return;\n    }\n    let viewableIndices = [];\n    if (itemCount) {\n      viewableIndices = this.computeViewableItems(\n        itemCount,\n        scrollOffset,\n        viewportHeight,\n        getFrameMetrics,\n        renderRange,\n      );\n    }\n    if (\n      this._viewableIndices.length === viewableIndices.length &&\n      this._viewableIndices.every((v, ii) => v === viewableIndices[ii])\n    ) {\n      // We might get a lot of scroll events where visibility doesn't change and we don't want to do\n      // extra work in those cases.\n      return;\n    }\n    this._viewableIndices = viewableIndices;\n    if (this._config.minimumViewTime) {\n      const handle = setTimeout(() => {\n        this._timers.delete(handle);\n        this._onUpdateSync(\n          viewableIndices,\n          onViewableItemsChanged,\n          createViewToken,\n        );\n      }, this._config.minimumViewTime);\n      this._timers.add(handle);\n    } else {\n      this._onUpdateSync(\n        viewableIndices,\n        onViewableItemsChanged,\n        createViewToken,\n      );\n    }\n  }\n\n  /**\n   * clean-up cached _viewableIndices to evaluate changed items on next update\n   */\n  resetViewableIndices() {\n    this._viewableIndices = [];\n  }\n\n  /**\n   * Records that an interaction has happened even if there has been no scroll.\n   */\n  recordInteraction() {\n    this._hasInteracted = true;\n  }\n\n  _onUpdateSync(\n    viewableIndicesToCheck,\n    onViewableItemsChanged,\n    createViewToken,\n  ) {\n    // Filter out indices that have gone out of view since this call was scheduled.\n    viewableIndicesToCheck = viewableIndicesToCheck.filter(ii =>\n      this._viewableIndices.includes(ii),\n    );\n    const prevItems = this._viewableItems;\n    const nextItems = new Map(\n      viewableIndicesToCheck.map(ii => {\n        const viewable = createViewToken(ii, true);\n        return [viewable.key, viewable];\n      }),\n    );\n\n    const changed = [];\n    for (const [key, viewable] of nextItems) {\n      if (!prevItems.has(key)) {\n        changed.push(viewable);\n      }\n    }\n    for (const [key, viewable] of prevItems) {\n      if (!nextItems.has(key)) {\n        changed.push({...viewable, isViewable: false});\n      }\n    }\n    if (changed.length > 0) {\n      this._viewableItems = nextItems;\n      onViewableItemsChanged({\n        viewableItems: Array.from(nextItems.values()),\n        changed,\n        viewabilityConfig: this._config,\n      });\n    }\n  }\n}\n\nfunction _isViewable(\n  viewAreaMode: boolean,\n  viewablePercentThreshold: number,\n  top: number,\n  bottom: number,\n  viewportHeight: number,\n  itemLength: number,\n): boolean {\n  if (_isEntirelyVisible(top, bottom, viewportHeight)) {\n    return true;\n  } else {\n    const pixels = _getPixelsVisible(top, bottom, viewportHeight);\n    const percent =\n      100 * (viewAreaMode ? pixels / viewportHeight : pixels / itemLength);\n    return percent >= viewablePercentThreshold;\n  }\n}\n\nfunction _getPixelsVisible(\n  top: number,\n  bottom: number,\n  viewportHeight: number,\n): number {\n  const visibleHeight = Math.min(bottom, viewportHeight) - Math.max(top, 0);\n  return Math.max(0, visibleHeight);\n}\n\nfunction _isEntirelyVisible(\n  top: number,\n  bottom: number,\n  viewportHeight: number,\n): boolean {\n  return top >= 0 && bottom <= viewportHeight && bottom > top;\n}\n\nmodule.exports = ViewabilityHelper;\n"]}