212a73f86928f975580d895ee46478d0
'use strict';

jest.mock('../Libraries/Core/Devtools/setupDevtools');
jest.mock('../Libraries/Core/InitializeCore', function () {}).mock('../Libraries/Image/Image', function () {
  return mockComponent('../Libraries/Image/Image');
}).mock('../Libraries/Text/Text', function () {
  return mockComponent('../Libraries/Text/Text', MockNativeMethods);
}).mock('../Libraries/Components/TextInput/TextInput', function () {
  return mockComponent('../Libraries/Components/TextInput/TextInput');
}).mock('../Libraries/Modal/Modal', function () {
  return mockComponent('../Libraries/Modal/Modal');
}).mock('../Libraries/Components/View/View', function () {
  return mockComponent('../Libraries/Components/View/View', MockNativeMethods);
}).mock('../Libraries/Components/RefreshControl/RefreshControl', function () {
  return jest.requireActual('../Libraries/Components/RefreshControl/__mocks__/RefreshControlMock');
}).mock('../Libraries/Components/ScrollView/ScrollView', function () {
  return jest.requireActual('../Libraries/Components/ScrollView/__mocks__/ScrollViewMock');
}).mock('../Libraries/Components/ActivityIndicator/ActivityIndicator', function () {
  return mockComponent('../Libraries/Components/ActivityIndicator/ActivityIndicator');
}).mock('../Libraries/Animated/src/AnimatedImplementation', function () {
  var AnimatedImplementation = jest.requireActual('../Libraries/Animated/src/AnimatedImplementation');
  var oldCreate = AnimatedImplementation.createAnimatedComponent;

  AnimatedImplementation.createAnimatedComponent = function (Component, defaultProps) {
    var Wrapped = oldCreate(Component, defaultProps);
    Wrapped.__skipSetNativeProps_FOR_TESTS_ONLY = true;
    return Wrapped;
  };

  return AnimatedImplementation;
}).mock('../Libraries/Renderer/shims/ReactNative', function () {
  var ReactNative = jest.requireActual('../Libraries/Renderer/shims/ReactNative');
  var NativeMethodsMixin = ReactNative.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.NativeMethodsMixin;
  (0, _extends2.default)(NativeMethodsMixin, MockNativeMethods);
  (0, _extends2.default)(ReactNative.NativeComponent.prototype, MockNativeMethods);
  return ReactNative;
}).mock('../Libraries/Components/Touchable/ensureComponentIsNative', function () {
  return function () {
    return true;
  };
});

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var MockNativeMethods = jest.requireActual('./MockNativeMethods');
var mockComponent = jest.requireActual('./mockComponent');
jest.requireActual('../Libraries/polyfills/Object.es7.js');
jest.requireActual('../Libraries/polyfills/error-guard');
global.__DEV__ = true;
global.Promise = jest.requireActual('promise');
global.regeneratorRuntime = jest.requireActual('regenerator-runtime/runtime');

global.requestAnimationFrame = function (callback) {
  return setTimeout(callback, 0);
};

global.cancelAnimationFrame = function (id) {
  clearTimeout(id);
};

jest.setMock('../Libraries/vendor/core/ErrorUtils', require('../Libraries/vendor/core/ErrorUtils'));
var mockNativeModules = {
  AccessibilityInfo: {
    addEventListener: jest.fn(),
    announceForAccessibility: jest.fn(),
    fetch: jest.fn(),
    isBoldTextEnabled: jest.fn(),
    isGrayscaleEnabled: jest.fn(),
    isInvertColorsEnabled: jest.fn(),
    isReduceMotionEnabled: jest.fn(),
    isReduceTransparencyEnabled: jest.fn(),
    isScreenReaderEnabled: jest.fn(),
    removeEventListener: jest.fn(),
    setAccessibilityFocus: jest.fn()
  },
  AlertManager: {
    alertWithArgs: jest.fn()
  },
  AppState: {
    addEventListener: jest.fn(),
    removeEventListener: jest.fn()
  },
  AsyncLocalStorage: {
    multiGet: jest.fn(function (keys, callback) {
      return process.nextTick(function () {
        return callback(null, []);
      });
    }),
    multiSet: jest.fn(function (entries, callback) {
      return process.nextTick(function () {
        return callback(null);
      });
    }),
    multiRemove: jest.fn(function (keys, callback) {
      return process.nextTick(function () {
        return callback(null);
      });
    }),
    multiMerge: jest.fn(function (entries, callback) {
      return process.nextTick(function () {
        return callback(null);
      });
    }),
    clear: jest.fn(function (callback) {
      return process.nextTick(function () {
        return callback(null);
      });
    }),
    getAllKeys: jest.fn(function (callback) {
      return process.nextTick(function () {
        return callback(null, []);
      });
    })
  },
  BuildInfo: {
    appVersion: '0',
    buildVersion: '0',
    getConstants: function getConstants() {
      return {
        appVersion: '0',
        buildVersion: '0'
      };
    }
  },
  Clipboard: {
    setString: jest.fn()
  },
  DataManager: {
    queryData: jest.fn()
  },
  DeviceInfo: {
    Dimensions: {
      window: {
        fontScale: 2,
        height: 1334,
        scale: 2,
        width: 750
      },
      screen: {
        fontScale: 2,
        height: 1334,
        scale: 2,
        width: 750
      }
    }
  },
  FacebookSDK: {
    login: jest.fn(),
    logout: jest.fn(),
    queryGraphPath: jest.fn(function (path, method, params, callback) {
      return callback();
    })
  },
  GraphPhotoUpload: {
    upload: jest.fn()
  },
  I18n: {
    translationsDictionary: JSON.stringify({
      'Good bye, {name}!|Bye message': "\xA1Adi\xF3s {name}!"
    })
  },
  ImageLoader: {
    getSize: jest.fn(function (url) {
      return Promise.resolve({
        width: 320,
        height: 240
      });
    }),
    prefetchImage: jest.fn()
  },
  ImageViewManager: {
    getSize: jest.fn(function (uri, success) {
      return process.nextTick(function () {
        return success(320, 240);
      });
    }),
    prefetchImage: jest.fn()
  },
  KeyboardObserver: {
    addListener: jest.fn(),
    removeListeners: jest.fn()
  },
  Linking: {
    openURL: jest.fn(),
    canOpenURL: jest.fn(function () {
      return Promise.resolve(true);
    }),
    openSettings: jest.fn(),
    addEventListener: jest.fn(),
    getInitialURL: jest.fn(function () {
      return Promise.resolve();
    }),
    removeEventListener: jest.fn(),
    sendIntent: jest.fn()
  },
  LocationObserver: {
    addListener: jest.fn(),
    getCurrentPosition: jest.fn(),
    removeListeners: jest.fn(),
    requestAuthorization: jest.fn(),
    setConfiguration: jest.fn(),
    startObserving: jest.fn(),
    stopObserving: jest.fn()
  },
  ModalFullscreenViewManager: {},
  NetInfo: {
    fetch: jest.fn(function () {
      return Promise.resolve();
    }),
    getConnectionInfo: jest.fn(function () {
      return Promise.resolve();
    }),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    isConnected: {
      fetch: jest.fn(function () {
        return Promise.resolve();
      }),
      addEventListener: jest.fn(),
      removeEventListener: jest.fn()
    },
    isConnectionExpensive: jest.fn(function () {
      return Promise.resolve();
    })
  },
  Networking: {
    sendRequest: jest.fn(),
    abortRequest: jest.fn(),
    addListener: jest.fn(),
    removeListeners: jest.fn()
  },
  PushNotificationManager: {
    presentLocalNotification: jest.fn(),
    scheduleLocalNotification: jest.fn(),
    cancelAllLocalNotifications: jest.fn(),
    removeAllDeliveredNotifications: jest.fn(),
    getDeliveredNotifications: jest.fn(function (callback) {
      return process.nextTick(function () {
        return [];
      });
    }),
    removeDeliveredNotifications: jest.fn(),
    setApplicationIconBadgeNumber: jest.fn(),
    getApplicationIconBadgeNumber: jest.fn(function (callback) {
      return process.nextTick(function () {
        return callback(0);
      });
    }),
    cancelLocalNotifications: jest.fn(),
    getScheduledLocalNotifications: jest.fn(function (callback) {
      return process.nextTick(function () {
        return callback();
      });
    }),
    requestPermissions: jest.fn(function () {
      return Promise.resolve({
        alert: true,
        badge: true,
        sound: true
      });
    }),
    abandonPermissions: jest.fn(),
    checkPermissions: jest.fn(function (callback) {
      return process.nextTick(function () {
        return callback({
          alert: true,
          badge: true,
          sound: true
        });
      });
    }),
    getInitialNotification: jest.fn(function () {
      return Promise.resolve(null);
    }),
    addListener: jest.fn(),
    removeListeners: jest.fn()
  },
  SourceCode: {
    scriptURL: null
  },
  StatusBarManager: {
    HEIGHT: 42,
    setColor: jest.fn(),
    setStyle: jest.fn(),
    setHidden: jest.fn(),
    setNetworkActivityIndicatorVisible: jest.fn(),
    setBackgroundColor: jest.fn(),
    setTranslucent: jest.fn()
  },
  Timing: {
    createTimer: jest.fn(),
    deleteTimer: jest.fn()
  },
  UIManager: {
    AndroidViewPager: {
      Commands: {
        setPage: jest.fn(),
        setPageWithoutAnimation: jest.fn()
      }
    },
    blur: jest.fn(),
    createView: jest.fn(),
    dispatchViewManagerCommand: jest.fn(),
    focus: jest.fn(),
    getViewManagerConfig: jest.fn(function (name) {
      if (name === 'AndroidDrawerLayout') {
        return {
          Constants: {
            DrawerPosition: {
              Left: 10
            }
          }
        };
      }
    }),
    setChildren: jest.fn(),
    manageChildren: jest.fn(),
    updateView: jest.fn(),
    removeSubviewsFromContainerWithID: jest.fn(),
    replaceExistingNonRootView: jest.fn(),
    customBubblingEventTypes: {},
    customDirectEventTypes: {},
    AndroidTextInput: {
      Commands: {}
    },
    ModalFullscreenView: {
      Constants: {}
    },
    ScrollView: {
      Constants: {}
    },
    View: {
      Constants: {}
    }
  },
  BlobModule: {
    BLOB_URI_SCHEME: 'content',
    BLOB_URI_HOST: null,
    addNetworkingHandler: jest.fn(),
    enableBlobSupport: jest.fn(),
    disableBlobSupport: jest.fn(),
    createFromParts: jest.fn(),
    sendBlob: jest.fn(),
    release: jest.fn()
  },
  WebSocketModule: {
    connect: jest.fn(),
    send: jest.fn(),
    sendBinary: jest.fn(),
    ping: jest.fn(),
    close: jest.fn(),
    addListener: jest.fn(),
    removeListeners: jest.fn()
  }
};
Object.keys(mockNativeModules).forEach(function (module) {
  try {
    jest.doMock(module, function () {
      return mockNativeModules[module];
    });
  } catch (e) {
    jest.doMock(module, function () {
      return mockNativeModules[module];
    }, {
      virtual: true
    });
  }
});
jest.doMock('../Libraries/BatchedBridge/NativeModules', function () {
  return mockNativeModules;
});
jest.doMock('../Libraries/ReactNative/requireNativeComponent', function () {
  var React = require('react');

  return function (viewName) {
    return function (_React$Component) {
      (0, _inherits2.default)(_class, _React$Component);

      function _class() {
        (0, _classCallCheck2.default)(this, _class);
        return (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(_class).apply(this, arguments));
      }

      (0, _createClass2.default)(_class, [{
        key: "render",
        value: function render() {
          return React.createElement(viewName, this.props, this.props.children);
        }
      }]);
      return _class;
    }(React.Component);
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNldHVwLmpzIl0sIm5hbWVzIjpbImplc3QiLCJtb2NrIiwibW9ja0NvbXBvbmVudCIsIk1vY2tOYXRpdmVNZXRob2RzIiwicmVxdWlyZUFjdHVhbCIsIkFuaW1hdGVkSW1wbGVtZW50YXRpb24iLCJvbGRDcmVhdGUiLCJjcmVhdGVBbmltYXRlZENvbXBvbmVudCIsIkNvbXBvbmVudCIsImRlZmF1bHRQcm9wcyIsIldyYXBwZWQiLCJfX3NraXBTZXROYXRpdmVQcm9wc19GT1JfVEVTVFNfT05MWSIsIlJlYWN0TmF0aXZlIiwiTmF0aXZlTWV0aG9kc01peGluIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJOYXRpdmVDb21wb25lbnQiLCJwcm90b3R5cGUiLCJnbG9iYWwiLCJfX0RFVl9fIiwiUHJvbWlzZSIsInJlZ2VuZXJhdG9yUnVudGltZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbGxiYWNrIiwic2V0VGltZW91dCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwiaWQiLCJjbGVhclRpbWVvdXQiLCJzZXRNb2NrIiwicmVxdWlyZSIsIm1vY2tOYXRpdmVNb2R1bGVzIiwiQWNjZXNzaWJpbGl0eUluZm8iLCJhZGRFdmVudExpc3RlbmVyIiwiZm4iLCJhbm5vdW5jZUZvckFjY2Vzc2liaWxpdHkiLCJmZXRjaCIsImlzQm9sZFRleHRFbmFibGVkIiwiaXNHcmF5c2NhbGVFbmFibGVkIiwiaXNJbnZlcnRDb2xvcnNFbmFibGVkIiwiaXNSZWR1Y2VNb3Rpb25FbmFibGVkIiwiaXNSZWR1Y2VUcmFuc3BhcmVuY3lFbmFibGVkIiwiaXNTY3JlZW5SZWFkZXJFbmFibGVkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNldEFjY2Vzc2liaWxpdHlGb2N1cyIsIkFsZXJ0TWFuYWdlciIsImFsZXJ0V2l0aEFyZ3MiLCJBcHBTdGF0ZSIsIkFzeW5jTG9jYWxTdG9yYWdlIiwibXVsdGlHZXQiLCJrZXlzIiwicHJvY2VzcyIsIm5leHRUaWNrIiwibXVsdGlTZXQiLCJlbnRyaWVzIiwibXVsdGlSZW1vdmUiLCJtdWx0aU1lcmdlIiwiY2xlYXIiLCJnZXRBbGxLZXlzIiwiQnVpbGRJbmZvIiwiYXBwVmVyc2lvbiIsImJ1aWxkVmVyc2lvbiIsImdldENvbnN0YW50cyIsIkNsaXBib2FyZCIsInNldFN0cmluZyIsIkRhdGFNYW5hZ2VyIiwicXVlcnlEYXRhIiwiRGV2aWNlSW5mbyIsIkRpbWVuc2lvbnMiLCJ3aW5kb3ciLCJmb250U2NhbGUiLCJoZWlnaHQiLCJzY2FsZSIsIndpZHRoIiwic2NyZWVuIiwiRmFjZWJvb2tTREsiLCJsb2dpbiIsImxvZ291dCIsInF1ZXJ5R3JhcGhQYXRoIiwicGF0aCIsIm1ldGhvZCIsInBhcmFtcyIsIkdyYXBoUGhvdG9VcGxvYWQiLCJ1cGxvYWQiLCJJMThuIiwidHJhbnNsYXRpb25zRGljdGlvbmFyeSIsIkpTT04iLCJzdHJpbmdpZnkiLCJJbWFnZUxvYWRlciIsImdldFNpemUiLCJ1cmwiLCJyZXNvbHZlIiwicHJlZmV0Y2hJbWFnZSIsIkltYWdlVmlld01hbmFnZXIiLCJ1cmkiLCJzdWNjZXNzIiwiS2V5Ym9hcmRPYnNlcnZlciIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXJzIiwiTGlua2luZyIsIm9wZW5VUkwiLCJjYW5PcGVuVVJMIiwib3BlblNldHRpbmdzIiwiZ2V0SW5pdGlhbFVSTCIsInNlbmRJbnRlbnQiLCJMb2NhdGlvbk9ic2VydmVyIiwiZ2V0Q3VycmVudFBvc2l0aW9uIiwicmVxdWVzdEF1dGhvcml6YXRpb24iLCJzZXRDb25maWd1cmF0aW9uIiwic3RhcnRPYnNlcnZpbmciLCJzdG9wT2JzZXJ2aW5nIiwiTW9kYWxGdWxsc2NyZWVuVmlld01hbmFnZXIiLCJOZXRJbmZvIiwiZ2V0Q29ubmVjdGlvbkluZm8iLCJpc0Nvbm5lY3RlZCIsImlzQ29ubmVjdGlvbkV4cGVuc2l2ZSIsIk5ldHdvcmtpbmciLCJzZW5kUmVxdWVzdCIsImFib3J0UmVxdWVzdCIsIlB1c2hOb3RpZmljYXRpb25NYW5hZ2VyIiwicHJlc2VudExvY2FsTm90aWZpY2F0aW9uIiwic2NoZWR1bGVMb2NhbE5vdGlmaWNhdGlvbiIsImNhbmNlbEFsbExvY2FsTm90aWZpY2F0aW9ucyIsInJlbW92ZUFsbERlbGl2ZXJlZE5vdGlmaWNhdGlvbnMiLCJnZXREZWxpdmVyZWROb3RpZmljYXRpb25zIiwicmVtb3ZlRGVsaXZlcmVkTm90aWZpY2F0aW9ucyIsInNldEFwcGxpY2F0aW9uSWNvbkJhZGdlTnVtYmVyIiwiZ2V0QXBwbGljYXRpb25JY29uQmFkZ2VOdW1iZXIiLCJjYW5jZWxMb2NhbE5vdGlmaWNhdGlvbnMiLCJnZXRTY2hlZHVsZWRMb2NhbE5vdGlmaWNhdGlvbnMiLCJyZXF1ZXN0UGVybWlzc2lvbnMiLCJhbGVydCIsImJhZGdlIiwic291bmQiLCJhYmFuZG9uUGVybWlzc2lvbnMiLCJjaGVja1Blcm1pc3Npb25zIiwiZ2V0SW5pdGlhbE5vdGlmaWNhdGlvbiIsIlNvdXJjZUNvZGUiLCJzY3JpcHRVUkwiLCJTdGF0dXNCYXJNYW5hZ2VyIiwiSEVJR0hUIiwic2V0Q29sb3IiLCJzZXRTdHlsZSIsInNldEhpZGRlbiIsInNldE5ldHdvcmtBY3Rpdml0eUluZGljYXRvclZpc2libGUiLCJzZXRCYWNrZ3JvdW5kQ29sb3IiLCJzZXRUcmFuc2x1Y2VudCIsIlRpbWluZyIsImNyZWF0ZVRpbWVyIiwiZGVsZXRlVGltZXIiLCJVSU1hbmFnZXIiLCJBbmRyb2lkVmlld1BhZ2VyIiwiQ29tbWFuZHMiLCJzZXRQYWdlIiwic2V0UGFnZVdpdGhvdXRBbmltYXRpb24iLCJibHVyIiwiY3JlYXRlVmlldyIsImRpc3BhdGNoVmlld01hbmFnZXJDb21tYW5kIiwiZm9jdXMiLCJnZXRWaWV3TWFuYWdlckNvbmZpZyIsIm5hbWUiLCJDb25zdGFudHMiLCJEcmF3ZXJQb3NpdGlvbiIsIkxlZnQiLCJzZXRDaGlsZHJlbiIsIm1hbmFnZUNoaWxkcmVuIiwidXBkYXRlVmlldyIsInJlbW92ZVN1YnZpZXdzRnJvbUNvbnRhaW5lcldpdGhJRCIsInJlcGxhY2VFeGlzdGluZ05vblJvb3RWaWV3IiwiY3VzdG9tQnViYmxpbmdFdmVudFR5cGVzIiwiY3VzdG9tRGlyZWN0RXZlbnRUeXBlcyIsIkFuZHJvaWRUZXh0SW5wdXQiLCJNb2RhbEZ1bGxzY3JlZW5WaWV3IiwiU2Nyb2xsVmlldyIsIlZpZXciLCJCbG9iTW9kdWxlIiwiQkxPQl9VUklfU0NIRU1FIiwiQkxPQl9VUklfSE9TVCIsImFkZE5ldHdvcmtpbmdIYW5kbGVyIiwiZW5hYmxlQmxvYlN1cHBvcnQiLCJkaXNhYmxlQmxvYlN1cHBvcnQiLCJjcmVhdGVGcm9tUGFydHMiLCJzZW5kQmxvYiIsInJlbGVhc2UiLCJXZWJTb2NrZXRNb2R1bGUiLCJjb25uZWN0Iiwic2VuZCIsInNlbmRCaW5hcnkiLCJwaW5nIiwiY2xvc2UiLCJPYmplY3QiLCJmb3JFYWNoIiwibW9kdWxlIiwiZG9Nb2NrIiwiZSIsInZpcnR1YWwiLCJSZWFjdCIsInZpZXdOYW1lIiwiY3JlYXRlRWxlbWVudCIsInByb3BzIiwiY2hpbGRyZW4iXSwibWFwcGluZ3MiOiJBQVNBOztBQW9CQUEsSUFBSSxDQUFDQyxJQUFMLENBQVUsMENBQVY7QUFRQUQsSUFBSSxDQUNEQyxJQURILENBQ1Esa0NBRFIsRUFDNEMsWUFBTSxDQUFFLENBRHBELEVBRUdBLElBRkgsQ0FFUSwwQkFGUixFQUVvQztBQUFBLFNBQ2hDQyxhQUFhLENBQUMsMEJBQUQsQ0FEbUI7QUFBQSxDQUZwQyxFQUtHRCxJQUxILENBS1Esd0JBTFIsRUFLa0M7QUFBQSxTQUM5QkMsYUFBYSxDQUFDLHdCQUFELEVBQTJCQyxpQkFBM0IsQ0FEaUI7QUFBQSxDQUxsQyxFQVFHRixJQVJILENBUVEsNkNBUlIsRUFRdUQ7QUFBQSxTQUNuREMsYUFBYSxDQUFDLDZDQUFELENBRHNDO0FBQUEsQ0FSdkQsRUFXR0QsSUFYSCxDQVdRLDBCQVhSLEVBV29DO0FBQUEsU0FDaENDLGFBQWEsQ0FBQywwQkFBRCxDQURtQjtBQUFBLENBWHBDLEVBY0dELElBZEgs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dCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IE1vY2tOYXRpdmVNZXRob2RzID0gamVzdC5yZXF1aXJlQWN0dWFsKCcuL01vY2tOYXRpdmVNZXRob2RzJyk7XG5jb25zdCBtb2NrQ29tcG9uZW50ID0gamVzdC5yZXF1aXJlQWN0dWFsKCcuL21vY2tDb21wb25lbnQnKTtcblxuamVzdC5yZXF1aXJlQWN0dWFsKCcuLi9MaWJyYXJpZXMvcG9seWZpbGxzL09iamVjdC5lczcuanMnKTtcbmplc3QucmVxdWlyZUFjdHVhbCgnLi4vTGlicmFyaWVzL3BvbHlmaWxscy9lcnJvci1ndWFyZCcpO1xuXG5nbG9iYWwuX19ERVZfXyA9IHRydWU7XG5cbmdsb2JhbC5Qcm9taXNlID0gamVzdC5yZXF1aXJlQWN0dWFsKCdwcm9taXNlJyk7XG5nbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lID0gamVzdC5yZXF1aXJlQWN0dWFsKCdyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUnKTtcblxuZ2xvYmFsLnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gIHJldHVybiBzZXRUaW1lb3V0KGNhbGxiYWNrLCAwKTtcbn07XG5nbG9iYWwuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbihpZCkge1xuICBjbGVhclRpbWVvdXQoaWQpO1xufTtcblxuamVzdC5tb2NrKCcuLi9MaWJyYXJpZXMvQ29yZS9EZXZ0b29scy9zZXR1cERldnRvb2xzJyk7XG5cbi8vIHRoZXJlJ3MgYSBfX21vY2tfXyBmb3IgaXQuXG5qZXN0LnNldE1vY2soXG4gICcuLi9MaWJyYXJpZXMvdmVuZG9yL2NvcmUvRXJyb3JVdGlscycsXG4gIHJlcXVpcmUoJy4uL0xpYnJhcmllcy92ZW5kb3IvY29yZS9FcnJvclV0aWxzJyksXG4pO1xuXG5qZXN0XG4gIC5tb2NrKCcuLi9MaWJyYXJpZXMvQ29yZS9Jbml0aWFsaXplQ29yZScsICgpID0+IHt9KVxuICAubW9jaygnLi4vTGlicmFyaWVzL0ltYWdlL0ltYWdlJywgKCkgPT5cbiAgICBtb2NrQ29tcG9uZW50KCcuLi9MaWJyYXJpZXMvSW1hZ2UvSW1hZ2UnKSxcbiAgKVxuICAubW9jaygnLi4vTGlicmFyaWVzL1RleHQvVGV4dCcsICgpID0+XG4gICAgbW9ja0NvbXBvbmVudCgnLi4vTGlicmFyaWVzL1RleHQvVGV4dCcsIE1vY2tOYXRpdmVNZXRob2RzKSxcbiAgKVxuICAubW9jaygnLi4vTGlicmFyaWVzL0NvbXBvbmVudHMvVGV4dElucHV0L1RleHRJbnB1dCcsICgpID0+XG4gICAgbW9ja0NvbXBvbmVudCgnLi4vTGlicmFyaWVzL0NvbXBvbmVudHMvVGV4dElucHV0L1RleHRJbnB1dCcpLFxuICApXG4gIC5tb2NrKCcuLi9MaWJyYXJpZXMvTW9kYWwvTW9kYWwnLCAoKSA9PlxuICAgIG1vY2tDb21wb25lbnQoJy4uL0xpYnJhcmllcy9Nb2RhbC9Nb2RhbCcpLFxuICApXG4gIC5tb2NrKCcuLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9WaWV3L1ZpZXcnLCAoKSA9PlxuICAgIG1vY2tDb21wb25lbnQoJy4uL0xpYnJhcmllcy9Db21wb25lbnRzL1ZpZXcvVmlldycsIE1vY2tOYXRpdmVNZXRob2RzKSxcbiAgKVxuICAubW9jaygnLi4vTGlicmFyaWVzL0NvbXBvbmVudHMvUmVmcmVzaENvbnRyb2wvUmVmcmVzaENvbnRyb2wnLCAoKSA9PlxuICAgIGplc3QucmVxdWlyZUFjdHVhbChcbiAgICAgICcuLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9SZWZyZXNoQ29udHJvbC9fX21vY2tzX18vUmVmcmVzaENvbnRyb2xNb2NrJyxcbiAgICApLFxuICApXG4gIC5tb2NrKCcuLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9TY3JvbGxWaWV3L1Njcm9sbFZpZXcnLCAoKSA9PlxuICAgIGplc3QucmVxdWlyZUFjdHVhbChcbiAgICAgICcuLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9TY3JvbGxWaWV3L19fbW9ja3NfXy9TY3JvbGxWaWV3TW9jaycsXG4gICAgKSxcbiAgKVxuICAubW9jaygnLi4vTGlicmFyaWVzL0NvbXBvbmVudHMvQWN0aXZpdHlJbmRpY2F0b3IvQWN0aXZpdHlJbmRpY2F0b3InLCAoKSA9PlxuICAgIG1vY2tDb21wb25lbnQoXG4gICAgICAnLi4vTGlicmFyaWVzL0NvbXBvbmVudHMvQWN0aXZpdHlJbmRpY2F0b3IvQWN0aXZpdHlJbmRpY2F0b3InLFxuICAgICksXG4gIClcbiAgLm1vY2soJy4uL0xpYnJhcmllcy9BbmltYXRlZC9zcmMvQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbicsICgpID0+IHtcbiAgICBjb25zdCBBbmltYXRlZEltcGxlbWVudGF0aW9uID0gamVzdC5yZXF1aXJlQWN0dWFsKFxuICAgICAgJy4uL0xpYnJhcmllcy9BbmltYXRlZC9zcmMvQW5pbWF0ZWRJbXBsZW1lbnRhdGlvbicsXG4gICAgKTtcbiAgICBjb25zdCBvbGRDcmVhdGUgPSBBbmltYXRlZEltcGxlbWVudGF0aW9uLmNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50O1xuICAgIEFuaW1hdGVkSW1wbGVtZW50YXRpb24uY3JlYXRlQW5pbWF0ZWRDb21wb25lbnQgPSBmdW5jdGlvbihcbiAgICAgIENvbXBvbmVudCxcbiAgICAgIGRlZmF1bHRQcm9wcyxcbiAgICApIHtcbiAgICAgIGNvbnN0IFdyYXBwZWQgPSBvbGRDcmVhdGUoQ29tcG9uZW50LCBkZWZhdWx0UHJvcHMpO1xuICAgICAgV3JhcHBlZC5fX3NraXBTZXROYXRpdmVQcm9wc19GT1JfVEVTVFNfT05MWSA9IHRydWU7XG4gICAgICByZXR1cm4gV3JhcHBlZDtcbiAgICB9O1xuICAgIHJldHVybiBBbmltYXRlZEltcGxlbWVudGF0aW9uO1xuICB9KVxuICAubW9jaygnLi4vTGlicmFyaWVzL1JlbmRlcmVyL3NoaW1zL1JlYWN0TmF0aXZlJywgKCkgPT4ge1xuICAgIGNvbnN0IFJlYWN0TmF0aXZlID0gamVzdC5yZXF1aXJlQWN0dWFsKFxuICAgICAgJy4uL0xpYnJhcmllcy9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZScsXG4gICAgKTtcbiAgICBjb25zdCBOYXRpdmVNZXRob2RzTWl4aW4gPVxuICAgICAgUmVhY3ROYXRpdmUuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRURcbiAgICAgICAgLk5hdGl2ZU1ldGhvZHNNaXhpbjtcblxuICAgIE9iamVjdC5hc3NpZ24oTmF0aXZlTWV0aG9kc01peGluLCBNb2NrTmF0aXZlTWV0aG9kcyk7XG4gICAgT2JqZWN0LmFzc2lnbihSZWFjdE5hdGl2ZS5OYXRpdmVDb21wb25lbnQucHJvdG90eXBlLCBNb2NrTmF0aXZlTWV0aG9kcyk7XG5cbiAgICByZXR1cm4gUmVhY3ROYXRpdmU7XG4gIH0pXG4gIC5tb2NrKCcuLi9MaWJyYXJpZXMvQ29tcG9uZW50cy9Ub3VjaGFibGUvZW5zdXJlQ29tcG9uZW50SXNOYXRpdmUnLCAoKSA9PiAoKSA9PlxuICAgIHRydWUsXG4gICk7XG5cbmNvbnN0IG1vY2tOYXRpdmVNb2R1bGVzID0ge1xuICBBY2Nlc3NpYmlsaXR5SW5mbzoge1xuICAgIGFkZEV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICBhbm5vdW5jZUZvckFjY2Vzc2liaWxpdHk6IGplc3QuZm4oKSxcbiAgICBmZXRjaDogamVzdC5mbigpLFxuICAgIGlzQm9sZFRleHRFbmFibGVkOiBqZXN0LmZuKCksXG4gICAgaXNHcmF5c2NhbGVFbmFibGVkOiBqZXN0LmZuKCksXG4gICAgaXNJbnZlcnRDb2xvcnNFbmFibGVkOiBqZXN0LmZuKCksXG4gICAgaXNSZWR1Y2VNb3Rpb25FbmFibGVkOiBqZXN0LmZuKCksXG4gICAgaXNSZWR1Y2VUcmFuc3BhcmVuY3lFbmFibGVkOiBqZXN0LmZuKCksXG4gICAgaXNTY3JlZW5SZWFkZXJFbmFibGVkOiBqZXN0LmZuKCksXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgIHNldEFjY2Vzc2liaWxpdHlGb2N1czogamVzdC5mbigpLFxuICB9LFxuICBBbGVydE1hbmFnZXI6IHtcbiAgICBhbGVydFdpdGhBcmdzOiBqZXN0LmZuKCksXG4gIH0sXG4gIEFwcFN0YXRlOiB7XG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgfSxcbiAgQXN5bmNMb2NhbFN0b3JhZ2U6IHtcbiAgICBtdWx0aUdldDogamVzdC5mbigoa2V5cywgY2FsbGJhY2spID0+XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKCgpID0+IGNhbGxiYWNrKG51bGwsIFtdKSksXG4gICAgKSxcbiAgICBtdWx0aVNldDogamVzdC5mbigoZW50cmllcywgY2FsbGJhY2spID0+XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKCgpID0+IGNhbGxiYWNrKG51bGwpKSxcbiAgICApLFxuICAgIG11bHRpUmVtb3ZlOiBqZXN0LmZuKChrZXlzLCBjYWxsYmFjaykgPT5cbiAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT4gY2FsbGJhY2sobnVsbCkpLFxuICAgICksXG4gICAgbXVsdGlNZXJnZTogamVzdC5mbigoZW50cmllcywgY2FsbGJhY2spID0+XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKCgpID0+IGNhbGxiYWNrKG51bGwpKSxcbiAgICApLFxuICAgIGNsZWFyOiBqZXN0LmZuKGNhbGxiYWNrID0+IHByb2Nlc3MubmV4dFRpY2soKCkgPT4gY2FsbGJhY2sobnVsbCkpKSxcbiAgICBnZXRBbGxLZXlzOiBqZXN0LmZuKGNhbGxiYWNrID0+IHByb2Nlc3MubmV4dFRpY2soKCkgPT4gY2FsbGJhY2sobnVsbCwgW10pKSksXG4gIH0sXG4gIEJ1aWxkSW5mbzoge1xuICAgIGFwcFZlcnNpb246ICcwJyxcbiAgICBidWlsZFZlcnNpb246ICcwJyxcbiAgICBnZXRDb25zdGFudHMoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBhcHBWZXJzaW9uOiAnMCcsXG4gICAgICAgIGJ1aWxkVmVyc2lvbjogJzAnLFxuICAgICAgfTtcbiAgICB9LFxuICB9LFxuICBDbGlwYm9hcmQ6IHtcbiAgICBzZXRTdHJpbmc6IGplc3QuZm4oKSxcbiAgfSxcbiAgRGF0YU1hbmFnZXI6IHtcbiAgICBxdWVyeURhdGE6IGplc3QuZm4oKSxcbiAgfSxcbiAgRGV2aWNlSW5mbzoge1xuICAgIERpbWVuc2lvbnM6IHtcbiAgICAgIHdpbmRvdzoge1xuICAgICAgICBmb250U2NhbGU6IDIsXG4gICAgICAgIGhlaWdodDogMTMzNCxcbiAgICAgICAgc2NhbGU6IDIsXG4gICAgICAgIHdpZHRoOiA3NTAsXG4gICAgICB9LFxuICAgICAgc2NyZWVuOiB7XG4gICAgICAgIGZvbnRTY2FsZTogMixcbiAgICAgICAgaGVpZ2h0OiAxMzM0LFxuICAgICAgICBzY2FsZTogMixcbiAgICAgICAgd2lkdGg6IDc1MCxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSxcbiAgRmFjZWJvb2tTREs6IHtcbiAgICBsb2dpbjogamVzdC5mbigpLFxuICAgIGxvZ291dDogamVzdC5mbigpLFxuICAgIHF1ZXJ5R3JhcGhQYXRoOiBqZXN0LmZuKChwYXRoLCBtZXRob2QsIHBhcmFtcywgY2FsbGJhY2spID0+IGNhbGxiYWNrKCkpLFxuICB9LFxuICBHcmFwaFBob3RvVXBsb2FkOiB7XG4gICAgdXBsb2FkOiBqZXN0LmZuKCksXG4gIH0sXG4gIEkxOG46IHtcbiAgICB0cmFuc2xhdGlvbnNEaWN0aW9uYXJ5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAnR29vZCBieWUsIHtuYW1lfSF8QnllIG1lc3NhZ2UnOiAnXFx1ezAwQTF9QWRpXFx1ezAwRjN9cyB7bmFtZX0hJyxcbiAgICB9KSxcbiAgfSxcbiAgSW1hZ2VMb2FkZXI6IHtcbiAgICBnZXRTaXplOiBqZXN0LmZuKHVybCA9PiBQcm9taXNlLnJlc29sdmUoe3dpZHRoOiAzMjAsIGhlaWdodDogMjQwfSkpLFxuICAgIHByZWZldGNoSW1hZ2U6IGplc3QuZm4oKSxcbiAgfSxcbiAgSW1hZ2VWaWV3TWFuYWdlcjoge1xuICAgIGdldFNpemU6IGplc3QuZm4oKHVyaSwgc3VjY2VzcykgPT5cbiAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT4gc3VjY2VzcygzMjAsIDI0MCkpLFxuICAgICksXG4gICAgcHJlZmV0Y2hJbWFnZTogamVzdC5mbigpLFxuICB9LFxuICBLZXlib2FyZE9ic2VydmVyOiB7XG4gICAgYWRkTGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICByZW1vdmVMaXN0ZW5lcnM6IGplc3QuZm4oKSxcbiAgfSxcbiAgTGlua2luZzoge1xuICAgIG9wZW5VUkw6IGplc3QuZm4oKSxcbiAgICBjYW5PcGVuVVJMOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSh0cnVlKSksXG4gICAgb3BlblNldHRpbmdzOiBqZXN0LmZuKCksXG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgIGdldEluaXRpYWxVUkw6IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkpLFxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICBzZW5kSW50ZW50OiBqZXN0LmZuKCksXG4gIH0sXG4gIExvY2F0aW9uT2JzZXJ2ZXI6IHtcbiAgICBhZGRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgIGdldEN1cnJlbnRQb3NpdGlvbjogamVzdC5mbigpLFxuICAgIHJlbW92ZUxpc3RlbmVyczogamVzdC5mbigpLFxuICAgIHJlcXVlc3RBdXRob3JpemF0aW9uOiBqZXN0LmZuKCksXG4gICAgc2V0Q29uZmlndXJhdGlvbjogamVzdC5mbigpLFxuICAgIHN0YXJ0T2JzZXJ2aW5nOiBqZXN0LmZuKCksXG4gICAgc3RvcE9ic2VydmluZzogamVzdC5mbigpLFxuICB9LFxuICBNb2RhbEZ1bGxzY3JlZW5WaWV3TWFuYWdlcjoge30sXG4gIE5ldEluZm86IHtcbiAgICBmZXRjaDogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoKSksXG4gICAgZ2V0Q29ubmVjdGlvbkluZm86IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkpLFxuICAgIGFkZEV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICByZW1vdmVFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgaXNDb25uZWN0ZWQ6IHtcbiAgICAgIGZldGNoOiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSgpKSxcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICB9LFxuICAgIGlzQ29ubmVjdGlvbkV4cGVuc2l2ZTogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoKSksXG4gIH0sXG4gIE5ldHdvcmtpbmc6IHtcbiAgICBzZW5kUmVxdWVzdDogamVzdC5mbigpLFxuICAgIGFib3J0UmVxdWVzdDogamVzdC5mbigpLFxuICAgIGFkZExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgcmVtb3ZlTGlzdGVuZXJzOiBqZXN0LmZuKCksXG4gIH0sXG4gIFB1c2hOb3RpZmljYXRpb25NYW5hZ2VyOiB7XG4gICAgcHJlc2VudExvY2FsTm90aWZpY2F0aW9uOiBqZXN0LmZuKCksXG4gICAgc2NoZWR1bGVMb2NhbE5vdGlmaWNhdGlvbjogamVzdC5mbigpLFxuICAgIGNhbmNlbEFsbExvY2FsTm90aWZpY2F0aW9uczogamVzdC5mbigpLFxuICAgIHJlbW92ZUFsbERlbGl2ZXJlZE5vdGlmaWNhdGlvbnM6IGplc3QuZm4oKSxcbiAgICBnZXREZWxpdmVyZWROb3RpZmljYXRpb25zOiBqZXN0LmZuKGNhbGxiYWNrID0+IHByb2Nlc3MubmV4dFRpY2soKCkgPT4gW10pKSxcbiAgICByZW1vdmVEZWxpdmVyZWROb3RpZmljYXRpb25zOiBqZXN0LmZuKCksXG4gICAgc2V0QXBwbGljYXRpb25JY29uQmFkZ2VOdW1iZXI6IGplc3QuZm4oKSxcbiAgICBnZXRBcHBsaWNhdGlvbkljb25CYWRnZU51bWJlcjogamVzdC5mbihjYWxsYmFjayA9PlxuICAgICAgcHJvY2Vzcy5uZXh0VGljaygoKSA9PiBjYWxsYmFjaygwKSksXG4gICAgKSxcbiAgICBjYW5jZWxMb2NhbE5vdGlmaWNhdGlvbnM6IGplc3QuZm4oKSxcbiAgICBnZXRTY2hlZHVsZWRMb2NhbE5vdGlmaWNhdGlvbnM6IGplc3QuZm4oY2FsbGJhY2sgPT5cbiAgICAgIHByb2Nlc3MubmV4dFRpY2soKCkgPT4gY2FsbGJhY2soKSksXG4gICAgKSxcbiAgICByZXF1ZXN0UGVybWlzc2lvbnM6IGplc3QuZm4oKCkgPT5cbiAgICAgIFByb21pc2UucmVzb2x2ZSh7YWxlcnQ6IHRydWUsIGJhZGdlOiB0cnVlLCBzb3VuZDogdHJ1ZX0pLFxuICAgICksXG4gICAgYWJhbmRvblBlcm1pc3Npb25zOiBqZXN0LmZuKCksXG4gICAgY2hlY2tQZXJtaXNzaW9uczogamVzdC5mbihjYWxsYmFjayA9PlxuICAgICAgcHJvY2Vzcy5uZXh0VGljaygoKSA9PiBjYWxsYmFjayh7YWxlcnQ6IHRydWUsIGJhZGdlOiB0cnVlLCBzb3VuZDogdHJ1ZX0pKSxcbiAgICApLFxuICAgIGdldEluaXRpYWxOb3RpZmljYXRpb246IGplc3QuZm4oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKG51bGwpKSxcbiAgICBhZGRMaXN0ZW5lcjogamVzdC5mbigpLFxuICAgIHJlbW92ZUxpc3RlbmVyczogamVzdC5mbigpLFxuICB9LFxuICBTb3VyY2VDb2RlOiB7XG4gICAgc2NyaXB0VVJMOiBudWxsLFxuICB9LFxuICBTdGF0dXNCYXJNYW5hZ2VyOiB7XG4gICAgSEVJR0hUOiA0MixcbiAgICBzZXRDb2xvcjogamVzdC5mbigpLFxuICAgIHNldFN0eWxlOiBqZXN0LmZuKCksXG4gICAgc2V0SGlkZGVuOiBqZXN0LmZuKCksXG4gICAgc2V0TmV0d29ya0FjdGl2aXR5SW5kaWNhdG9yVmlzaWJsZTogamVzdC5mbigpLFxuICAgIHNldEJhY2tncm91bmRDb2xvcjogamVzdC5mbigpLFxuICAgIHNldFRyYW5zbHVjZW50OiBqZXN0LmZuKCksXG4gIH0sXG4gIFRpbWluZzoge1xuICAgIGNyZWF0ZVRpbWVyOiBqZXN0LmZuKCksXG4gICAgZGVsZXRlVGltZXI6IGplc3QuZm4oKSxcbiAgfSxcbiAgVUlNYW5hZ2VyOiB7XG4gICAgQW5kcm9pZFZpZXdQYWdlcjoge1xuICAgICAgQ29tbWFuZHM6IHtcbiAgICAgICAgc2V0UGFnZTogamVzdC5mbigpLFxuICAgICAgICBzZXRQYWdlV2l0aG91dEFuaW1hdGlvbjogamVzdC5mbigpLFxuICAgICAgfSxcbiAgICB9LFxuICAgIGJsdXI6IGplc3QuZm4oKSxcbiAgICBjcmVhdGVWaWV3OiBqZXN0LmZuKCksXG4gICAgZGlzcGF0Y2hWaWV3TWFuYWdlckNvbW1hbmQ6IGplc3QuZm4oKSxcbiAgICBmb2N1czogamVzdC5mbigpLFxuICAgIGdldFZpZXdNYW5hZ2VyQ29uZmlnOiBqZXN0LmZuKG5hbWUgPT4ge1xuICAgICAgaWYgKG5hbWUgPT09ICdBbmRyb2lkRHJhd2VyTGF5b3V0Jykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIENvbnN0YW50czoge1xuICAgICAgICAgICAgRHJhd2VyUG9zaXRpb246IHtcbiAgICAgICAgICAgICAgTGVmdDogMTAsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSksXG4gICAgc2V0Q2hpbGRyZW46IGplc3QuZm4oKSxcbiAgICBtYW5hZ2VDaGlsZHJlbjogamVzdC5mbigpLFxuICAgIHVwZGF0ZVZpZXc6IGplc3QuZm4oKSxcbiAgICByZW1vdmVTdWJ2aWV3c0Zyb21Db250YWluZXJXaXRoSUQ6IGplc3QuZm4oKSxcbiAgICByZXBsYWNlRXhpc3RpbmdOb25Sb290VmlldzogamVzdC5mbigpLFxuICAgIGN1c3RvbUJ1YmJsaW5nRXZlbnRUeXBlczoge30sXG4gICAgY3VzdG9tRGlyZWN0RXZlbnRUeXBlczoge30sXG4gICAgQW5kcm9pZFRleHRJbnB1dDoge1xuICAgICAgQ29tbWFuZHM6IHt9LFxuICAgIH0sXG4gICAgTW9kYWxGdWxsc2NyZWVuVmlldzoge1xuICAgICAgQ29uc3RhbnRzOiB7fSxcbiAgICB9LFxuICAgIFNjcm9sbFZpZXc6IHtcbiAgICAgIENvbnN0YW50czoge30sXG4gICAgfSxcbiAgICBWaWV3OiB7XG4gICAgICBDb25zdGFudHM6IHt9LFxuICAgIH0sXG4gIH0sXG4gIEJsb2JNb2R1bGU6IHtcbiAgICBCTE9CX1VSSV9TQ0hFTUU6ICdjb250ZW50JyxcbiAgICBCTE9CX1VSSV9IT1NUOiBudWxsLFxuICAgIGFkZE5ldHdvcmtpbmdIYW5kbGVyOiBqZXN0LmZuKCksXG4gICAgZW5hYmxlQmxvYlN1cHBvcnQ6IGplc3QuZm4oKSxcbiAgICBkaXNhYmxlQmxvYlN1cHBvcnQ6IGplc3QuZm4oKSxcbiAgICBjcmVhdGVGcm9tUGFydHM6IGplc3QuZm4oKSxcbiAgICBzZW5kQmxvYjogamVzdC5mbigpLFxuICAgIHJlbGVhc2U6IGplc3QuZm4oKSxcbiAgfSxcbiAgV2ViU29ja2V0TW9kdWxlOiB7XG4gICAgY29ubmVjdDogamVzdC5mbigpLFxuICAgIHNlbmQ6IGplc3QuZm4oKSxcbiAgICBzZW5kQmluYXJ5OiBqZXN0LmZuKCksXG4gICAgcGluZzogamVzdC5mbigpLFxuICAgIGNsb3NlOiBqZXN0LmZuKCksXG4gICAgYWRkTGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICByZW1vdmVMaXN0ZW5lcnM6IGplc3QuZm4oKSxcbiAgfSxcbn07XG5cbk9iamVjdC5rZXlzKG1vY2tOYXRpdmVNb2R1bGVzKS5mb3JFYWNoKG1vZHVsZSA9PiB7XG4gIHRyeSB7XG4gICAgamVzdC5kb01vY2sobW9kdWxlLCAoKSA9PiBtb2NrTmF0aXZlTW9kdWxlc1ttb2R1bGVdKTsgLy8gbmVlZGVkIGJ5IEZhY2Vib29rU0RLLXRlc3RcbiAgfSBjYXRjaCAoZSkge1xuICAgIGplc3QuZG9Nb2NrKG1vZHVsZSwgKCkgPT4gbW9ja05hdGl2ZU1vZHVsZXNbbW9kdWxlXSwge3ZpcnR1YWw6IHRydWV9KTtcbiAgfVxufSk7XG5cbmplc3QuZG9Nb2NrKFxuICAnLi4vTGlicmFyaWVzL0JhdGNoZWRCcmlkZ2UvTmF0aXZlTW9kdWxlcycsXG4gICgpID0+IG1vY2tOYXRpdmVNb2R1bGVzLFxuKTtcblxuamVzdC5kb01vY2soJy4uL0xpYnJhcmllcy9SZWFjdE5hdGl2ZS9yZXF1aXJlTmF0aXZlQ29tcG9uZW50JywgKCkgPT4ge1xuICBjb25zdCBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbiAgcmV0dXJuIHZpZXdOYW1lID0+XG4gICAgY2xhc3MgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICAgICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCh2aWV3TmFtZSwgdGhpcy5wcm9wcywgdGhpcy5wcm9wcy5jaGlsZHJlbik7XG4gICAgICB9XG4gICAgfTtcbn0pO1xuIl19