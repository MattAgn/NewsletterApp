904f89728d28b639f3138aecfe7a3e93
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactNative = require("react-native");

var _ToastStyles = _interopRequireDefault(require("./ToastStyles"));

var noop = function noop() {
  return 0;
};

var Toast = function (_Component) {
  (0, _inherits2.default)(Toast, _Component);

  function Toast() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, Toast);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Toast)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.state = {
      animatedValue: new _reactNative.Animated.Value(0),
      timeoutId: null
    };

    _this.onPress = function () {
      _this.hideToast();

      _this.props.onPress();
    };

    return _this;
  }

  (0, _createClass2.default)(Toast, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      this.showToast();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var timeoutId = this.state.timeoutId;
      clearTimeout(timeoutId);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.id !== nextProps.id) {
        this.showToast();
      }
    }
  }, {
    key: "showToast",
    value: function showToast() {
      var _this2 = this;

      var animatedValue = new _reactNative.Animated.Value(0);
      this.setState({
        animatedValue: animatedValue
      });

      _reactNative.Animated.timing(animatedValue, {
        toValue: 1,
        duration: 350
      }).start();

      var _this$props = this.props,
          duration = _this$props.duration,
          onShow = _this$props.onShow;
      var timeoutId = setTimeout(function () {
        return _this2.hideToast();
      }, duration + 350);
      this.setState({
        timeoutId: timeoutId
      }, onShow);
    }
  }, {
    key: "hideToast",
    value: function hideToast() {
      var _this$state = this.state,
          timeoutId = _this$state.timeoutId,
          animatedValue = _this$state.animatedValue;
      clearTimeout(timeoutId);

      _reactNative.Animated.timing(animatedValue, {
        toValue: 0,
        duration: 350
      }).start();

      setTimeout(this.props.onHide, 350);
    }
  }, {
    key: "render",
    value: function render() {
      var y = this.state.animatedValue.interpolate({
        inputRange: [0, 1],
        outputRange: [-this.props.height, 0]
      });
      var styles = this.props.styles;
      var text = this.props.text;

      if (Object.prototype.toString.call(text) === '[object String]') {
        text = _react.default.createElement(_reactNative.View, {
          style: styles.container
        }, _react.default.createElement(_reactNative.Text, {
          style: styles.text
        }, text));
      }

      return _react.default.createElement(_reactNative.Animated.View, {
        style: {
          position: 'absolute',
          top: 0,
          right: 0,
          left: 0,
          zIndex: 9999,
          transform: [{
            translateY: y
          }]
        }
      }, _react.default.createElement(_reactNative.TouchableWithoutFeedback, {
        onPress: this.onPress
      }, text));
    }
  }]);
  return Toast;
}(_react.Component);

Toast.propTypes = {
  id: _propTypes.default.string.isRequired,
  text: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.node]).isRequired,
  styles: _propTypes.default.object,
  duration: _propTypes.default.number,
  height: _propTypes.default.number,
  onShow: _propTypes.default.func,
  onHide: _propTypes.default.func,
  onPress: _propTypes.default.func
};
Toast.defaultProps = {
  styles: _ToastStyles.default.info,
  duration: 3000,
  height: 100,
  onShow: noop,
  onHide: noop,
  onPress: noop
};
var _default = Toast;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,